# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
# Aris Chow <arischow@gmail.com>, 2018
# Arthur Wu <dandelionstill@gmail.com>, 2018
# b1c58ea15303be9e49500f6966759e5d, 2018
# Bai HuanCheng <xiqingongzi@gmail.com>, 2018-2019
# BAKEZQ <zhongquan789@126.com>, 2018
# belitex, 2018
# belitex, 2018
# Blg Mengde <kid.blg@gmail.com>, 2019
# 杜文昊 <i@bobdu.cc>, 2018
# Brian Wang <singeeking@gmail.com>, 2018
# charloai <charlo@charlo.xin>, 2018
# charloai <charlo@charlo.xin>, 2018
# Cy <ll_faw@hotmail.com>, 2018
# Danfi Tao <tdanfi@gmail.com>, 2018
# Danfi Tao <tdanfi@gmail.com>, 2018
# 陈李俊 <595572594@qq.com>, 2019
# flypopo <flypopo.reg@qq.com>, 2018
# fuxiuyin <woshifuxiuyin@gmail.com>, 2019
# fuxiuyin <woshifuxiuyin@gmail.com>, 2019
# Hongjie Tian <tianhongjie07@gmail.com>, 2017
# Bai HuanCheng <xiqingongzi@gmail.com>, 2019
# ausaki <www.ljm969087551@qq.com>, 2018
# JINGMING DAI <d664216@gmail.com>, 2018
# jinwen wu <toono@qq.com>, 2018
# Junkai Shao <skaifun.dev@gmail.com>, 2018
# Kai Song <songkaiape@gmail.com>, 2017
# Kevin Sze <leiarix@gmail.com>, 2014
# Kevin Sze <leiarix@gmail.com>, 2014
# Liping Wang <lynn.config@gmail.com>, 2016
# Liuwt, 2019
# marcus ma <freebird0221@gmail.com>, 2018
# paisins Ji <1355871637@qq.com>, 2018
# qiang wu <wuqiangroy@live.com>, 2018
# Ronald White <tkliuxing@me.com>, 2019
# Rui Deng <vipdengrui@vip.qq.com>, 2018
# sanker <mr.songxr@gmail.com>, 2018
# Shellbye bai <shellbye.com@gmail.com>, 2018
# shouheng lei <zz5432@qq.com>, 2018
# 思源曹 <seeran@outlook.com>, 2018
# Vincent <Intelligent.vincent@gmail.com>, 2018
# Liping Wang <lynn.config@gmail.com>, 2016
# Wang XinHe <wang__xin_he@163.com>, 2018
# WayneCher <aaazwg@msn.cn>, 2019
# zwwhdls <zwwhdls@hotmail.com>, 2018
# XingFive <haoxingwu@hotmail.com>, 2018
# XingFive <haoxingwu@hotmail.com>, 2018
# dykai <yingkaidang@gmail.com>, 2019
# yhliyr <lokidri@outlook.com>, 2018
# Zhengyang Wang <sufforest@gmail.com>, 2018
# BAKEZQ <zhongquan789@126.com>, 2018
# zwwhdls <zwwhdls@hotmail.com>, 2018
# 吴彬 <xiake21x@qq.com>, 2016
# 小明 王 <qing_chun_dou@126.com>, 2018
# 开宇 冯 <loveress01@outlook.com>, 2019
# 得鑫 李 <lidexin911@126.com>, 2018
# 思源曹 <seeran@outlook.com>, 2018
# 杜文昊 <i@bobdu.cc>, 2018
# 文隆 胡 <xcluas@gmail.com>, 2018
# 景隆 王 <Arsenal591@126.com>, 2018
# 阿西 <davidxu5945@qq.com>, 2018
# 陈李俊 <595572594@qq.com>, 2019
# b1c58ea15303be9e49500f6966759e5d, 2018
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-30 03:26-0500\n"
"PO-Revision-Date: 2019-04-30 19:44+0000\n"
"Last-Translator: Blg Mengde <kid.blg@gmail.com>\n"
"Language-Team: Chinese (China) (http://www.transifex.com/django/django-docs/language/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:3
msgid "Customizing authentication in Django"
msgstr "Django 中的自定义验证"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:5
msgid ""
"The authentication that comes with Django is good enough for most common "
"cases, but you may have needs not met by the out-of-the-box defaults. "
"Customizing authentication in your projects requires understanding what "
"points of the provided system are extensible or replaceable. This document "
"provides details about how the auth system can be customized."
msgstr "Django自带的验证机制足以应对一般情况，但是你可能不满足于默认的可立即使用的配置。在你的项目中自定义验证机制，需要了解在已有验证系统中哪些地方是可以扩展的，哪些地方是可以代替的。这个文档提供了如何自定义验证系统的一些细节。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:11
msgid ""
":ref:`Authentication backends <authentication-backends>` provide an "
"extensible system for when a username and password stored with the user "
"model need to be authenticated against a different service than Django's "
"default."
msgstr "<authentication-backends>当用户模型中存储的用户名和密码需要不同于Django默认服务的验证时，提供了一个可扩展系统。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:15
msgid ""
"You can give your models :ref:`custom permissions <custom-permissions>` that"
" can be checked through Django's authorization system."
msgstr "你可以给你的模型 :ref:`定制权限 <custom-permissions>` 并且可以被Django的授权系统通过检查。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:18
msgid ""
"You can :ref:`extend <extending-user>` the default ``User`` model, or "
":ref:`substitute <auth-custom-user>` a completely customized model."
msgstr "你可以 :ref:` 扩展 <extending-user> ` 默认的 ``User`` 模型，或者完全自定义一个模型进行 :ref:` 替换 <auth-custom-user>` "

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:24
msgid "Other authentication sources"
msgstr "其它认证资源"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:26
msgid ""
"There may be times you have the need to hook into another authentication "
"source -- that is, another source of usernames and passwords or "
"authentication methods."
msgstr "有时候你需要连接到其他认证源——一个包含用户名及密码的源或者认证方法。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:30
msgid ""
"For example, your company may already have an LDAP setup that stores a "
"username and password for every employee. It'd be a hassle for both the "
"network administrator and the users themselves if users had separate "
"accounts in LDAP and the Django-based applications."
msgstr "例如，你的公司可能已经存在一套存储所有员工用户名及密码的 LDAP 配置。如果用户在LDAP和基于Django的应用程序中都有独立账号，那对用户自己或者网络管理员都会造成麻烦。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:35
msgid ""
"So, to handle situations like this, the Django authentication system lets "
"you plug in other authentication sources. You can override Django's default "
"database-based scheme, or you can use the default system in tandem with "
"other systems."
msgstr "所以，为了处理这样的情况，Django认证系统可以让你插入其他认证源。您可以重写Django的默认基于数据库的方案，或者可以与其他系统一起使用默认系统。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:40
msgid ""
"See the :ref:`authentication backend reference <authentication-backends-"
"reference>` for information on the authentication backends included with "
"Django."
msgstr "请参阅<authentication-backends-reference>身份验证后端引用，有关Django中包含的身份验证后端的信息。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:45
msgid "Specifying authentication backends"
msgstr "指定授权后端"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:47
msgid ""
"Behind the scenes, Django maintains a list of \"authentication backends\" "
"that it checks for authentication. When somebody calls "
":func:`django.contrib.auth.authenticate()` -- as described in :ref:`How to "
"log a user in <how-to-log-a-user-in>` -- Django tries authenticating across "
"all of its authentication backends. If the first authentication method "
"fails, Django tries the second one, and so on, until all backends have been "
"attempted."
msgstr "在幕后，Django维护一个“身份验证后端”列表，用于检查身份验证。当有人调用:func:`django.contrib.auth.authenticate()` - 如下所示:ref:`如何在`用户登录<how-to-log-a-user-in>` - Django尝试所有身份验证后端进行身份验证。如果第一个验证方法失败，Django会尝试第二个验证方法，依此类推，直到所有后端都被尝试。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:54
msgid ""
"The list of authentication backends to use is specified in the "
":setting:`AUTHENTICATION_BACKENDS` setting. This should be a list of Python "
"path names that point to Python classes that know how to authenticate. These"
" classes can be anywhere on your Python path."
msgstr "在设置：`AUTHENTICATION_BACKENDS`设置中指定要使用的身份验证后端列表。这应该是一个Python路径名列表，指向知道如何进行身份验证的Python类。这些类可以在你的Python路径上的任何地方。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:59
msgid "By default, :setting:`AUTHENTICATION_BACKENDS` is set to::"
msgstr "默认， :setting:`AUTHENTICATION_BACKENDS`设定为::"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:63
msgid ""
"That's the basic authentication backend that checks the Django users "
"database and queries the built-in permissions. It does not provide "
"protection against brute force attacks via any rate limiting mechanism. You "
"may either implement your own rate limiting mechanism in a custom auth "
"backend, or use the mechanisms provided by most Web servers."
msgstr "Django 的默认后台只检查其数据库和内置权限，并不提供任何登录限制机制来防止暴力登录攻击。如果需要抵制暴力登录攻击，需要自己在后台实现登录限制机制，或者使用 Web 服务器提供的保护机制。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:69
msgid ""
"The order of :setting:`AUTHENTICATION_BACKENDS` matters, so if the same "
"username and password is valid in multiple backends, Django will stop "
"processing at the first positive match."
msgstr ":setting:`AUTHENTICATION_BACKENDS`是有序的，如果相同的用户名和密码对于多个后端都是合法的，那么 Django 会优先使用其中的第一个后端，而不会再处理后面的后端。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:73
msgid ""
"If a backend raises a :class:`~django.core.exceptions.PermissionDenied` "
"exception, authentication will immediately fail. Django won't check the "
"backends that follow."
msgstr "如果一个后端抛出 :class:`~django.core.exceptions.PermissionDenied` 异常，则验证流程立马终止，Django 不会继续检查其后的后端。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:79
msgid ""
"Once a user has authenticated, Django stores which backend was used to "
"authenticate the user in the user's session, and re-uses the same backend "
"for the duration of that session whenever access to the currently "
"authenticated user is needed. This effectively means that authentication "
"sources are cached on a per-session basis, so if you change "
":setting:`AUTHENTICATION_BACKENDS`, you'll need to clear out session data if"
" you need to force users to re-authenticate using different methods. A "
"simple way to do that is simply to execute "
"``Session.objects.all().delete()``."
msgstr "一旦用户通过验证，Django 会将之前用于验证该用户的后端保存在用户的 session 中，以便在将来（session 有效期内）需要访问当前已验证的用户时可以重用该后端。这个优化意味着在 session 中缓存了验证后端的源代码，因此，如果你修改了 :setting:`AUTHENTICATION_BACKENDS` 同时希望使用另外的方法重新验证用户，那么需要清除 session 数据。清除 session 数据的一个简单方法是执行 ``Session.objects.all().delete()``。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:89
msgid "Writing an authentication backend"
msgstr "编写一个验证后端"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:91
msgid ""
"An authentication backend is a class that implements two required methods: "
"``get_user(user_id)`` and ``authenticate(request, **credentials)``, as well "
"as a set of optional permission related :ref:`authorization methods "
"<authorization_methods>`."
msgstr "一个验证后端其实就是一个 class，它实现了两个必要的方法：``get_user(user_id)`` 和 ``authenticate(request, **credentials)``，以及其它一系列可选的权限相关的方法:ref:`authorization methods<authorization_methods> `."

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:96
msgid ""
"The ``get_user`` method takes a ``user_id`` -- which could be a username, "
"database ID or whatever, but has to be the primary key of your user object "
"-- and returns a user object or ``None``."
msgstr "\"get_user\"方法的参数是\"user_id\"，并返回一个user对象或None。参数user_id也可能是username、数据库id，或者其他值，但这个参数必须你的user对象的主键。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:100
msgid ""
"The ``authenticate`` method takes a ``request`` argument and credentials as "
"keyword arguments. Most of the time, it'll just look like this::"
msgstr "``authenticate``方法接受 ``request`` 参数和 credentials 关键字参数，大多数情况下，该方法类似于下面的代码::"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:108
msgid "But it could also authenticate a token, like so::"
msgstr "但它也可能验证一个Token，就像这样::"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:115
msgid ""
"Either way, ``authenticate()`` should check the credentials it gets and "
"return a user object that matches those credentials if the credentials are "
"valid. If they're not valid, it should return ``None``."
msgstr "无论是哪一种方式，``authenticate()``都应该检查所获得的凭证，并当凭证有效时返回一个用户对象。当凭证无效时，应该返回``None``。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:119
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` and may be ``None`` if "
"it wasn't provided to :func:`~django.contrib.auth.authenticate` (which "
"passes it on to the backend)."
msgstr "``request`` 是 :class:`~django.http.HttpRequest` ，默认为 ``None`` 如果没有被提供给 :func:`~django.contrib.auth.authenticate` (它把request传给后端)."

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:123
msgid ""
"The Django admin is tightly coupled to the Django :ref:`User object <user-"
"objects>`. The best way to deal with this is to create a Django ``User`` "
"object for each user that exists for your backend (e.g., in your LDAP "
"directory, your external SQL database, etc.) You can either write a script "
"to do this in advance, or your ``authenticate`` method can do it the first "
"time a user logs in."
msgstr "Django admin 和 Django :ref:`User object <user-objects>`. 紧密结合。最好的处理方式是为你后端的每一个用户都创建一个 Django ``User`` 。(例如, 你的 LDAP 目录、你的外部 SQL 数据库等等。) 你能写一个脚本来提前做这件事情，或者让你的 ``authenticate`` 方法在一个用户第一次登录时做这件事。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:130
msgid ""
"Here's an example backend that authenticates against a username and password"
" variable defined in your ``settings.py`` file and creates a Django ``User``"
" object the first time a user authenticates::"
msgstr "下面是一段验证后端的示例代码，它通过在 ``settings.py``文件中定义的用户名和密码变量进行身份验证，并且当用户第一次验证时，创建一个Django的``User``对象。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:173
msgid "Handling authorization in custom backends"
msgstr "在自定义的后端处理授权"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:175
msgid "Custom auth backends can provide their own permissions."
msgstr "自定义的认证后端可以提供他们自己的权限。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:177
msgid ""
"The user model will delegate permission lookup functions "
"(:meth:`~django.contrib.auth.models.User.get_group_permissions()`, "
":meth:`~django.contrib.auth.models.User.get_all_permissions()`, "
":meth:`~django.contrib.auth.models.User.has_perm()`, and "
":meth:`~django.contrib.auth.models.User.has_module_perms()`) to any "
"authentication backend that implements these functions."
msgstr "用户模型会把权限查找函数(:meth:`~django.contrib.auth.models.User.get_group_permissions()`, :meth:`~django.contrib.auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth.models.User.has_perm()`, and :meth:`~django.contrib.auth.models.User.has_module_perms()`)委托给任何实现了这些函数的验证后端。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:184
msgid ""
"The permissions given to the user will be the superset of all permissions "
"returned by all backends. That is, Django grants a permission to a user that"
" any one backend grants."
msgstr "用户所拥有的权限将是所有验证后端返回的所有权限的一个超集。也就是说，如果任何后端之一将一个权限赋予了用户，那么Django最终也将该权限赋予这个用户。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:188
msgid ""
"If a backend raises a :class:`~django.core.exceptions.PermissionDenied` "
"exception in :meth:`~django.contrib.auth.models.User.has_perm()` or "
":meth:`~django.contrib.auth.models.User.has_module_perms()`, the "
"authorization will immediately fail and Django won't check the backends that"
" follow."
msgstr "如果一个后端在:meth:`~django.contrib.auth.models.User.has_perm()` 或 :meth:`~django.contrib.auth.models.User.has_module_perms()`方法中抛出了:class:`~django.core.exceptions.PermissionDenied` 异常，则鉴权过程将立刻失败退出，并且Django将不再检查随后的后端。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:193
msgid ""
"The simple backend above could implement permissions for the magic admin "
"fairly simply::"
msgstr "上面的简单后端可以相当容易的实现管理员权限::"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:201
msgid ""
"This gives full permissions to the user granted access in the above example."
" Notice that in addition to the same arguments given to the associated "
":class:`django.contrib.auth.models.User` functions, the backend auth "
"functions all take the user object, which may be an anonymous user, as an "
"argument."
msgstr "这将给予上例中被授权访问的用户以完全权限。注意，除了与对应的类 ``django.contrib.auth.models.User`` 函数相同的参数之外，后端的auth函数还接收user对象作为一个参数，这个user对象有可能是匿名user。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:206
msgid ""
"A full authorization implementation can be found in the ``ModelBackend`` "
"class in :source:`django/contrib/auth/backends.py`, which is the default "
"backend and queries the ``auth_permission`` table most of the time. If you "
"wish to provide custom behavior for only part of the backend API, you can "
"take advantage of Python inheritance and subclass ``ModelBackend`` instead "
"of implementing the complete API in a custom backend."
msgstr "一个完整的鉴权实现能在 :source:`django/contrib/auth/backends.py` 的 ``ModelBackend`` 类里找到，这是默认的后端并且大多数时候查询 ``auth_permission`` 表。如果你希望为部分后端 API 提供自定义的行为，你可以利用 Python 继承和子类 ``ModelBackend`` 来替代自定义后端实现的完整 API 。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:216
msgid "Authorization for anonymous users"
msgstr "匿名用户的授权"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:218
msgid ""
"An anonymous user is one that is not authenticated i.e. they have provided "
"no valid authentication details. However, that does not necessarily mean "
"they are not authorized to do anything. At the most basic level, most "
"websites authorize anonymous users to browse most of the site, and many "
"allow anonymous posting of comments etc."
msgstr "匿名用户是指那些没有验证过的用户，也就是说，他们没有提供任何有效的验证信息。然而，这并不一定意味着他们就无权做任何事。在最基本的层面上，大多数站点允许匿名用户浏览大部分页面，而且很多站点也允许匿名评论。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:224
msgid ""
"Django's permission framework does not have a place to store permissions for"
" anonymous users. However, the user object passed to an authentication "
"backend may be an :class:`django.contrib.auth.models.AnonymousUser` object, "
"allowing the backend to specify custom authorization behavior for anonymous "
"users. This is especially useful for the authors of re-usable apps, who can "
"delegate all questions of authorization to the auth backend, rather than "
"needing settings, for example, to control anonymous access."
msgstr "Django的权限框架并没有存储匿名用户的权限。然而，传给验证后端的用户对象可能是一个:class:`django.contrib.auth.models.AnonymousUser`对象，使得后端可以自定义对匿名用户的验证。这对于那些编写可复用应用的作者来讲格外有用，因为他们可以将验证完全委托给验证后端，而不是通过设置。比如，当控制匿名访问的时候。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:235
msgid "Authorization for inactive users"
msgstr "未激活用户的授权"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:237
msgid ""
"An inactive user is one that has its "
":attr:`~django.contrib.auth.models.User.is_active` field set to ``False``. "
"The :class:`~django.contrib.auth.backends.ModelBackend` and "
":class:`~django.contrib.auth.backends.RemoteUserBackend` authentication "
"backends prohibits these users from authenticating. If a custom user model "
"doesn't have an :attr:`~django.contrib.auth.models.CustomUser.is_active` "
"field, all users will be allowed to authenticate."
msgstr "非活跃用户就是:attr:`~django.contrib.auth.models.User.is_active`字段设置为``False``的用户。:class:`~django.contrib.auth.backends.ModelBackend` 和:class:`~django.contrib.auth.backends.RemoteUserBackend`验证后台禁止这些用户进行验证。如果用户有:attr:`~django.contrib.auth.models.CustomUser.is_active`字段，则所有的用户都允许进行验证。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:245
msgid ""
"You can use :class:`~django.contrib.auth.backends.AllowAllUsersModelBackend`"
" or :class:`~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend` if"
" you want to allow inactive users to authenticate."
msgstr "如果你想用非活跃用户来验证，你可以使用：class: `~django.contrib.auth.backends.AllowAllUsersModelBackend` 和：class: `~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend` "

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:249
msgid ""
"The support for anonymous users in the permission system allows for a "
"scenario where anonymous users have permissions to do something while "
"inactive authenticated users do not."
msgstr "权限系统支持匿名用户有权执行某些操作，而经过已验证的不活动用户则不能这样做。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:253
msgid ""
"Do not forget to test for the ``is_active`` attribute of the user in your "
"own backend permission methods."
msgstr "在你的后端permission方法中，不要忘记测试user的``is_active``属性。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:257
msgid "Handling object permissions"
msgstr "处理对象权限"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:259
msgid ""
"Django's permission framework has a foundation for object permissions, "
"though there is no implementation for it in the core. That means that "
"checking for object permissions will always return ``False`` or an empty "
"list (depending on the check performed). An authentication backend will "
"receive the keyword parameters ``obj`` and ``user_obj`` for each object "
"related authorization method and can return the object level permission as "
"appropriate."
msgstr "Django的权限框架为对象权限提供了基础，尽管在内核中没有实现它。这意味着检查对象权限将始终返回``False``或空列表（取决于所执行的检查）。身份验证后端将为每个对象相关的授权方法接收关键字参数``obj``和``user_obj``，并可以适当地返回对象级权限。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:269
msgid "Custom permissions"
msgstr "自定义权限"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:271
msgid ""
"To create custom permissions for a given model object, use the "
"``permissions`` :ref:`model Meta attribute <meta-options>`."
msgstr "为给定的模型对象创建自定权限，使用 `permission` ， 参考： `model Meta attribute<meta-options>`"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:274
msgid ""
"This example ``Task`` model creates two custom permissions, i.e., actions "
"users can or cannot do with ``Task`` instances, specific to your "
"application::"
msgstr "这个示例中的 Task 模型创建了两个用户自定权限，即：用户能不能使用 Task 实例执行操作，这取决于你的应用要求。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:285
msgid ""
"The only thing this does is create those extra permissions when you run "
":djadmin:`manage.py migrate <migrate>` (the function that creates "
"permissions is connected to the "
":data:`~django.db.models.signals.post_migrate` signal). Your code is in "
"charge of checking the value of these permissions when a user is trying to "
"access the functionality provided by the application (changing the status of"
" tasks or closing tasks.) Continuing the above example, the following checks"
" if a user may close tasks::"
msgstr "当你运行:djadmin:`manage.py migrate <migrate>` 时，它只创建那些额外的权限。（创建权限的函数连接到:data:`~django.db.models.signals.post_migrate` 信号）。 你的代码负责在用户试图访问由应用程序提供的功能（查看任务（task），改变任务状态，关闭任务）时检查这些权限的值。继续上面的例子， 下面的语句检查是否一个用户能查看任务::"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:298
msgid "Extending the existing ``User`` model"
msgstr "扩展现有的用户（``User``）模型"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:300
msgid ""
"There are two ways to extend the default "
":class:`~django.contrib.auth.models.User` model without substituting your "
"own model. If the changes you need are purely behavioral, and don't require "
"any change to what is stored in the database, you can create a :ref:`proxy "
"model <proxy-models>` based on :class:`~django.contrib.auth.models.User`. "
"This allows for any of the features offered by proxy models including "
"default ordering, custom managers, or custom model methods."
msgstr "有两种方法可以扩展默认的User模型，而不需要用你的模型来替换它。如果你需要改变的只是行为，并且不需要改变数据库存储的内容，那么你可以建立一个基于User模型的代理模型。它允许代理模型提供很多功能，包括默认排序，自定义的管理器和自定义的模型方法等。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:308
msgid ""
"If you wish to store information related to ``User``, you can use a "
":class:`~django.db.models.OneToOneField` to a model containing the fields "
"for additional information. This one-to-one model is often called a profile "
"model, as it might store non-auth related information about a site user. For"
" example you might create an Employee model::"
msgstr "如果你想存储与User模型关联的信息，可以使用OneToOneField到包含其他信息字段的模型。这种one-to-one模型经常被称作Profile模型，因为它可能存储站点用户的非身份验证的相关信息。比如你可以建立一个Employee模型："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:320
msgid ""
"Assuming an existing Employee Fred Smith who has both a User and Employee "
"model, you can access the related information using Django's standard "
"related model conventions::"
msgstr "假设一个既有用户又有雇员模型的现有雇员Fred Smith，您可以使用Django的标准相关模型约定访问相关信息："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:327
msgid ""
"To add a profile model's fields to the user page in the admin, define an "
":class:`~django.contrib.admin.InlineModelAdmin` (for this example, we'll use"
" a :class:`~django.contrib.admin.StackedInline`) in your app's ``admin.py`` "
"and add it to a ``UserAdmin`` class which is registered with the "
":class:`~django.contrib.auth.models.User` class::"
msgstr "添加资料(Profile)模型到管理后台的用户页面，需要定义一个 :class:`~django.contrib.admin.InlineModelAdmin`  (这个例子中，我们使用 :class:`~django.contrib.admin.StackedInline`  )  到你的app里的``admin.py``中，并把它添加到 ``UserAdmin``后，向 :class:`~django.contrib.auth.models.User` 类注册:"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:354
msgid ""
"These profile models are not special in any way - they are just Django "
"models that happen to have a one-to-one link with a user model. As such, "
"they aren't auto created when a user is created, but a "
":attr:`django.db.models.signals.post_save` could be used to create or update"
" related models as appropriate."
msgstr "这些资料模型并不特殊，它们只是Django模型，用来一对一链接用户模型。因此，它们并不会在一个用户创立的时候自动生成，但可以使用 :attr:`django.db.models.signals.post_save` 来适当地创建或者更新相关模型。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:360
msgid ""
"Using related models results in additional queries or joins to retrieve the "
"related data. Depending on your needs, a custom user model that includes the"
" related fields may be your better option, however, existing relations to "
"the default user model within your project's apps may justify the extra "
"database load."
msgstr "使用相关模型会产生额外的查询或连接来检索相关数据。根据你的需求，一个自定义的用户模型包含相关联的字段可能是更好的选择，然而，与项目应用里的默认用户模型存在关联性可能会增加额外的数据库负载。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:369
msgid "Substituting a custom ``User`` model"
msgstr "取代了一个用户 ``User`` 模型。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:371
msgid ""
"Some kinds of projects may have authentication requirements for which "
"Django's built-in :class:`~django.contrib.auth.models.User` model is not "
"always appropriate. For instance, on some sites it makes more sense to use "
"an email address as your identification token instead of a username."
msgstr "Django内置的 :类:`~django.contrib.auth.models.User` 模型 可能并不适合一些项目的身份验证需求。例如，在一些网站上使用邮件地址代替用户名来作为你的标识令牌更有意义。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:376
msgid ""
"Django allows you to override the default user model by providing a value "
"for the :setting:`AUTH_USER_MODEL` setting that references a custom model::"
msgstr "Django 允许你为引用了自定模型的：setting: `AUTH_USER_MODEL` 设置一个值来重写默认的用户表。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:381
msgid ""
"This dotted pair describes the name of the Django app (which must be in your"
" :setting:`INSTALLED_APPS`), and the name of the Django model that you wish "
"to use as your user model."
msgstr "这个引号中描述的是Django应用的名称 ( 必须在你的配置`INSTALLED_APPS`里 )，和你希望当做用户模型的Django模型名称。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:386
msgid "Using a custom user model when starting a project"
msgstr "启动一个项目的时候使用一个自定的用户模型"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:388
msgid ""
"If you're starting a new project, it's highly recommended to set up a custom"
" user model, even if the default :class:`~django.contrib.auth.models.User` "
"model is sufficient for you. This model behaves identically to the default "
"user model, but you'll be able to customize it in the future if the need "
"arises::"
msgstr "如果你准备启动一个新的项目，强烈推荐你设置一个自定义的用户模型，即使默认的用户模型对你来说已经足够了。这个模型的行为与默认用户模型相通，但是你能在未来需要的时候自定义它："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:398
msgid ""
"Don't forget to point :setting:`AUTH_USER_MODEL` to it. Do this before "
"creating any migrations or running ``manage.py migrate`` for the first time."
msgstr "不要忘记将 :setting:`AUTH_USER_MODEL` 指向它。在创建任何迁移或者首次运行 ``manage.py migrate`` 之前执行这个操作。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:401
msgid "Also, register the model in the app's ``admin.py``::"
msgstr "同样的，在 app 中的 ``admin.py`` 中注册模型。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:410
msgid "Changing to a custom user model mid-project"
msgstr "在项目中更改为自定义用户模型。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:412
msgid ""
"Changing :setting:`AUTH_USER_MODEL` after you've created database tables is "
"significantly more difficult since it affects foreign keys and many-to-many "
"relationships, for example."
msgstr "在你已经建立数据库表之后再去修改 :setting:`AUTH_USER_MODEL` 要困难的多，因为它会影响外键和多对多关系。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:416
msgid ""
"This change can't be done automatically and requires manually fixing your "
"schema, moving your data from the old user table, and possibly manually "
"reapplying some migrations. See :ticket:`25313` for an outline of the steps."
msgstr "这个改动并不能自动完成，需要手动修复你的架构，将数据从旧的用户表移出，并有可能需要手动执行一些迁移操作。查看步骤概述，请查看  :ticket:`25313` 。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:420
msgid ""
"Due to limitations of Django's dynamic dependency feature for swappable "
"models, the model referenced by :setting:`AUTH_USER_MODEL` must be created "
"in the first migration of its app (usually called ``0001_initial``); "
"otherwise, you'll have dependency issues."
msgstr "由于Django针对可交换模型的动态依赖特性的限制，被 :setting:`AUTH_USER_MODEL` 引用的模型必须在第一次迁移的时候创建（通常被称作``0001_initial``）；否则，你将会遇到依赖问题。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:425
msgid ""
"In addition, you may run into a ``CircularDependencyError`` when running "
"your migrations as Django won't be able to automatically break the "
"dependency loop due to the dynamic dependency. If you see this error, you "
"should break the loop by moving the models depended on by your user model "
"into a second migration. (You can try making two normal models that have a "
"``ForeignKey`` to each other and seeing how ``makemigrations`` resolves that"
" circular dependency if you want to see how it's usually done.)"
msgstr "此外，在运行迁移时可能会遇到 ``CircularDependencyError`` ，因为Django由于动态依赖性而无法自动中断依赖循环。如果你遇到这个错误，则应通过移除依赖用户模型的其他模型，并进行二次迁移。（如果你想了解它通常是如何运行的，可以尝试建立两个相互指向彼此的外键的普通模型，并查看 ``makemigrations`` 如何解决该循环依赖关系。）"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:434
msgid "Reusable apps and ``AUTH_USER_MODEL``"
msgstr "应用复用和 ``AUTH_USER_MODEL``"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:436
msgid ""
"Reusable apps shouldn't implement a custom user model. A project may use "
"many apps, and two reusable apps that implemented a custom user model "
"couldn't be used together. If you need to store per user information in your"
" app, use a :class:`~django.db.models.ForeignKey` or "
":class:`~django.db.models.OneToOneField` to ``settings.AUTH_USER_MODEL`` as "
"described below."
msgstr "可复用的app不能实现实现一个自定义模型。一个项目可能有很多app，如果有两个可复用的app实现了自定义用户模型，他们就不能同时使用。如果你需要在你的app里保存每一个用户信息，可以像下面这样使用 :class:`~django.db.models.ForeignKey` 或者 :class:`~django.db.models.OneToOneField` 指向 ``settings.AUTH_USER_MODEL``  。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:444
msgid "Referencing the ``User`` model"
msgstr "引用 ``User`` 模型"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:448
msgid ""
"If you reference :class:`~django.contrib.auth.models.User` directly (for "
"example, by referring to it in a foreign key), your code will not work in "
"projects where the :setting:`AUTH_USER_MODEL` setting has been changed to a "
"different user model."
msgstr "当你的 :setting:`AUTH_USER_MODEL` 已经指向了另一个用户模型后，如果你直接指向 :class:`~django.contrib.auth.models.User` （例如，使用外键指向它），代码将不能起作用。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:455
msgid ""
"Instead of referring to :class:`~django.contrib.auth.models.User` directly, "
"you should reference the user model using "
"``django.contrib.auth.get_user_model()``. This method will return the "
"currently active user model -- the custom user model if one is specified, or"
" :class:`~django.contrib.auth.models.User` otherwise."
msgstr "你应该通过 ``django.contrib.auth.get_user_model()`` 来引用用户模型，而不是直接引用 :class:`~django.contrib.auth.models.User` 。这个方法将返回当前可用的用户模型——如果指定了自定义用户模型，则返回自定义的模型，否则返回 :class:`~django.contrib.auth.models.User` 。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:461
msgid ""
"When you define a foreign key or many-to-many relations to the user model, "
"you should specify the custom model using the :setting:`AUTH_USER_MODEL` "
"setting. For example::"
msgstr "当你定义一个外键或多对多关系指向用户模型时，你应该指定自定义模型使用 :setting:`AUTH_USER_MODEL` setting 。举例来说："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:474
msgid ""
"When connecting to signals sent by the user model, you should specify the "
"custom model using the :setting:`AUTH_USER_MODEL` setting. For example::"
msgstr "当连接到用户模型发送的信号时，你应该使用 :setting:`AUTH_USER_MODEL` 设置指定自定义模型，例如："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:485
msgid ""
"Generally speaking, it's easiest to refer to the user model with the "
":setting:`AUTH_USER_MODEL` setting in code that's executed at import time, "
"however, it's also possible to call ``get_user_model()`` while Django is "
"importing models, so you could use ``models.ForeignKey(get_user_model(), "
"...)``."
msgstr "一般来说，最简单的指向用户模型的方法是在导入的时候设置 :setting:`AUTH_USER_MODEL` ，但是也可以调用 ``get_user_model()`` ，因此你可以使用 ``models.ForeignKey(get_user_model(), ...)`` 。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:491
msgid ""
"If your app is tested with multiple user models, using "
"``@override_settings(AUTH_USER_MODEL=...)`` for example, and you cache the "
"result of ``get_user_model()`` in a module-level variable, you may need to "
"listen to the  :data:`~django.test.signals.setting_changed` signal to clear "
"the cache. For example::"
msgstr "如果你的app使用多个用户模型进行测试，例如使用 ``@override_settings(AUTH_USER_MODEL=...)`` ，并将get_user_model()的结果缓存在模块级变量中，则可能需要监听 :data:`~django.test.signals.setting_changed` 信号以清除缓存。举例："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:512
msgid "Specifying a custom user model"
msgstr "指定自定义用户模型"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:514
msgid ""
"When you start your project with a custom user model, stop to consider if "
"this is the right choice for your project."
msgstr "当你使用自定义的用户模型开始项目时，请停止考虑这是否是项目的正确选择。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:517
msgid ""
"Keeping all user related information in one model removes the need for "
"additional or more complex database queries to retrieve related models. On "
"the other hand, it may be more suitable to store app-specific user "
"information in a model that has a relation with your custom user model. That"
" allows each app to specify its own user data requirements without "
"potentially conflicting or breaking assumptions by other apps. It also means"
" that you would keep your user model as simple as possible, focused on "
"authentication, and following the minimum requirements Django expects custom"
" user models to meet."
msgstr ""

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:526
msgid ""
"If you use the default authentication backend, then your model must have a "
"single unique field that can be used for identification purposes. This can "
"be a username, an email address, or any other unique attribute. A non-unique"
" username field is allowed if you use a custom authentication backend that "
"can support it."
msgstr "如果使用默认身份验证后端，那么您的模型必须具有用于标识目的的唯一字段。这可以是用户名、电子邮件地址或任何其他唯一属性。如果使用可以支持它的自定义身份验证后端，则允许使用非唯一用户名字段。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:532
msgid ""
"The easiest way to construct a compliant custom user model is to inherit "
"from :class:`~django.contrib.auth.models.AbstractBaseUser`. "
":class:`~django.contrib.auth.models.AbstractBaseUser` provides the core "
"implementation of a user model, including hashed passwords and tokenized "
"password resets. You must then provide some key implementation details:"
msgstr "构造一个兼容的自定义用户模型的最简单方法是继承:class:`~django.contrib.auth.models.AbstractBaseUser`。:class:`~django.contrib.auth.models.AbstractBaseUser`提供用户模型的核心实现，包括散列密码和标记化的密码重置。然后必须提供一些关键实现细节："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:544
msgid ""
"A string describing the name of the field on the user model that is used as "
"the unique identifier. This will usually be a username of some kind, but it "
"can also be an email address, or any other unique identifier. The field "
"*must* be unique (i.e., have ``unique=True`` set in its definition), unless "
"you use a custom authentication backend that can support non-unique "
"usernames."
msgstr "作为唯一标识符的描述用户模型字段名的字符串，通常是一个用户名，但也可以是一个电子邮件地址，或任何其他唯一标识符。该字段*必须*是唯一的（即定义了 ``unique=True`` ），除非你使用自定义身份验证后端，可以支持非唯一的用户名。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:551
msgid ""
"In the following example, the field ``identifier`` is used as the "
"identifying field::"
msgstr "接下来的样例中，``identifier`` 字段将被用作识别字段。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:561
msgid ""
"A string describing the name of the email field on the ``User`` model. This "
"value is returned by :meth:`~models.AbstractBaseUser.get_email_field_name`."
msgstr "用来描述用户模型中的邮件字段，该值通过 :meth:`~models.AbstractBaseUser.get_email_field_name` 返回。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:567
msgid ""
"A list of the field names that will be prompted for when creating a user via"
" the :djadmin:`createsuperuser` management command. The user will be "
"prompted to supply a value for each of these fields. It must include any "
"field for which :attr:`~django.db.models.Field.blank` is ``False`` or "
"undefined and may include additional fields you want prompted for when a "
"user is created interactively. ``REQUIRED_FIELDS`` has no effect in other "
"parts of Django, like creating a user in the admin."
msgstr "当通过命令行 :djadmin:`createsuperuser` 来创建用户时提示的必填字段列表。这个列表里的字段必须是非空或者未定义字段，也可以包含一些你想在创建用户时进行提示的附加字段。 ``REQUIRED_FIELDS`` 对Django的其他部分无效，比如在admin页面中创建用户。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:576
msgid ""
"For example, here is the partial definition for a user model that defines "
"two required fields - a date of birth and height::"
msgstr "比如说，这里是一个局部的用户模型，定义了两个必须的字段——生日和身高。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:588
msgid ""
"``REQUIRED_FIELDS`` must contain all required fields on your user model, but"
" should *not* contain the ``USERNAME_FIELD`` or ``password`` as these fields"
" will always be prompted for."
msgstr "``REQUIRED_FIELDS`` 必须包含你的用户模型中所有的必填字段，但不用包含``USERNAME_FIELD`` 或 ``password`` ，因为这些字段一直都会被提示。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:594
msgid ""
"A boolean attribute that indicates whether the user is considered "
"\"active\".  This attribute is provided as an attribute on "
"``AbstractBaseUser`` defaulting to ``True``. How you choose to implement it "
"will depend on the details of your chosen auth backends. See the "
"documentation of the :attr:`is_active attribute on the built-in user model "
"<django.contrib.auth.models.User.is_active>` for details."
msgstr "一个布尔属性，指明用户是否被“激活”。这个属性作为 ``AbstractBaseUser`` 的属性提供，默认是 ``True`` 。如何去实现该属性的功能取决于你所选择的认证后端。查看 :attr:`is_active attribute on the built-in user model <django.contrib.auth.models.User.is_active>`  了解详情。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:603
msgid ""
"Optional. A longer formal identifier for the user such as their full name. "
"If implemented, this appears alongside the username in an object's history "
"in :mod:`django.contrib.admin`."
msgstr "可选项。用户的较长身份标识符，比如用户的全名。如果已经设置，则会与用户名一起出现在 :mod:`django.contrib.admin` 中。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:609
msgid ""
"Optional. A short, informal identifier for the user such as their first "
"name. If implemented, this replaces the username in the greeting to the user"
" in the header of :mod:`django.contrib.admin`."
msgstr "可选项。用户较短的身份标识符，比如用户的名。如果已经设置，它会在 :mod:`django.contrib.admin` 页面头部的欢迎词中替换用户名。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:613
msgid "Importing ``AbstractBaseUser``"
msgstr "引入 ``AbstractBaseUser``"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:615
msgid ""
"``AbstractBaseUser`` and ``BaseUserManager`` are importable from "
"``django.contrib.auth.base_user`` so that they can be imported without "
"including ``django.contrib.auth`` in :setting:`INSTALLED_APPS`."
msgstr "``AbstractBaseUser`` and ``BaseUserManager`` 可以从 ``django.contrib.auth.base_user`` 中导入，所以你无需在 :setting:`INSTALLED_APPS` 添加 ``django.contrib.auth`` 就能导入它们。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:619
msgid ""
"The following attributes and methods are available on any subclass of "
":class:`~django.contrib.auth.models.AbstractBaseUser`:"
msgstr ":class:`~django.contrib.auth.models.AbstractBaseUser` 的任何子类都可以使用下面的属性和方法："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:626
msgid "Returns the value of the field nominated by ``USERNAME_FIELD``."
msgstr "返回 ``USERNAME_FIELD`` 指定的字段的值。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:630
msgid ""
"Normalizes the username by calling :meth:`normalize_username`. If you "
"override this method, be sure to call ``super()`` to retain the "
"normalization."
msgstr "通过调用 :meth:`normalize_username` 来规范化用户名。 如果重写此方法，必须调用 ``super()`` 来保持规范化。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:636
msgid ""
"Returns the name of the email field specified by the "
":attr:`~models.CustomUser.EMAIL_FIELD` attribute. Defaults to ``'email'`` if"
" ``EMAIL_FIELD`` isn't specified."
msgstr "返回由 :attr:`~models.CustomUser.EMAIL_FIELD` 属性指定的电子邮件字段的名称。 如果未指定 ``EMAIL_FIELD`` ，则默认为 ``'email'`` 。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:642
msgid ""
"Applies NFKC Unicode normalization to usernames so that visually identical "
"characters with different Unicode code points are considered identical."
msgstr "应用NFKC Unicode 规范化用户名，使得不同Unicode码位视觉相同字符视为相同。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:648
msgid ""
"Read-only attribute which is always ``True`` (as opposed to "
"``AnonymousUser.is_authenticated`` which is always ``False``). This is a way"
" to tell if the user has been authenticated. This does not imply any "
"permissions and doesn't check if the user is active or has a valid session. "
"Even though normally you will check this attribute on ``request.user`` to "
"find out whether it has been populated by the "
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` "
"(representing the currently logged-in user), you should know this attribute "
"is ``True`` for any :class:`~models.User` instance."
msgstr "只读属性，始终返回 ``True`` （匿名用户 ``AnonymousUser.is_authenticated``  始终返回 ``False`` ）。这是一种判断用户是否已通过身份验证的方法。这并不意味着任何权限，也不会检查用户是否处于活动状态或是否具有有效会话。即使通常您会根据 ``request.user`` 检查这个属性，以确定它是否被 :class:`~django.contrib.auth.middleware.AuthenticationMiddleware` 填充（表示当前登录的用户），但是你应该知道该属性对于任何 :class:`~models.User` 实例都返回True。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:660
msgid ""
"Read-only attribute which is always ``False``. This is a way of "
"differentiating :class:`~models.User` and :class:`~models.AnonymousUser` "
"objects. Generally, you should prefer using "
":attr:`~models.User.is_authenticated` to this attribute."
msgstr "只读属性总是'False'。这个属性用于区分类:model.User和model.AnonymousUser对象。通常情况下，属性:'model.User.is_authenticated'应该置于只读。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:667
msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the "
":class:`~django.contrib.auth.models.AbstractBaseUser` object."
msgstr "设置用户密码，谨慎保存密码哈希。不可保存类'django.conrtib.auth.models.AbstractBaseUser’的对象。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:671
msgid ""
"When the raw_password is ``None``, the password will be set to an unusable "
"password, as if "
":meth:`~django.contrib.auth.models.AbstractBaseUser.set_unusable_password()`"
" were used."
msgstr "如果密码为空，密码应设置为不可用密码。例如可以使用方法:django.contrib.auth.mode.Is.AbstractBaseUser.set_unusable_password()。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:678
msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr "如果密码正确则返回'True'。(密码哈希值用于比较)"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:684
msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. "
":meth:`~django.contrib.auth.models.AbstractBaseUser.check_password()` for "
"this user will never return ``True``. Doesn't save the "
":class:`~django.contrib.auth.models.AbstractBaseUser` object."
msgstr "将用户标记为没有设置密码。 这与密码使用空白字符串不同。 :meth:`~django.contrib.auth.models.AbstractBaseUser.check_password()` 此用户将永远不会返回True。 不保存 :class:`~django.contrib.auth.models.AbstractBaseUser`  对象。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:690
msgid ""
"You may need this if authentication for your application takes place against"
" an existing external source such as an LDAP directory."
msgstr "如果针对现有外部源（例如LDAP目录）进行应用程序的身份验证，则可能需要这样做。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:695
msgid ""
"Returns ``False`` if "
":meth:`~django.contrib.auth.models.AbstractBaseUser.set_unusable_password()`"
" has been called for this user."
msgstr "如果方法'django.contrib.auth.models.AbstractBaseUser.set_unusable_password()'被调用则返回'False'。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:701
msgid ""
"Returns an HMAC of the password field. Used for :ref:`session-invalidation-"
"on-password-change`."
msgstr "返回密码字段的HMAC。用于密码更改后会话失效。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:704
msgid ""
":class:`~models.AbstractUser` subclasses :class:`~models.AbstractBaseUser`:"
msgstr "类:'models.AbstractUser是类:‘models.AbstractBaseUser’的子类。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:710
msgid ""
"Normalizes the email by calling :meth:`.BaseUserManager.normalize_email`. If"
" you override this method, be sure to call ``super()`` to retain the "
"normalization."
msgstr "调用方法:‘BaseUserManger.normalize_email’来标准化邮件。如果你要重写这个方法，确保调用super()以保持标准化。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:715
msgid "Writing a manager for a custom user model"
msgstr "为自定义的用户模型编写一个管理器"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:717
msgid ""
"You should also define a custom manager for your user model. If your user "
"model defines ``username``, ``email``, ``is_staff``, ``is_active``, "
"``is_superuser``, ``last_login``, and ``date_joined`` fields the same as "
"Django's default user, you can just install Django's "
":class:`~django.contrib.auth.models.UserManager`; however, if your user "
"model defines different fields, you'll need to define a custom manager that "
"extends :class:`~django.contrib.auth.models.BaseUserManager` providing two "
"additional methods:"
msgstr "你应该为你的用户模型定义一个自定义管理器。如果你的用户模型定义了`username``, ``email``, ``is_staff``, ``is_active``, ``is_superuser``, ``last_login``, and ``date_joined`等变量域，这些变量Django均内置了。你只需要安装类:'django.contrib.auth,models.UserManager'；但是，如果你的用户模型还定义了其他的变量，那么你就需要扩展类:django.contrib.auth.models.BaseUserManager'，这个类提供了额外的两个方法。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:729
msgid ""
"The prototype of ``create_user()`` should accept the username field, plus "
"all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"field, then ``create_user`` should be defined as::"
msgstr "``create_user()`` 的原型应该接受username字段，加上其他所有必须的字段作为参数。举例，如果你的用户模型使用 ``email`` 作为用户名字段，``date_of_birth``  字段作为必填字段，那么 ``create_user`` 应该如下定义："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:740
msgid ""
"The prototype of ``create_superuser()`` should accept the username field, "
"plus all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"field, then ``create_superuser`` should be defined as::"
msgstr "``create_superuser()`` 的原型应该接受username字段，加上其他所有必须的字段作为参数。举例，如果你的用户模型使用 ``email`` 作为用户名字段，``date_of_birth`` 字段作为必填字段，那么 ``create_superuser`` 应该如下定义："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:749
msgid ""
"Unlike ``create_user()``, ``create_superuser()`` *must* require the caller "
"to provide a password."
msgstr "和 ``create_user()`` 不同的是，``create_superuser()`` 要求调用者 *必须* 提供一个密码。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:752
msgid ""
"For a :class:`~.ForeignKey` in :attr:`.USERNAME_FIELD` or "
":attr:`.REQUIRED_FIELDS`, these methods receive the value of the "
":attr:`~.ForeignKey.to_field` (the "
":attr:`~django.db.models.Field.primary_key` by default) of an existing "
"instance."
msgstr "对于 :attr:`.USERNAME_FIELD` 或 :attr:`.REQUIRED_FIELDS` 中的 :class:`~.ForeignKey` ，这些方法接收现有实例的:attr:`~.ForeignKey.to_field`（默认为 :attr:`~django.db.models.Field.primary_key` ）的值。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:757
msgid ""
":class:`~django.contrib.auth.models.BaseUserManager` provides the following "
"utility methods:"
msgstr ":class:`~django.contrib.auth.models.BaseUserManager` 提供以下实用方法："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:764
msgid ""
"Normalizes email addresses by lowercasing the domain portion of the email "
"address."
msgstr "通过降低电子邮件地址的域部分来规范化电子邮件地址。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:769
msgid ""
"Retrieves a user instance using the contents of the field nominated by "
"``USERNAME_FIELD``."
msgstr "使用 ``USERNAME_FIELD`` 指定的字段的内容检索用户实例。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:774
msgid ""
"Returns a random password with the given length and given string of allowed "
"characters. Note that the default value of ``allowed_chars`` doesn't contain"
" letters that can cause user confusion, including:"
msgstr "返回具有给定长度和给定字符串的随机密码。请注意， ``allowed_chars``  的默认值不包含可能导致用户混淆的字母，包括："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:778
msgid ""
"``i``, ``l``, ``I``, and ``1`` (lowercase letter i, lowercase letter L, "
"uppercase letter i, and the number one)"
msgstr "``i``, ``l``, ``I``, 和 ``1`` (小写i, 小写L, 大写i和数字1)"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:780
msgid ""
"``o``, ``O``, and ``0`` (lowercase letter o, uppercase letter o, and zero)"
msgstr "``o``, ``O``, 和 ``0`` (小写 o, 大写 o, 和数字0 )"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:784
msgid "Extending Django's default ``User``"
msgstr "扩展Django的默认用户模型"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:786
msgid ""
"If you're entirely happy with Django's "
":class:`~django.contrib.auth.models.User` model and you just want to add "
"some additional profile information, you could simply subclass "
":class:`django.contrib.auth.models.AbstractUser` and add your custom profile"
" fields, although we'd recommend a separate model as described in the "
"\"Model design considerations\" note of :ref:`specifying-custom-user-model`."
" ``AbstractUser`` provides the full implementation of the default "
":class:`~django.contrib.auth.models.User` as an :ref:`abstract model "
"<abstract-base-classes>`."
msgstr "如果你对Django自带的用户模型完全满意，而你只想添加一些其他信息，你可以简单地继承 :class:`django.contrib.auth.models.AbstractUser`  并添加你的自定义字段，尽管我们建议使用在“模型设计考虑因素”中描述 :ref:`specifying-custom-user-model` 那样的单独的模型。  ``AbstractUser`` 提供默认 :class:`~django.contrib.auth.models.User` 的完整实现作为 :ref:`abstract model ` 。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:798
msgid "Custom users and the built-in auth forms"
msgstr "自定义用户和内建的auth表单"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:800
msgid ""
"Django's built-in :ref:`forms <built-in-auth-forms>` and :ref:`views <built-"
"in-auth-views>` make certain assumptions about the user model that they are "
"working with."
msgstr "Django的内置 :ref:`forms ` 和 :ref:`views ` 对他们正在使用的用户模型做了一些假设。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:804
msgid ""
"The following forms are compatible with any subclass of "
":class:`~django.contrib.auth.models.AbstractBaseUser`:"
msgstr "以下表单与 :class:`~django.contrib.auth.models.AbstractBaseUser` 的任何子类兼容："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:807
msgid ""
":class:`~django.contrib.auth.forms.AuthenticationForm`: Uses the username "
"field specified by :attr:`~models.CustomUser.USERNAME_FIELD`."
msgstr ":class:`~django.contrib.auth.forms.AuthenticationForm`:  使用 :attr:`~models.CustomUser.USERNAME_FIELD` 指定的username字段。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:809
msgid ":class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ":class:`~django.contrib.auth.forms.SetPasswordForm`"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:810
msgid ":class:`~django.contrib.auth.forms.PasswordChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.PasswordChangeForm`"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:811
msgid ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:813
msgid ""
"The following forms make assumptions about the user model and can be used "
"as-is if those assumptions are met:"
msgstr "以下表单对用户模型进行了假设，如果满足这些假设，则可以按原样使用:"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:816
msgid ""
":class:`~django.contrib.auth.forms.PasswordResetForm`: Assumes that the user"
" model has a field that stores the user's email address with the name "
"returned by :meth:`~models.AbstractBaseUser.get_email_field_name` (``email``"
" by default) that can be used to identify the user and a boolean field named"
" ``is_active`` to prevent password resets for inactive users."
msgstr ":class:`~django.contrib.auth.forms.PasswordResetForm` ：假设用户模型有一个字段存储用户的电子邮件地址，其名称由 :meth:`~models.AbstractBaseUser.get_email_field_name` 返回（默认为电子邮件），这个方法用来标识用户，以及名为``is_active``的布尔字段，防止非活动用户重置密码。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:822
msgid ""
"Finally, the following forms are tied to "
":class:`~django.contrib.auth.models.User` and need to be rewritten or "
"extended to work with a custom user model:"
msgstr "最后，下面的表单和 :class:`~django.contrib.auth.models.User` 绑定，如果需要和自定义的用户模型一起使用，则需要重写或者扩展。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:826
msgid ":class:`~django.contrib.auth.forms.UserCreationForm`"
msgstr ":class:`~django.contrib.auth.forms.UserCreationForm`"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:827
msgid ":class:`~django.contrib.auth.forms.UserChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.UserChangeForm`"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:829
msgid ""
"If your custom user model is a simple subclass of ``AbstractUser``, then you"
" can extend these forms in this manner::"
msgstr "如果自定义的用户模型是 ``AbstractUser`` 的子类，则可以使用下面的方式来扩展表单："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:842
msgid "Custom users and :mod:`django.contrib.admin`"
msgstr "自定义用户和 :mod:`django.contrib.admin`"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:844
msgid ""
"If you want your custom user model to also work with the admin, your user "
"model must define some additional attributes and methods. These methods "
"allow the admin to control access of the user to admin content:"
msgstr "如果你希望自定义的用户模型也与管理后台一起使用，那么你的用户模型必须定义一些额外的属性和方法。这些方法允许管理员控制用户对管理后台内容的访问："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:852
msgid ""
"Returns ``True`` if the user is allowed to have access to the admin site."
msgstr "如果允许用户有访问 admin 页面就返回 ``True``。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:856
msgid "Returns ``True`` if the user account is currently active."
msgstr "返回``True``，如果该用户的账号当前是激活状态"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:860
msgid ""
"Returns ``True`` if the user has the named permission. If ``obj`` is "
"provided, the permission needs to be checked against a specific object "
"instance."
msgstr "如果用户有指定的权限，则返回 ``True`` 。如果提供了参数 ``obj``  ，则需要对指定的对象实例进行权限检查。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:866
msgid ""
"Returns ``True`` if the user has permission to access models in the given "
"app."
msgstr "如果用户有权限访问指定 app 里的模型，那么返回 ``True`` 。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:869
msgid ""
"You will also need to register your custom user model with the admin. If "
"your custom user model extends ``django.contrib.auth.models.AbstractUser``, "
"you can use Django's existing ``django.contrib.auth.admin.UserAdmin`` class."
" However, if your user model extends "
":class:`~django.contrib.auth.models.AbstractBaseUser`, you'll need to define"
" a custom ``ModelAdmin`` class. It may be possible to subclass the default "
"``django.contrib.auth.admin.UserAdmin``; however, you'll need to override "
"any of the definitions that refer to fields on "
"``django.contrib.auth.models.AbstractUser`` that aren't on your custom user "
"class."
msgstr "你也需要在 admin 文件里注册自定义的用户模型。如果自定义的用户模型扩展了  ``django.contrib.auth.models.AbstractUser`` ，你可以直接使用Django已有的类 ``django.contrib.auth.admin.UserAdmin`` 。如果你的用户模型扩展了 :class:`~django.contrib.auth.models.AbstractBaseUser` ，你将需要定义一个自定义的类 ``ModelAdmin`` 。不管怎样，你都将需要重写任何引用 ``django.contrib.auth.models.AbstractUser`` 上的字段的定义，这些字段不在你自定义的用户类中。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:881
msgid "Custom users and permissions"
msgstr "自定义用户和权限。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:883
msgid ""
"To make it easy to include Django's permission framework into your own user "
"class, Django provides "
":class:`~django.contrib.auth.models.PermissionsMixin`. This is an abstract "
"model you can include in the class hierarchy for your user model, giving you"
" all the methods and database fields necessary to support Django's "
"permission model."
msgstr "为了便于将Django的权限框架引入到你自己的用户类中，Django提供了 :class:`~django.contrib.auth.models.PermissionsMixin` 。这是一个抽象模型，可以包含在用户模型的类层次结构中，为你提供支持Django权限模型所需的所有方法和数据库字段。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:889
msgid ""
":class:`~django.contrib.auth.models.PermissionsMixin` provides the following"
" methods and attributes:"
msgstr ":class:`~django.contrib.auth.models.PermissionsMixin` 提供下列方法和属性："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:896
msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr "布尔值。指定该用户拥有所有权限，而不用一个个开启权限。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:901
msgid ""
"Returns a set of permission strings that the user has, through their groups."
msgstr "返回用户拥有权限的字符串集合，从用户所属组的权限中获取。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:904
msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr "如果传入 ``obj`` 参数，则只返回指定对象所属组的权限。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:909
msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr "返回用户拥有权限的字符串集合，同时从用户所属组及用户本身的权限中获取。 "

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:912
msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr "如果传入 ``obj``参数，则只返回指定对象和所属组的权限。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:917
msgid ""
"Returns ``True`` if the user has the specified permission, where ``perm`` is"
" in the format ``\"<app label>.<permission codename>\"`` (see "
":ref:`permissions <topic-authorization>`). If :attr:`.User.is_active` and "
":attr:`~.User.is_superuser` are both ``True``, this method always returns "
"``True``."
msgstr "如果用户具有指定的权限，则返回 ``True`` ，其中 ``perm`` 的格式为 ``\"<app label>.<permission codename>\"`` (see :ref:`permissions <topic-authorization>`)。如果 :attr:`.User.is_active` 和 :attr:`~.User.is_superuser` 都为 ``True``，则这个方法一直返回 ``True`` 。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:923
msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr "如果传入 ``obj`` 参数，则这个方法不会检查该模型权限，而只会检查这个出传入对象的权限。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:928
msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If "
":attr:`.User.is_active` and :attr:`~.User.is_superuser` are both ``True``, "
"this method always returns ``True``."
msgstr "如果用户具有指定权限列表里的每个权限，则返回 ``True`` ，其中perm的格式为 ``\"<app label>.<permission codename>\"`` 。如果 :attr:`.User.is_active` 和 :attr:`~.User.is_superuser` 都返回 ``True`` ，则这个方法一直返回 ``True`` 。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:934
msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr "如果传入参数  ``obj``  ，则这个方法不会检查指定的权限列表，只检查指定对象的权限。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:939
msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If :attr:`.User.is_active` and "
":attr:`~.User.is_superuser` are both ``True``, this method always returns "
"``True``."
msgstr "如果用户拥有所给的 Django app 标签 (the Django app label) 里的任何权限，则会返回 ``True`` 。如果 :attr:`.User.is_active` 和 :attr:`~.User.is_superuser` 都为 ``True`` ，则该方法一直返回 ``True`` 。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:944
msgid "``PermissionsMixin`` and ``ModelBackend``"
msgstr "``PermissionsMixin``  和  ``ModelBackend``"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:946
msgid ""
"If you don't include the "
":class:`~django.contrib.auth.models.PermissionsMixin`, you must ensure you "
"don't invoke the permissions methods on ``ModelBackend``. ``ModelBackend`` "
"assumes that certain fields are available on your user model. If your user "
"model doesn't provide  those fields, you'll receive database errors when you"
" check permissions."
msgstr "如果你没有引入 :class:`~django.contrib.auth.models.PermissionsMixin` ，必须确保没有调用 ``ModelBackend`` 的权限方法。``ModelBackend`` 假定你的用户模型某些字段可用。如果你的用户模型没有提供这些字段，则当你检查权限的时候，会收到数据库错误提示。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:954
msgid "Custom users and proxy models"
msgstr "自定义用户和代理模型"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:956
msgid ""
"One limitation of custom user models is that installing a custom user model "
"will break any proxy model extending "
":class:`~django.contrib.auth.models.User`. Proxy models must be based on a "
"concrete base class; by defining a custom user model, you remove the ability"
" of Django to reliably identify the base class."
msgstr "自定义用户模型的一个限制是安装自定义用户模型将破坏任何扩展  :class:`~django.contrib.auth.models.User` 的代理模型。代理模型必须基于具体的基类；通过定义自定义用户模型，你就移除了Django可靠地识别基类的功能。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:961
msgid ""
"If your project uses proxy models, you must either modify the proxy to "
"extend the user model that's in use in your project, or merge your proxy's "
"behavior into your :class:`~django.contrib.auth.models.User` subclass."
msgstr "如果你的项目正在使用代理模型，你必须修改扩展用户模型的代理，或者把代理的行为都合并到 :class:`~django.contrib.auth.models.User` 子类里去。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:966
#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:161
msgid "A full example"
msgstr "一个完整的例子"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:968
msgid ""
"Here is an example of an admin-compliant custom user app. This user model "
"uses an email address as the username, and has a required date of birth; it "
"provides no permission checking, beyond a simple ``admin`` flag on the user "
"account. This model would be compatible with all the built-in auth forms and"
" views, except for the user creation forms. This example illustrates how "
"most of the components work together, but is not intended to be copied "
"directly into projects for production use."
msgstr "这里是一个兼容admin的自定义的用户app的例子。这个用户模型使用 email 地址作为username，并且生日是必填字段；它本身不提供权限检查，只使用一个简单的 ``admin``  flag 来对用户账户进行权限检查。除了用户创建的表单外，此模型和所有内置的身份验证表单和视图兼容。此例只是说明了大多数组件如何协同工作，不要直接复制到生产环境里。"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:976
msgid ""
"This code would all live in a ``models.py`` file for a custom authentication"
" app::"
msgstr "这段代码将一直存在于 ``models.py`` 文件中，用于自定义身份验证 app::"

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:1052
msgid ""
"Then, to register this custom user model with Django's admin, the following "
"code would be required in the app's ``admin.py`` file::"
msgstr "然后，在 Django 管理后台里注册这个用户模型，下面这些代码必须在 app 的 ``admin.py`` 文件里："

#: ../../../../sources/2.2/docs/topics/auth/customizing.txt:1142
msgid ""
"Finally, specify the custom model as the default user model for your project"
" using the :setting:`AUTH_USER_MODEL` setting in your ``settings.py``::"
msgstr "最后，在项目配置文件中的 :setting:`AUTH_USER_MODEL` 里指定自定义的用户模型为默认的用户模型。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:3
msgid "Using the Django authentication system"
msgstr "使用 Django 的验证系统"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:7
msgid ""
"This document explains the usage of Django's authentication system in its "
"default configuration. This configuration has evolved to serve the most "
"common project needs, handling a reasonably wide range of tasks, and has a "
"careful implementation of passwords and permissions. For projects where "
"authentication needs differ from the default, Django supports extensive "
":doc:`extension and customization </topics/auth/customizing>` of "
"authentication."
msgstr "本文档介绍了 Django 验证系统在默认配置下的使用方法。默认配置满足最常见的项目需求，可以处理相当多的任务，还有一个安全的密码和权限实现。对于验证需求与默认配置不同的项目，Django 支持对身份验证进行扩展和定制。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:14
msgid ""
"Django authentication provides both authentication and authorization "
"together and is generally referred to as the authentication system, as these"
" features are somewhat coupled."
msgstr "Django 验证同时提供身份验证和授权，通常称为身份验证系统，因为这些功能在某种程度上是耦合的。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:21
msgid "``User`` objects"
msgstr "``User`` 对象"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:23
msgid ""
":class:`~django.contrib.auth.models.User` objects are the core of the "
"authentication system. They typically represent the people interacting with "
"your site and are used to enable things like restricting access, registering"
" user profiles, associating content with creators etc. Only one class of "
"user exists in Django's authentication framework, i.e., :attr:`'superusers' "
"<django.contrib.auth.models.User.is_superuser>` or admin :attr:`'staff' "
"<django.contrib.auth.models.User.is_staff>` users are just user objects with"
" special attributes set, not different classes of user objects."
msgstr "用户对象是认证系统的核心。它通常代表了与你的站点交互的人员，并用于允许诸如限制访问、注册用户配置文件、将内容与创建者关联等功能。Django 的认证框架中用户只有一个类，例如 “超级管理员”或“普通管理员”只是具有特殊属性集的用户对象，而不是用户对象的不同类。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:32
msgid "The primary attributes of the default user are:"
msgstr "默认用户的主要属性是："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:34
msgid ":attr:`~django.contrib.auth.models.User.username`"
msgstr ":attr:`~django.contrib.auth.models.User.username`"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:35
msgid ":attr:`~django.contrib.auth.models.User.password`"
msgstr ":attr:`~django.contrib.auth.models.User.password`"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:36
msgid ":attr:`~django.contrib.auth.models.User.email`"
msgstr ":attr:`~django.contrib.auth.models.User.email`"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:37
msgid ":attr:`~django.contrib.auth.models.User.first_name`"
msgstr ":attr:`~django.contrib.auth.models.User.first_name`"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:38
msgid ":attr:`~django.contrib.auth.models.User.last_name`"
msgstr ":attr:`~django.contrib.auth.models.User.last_name`"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:40
msgid ""
"See the :class:`full API documentation <django.contrib.auth.models.User>` "
"for full reference, the documentation that follows is more task oriented."
msgstr "请参阅完整的API文档 :class:`full API documentation <django.contrib.auth.models.User>` 以获得完整的参考，下面的文档主要以任务为导向。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:46
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1667
msgid "Creating users"
msgstr "创建用户"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:48
msgid ""
"The most direct way to create users is to use the included "
":meth:`~django.contrib.auth.models.UserManager.create_user` helper "
"function::"
msgstr "创建用户最直接的方法是使用包含 :meth:`~django.contrib.auth.models.UserManager.create_user` 的函数："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:60
msgid ""
"If you have the Django admin installed, you can also :ref:`create users "
"interactively <auth-admin>`."
msgstr "如果你已经安装了 Django admin 管理后台，你也可以在 admin 管理后台交互式地创建用户:ref:`create users interactively <auth-admin>` 。 "

#: ../../../../sources/2.2/docs/topics/auth/default.txt:66
msgid "Creating superusers"
msgstr "创建超级用户"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:68
msgid "Create superusers using the :djadmin:`createsuperuser` command::"
msgstr "通过命令行 :djadmin:`createsuperuser` 创建超级管理员："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:72
msgid ""
"You will be prompted for a password. After you enter one, the user will be "
"created immediately. If you leave off the :option:`--username "
"<createsuperuser --username>` or :option:`--email <createsuperuser --email>`"
" options, it will prompt you for those values."
msgstr "你将会被提示输入密码，完成之后，超级管理员就被创建成功了。如果你没有填写参数 :option:`--username <createsuperuser --username> ` or :option:`--email <createsuperuser --email>` ，也将会被提示输入这些值。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:78
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1689
msgid "Changing passwords"
msgstr "更改密码"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:80
msgid ""
"Django does not store raw (clear text) passwords on the user model, but only"
" a hash (see :doc:`documentation of how passwords are managed "
"</topics/auth/passwords>` for full details). Because of this, do not attempt"
" to manipulate the password attribute of the user directly. This is why a "
"helper function is used when creating a user."
msgstr "Django 不会在用户模型里保存原始(明文)密码，而只会存储哈希值(请参阅文档 `如何管理密码`  :doc:`documentation of how passwords are managed </topics/auth/passwords>` ) 。因此，请不要试图直接操作用户的密码，这就是创建用户需要辅助函数的原因。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:86
msgid "To change a user's password, you have several options:"
msgstr "更改一个用户的密码，你有几个选择："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:88
msgid ""
":djadmin:`manage.py changepassword *username* <changepassword>` offers a "
"method of changing a user's password from the command line. It prompts you "
"to change the password of a given user which you must enter twice. If they "
"both match, the new password will be changed immediately. If you do not "
"supply a user, the command will attempt to change the password whose "
"username matches the current system user."
msgstr ":djadmin:`manage.py changepassword *username* <changepassword>` 提供了在命令行修改用户密码的方法。它会提示你输入两次新密码，如果操作成功，新密码就立刻生效。如果你没有提供参数 username ，那么将会尝试修改当前系统用户的密码。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:95
msgid ""
"You can also change a password programmatically, using "
":meth:`~django.contrib.auth.models.User.set_password()`:"
msgstr "你也可以在代码里修改密码，使用 :meth:`~django.contrib.auth.models.User.set_password()`:"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:105
msgid ""
"If you have the Django admin installed, you can also change user's passwords"
" on the :ref:`authentication system's admin pages <auth-admin>`."
msgstr "如果你已经按照了 Django admin 管理后台，你也可以在管理后台页面修改密码（请参阅 :ref:`authentication system's admin pages ` ）。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:108
msgid ""
"Django also provides :ref:`views <built-in-auth-views>` and :ref:`forms "
"<built-in-auth-forms>` that may be used to allow users to change their own "
"passwords."
msgstr "Django 还提供了允许用户自行修改密码的 :ref:`views ` 和 :ref:`forms ` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:112
msgid ""
"Changing a user's password will log out all their sessions. See :ref"
":`session-invalidation-on-password-change` for details."
msgstr "修改密码将会注销用户的所有会话。查看详情请参阅 :ref:`session-invalidation-on-password-change` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:116
msgid "Authenticating users"
msgstr "验证用户"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:120
msgid ""
"Use :func:`~django.contrib.auth.authenticate()` to verify a set of "
"credentials. It takes credentials as keyword arguments, ``username`` and "
"``password`` for the default case, checks them against each "
":ref:`authentication backend <authentication-backends>`, and returns a "
":class:`~django.contrib.auth.models.User` object if the credentials are "
"valid for a backend. If the credentials aren't valid for any backend or if a"
" backend raises :class:`~django.core.exceptions.PermissionDenied`, it "
"returns ``None``. For example::"
msgstr "使用 :func:`~django.contrib.auth.authenticate()` 来验证用户。它使用 ``username`` 和 ``password`` 作为参数来验证，对每个身份验证后端( :ref:`authentication backend ` )进行检查。如果后端验证有效，则返回一个 :class:`~django.contrib.auth.models.User` 对象。如果后端引发 :class:`~django.core.exceptions.PermissionDenied` 错误，将返回 ``None``。举例："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:136
msgid ""
"``request`` is an optional :class:`~django.http.HttpRequest` which is passed"
" on the ``authenticate()`` method of the authentication backends."
msgstr "``request`` 是可选的 :class:`~django.http.HttpRequest` ，它在身份验证后端上的 ``authenticate()`` 方法来传递。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:141
msgid ""
"This is a low level way to authenticate a set of credentials; for example, "
"it's used by the "
":class:`~django.contrib.auth.middleware.RemoteUserMiddleware`. Unless you "
"are writing your own authentication system, you probably won't use this. "
"Rather if you're looking for a way to login a user, use the "
":class:`~django.contrib.auth.views.LoginView`."
msgstr "这个一个很底层的验证方法。比如，可以通过 :class:`~django.contrib.auth.middleware.RemoteUserMiddleware` 来验证。除非你在编写自己的身份验证系统，否则你可能不会用到它。如果你正在寻找用户登录的方法，请参阅 :class:`~django.contrib.auth.views.LoginView` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:151
msgid "Permissions and Authorization"
msgstr "权限和认证"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:153
msgid ""
"Django comes with a simple permissions system. It provides a way to assign "
"permissions to specific users and groups of users."
msgstr "Django 带有一个简单的权限系统。它提供了为指定的用户和用户组分配权限的方法。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:156
msgid ""
"It's used by the Django admin site, but you're welcome to use it in your own"
" code."
msgstr "它在 Django 管理后台界面里使用，但你也可以在自己的代码中使用它。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:159
msgid "The Django admin site uses permissions as follows:"
msgstr "Django 的 admin 页面使用了如下权限："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:161
msgid ""
"Access to view objects is limited to users with the \"view\" or \"change\" "
"permission for that type of object."
msgstr "访问查看的对象仅限于具有该类型对象的“查看”或“更改”权限的用户。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:163
msgid ""
"Access to view the \"add\" form and add an object is limited to users with "
"the \"add\" permission for that type of object."
msgstr "访问“添加”表单和添加对象仅限于具有该类型对象的“添加”权限的用户。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:165
msgid ""
"Access to view the change list, view the \"change\" form and change an "
"object is limited to users with the \"change\" permission for that type of "
"object."
msgstr "访问修改列表、查看“修改”表单和修改对象仅限于对该类型对象的“修改”权限的用户。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:168
msgid ""
"Access to delete an object is limited to users with the \"delete\" "
"permission for that type of object."
msgstr "访问删除对象仅限于对该类型对象的“删除”权限的用户。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:171
msgid ""
"Permissions can be set not only per type of object, but also per specific "
"object instance. By using the "
":meth:`~django.contrib.admin.ModelAdmin.has_view_permission`, "
":meth:`~django.contrib.admin.ModelAdmin.has_add_permission`, "
":meth:`~django.contrib.admin.ModelAdmin.has_change_permission` and "
":meth:`~django.contrib.admin.ModelAdmin.has_delete_permission` methods "
"provided by the :class:`~django.contrib.admin.ModelAdmin` class, it is "
"possible to customize permissions for different object instances of the same"
" type."
msgstr "不仅可以为每个对象类型设置权限，还可以为每个指定对象实例设置权限。通过使用 :class:`~django.contrib.admin.ModelAdmin` 类提供的 :meth:`~django.contrib.admin.ModelAdmin.has_view_permission`, :meth:`~django.contrib.admin.ModelAdmin.has_add_permission`, :meth:`~django.contrib.admin.ModelAdmin.has_change_permission` 和 :meth:`~django.contrib.admin.ModelAdmin.has_delete_permission` 方法，可以为同一类型的不同实例定制权限。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:180
msgid ""
":class:`~django.contrib.auth.models.User` objects have two many-to-many "
"fields: ``groups`` and ``user_permissions``. "
":class:`~django.contrib.auth.models.User` objects can access their related "
"objects in the same way as any other :doc:`Django model "
"</topics/db/models>`::"
msgstr ":class:`~django.contrib.auth.models.User` 对象有两个多对多字段:``groups`` 和 ``user_permissions``。 :class:`~django.contrib.auth.models.User` 对象可以像访问其他 :doc:`Django model `: 一样访问他们的相关对象。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:196
msgid "Default permissions"
msgstr "默认权限"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:198
msgid ""
"When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` "
"setting, it will ensure that four default permissions -- add, change, "
"delete, and view -- are created for each Django model defined in one of your"
" installed applications."
msgstr "当 :setting:`INSTALLED_APPS` 设置了 ``django.contrib.auth`` 时，它将确保你的每个 Django 模型被创建时有四个默认权限：添加、修改、删除和查看。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:203
msgid ""
"These permissions will be created when you run :djadmin:`manage.py migrate "
"<migrate>`; the first time you run ``migrate`` after adding "
"``django.contrib.auth`` to :setting:`INSTALLED_APPS`, the default "
"permissions will be created for all previously-installed models, as well as "
"for any new models being installed at that time. Afterward, it will create "
"default permissions for new models each time you run :djadmin:`manage.py "
"migrate <migrate>` (the function that creates permissions is connected to "
"the :data:`~django.db.models.signals.post_migrate` signal)."
msgstr "运行 :djadmin:`manage.py migrate <migrate>` 时将创建这些权限。当你添加 ``django.contrib.auth`` 到 :setting:`INSTALLED_APPS` 后第一次运行 ``迁移`` ，将会为所有只去已经安装过的模型以及现在正在安装的模型创建这些默认的权限。之后，每次你运行 :djadmin:`manage.py migrate <migrate>` 都会为新模型创建默认权限 (创建权限的函数连接 :data:`~django.db.models.signals.post_migrate` 信号)。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:212
msgid ""
"Assuming you have an application with an "
":attr:`~django.db.models.Options.app_label` ``foo`` and a model named "
"``Bar``, to test for basic permissions you should use:"
msgstr "假设你有一个名为 ``foo`` 应用程序和一个名为 ``Bar`` 的模型，要测试基础权限，你应该使用："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:216
msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr "添加：``user.has_perm('foo.add_bar')``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:217
msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr "修改：``user.has_perm('foo.change_bar')``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:218
msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr "删除：``user.has_perm('foo.delete_bar')``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:219
msgid "view: ``user.has_perm('foo.view_bar')``"
msgstr "查看：``user.has_perm('foo.view_bar')``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:221
msgid ""
"The :class:`~django.contrib.auth.models.Permission` model is rarely accessed"
" directly."
msgstr "权限模型很少会被直接访问。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:225
msgid "Groups"
msgstr "组"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:227
msgid ""
":class:`django.contrib.auth.models.Group` models are a generic way of "
"categorizing users so you can apply permissions, or some other label, to "
"those users. A user can belong to any number of groups."
msgstr ":class:`django.contrib.auth.models.Group` 模型是对用户进行分类的通用方法，因此您可以将权限或其他标签应用于这些用户。用户可以属于任意数量的组。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:231
msgid ""
"A user in a group automatically has the permissions granted to that group. "
"For example, if the group ``Site editors`` has the permission "
"``can_edit_home_page``, any user in that group will have that permission."
msgstr "组里的用户会自动拥有该组的权限。举例，如果 ``Site editors`` 组有修改网站首页的权限，那么该组的任何成员都有这个权限。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:235
msgid ""
"Beyond permissions, groups are a convenient way to categorize users to give "
"them some label, or extended functionality. For example, you could create a "
"group ``'Special users'``, and you could write code that could, say, give "
"them access to a members-only portion of your site, or send them members-"
"only email messages."
msgstr "除权限外，组是一个方便的途径，可以给用户分类，为其提供一些标签或扩展功能。例如，你可以创建一个组 ``'Special users'``，并在编写的代码里让该组成员访问网站仅限会员部分的内容，或者对该组成员发送仅限会员查看的电子邮件。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:242
msgid "Programmatically creating permissions"
msgstr "以编程方式创建权限"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:244
msgid ""
"While :ref:`custom permissions <custom-permissions>` can be defined within a"
" model's ``Meta`` class, you can also create permissions directly. For "
"example, you can create the ``can_publish`` permission for a ``BlogPost`` "
"model in ``myapp``::"
msgstr "虽然可以在模型的  ``Meta`` 类中定义 :ref:`custom permissions <custom-permissions>` ，你也可以直接创建权限。例如，你可以为 ``BlogPost`` 模型创建 ``can_publish`` 权限。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:260
msgid ""
"The permission can then be assigned to a "
":class:`~django.contrib.auth.models.User` via its ``user_permissions`` "
"attribute or to a :class:`~django.contrib.auth.models.Group` via its "
"``permissions`` attribute."
msgstr "然后，可以通过 ``user_permissions`` 属性将权限分配给 :class:`~django.contrib.auth.models.User` ，或通过 ``permissions`` 属性分配给 :class:`~django.contrib.auth.models.Group`  。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:265
msgid "Proxy models need their own content type"
msgstr "代理模型需要自己的内容类型"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:267
msgid ""
"If you want to create :ref:`permissions for a proxy model <proxy-models-"
"permissions-topic>`, pass ``for_concrete_model=False`` to "
":meth:`.ContentTypeManager.get_for_model` to get the appropriate "
"``ContentType``::"
msgstr "如果你想创建 :ref:`permissions for a proxy model <proxy-models-permissions-topic>` ，传递 ``for_concrete_model=False`` 到 :meth:`.ContentTypeManager.get_for_model` 来获取合适的 ``ContentType`` ："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:276
msgid ""
"In older versions, proxy models use the content type of the concrete model."
msgstr "在旧版本中，代理模型使用具体模型的内容类型。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:280
msgid "Permission caching"
msgstr "权限缓存"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:282
msgid ""
"The :class:`~django.contrib.auth.backends.ModelBackend` caches permissions "
"on the user object after the first time they need to be fetched for a "
"permissions check. This is typically fine for the request-response cycle "
"since permissions aren't typically checked immediately after they are added "
"(in the admin, for example). If you are adding permissions and checking them"
" immediately afterward, in a test or view for example, the easiest solution "
"is to re-fetch the user from the database. For example::"
msgstr "在第一次需要获取用户对象的权限检查时， :class:`~django.contrib.auth.backends.ModelBackend` 才会缓存它们的权限。对于请求-响应周期来说，这通常是很好的，因为权限通常不会在添加的时候立刻检查（例如，在 admin 中）。如果你打算在测试或视图中添加权限，并随后检查他们，最简单的解决方案就是从数据库中重新获取用户。例如："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:323
#: ../../../../sources/2.2/docs/topics/db/models.txt:1160
msgid "Proxy models"
msgstr "代理模型"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:325
msgid ""
"Proxy models work exactly the same way as concrete models. Permissions are "
"created using the own content type of the proxy model. Proxy models don't "
"inherit the permissions of the concrete model they subclass::"
msgstr "代理模型的工作方式和具体模型完全相同。代理模型使用自己的内容类型创建权限。代理模型不会继承其子类的具体模型权限。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:355
msgid ""
"In older versions, permissions for proxy models use the content type of the "
"concrete model rather than content type of the proxy model."
msgstr "在旧版本中，代理模型的权限使用具体模型的内容类型，而不是代理模型的内容类型。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:361
msgid "Authentication in Web requests"
msgstr "Web 请求的认证"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:363
msgid ""
"Django uses :doc:`sessions </topics/http/sessions>` and middleware to hook "
"the authentication system into :class:`request objects "
"<django.http.HttpRequest>`."
msgstr "Django 使用 :doc:`sessions </topics/http/sessions>` 和中间件将身份验证系统挂接到请求对象中。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:366
msgid ""
"These provide a :attr:`request.user <django.http.HttpRequest.user>`  "
"attribute on every request which represents the current user. If the current"
" user has not logged in, this attribute will be set to an instance of "
":class:`~django.contrib.auth.models.AnonymousUser`, otherwise it will be an "
"instance of :class:`~django.contrib.auth.models.User`."
msgstr "它们在每次请求中都会提供 :attr:`request.user <django.http.HttpRequest.user>` 属性。如果当前没有用户登录，这个属性将会被设置为 :class:`~django.contrib.auth.models.AnonymousUser` ，否则将会被设置为 :class:`~django.contrib.auth.models.User` 实例。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:372
msgid ""
"You can tell them apart with "
":attr:`~django.contrib.auth.models.User.is_authenticated`, like so::"
msgstr "你可以使用 :attr:`~django.contrib.auth.models.User.is_authenticated` 区分两者，例如："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:385
msgid "How to log a user in"
msgstr "用户如何登陆"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:387
msgid ""
"If you have an authenticated user you want to attach to the current session "
"- this is done with a :func:`~django.contrib.auth.login` function."
msgstr "如果有一个已验证的用户想附加到当前会话(session)中，将通过 :func:`~django.contrib.auth.login`  函数完成。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:392
msgid ""
"To log a user in, from a view, use :func:`~django.contrib.auth.login()`. It "
"takes an :class:`~django.http.HttpRequest` object and a "
":class:`~django.contrib.auth.models.User` object. "
":func:`~django.contrib.auth.login()` saves the user's ID in the session, "
"using Django's session framework."
msgstr "要在视图中让用户登录，使用 :func:`~django.contrib.auth.login()`  。它需要 :class:`~django.http.HttpRequest` 对象和 :class:`~django.contrib.auth.models.User` 对象。通过 Django 的 session 框架， :func:`~django.contrib.auth.login()` 会在 session 中保存用户的ID。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:398
msgid ""
"Note that any data set during the anonymous session is retained in the "
"session after a user logs in."
msgstr "注意，在匿名会话期间设置的任何数据都会在用户登录后保留在会话中。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:401
msgid ""
"This example shows how you might use both "
":func:`~django.contrib.auth.authenticate()` and "
":func:`~django.contrib.auth.login()`::"
msgstr "这个例子展示了如何使用 :func:`~django.contrib.auth.authenticate()` 和 :func:`~django.contrib.auth.login()`: ："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:420
msgid "Selecting the authentication backend"
msgstr "选择验证后端"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:422
msgid ""
"When a user logs in, the user's ID and the backend that was used for "
"authentication are saved in the user's session. This allows the same "
":ref:`authentication backend <authentication-backends>` to fetch the user's "
"details on a future request. The authentication backend to save in the "
"session is selected as follows:"
msgstr "当用户登录时，用户 ID 和用于身份验证的后端会被保存在用户会话中。允许相同的 :ref:`authentication backend <authentication-backends>` 在未来的请求中获取用户详情。选择要在会话中保存的验证后端如下："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:428
msgid "Use the value of the optional ``backend`` argument, if provided."
msgstr "使用提供了的可选 ``backend`` 参数值。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:429
msgid ""
"Use the value of the ``user.backend`` attribute, if present. This allows "
"pairing :func:`~django.contrib.auth.authenticate()` and "
":func:`~django.contrib.auth.login()`: "
":func:`~django.contrib.auth.authenticate()` sets the ``user.backend`` "
"attribute on the user object it returns."
msgstr "使用 ``user.backend``  的值。允许配对 :func:`~django.contrib.auth.authenticate()`  和 :func:`~django.contrib.auth.login()` ：当返回用户对象时 :func:`~django.contrib.auth.authenticate()`  设置 ``user.backend`` 属性。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:434
msgid ""
"Use the ``backend`` in :setting:`AUTHENTICATION_BACKENDS`, if there is only "
"one."
msgstr "使用 :setting:`AUTHENTICATION_BACKENDS` 存在的 ``backend`` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:436
msgid "Otherwise, raise an exception."
msgstr "否则，抛出一个异常。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:438
msgid ""
"In cases 1 and 2, the value of the ``backend`` argument or the "
"``user.backend`` attribute should be a dotted import path string (like that "
"found in :setting:`AUTHENTICATION_BACKENDS`), not the actual backend class."
msgstr "在1和2中，``backend`` 参数和 ``user.backend`` 属性应该是完整的导入路径（像 :setting:`AUTHENTICATION_BACKENDS` 里的路径一样），而不是真实的后端类。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:443
msgid "How to log a user out"
msgstr "用户如何登出"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:447
msgid ""
"To log out a user who has been logged in via "
":func:`django.contrib.auth.login()`, use "
":func:`django.contrib.auth.logout()` within your view. It takes an "
":class:`~django.http.HttpRequest` object and has no return value. Example::"
msgstr "如果已经通过 :func:`django.contrib.auth.login()` 登录的用户想退出登录，可以在视图中使用 :func:`django.contrib.auth.logout()` 。需要传入 :class:`~django.http.HttpRequest` 对象，并且该函数不会返回值。例如："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:459
msgid ""
"Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if "
"the user wasn't logged in."
msgstr "注意，如果用户未登录，:func:`~django.contrib.auth.logout()` 不会报错。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:462
msgid ""
"When you call :func:`~django.contrib.auth.logout()`, the session data for "
"the current request is completely cleaned out. All existing data is removed."
" This is to prevent another person from using the same Web browser to log in"
" and have access to the previous user's session data. If you want to put "
"anything into the session that will be available to the user immediately "
"after logging out, do that *after* calling "
":func:`django.contrib.auth.logout()`."
msgstr "调用 :func:`~django.contrib.auth.logout()` 后，当前请求的会话数据会被全部清除。这是为了防止其他使用同一个浏览器的用户访问前一名用户的会话数据。如果想在登出后立即向用户提供的会话中放入任何内容，请在调用 :func:`django.contrib.auth.logout()` 之后执行此操作。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:471
msgid "Limiting access to logged-in users"
msgstr "限制对未登录用户的访问"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:474
msgid "The raw way"
msgstr "原始方式"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:476
msgid ""
"The simple, raw way to limit access to pages is to check "
":attr:`request.user.is_authenticated "
"<django.contrib.auth.models.User.is_authenticated>` and either redirect to a"
" login page::"
msgstr "限制访问页面最简单的办法就是检查 :attr:`request.user.is_authenticated <django.contrib.auth.models.User.is_authenticated>` 并重定向到登录页面。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:489
msgid "...or display an error message::"
msgstr "或者显示一个错误信息："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:501
msgid "The ``login_required`` decorator"
msgstr "``login_required`` 装饰器"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:505
msgid ""
"As a shortcut, you can use the convenient "
":func:`~django.contrib.auth.decorators.login_required` decorator::"
msgstr "作为快捷方式，你可以使用 :func:`~django.contrib.auth.decorators.login_required` 装饰器:"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:514
msgid ""
":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ":func:`~django.contrib.auth.decorators.login_required` 会执行以下操作："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:516
msgid ""
"If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`, passing the current absolute path in the query string. "
"Example: ``/accounts/login/?next=/polls/3/``."
msgstr "如果用户没有登录，会重定向到  :setting:`settings.LOGIN_URL <LOGIN_URL>` ，并传递绝对路径到查询字符串中。例如： ``/accounts/login/?next=/polls/3/`` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:520
msgid ""
"If the user is logged in, execute the view normally. The view code is free "
"to assume the user is logged in."
msgstr "如果用户已经登录，则正常执行视图。视图里的代码可以假设用户已经登录了。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:523
msgid ""
"By default, the path that the user should be redirected to upon successful "
"authentication is stored in a query string parameter called ``\"next\"``. If"
" you would prefer to use a different name for this parameter, "
":func:`~django.contrib.auth.decorators.login_required` takes an optional "
"``redirect_field_name`` parameter::"
msgstr "默认情况下，成功验证时用户跳转的路径保存在名为 ``\"next\"`` 的查询字符串参数中。如果你希望这个参数使用不同名称，请在 :func:`~django.contrib.auth.decorators.login_required` 中传递可选参数 ``redirect_field_name`` ："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:535
msgid ""
"Note that if you provide a value to ``redirect_field_name``, you will most "
"likely need to customize your login template as well, since the template "
"context variable which stores the redirect path will use the value of "
"``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr "注意，如果你提供了 ``redirect_field_name`` 值，则很可能也需要自定义登录模板，因为存储重定向路径的模板上下文变量使用的是 ``redirect_field_name`` 值，而不是 ``\"next\"`` （默认情况下）。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:540
msgid ""
":func:`~django.contrib.auth.decorators.login_required` also takes an "
"optional ``login_url`` parameter. Example::"
msgstr ":func:`~django.contrib.auth.decorators.login_required` 也有可选参数 ``login_url`` 。例如："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:549
msgid ""
"Note that if you don't specify the ``login_url`` parameter, you'll need to "
"ensure that the :setting:`settings.LOGIN_URL <LOGIN_URL>` and your login "
"view are properly associated. For example, using the defaults, add the "
"following lines to your URLconf::"
msgstr "注意，如果你没有指定参数 ``login_url`` ，你需要确认 :setting:`settings.LOGIN_URL <LOGIN_URL>`  和登录视图是正确关联的。例如，使用默认方式，在 URL 配置文件里添加下面这行："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:558
msgid ""
"The :setting:`settings.LOGIN_URL <LOGIN_URL>` also accepts view function "
"names and :ref:`named URL patterns <naming-url-patterns>`. This allows you "
"to freely remap your login view within your URLconf without having to update"
" the setting."
msgstr ":setting:`settings.LOGIN_URL <LOGIN_URL>` 也接受视图方法名和 :ref:`named URL patterns <naming-url-patterns>` 。这样你可以在 URLconf 里自由地重新映射你的登录视图，而不需更新配置文件。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:565
msgid ""
"The ``login_required`` decorator does NOT check the ``is_active`` flag on a "
"user, but the default :setting:`AUTHENTICATION_BACKENDS` reject inactive "
"users."
msgstr "``login_required`` 装饰器不会检查用户的 ``is_active`` 标识状态，但默认的 :setting:`AUTHENTICATION_BACKENDS` 会拒绝非正常用户。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:571
msgid ""
"If you are writing custom views for Django's admin (or need the same "
"authorization check that the built-in views use), you may find the "
":func:`django.contrib.admin.views.decorators.staff_member_required` "
"decorator a useful alternative to ``login_required()``."
msgstr "如果你打算编写自定义的 Django 管理模块视图（或需要与内置视图使用同样的权限检查），你将会发现 :func:`django.contrib.admin.views.decorators.staff_member_required` 装饰器是 ``login_required()`` 的一个有用的替代方法。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:579
msgid "The ``LoginRequired`` mixin"
msgstr "``LoginRequired`` Mixin"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:581
msgid ""
"When using :doc:`class-based views </topics/class-based-views/index>`, you "
"can achieve the same behavior as with ``login_required`` by using the "
"``LoginRequiredMixin``. This mixin should be at the leftmost position in the"
" inheritance list."
msgstr "使用基于类的视图时，可以使用 ``LoginRequiredMixin`` 实现和 ``login_required`` 相同的行为。这个 Mixin 应该在继承列表中最左侧的位置。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:588
msgid ""
"If a view is using this mixin, all requests by non-authenticated users will "
"be redirected to the login page or shown an HTTP 403 Forbidden error, "
"depending on the "
":attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception` parameter."
msgstr "如果一个视图使用 Mixin ，那么未经验证用户的所有请求都会被重定向到登录页面或者显示 HTTP 403 Forbidden 错误，这取决于 :attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception` 参数。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:593
msgid ""
"You can set any of the parameters of "
":class:`~django.contrib.auth.mixins.AccessMixin` to customize the handling "
"of unauthorized users::"
msgstr "你可以设置 :class:`~django.contrib.auth.mixins.AccessMixin` 的任何参数来自定义未验证用户的处理："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:606
msgid ""
"Just as the ``login_required`` decorator, this mixin does NOT check the "
"``is_active`` flag on a user, but the default "
":setting:`AUTHENTICATION_BACKENDS` reject inactive users."
msgstr "同 ``login_required`` 装饰器一样，Mixin 不会检查用户的 ``is_active`` 标识状态，但默认的 :setting:`AUTHENTICATION_BACKENDS` 会拒绝非正常用户。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:613
msgid "Limiting access to logged-in users that pass a test"
msgstr "限制对通过测试的登录用户的访问"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:615
msgid ""
"To limit access based on certain permissions or some other test, you'd do "
"essentially the same thing as described in the previous section."
msgstr "根据某些权限或者其他测试来限制访问，你基本上可以执行和上一节所述同样的操作。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:618
msgid ""
"The simple way is to run your test on :attr:`request.user "
"<django.http.HttpRequest.user>` in the view directly. For example, this view"
" checks to make sure the user has an email in the desired domain and if not,"
" redirects to the login page::"
msgstr "最简单的方法是在视图里直接对 :attr:`request.user <django.http.HttpRequest.user>` 进行测试。举例，这个视图检查用户是否拥有特定域名的邮箱，否则会重定向到登录页："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:632
msgid ""
"As a shortcut, you can use the convenient ``user_passes_test`` decorator "
"which performs a redirect when the callable returns ``False``::"
msgstr "作为快捷方式，你可以方便的调用 ``user_passes_test`` 装饰器，当调用返回 ``False`` 时会执行重定向。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:644
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes a required "
"argument: a callable that takes a :class:`~django.contrib.auth.models.User` "
"object and returns ``True`` if the user is allowed to view the page. Note "
"that :func:`~django.contrib.auth.decorators.user_passes_test` does not "
"automatically check that the :class:`~django.contrib.auth.models.User` is "
"not anonymous."
msgstr ":func:`~django.contrib.auth.decorators.user_passes_test` 接受一个必要的参数：一个带有:class:`~django.contrib.auth.models.User` 对象的调用，如果允许用户访问这个页面，则返回 ``True`` 。注意，:func:`~django.contrib.auth.decorators.user_passes_test` 不会自动检查用户是否匿名。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:652
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes two optional "
"arguments:"
msgstr ":func:`~django.contrib.auth.decorators.user_passes_test` 可以传递两个可选参数："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:658
msgid "``login_url``"
msgstr "``login_url``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:656
msgid ""
"Lets you specify the URL that users who don't pass the test will be "
"redirected to. It may be a login page and defaults to "
":setting:`settings.LOGIN_URL <LOGIN_URL>` if you don't specify one."
msgstr "允许你指定用户没有通过测试时跳转的地址。它可能是一个登录页面，如果你没指定，默认是 :setting:`settings.LOGIN_URL <LOGIN_URL>` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:664
msgid "``redirect_field_name``"
msgstr "``redirect_field_name``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:661
msgid ""
"Same as for :func:`~django.contrib.auth.decorators.login_required`. Setting "
"it to ``None`` removes it from the URL, which you may want to do if you are "
"redirecting users that don't pass the test to a non-login page where there's"
" no \"next page\"."
msgstr "与 :func:`~django.contrib.auth.decorators.login_required` 相同。如果你想把没通过检查的用户重定向到没有 \"next page\" 的非登录页面时，把它设置为 ``None`` ，这样它会在 URL 中移除。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:666
#: ../../../../sources/2.2/docs/topics/db/managers.txt:151
#: ../../../../sources/2.2/docs/topics/db/managers.txt:300
#: ../../../../sources/2.2/docs/topics/db/queries.txt:1289
#: ../../../../sources/2.2/docs/topics/db/search.txt:61
#: ../../../../sources/2.2/docs/topics/db/sql.txt:259
#: ../../../../sources/2.2/docs/topics/email.txt:289
#: ../../../../sources/2.2/docs/topics/email.txt:341
#: ../../../../sources/2.2/docs/topics/forms/media.txt:318
#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:23
#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:445
#: ../../../../sources/2.2/docs/topics/http/urls.txt:154
#: ../../../../sources/2.2/docs/topics/http/urls.txt:463
#: ../../../../sources/2.2/docs/topics/http/urls.txt:863
#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:118
#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:135
#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:327
#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:340
#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:356
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:206
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:308
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1873
#: ../../../../sources/2.2/docs/topics/settings.txt:256
#: ../../../../sources/2.2/docs/topics/signals.txt:219
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:848
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1152
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1190
msgid "For example::"
msgstr "例如::"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:676
msgid ""
"When using :doc:`class-based views </topics/class-based-views/index>`, you "
"can use the ``UserPassesTestMixin`` to do this."
msgstr "使用基于类的视图时，可以使用 ``UserPassesTestMixin`` 执行此操作。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:681
msgid ""
"You have to override the ``test_func()`` method of the class to provide the "
"test that is performed. Furthermore, you can set any of the parameters of "
":class:`~django.contrib.auth.mixins.AccessMixin` to customize the handling "
"of unauthorized users::"
msgstr "你必须覆盖类方法 ``test_func()`` 以提供执行的测试。此外，还可以设置 :class:`~django.contrib.auth.mixins.AccessMixin` 的任何参数来自定义处理未授权用户："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:695
msgid ""
"You can also override the ``get_test_func()`` method to have the mixin use a"
" differently named function for its checks (instead of :meth:`test_func`)."
msgstr "你也可以覆盖 ``get_test_func()`` 方法，以使 mixin 对其检查使用不同名称的函数（而不是 :meth:`test_func` ）。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:699
msgid "Stacking ``UserPassesTestMixin``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/auth/default.txt:701
msgid ""
"Due to the way ``UserPassesTestMixin`` is implemented, you cannot stack them"
" in your inheritance list. The following does NOT work::"
msgstr "由于实现了 ``UserPassesTestMixin`` 方式，不能在继承列表中堆砌它们。下述方式将不能工作："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:715
msgid ""
"If ``TestMixin1`` would call ``super()`` and take that result into account, "
"``TestMixin1`` wouldn't work standalone anymore."
msgstr "如果 ``TestMixin1`` 调用 ``super()`` 并把结果考虑在内，``TestMixin1`` 将不能独立运行。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:721
msgid "The ``permission_required`` decorator"
msgstr "``permission_required`` 装饰器"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:725
msgid ""
"It's a relatively common task to check whether a user has a particular "
"permission. For that reason, Django provides a shortcut for that case: the "
":func:`~django.contrib.auth.decorators.permission_required()` decorator.::"
msgstr "检查用户是否拥有特定的权限是一个相对常见的任务。出于这个原因，Django 提供了一个快捷方式：:func:`~django.contrib.auth.decorators.permission_required()` 装饰器："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:735
msgid ""
"Just like the :meth:`~django.contrib.auth.models.User.has_perm` method, "
"permission names take the form ``\"<app label>.<permission codename>\"`` "
"(i.e. ``polls.can_vote`` for a permission on a model in the ``polls`` "
"application)."
msgstr "就像 :meth:`~django.contrib.auth.models.User.has_perm` 方法一样，权限名称采用 ``\"<app label>.<permission codename>\"`` 形式（比如 ``polls.can_vote`` 就是 ``polls`` 应用程序下的模型的权限）。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:740
msgid ""
"The decorator may also take an iterable of permissions, in which case the "
"user must have all of the permissions in order to access the view."
msgstr "装饰器也可以接受可迭代权限，在这种情况下，用户必须拥有所有权限才能访问视图。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:743
msgid ""
"Note that :func:`~django.contrib.auth.decorators.permission_required()` also"
" takes an optional ``login_url`` parameter::"
msgstr "注意， :func:`~django.contrib.auth.decorators.permission_required()` 也可以接受可选的 ``login_url`` 参数："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:752
msgid ""
"As in the :func:`~django.contrib.auth.decorators.login_required` decorator, "
"``login_url`` defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr "和 :func:`~django.contrib.auth.decorators.login_required` 装饰器一样， ``login_url`` 默认是:setting:`settings.LOGIN_URL <LOGIN_URL>`。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:755
msgid ""
"If the ``raise_exception`` parameter is given, the decorator will raise "
":exc:`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 "
"(HTTP Forbidden) view<http_forbidden_view>` instead of redirecting to the "
"login page."
msgstr "如果有 ``raise_exception`` 参数，那么装饰器将引发 :exc:`~django.core.exceptions.PermissionDenied` 错误，提示 :ref:`the 403 (HTTP Forbidden) view<http_forbidden_view>` 而不是跳转到登录页面。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:760
msgid ""
"If you want to use ``raise_exception`` but also give your users a chance to "
"login first, you can add the "
":func:`~django.contrib.auth.decorators.login_required` decorator::"
msgstr "如果你想使用 ``raise_exception`` 但也想给用户登录的机会，那需要添加 :func:`~django.contrib.auth.decorators.login_required` 装饰器："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:771
msgid ""
"This also avoids a redirect loop when :class:`.LoginView`'s "
"``redirect_authenticated_user=True`` and the logged-in user doesn't have all"
" of the required permissions."
msgstr "当 :class:`.LoginView` 的 ``redirect_authenticated_user=True`` 并且已登录用户没有所有必须的权限时，这避免了重定向循环。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:778
msgid "The ``PermissionRequiredMixin`` mixin"
msgstr "``PermissionRequiredMixin`` Mixin"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:780
msgid ""
"To apply permission checks to :doc:`class-based views </ref/class-based-"
"views/index>`, you can use the ``PermissionRequiredMixin``:"
msgstr "在基类视图中应用权限检查，你可以使用 ``PermissionRequiredMixin`` ："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:785
msgid ""
"This mixin, just like the ``permission_required`` decorator, checks whether "
"the user accessing a view has all given permissions. You should specify the "
"permission (or an iterable of permissions) using the ``permission_required``"
" parameter::"
msgstr "和 ``permission_required`` 装饰器一样，Mixin 检查用户访问的视图是否拥有全部的权限。你应该使用 ``permission_required`` 指定权限（或者可迭代权限）："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:797
msgid ""
"You can set any of the parameters of "
":class:`~django.contrib.auth.mixins.AccessMixin` to customize the handling "
"of unauthorized users."
msgstr "你可以设置 :class:`~django.contrib.auth.mixins.AccessMixin` 的任意参数来自定义处理没有权限的用户。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:801
msgid "You may also override these methods:"
msgstr "你可能同样需要重写这些方法："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:805
msgid ""
"Returns an iterable of permission names used by the mixin. Defaults to the "
"``permission_required`` attribute, converted to a tuple if necessary."
msgstr "返回 Mixin 使用的可迭代权限的名称。默认为 ``permission_required`` 属性，如果需要可以转化为元组。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:811
msgid ""
"Returns a boolean denoting whether the current user has permission to "
"execute the decorated view. By default, this returns the result of calling "
":meth:`~django.contrib.auth.models.User.has_perms()` with the list of "
"permissions returned by :meth:`get_permission_required()`."
msgstr "返回布尔值，表示当前用户是否拥有权限执行装饰器视图。默认情况下，这将返回调用 :meth:`~django.contrib.auth.models.User.has_perms()` 的结果，其中包括返回 :meth:`get_permission_required()` 的权限列表。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:817
msgid "Redirecting unauthorized requests in class-based views"
msgstr "在基于类的视图中重定向未通过验证的请求"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:819
msgid ""
"To ease the handling of access restrictions in :doc:`class-based views </ref"
"/class-based-views/index>`, the ``AccessMixin`` can be used to configure the"
" behavior of a view when access is denied. Authenticated users are denied "
"access with an HTTP 403 Forbidden response. Anonymous users are redirected "
"to the login page or shown an HTTP 403 Forbidden response, depending on the "
":attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception` attribute."
msgstr "为了简化基于类的视图限制访问的处理方式，``AccessMixin`` 被用来配置当访问被拒绝时的视图行为。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:828
msgid ""
"In older versions, authenticated users who lacked permissions were "
"redirected to the login page (which resulted in a loop) instead of receiving"
" an HTTP 403 Forbidden response."
msgstr "在旧版本中，缺少权限的已验证用户会被重定向到登录页面（这将导致循环），而不是返回 HTTP 403 禁止访问。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:836
msgid ""
"Default return value for :meth:`get_login_url`.  Defaults to ``None`` in "
"which case :meth:`get_login_url` falls back to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`."
msgstr ":meth:`get_login_url` 的缺省返回值。默认是 ``None`` ，在这种情况下， :meth:`get_login_url` 会回退至 :setting:`settings.LOGIN_URL <LOGIN_URL>`。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:842
msgid ""
"Default return value for :meth:`get_permission_denied_message`. Defaults to "
"an empty string."
msgstr ":meth:`get_permission_denied_message` 的缺省返回值。默认是空字符串。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:847
msgid ""
"Default return value for :meth:`get_redirect_field_name`. Defaults to "
"``\"next\"``."
msgstr ":meth:`get_redirect_field_name` 的缺省返回值。默认是 ``\"next\"`` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:852
msgid ""
"If this attribute is set to ``True``, a "
":class:`~django.core.exceptions.PermissionDenied` exception is raised when "
"the conditions are not met.  When ``False`` (the default), anonymous users "
"are redirected to the login page."
msgstr "如果这个属性被设置为 ``True`` ，当条件不被满足的时候会引发 :class:`~django.core.exceptions.PermissionDenied` 异常。如果是 ``False`` （默认），匿名用户会被重定向至登录页面。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:859
msgid ""
"Returns the URL that users who don't pass the test will be redirected to. "
"Returns :attr:`login_url` if set, or :setting:`settings.LOGIN_URL "
"<LOGIN_URL>` otherwise."
msgstr "返回当用户没有通过测试时将被重定向的网址。如果已设置，将返回 :attr:`login_url` ，否则返回 :setting:`settings.LOGIN_URL <LOGIN_URL>` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:865
msgid ""
"When :attr:`raise_exception` is ``True``, this method can be used to control"
" the error message passed to the error handler for display to the user. "
"Returns the :attr:`permission_denied_message` attribute by default."
msgstr "当 :attr:`raise_exception` 为 ``True`` 时，这个方法可以控制传递给错误处理程序的错误信息，以便显示给用户。默认返回 :attr:`permission_denied_message` 属性。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:872
msgid ""
"Returns the name of the query parameter that will contain the URL the user "
"should be redirected to after a successful login. If you set this to "
"``None``, a query parameter won't be added. Returns the "
":attr:`redirect_field_name` attribute by default."
msgstr "返回查询参数名，包含用户登录成功后重定向的 URL 。如果这个值设置为 ``None`` ，将不会添加查询参数。默认返回 :attr:`redirect_field_name` 属性。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:879
msgid ""
"Depending on the value of ``raise_exception``, the method either raises a "
":exc:`~django.core.exceptions.PermissionDenied` exception or redirects the "
"user to the ``login_url``, optionally including the ``redirect_field_name`` "
"if it is set."
msgstr "根据 ``raise_exception`` 的值，这个方法将会引发 :exc:`~django.core.exceptions.PermissionDenied` 异常或重定向用户至 ``login_url`` ，如果已设置，则可选地包含 ``redirect_field_name`` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:889
msgid "Session invalidation on password change"
msgstr "密码更改时会话失效"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:891
msgid ""
"If your :setting:`AUTH_USER_MODEL` inherits from "
":class:`~django.contrib.auth.models.AbstractBaseUser` or implements its own "
":meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash()`"
" method, authenticated sessions will include the hash returned by this "
"function. In the :class:`~django.contrib.auth.models.AbstractBaseUser` case,"
" this is an HMAC of the password field. Django verifies that the hash in the"
" session for each request matches the one that's computed during the "
"request. This allows a user to log out all of their sessions by changing "
"their password."
msgstr "如果 :setting:`AUTH_USER_MODEL` 继承自 :class:`~django.contrib.auth.models.AbstractBaseUser` 或实现了自己的 :meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash()` 方法，已验证的会话将包含这个函数返回的哈希值。在 :class:`~django.contrib.auth.models.AbstractBaseUser` 的情况下，这是密码字段的 HMAC 。Django 验证每个请求的会话中的哈希是否与请求期间计算的哈希相匹配。这允许用户修改密码来注销所有会话。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:900
msgid ""
"The default password change views included with Django, "
":class:`~django.contrib.auth.views.PasswordChangeView` and the "
"``user_change_password`` view in the :mod:`django.contrib.auth` admin, "
"update the session with the new password hash so that a user changing their "
"own password won't log themselves out. If you have a custom password change "
"view and wish to have similar behavior, use the "
":func:`update_session_auth_hash` function."
msgstr "Django 包含默认的密码修改视图，:class:`~django.contrib.auth.views.PasswordChangeView` 和 ``user_change_password`` 视图在 :mod:`django.contrib.auth` admin 中，将使用新密码的哈希更新会话，因此用户修改密码后不会被注销。如果你有自定义的密码修改视图，并期望有同样的行为，可以使用 :func:`update_session_auth_hash` 函数。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:910
msgid ""
"This function takes the current request and the updated user object from "
"which the new session hash will be derived and updates the session hash "
"appropriately. It also rotates the session key so that a stolen session "
"cookie will be invalidated."
msgstr "这个函数接受当前请求和从新会话哈希派生时更新的用户对象，并会更新哈希值。它也会替换哈希值因此被盗用的会话cookie会无效。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:915
#: ../../../../sources/2.2/docs/topics/http/views.txt:112
msgid "Example usage::"
msgstr "用法示例："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:930
msgid ""
"Since "
":meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash()`"
" is based on :setting:`SECRET_KEY`, updating your site to use a new secret "
"will invalidate all existing sessions."
msgstr "因为 :meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash()` 是基于 :setting:`SECRET_KEY` 的，因此更新站点以使用密钥将会导致所有存在的会话失效。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:938
msgid "Authentication Views"
msgstr "验证视图"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:942
msgid ""
"Django provides several views that you can use for handling login, logout, "
"and password management. These make use of the :ref:`stock auth forms "
"<built-in-auth-forms>` but you can pass in your own forms as well."
msgstr "Django 提供许多可以用来处理登录、注销和密码管理的视图。这些利用了  :ref:`stock auth forms <built-in-auth-forms>` ，但你也可以使用自己的表单。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:946
msgid ""
"Django provides no default template for the authentication views. You should"
" create your own templates for the views you want to use. The template "
"context is documented in each view, see :ref:`all-authentication-views`."
msgstr "Django 没有为验证视图提供默认模板。你可以为你打算使用的视图创建自己的模板。每个视图都记录了模板上下文，详情查看 :ref:`all-authentication-views` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:953
msgid "Using the views"
msgstr "使用视图"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:955
msgid ""
"There are different methods to implement these views in your project. The "
"easiest way is to include the provided URLconf in "
"``django.contrib.auth.urls`` in your own URLconf, for example::"
msgstr "在项目中可以使用不同方法来实现这些视图。最简单的方法就是在 URLconf 中包含  ``django.contrib.auth.urls`` 提供的 URLconf 。举例："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:963
msgid "This will include the following URL patterns::"
msgstr "这将包含以下 URL 模式："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:974
msgid ""
"The views provide a URL name for easier reference. See :doc:`the URL "
"documentation </topics/http/urls>` for details on using named URL patterns."
msgstr "视图提供 URL 名称以便参考。有关使用命名 URL 模式的使用详情参考 :doc:`the URL documentation </topics/http/urls>` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:977
msgid ""
"If you want more control over your URLs, you can reference a specific view "
"in your URLconf::"
msgstr "如果你想更好的控制 URL ，你可以在你的 URLconf 中引用特定的视图："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:986
msgid ""
"The views have optional arguments you can use to alter the behavior of the "
"view. For example, if you want to change the template name a view uses, you "
"can provide the ``template_name`` argument. A way to do this is to provide "
"keyword arguments in the URLconf, these will be passed on to the view. For "
"example::"
msgstr "这个视图具有更改视图行为的可选参数。例如，如果你想改变视图使用的模板名称，你可以提供 ``template_name`` 参数。在 URLconf 中提供关键字参数，这些参数将被传递给视图。举例："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:998
msgid ""
"All views are :doc:`class-based </topics/class-based-views/index>`, which "
"allows you to easily customize them by subclassing."
msgstr "所有视图都是基于类的，这就允许你通过子类去方便地自定义它们。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1004
msgid "All authentication views"
msgstr "所有的验证视图"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1006
msgid ""
"This is a list with all the views ``django.contrib.auth`` provides. For "
"implementation details see :ref:`using-the-views`."
msgstr "这是一个 ``django.contrib.auth`` 提供的所有视图列表。有关实现细节可参考 :ref:`using-the-views` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1011
msgid "**URL name:** ``login``"
msgstr "**URL name:** ``login``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1013
msgid ""
"See :doc:`the URL documentation </topics/http/urls>` for details on using "
"named URL patterns."
msgstr "有关使用命名 URL 模式的细节可参考 :doc:`the URL documentation </topics/http/urls>` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1016
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1155
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1207
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1234
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1265
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1355
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1376
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1419
msgid "**Attributes:**"
msgstr "属性："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1018
msgid ""
"``template_name``: The name of a template to display for the view used to "
"log the user in. Defaults to :file:`registration/login.html`."
msgstr "``template_name`` ：用户登录的视图所使用的模板名称。默认指向 :file:`registration/login.html` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1021
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after login. Defaults to ``next``."
msgstr "``redirect_field_name`` ： ``GET`` 字段包含的登录后跳转 URL 的参数名称。默认是 ``next`` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1024
msgid ""
"``authentication_form``: A callable (typically just a form class) to use for"
" authentication. Defaults to "
":class:`~django.contrib.auth.forms.AuthenticationForm`."
msgstr "``authentication_form`` ：用于验证的调用（通常是一个表单类）。默认是 :class:`~django.contrib.auth.forms.AuthenticationForm` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1028
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1167
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1221
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1240
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1293
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1361
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1401
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1424
msgid ""
"``extra_context``: A dictionary of context data that will be added to the "
"default context data passed to the template."
msgstr "``extra_context`` ：上下文数据字典，通过模板添加到默认上下文数据中。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1031
msgid ""
"``redirect_authenticated_user``: A boolean that controls whether or not "
"authenticated users accessing the login page will be redirected as if they "
"had just successfully logged in. Defaults to ``False``."
msgstr "``redirect_authenticated_user`` ：布尔值，用来控制已验证的用户访问登录页面是否被重定向，就像他们刚刚成功登录一样。默认是 ``False`` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1037
msgid ""
"If you enable ``redirect_authenticated_user``, other websites will be able "
"to determine if their visitors are authenticated on your site by requesting "
"redirect URLs to image files on your website. To avoid this \"`social media "
"fingerprinting <https://robinlinus.github.io/socialmedia-leak/>`_\" "
"information leakage, host all images and your favicon on a separate domain."
msgstr "如果你启用了 ``redirect_authenticated_user`` ，其他网站通过重定向请求你的网站的图片文件的方式来确定他们的访客是否是你网站的已验证用户。为了避免这个 \"`social media fingerprinting <https://robinlinus.github.io/socialmedia-leak/>`_\" 信息泄露，请将所有图片和 favicon 都托管在单独的域名中。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1044
msgid ""
"Enabling ``redirect_authenticated_user`` can also result in a redirect loop "
"when using the :func:`.permission_required` decorator unless the "
"``raise_exception`` parameter is used."
msgstr "启用 ``redirect_authenticated_user`` 也会在使用 :func:`.permission_required` 装饰器的时候，导致重定向循环，除非 ``raise_exception`` 参数被使用。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1048
msgid ""
"``success_url_allowed_hosts``: A :class:`set` of hosts, in addition to "
":meth:`request.get_host() <django.http.HttpRequest.get_host>`, that are safe"
" for redirecting after login. Defaults to an empty :class:`set`."
msgstr "``success_url_allowed_hosts`` ：除了 :meth:`request.get_host() <django.http.HttpRequest.get_host>` 之外的主机集合，登录后能安全地重定向。默认是空集。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1052
msgid "Here's what ``LoginView`` does:"
msgstr "``LoginView`` 能做什么："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1054
msgid ""
"If called via ``GET``, it displays a login form that POSTs to the same URL. "
"More on this in a bit."
msgstr "如果通过 ``GET`` 调用，它将显示 POST 到同一 URL 地址的登录表单。稍后会详细介绍。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1057
msgid ""
"If called via ``POST`` with user submitted credentials, it tries to log the "
"user in. If login is successful, the view redirects to the URL specified in "
"``next``. If ``next`` isn't provided, it redirects to "
":setting:`settings.LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (which defaults "
"to ``/accounts/profile/``). If login isn't successful, it redisplays the "
"login form."
msgstr "如果用户提交的数据通过 ``POST`` 调用，那它将试着让用户登录。如果登录成功，那么视图将重定向到 ``next`` 指定的 URL 。如果没有提供 ``next`` ，它将重定向到 :setting:`settings.LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` （默认 ``/accounts/profile/`` ）。如果登录没有成功，它将重新显示登录表单。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1064
msgid ""
"It's your responsibility to provide the html for the login template , called"
" ``registration/login.html`` by default. This template gets passed four "
"template context variables:"
msgstr "你需要提供登录模板，默认调用 ``registration/login.html`` 。这个模板传递四个模板上下文变量："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1068
msgid ""
"``form``: A :class:`~django.forms.Form` object representing the "
":class:`~django.contrib.auth.forms.AuthenticationForm`."
msgstr "``form`` ：一个代表 :class:`~django.contrib.auth.forms.AuthenticationForm` 的 :class:`~django.forms.Form` 对象。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1071
msgid ""
"``next``: The URL to redirect to after successful login. This may contain a "
"query string, too."
msgstr "``next`` ：登录成功后跳转的网址。这可能包含查询字段。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1074
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1178
msgid ""
"``site``: The current :class:`~django.contrib.sites.models.Site`, according "
"to the :setting:`SITE_ID` setting. If you don't have the site framework "
"installed, this will be set to an instance of "
":class:`~django.contrib.sites.requests.RequestSite`, which derives the site "
"name and domain from the current :class:`~django.http.HttpRequest`."
msgstr "``site`` ：根据 :setting:`SITE_ID` 设置的当前站点。如果你还没有安装站点框架，会将其设置为 :class:`~django.contrib.sites.requests.RequestSite` 实例，该实例从当前 :class:`~django.http.HttpRequest` 中派生出站点名和域名。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1081
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1185
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1316
msgid ""
"``site_name``: An alias for ``site.name``. If you don't have the site "
"framework installed, this will be set to the value of "
":attr:`request.META['SERVER_NAME'] <django.http.HttpRequest.META>`. For more"
" on sites, see :doc:`/ref/contrib/sites`."
msgstr "``site_name`` ：``site.name`` 的别名。如果你还没有按照站点框架，它将设置为 :attr:`request.META['SERVER_NAME'] <django.http.HttpRequest.META>` 的值。更多关于站点信息，请参考 :doc:`/ref/contrib/sites` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1086
msgid ""
"If you'd prefer not to call the template :file:`registration/login.html`, "
"you can pass the ``template_name`` parameter via the extra arguments to the "
"``as_view`` method in your URLconf. For example, this URLconf line would use"
" :file:`myapp/login.html` instead::"
msgstr "如果你不愿意调用模板 :file:`registration/login.html` ，你可以通过附加参数的形式传递 ``template_name`` 参数给你的 URLconf 中的 ``as_view`` 方法。比如，这行 URLconf 将使用 :file:`myapp/login.html` 代替："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1093
msgid ""
"You can also specify the name of the ``GET`` field which contains the URL to"
" redirect to after login using ``redirect_field_name``. By default, the "
"field is called ``next``."
msgstr "你也可以使用 ``redirect_field_name`` 指定 ``GET`` 字段的名称，这个字段包含登陆后跳转的 URL 地址。默认情况下，这个字段为 ``next`` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1097
msgid ""
"Here's a sample :file:`registration/login.html` template you can use as a "
"starting point. It assumes you have a :file:`base.html` template that "
"defines a ``content`` block:"
msgstr "下面是一个简单的 :file:`registration/login.html` 模板。它假设你有 :file:`base.html` 模板，并且已经定义了 ``content`` 块："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1142
msgid ""
"If you have customized authentication (see :doc:`Customizing Authentication "
"</topics/auth/customizing>`) you can use a custom authentication form by "
"setting the ``authentication_form`` attribute. This form must accept a "
"``request`` keyword argument in its ``__init__()`` method and provide a "
"``get_user()`` method which returns the authenticated user object (this "
"method is only ever called after successful form validation)."
msgstr "如果你具有自定义身份验证（查看 :doc:`Customizing Authentication </topics/auth/customizing>` ），可以通过设置 ``authentication_form`` 属性来使用自定义的验证码模板。此表单必须在它的 ``__init__()`` 方法中接受 ``request`` 关键字参数，并且提供一个返回已验证用户对象的 ``get_user()`` 方法（这个方法只会在表单成功验证后调用）。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1151
msgid "Logs a user out."
msgstr "注销用户"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1153
msgid "**URL name:** ``logout``"
msgstr "**URL name:** ``logout``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1157
msgid ""
"``next_page``: The URL to redirect to after logout. Defaults to "
":setting:`settings.LOGOUT_REDIRECT_URL <LOGOUT_REDIRECT_URL>`."
msgstr "``next_page`` ：注销后将要跳转的 URL 。默认是 :setting:`settings.LOGOUT_REDIRECT_URL <LOGOUT_REDIRECT_URL>` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1160
msgid ""
"``template_name``: The full name of a template to display after logging the "
"user out. Defaults to :file:`registration/logged_out.html`."
msgstr "``template_name`` ：用户注销后显示的模板地址。默认是 :file:`registration/logged_out.html` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1163
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Defaults to ``next``. Overrides the ``next_page``"
" URL if the given ``GET`` parameter is passed."
msgstr "``redirect_field_name`` ：注销后包含重定向 URL 的 ``GET`` 字段名称。默认是 ``next`` 。如果传递给定的 ``GET`` 参数，将会覆盖 ``next_page`` URL。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1170
msgid ""
"``success_url_allowed_hosts``: A :class:`set` of hosts, in addition to "
":meth:`request.get_host() <django.http.HttpRequest.get_host>`, that are safe"
" for redirecting after logout. Defaults to an empty :class:`set`."
msgstr "``success_url_allowed_hosts`` ：除了 :meth:`request.get_host() <django.http.HttpRequest.get_host>` 之外的主机集合，在注销后可以安全地重定向。默认是空集。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1174
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1224
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1303
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1404
msgid "**Template context:**"
msgstr "**Template context:**"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1176
msgid "``title``: The string \"Logged out\", localized."
msgstr "``title`` ：字符串 \"已注销\"，已本地化。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1192
msgid "Logs a user out, then redirects to the login page."
msgstr "用户注销，然后重定向到登录页面。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1194
msgid "**URL name:** No default URL provided"
msgstr "**URL name:** 没有提供默认的 URL "

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1196
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1441
msgid "**Optional arguments:**"
msgstr "可选参数："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1198
#: ../../../../sources/2.2/docs/topics/auth/default.txt:1443
msgid ""
"``login_url``: The URL of the login page to redirect to. Defaults to "
":setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr "``login_url`` ：要重定向到登录页面的 URL 。如果没有提供，默认是 :setting:`settings.LOGIN_URL <LOGIN_URL>` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1203
msgid "**URL name:** ``password_change``"
msgstr "**URL name:** ``password_change``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1205
msgid "Allows a user to change their password."
msgstr "允许用户修改密码。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1209
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password change form. Defaults to "
":file:`registration/password_change_form.html` if not supplied."
msgstr "``template_name`` ：用于显示密码修改表单的模板全称。如果没提供则默认 :file:`registration/password_change_form.html` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1213
msgid ""
"``success_url``: The URL to redirect to after a successful password change."
msgstr "``success_url`` ：密码修改成功后跳转的 URL 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1216
msgid ""
"``form_class``: A custom \"change password\" form which must accept a "
"``user`` keyword argument. The form is responsible for actually changing the"
" user's password. Defaults to "
":class:`~django.contrib.auth.forms.PasswordChangeForm`."
msgstr "``form_class`` ：一个自定义修改密码的表单，此表单必须接收 ``user`` 关键字参数。表单负责实际修改用户密码。默认是 :class:`~django.contrib.auth.forms.PasswordChangeForm` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1226
msgid "``form``: The password change form (see ``form_class`` above)."
msgstr "``form`` ：密码修改表单（参考上面的 ``form_class`` ）"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1230
msgid "**URL name:** ``password_change_done``"
msgstr "**URL name:** ``password_change_done``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1232
msgid "The page shown after a user has changed their password."
msgstr "用户修改密码之后显示的页面。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1236
msgid ""
"``template_name``: The full name of a template to use. Defaults to "
":file:`registration/password_change_done.html` if not supplied."
msgstr "``template_name`` ：所使用模板的全称。如果没有提供，则默认 :file:`registration/password_change_done.html` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1245
msgid "**URL name:** ``password_reset``"
msgstr "**URL name:** ``password_reset``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1247
msgid ""
"Allows a user to reset their password by generating a one-time use link that"
" can be used to reset the password, and sending that link to the user's "
"registered email address."
msgstr "允许用户通过生成的一次性链接来重置密码，并把一次性链接发到用户注册邮箱中。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1251
msgid ""
"If the email address provided does not exist in the system, this view won't "
"send an email, but the user won't receive any error message either. This "
"prevents information leaking to potential attackers. If you want to provide "
"an error message in this case, you can subclass "
":class:`~django.contrib.auth.forms.PasswordResetForm` and use the "
"``form_class`` attribute."
msgstr "如果邮箱地址并不存在，视图不会发送邮件，但用户也不会受到任何错误信息。这是为了防止信息泄露给潜在的攻击者。如果你想提供错误信息，你可以成为继承 :class:`~django.contrib.auth.forms.PasswordResetForm` ，并使用 ``form_class`` 属性。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1258
msgid ""
"Users flagged with an unusable password (see "
":meth:`~django.contrib.auth.models.User.set_unusable_password()` aren't "
"allowed to request a password reset to prevent misuse when using an external"
" authentication source like LDAP. Note that they won't receive any error "
"message since this would expose their account's existence but no mail will "
"be sent either."
msgstr "不可使用密码的用户 （查看 :meth:`~django.contrib.auth.models.User.set_unusable_password()` ）不能请求重置密码，以防止在使用类似 LDAP 等外部验证源时滥用。注意，它们将无法收到错误信息，因为这将暴露用户账号是否存在，并且也不会发送邮件。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1267
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password reset form. Defaults to "
":file:`registration/password_reset_form.html` if not supplied."
msgstr "``template_name`` ：用来显示密码重置表单的模板全称。如果没提供，则默认 :file:`registration/password_reset_form.html` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1271
msgid ""
"``form_class``: Form that will be used to get the email of the user to reset"
" the password for. Defaults to "
":class:`~django.contrib.auth.forms.PasswordResetForm`."
msgstr "``form_class`` ：用于获取用户的重置密码的电子邮件的表单。默认是 :class:`~django.contrib.auth.forms.PasswordResetForm` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1275
msgid ""
"``email_template_name``: The full name of a template to use for generating "
"the email with the reset password link. Defaults to "
":file:`registration/password_reset_email.html` if not supplied."
msgstr "``email_template_name`` ：用来生成重置密码链接的电子邮件模板。如果没有提供，默认是 :file:`registration/password_reset_email.html` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1279
msgid ""
"``subject_template_name``: The full name of a template to use for the "
"subject of the email with the reset password link. Defaults to "
":file:`registration/password_reset_subject.txt` if not supplied."
msgstr "``subject_template_name`` ：重置密码电子邮件主题的模板全称。如果没有提供，则是 :file:`registration/password_reset_subject.txt` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1283
msgid ""
"``token_generator``: Instance of the class to check the one time link. This "
"will default to ``default_token_generator``, it's an instance of "
"``django.contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr "``token_generator`` ：检测一次性链接的类实例。默认是 ``default_token_generator`` ，这是 ``django.contrib.auth.tokens.PasswordResetTokenGenerator`` 的一个实例。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1287
msgid ""
"``success_url``: The URL to redirect to after a successful password reset "
"request."
msgstr "``success_url`` ：成功重置密码后跳转的 URL 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1290
msgid ""
"``from_email``: A valid email address. By default Django uses the "
":setting:`DEFAULT_FROM_EMAIL`."
msgstr "``from_email`` ：合法邮件地址。默认情况下，Django 使用 :setting:`DEFAULT_FROM_EMAIL` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1296
msgid ""
"``html_email_template_name``: The full name of a template to use for "
"generating a ``text/html`` multipart email with the password reset link. By "
"default, HTML email is not sent."
msgstr "``html_email_template_name`` ：用来生成带有密码重置链接的 ``text/html`` 多用途电子邮件。默认情况下，HTML 单子邮件不会被发送。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1300
msgid ""
"``extra_email_context``: A dictionary of context data that will be available"
" in the email template."
msgstr "``extra_email_context`` ：上下文数据字典，可以用在电子邮件模板中。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1305
msgid ""
"``form``: The form (see ``form_class`` above) for resetting the user's "
"password."
msgstr "``form`` ：重置用户密码的表单（可参考上面的 ``form_class`` ）。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1308
msgid "**Email template context:**"
msgstr "**电子邮件模板上下文:**"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1310
msgid "``email``: An alias for ``user.email``"
msgstr "``email`` ：``user.email`` 的别名。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1312
msgid ""
"``user``: The current :class:`~django.contrib.auth.models.User`, according "
"to the ``email`` form field. Only active users are able to reset their "
"passwords (``User.is_active is True``)."
msgstr "``user`` ：根据电子邮件表单字段指定的当前用户。只有活动用户才可以重置密码（ ``User.is_active 为 True`` ）。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1321
msgid ""
"``domain``: An alias for ``site.domain``. If you don't have the site "
"framework installed, this will be set to the value of "
"``request.get_host()``."
msgstr "``domain`` ：``site.domain`` 的别名。如果你还没有安装网站框架，它会被设置为 ``request.get_host()`` 的值。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1325
msgid "``protocol``: http or https"
msgstr "``protocol`` ：http 或 https"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1327
msgid "``uid``: The user's primary key encoded in base 64."
msgstr "``uid`` ：使用 Base64 编码过的用户主键。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1329
msgid "``token``: Token to check that the reset link is valid."
msgstr "``token`` ：检测重置密码链接是否有效的 Token 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1331
msgid ""
"Sample ``registration/password_reset_email.html`` (email body template):"
msgstr "``registration/password_reset_email.html`` 例子（电子邮件内容模板）"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1338
msgid ""
"The same template context is used for subject template. Subject must be "
"single line plain text string."
msgstr "相同的模板上下文用于主题模板。主题必须是单行纯文本字符串。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1343
msgid "**URL name:** ``password_reset_done``"
msgstr "**URL name:** ``password_reset_done``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1345
msgid ""
"The page shown after a user has been emailed a link to reset their password."
" This view is called by default if the :class:`PasswordResetView` doesn't "
"have an explicit ``success_url`` URL set."
msgstr "发送重置密码邮件后显示的页面。如果 :class:`PasswordResetView` 没有明确设置 ``success_url`` ，那么默认将该视图调用。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1351
msgid ""
"If the email address provided does not exist in the system, the user is "
"inactive, or has an unusable password, the user will still be redirected to "
"this view but no email will be sent."
msgstr "如果提供的电子邮件地址在系统内并不存在，那么用户可能是非活动用户，或者密码不可被更改。用户仍然会重定向到这个视图，但不会发送邮件。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1357
msgid ""
"``template_name``: The full name of a template to use. Defaults to "
":file:`registration/password_reset_done.html` if not supplied."
msgstr "``template_name`` ：被使用模板的全称。如果没有提供，则默认是 :file:`registration/password_reset_done.html`"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1366
msgid "**URL name:** ``password_reset_confirm``"
msgstr "**URL name:** ``password_reset_confirm``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1368
msgid "Presents a form for entering a new password."
msgstr "提供输入新密码的表单。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1370
msgid "**Keyword arguments from the URL:**"
msgstr "URL 的关键参数"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1372
msgid "``uidb64``: The user's id encoded in base 64."
msgstr "``uidb64`` ：被Base64编码过的用户 id。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1374
msgid "``token``: Token to check that the password is valid."
msgstr "``token`` ：检查密码是否有效的 Token。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1378
msgid ""
"``template_name``: The full name of a template to display the confirm "
"password view. Default value is "
":file:`registration/password_reset_confirm.html`."
msgstr "``template_name`` ：用于显示确认密码视图的模板全称。默认值是 :file:`registration/password_reset_confirm.html` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1382
msgid ""
"``token_generator``: Instance of the class to check the password. This will "
"default to ``default_token_generator``, it's an instance of "
"``django.contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr "``token_generator`` ：检查密码的类实例。默认是 ``default_token_generator``，它是 ``django.contrib.auth.tokens.PasswordResetTokenGenerator`` 的实例。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1386
msgid ""
"``post_reset_login``: A boolean indicating if the user should be "
"automatically authenticated after a successful password reset. Defaults to "
"``False``."
msgstr "``post_reset_login`` ：布尔值，用来标示用户成功重置密码后是否会被自动验证。默认是 ``False`` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1390
msgid ""
"``post_reset_login_backend``: A dotted path to the authentication backend to"
" use when authenticating a user if ``post_reset_login`` is ``True``. "
"Required only if you have multiple :setting:`AUTHENTICATION_BACKENDS` "
"configured. Defaults to ``None``."
msgstr "``post_reset_login_backend`` ：验证后端的路径，用于当 ``post_reset_login`` 是 ``True`` 时验证用户使用。当拥有多个 :setting:`AUTHENTICATION_BACKENDS` 设置时才会用到。默认为 ``None`` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1395
msgid ""
"``form_class``: Form that will be used to set the password. Defaults to "
":class:`~django.contrib.auth.forms.SetPasswordForm`."
msgstr "``form_class`` ：用来设置密码的表单。默认是 :class:`~django.contrib.auth.forms.SetPasswordForm` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1398
msgid ""
"``success_url``: URL to redirect after the password reset done. Defaults to "
"``'password_reset_complete'``."
msgstr "``success_url`` ：重置密码完成后跳转的 URL 。默认 ``'password_reset_complete'`` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1406
msgid ""
"``form``: The form (see ``form_class`` above) for setting the new user's "
"password."
msgstr "``form`` ：用来设置用户新密码的表单（查看上面的 ``form_class`` ）。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1409
msgid ""
"``validlink``: Boolean, True if the link (combination of ``uidb64`` and "
"``token``) is valid or unused yet."
msgstr "``validlink`` ：布尔值，如果链接（``uidb64`` 和 ``token`` 的组合）有效且合法，则返回 True 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1414
msgid "**URL name:** ``password_reset_complete``"
msgstr "**URL name:** ``password_reset_complete``"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1416
msgid ""
"Presents a view which informs the user that the password has been "
"successfully changed."
msgstr "当密码已经被修改成功后通知用户的视图。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1421
msgid ""
"``template_name``: The full name of a template to display the view. Defaults"
" to :file:`registration/password_reset_complete.html`."
msgstr "``template_name`` ：显示视图的模板全称。默认 :file:`registration/password_reset_complete.html` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1428
msgid "Helper functions"
msgstr "辅助函数"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1434
msgid ""
"Redirects to the login page, and then back to another URL after a successful"
" login."
msgstr "重定向到登录页面，登陆成功后跳转到其他 URL 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1437
msgid "**Required arguments:**"
msgstr "**必要参数**"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1439
msgid "``next``: The URL to redirect to after a successful login."
msgstr "``next`` ：成功登陆后跳转的 URL。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1446
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next`` if the given ``GET`` parameter"
" is passed."
msgstr "``redirect_field_name`` ：注销后跳转的 URL 所包含的 ``GET`` 字段名称。如果已传递给定的 ``GET`` 参数，则覆盖 ``next`` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1453
msgid "Built-in forms"
msgstr "内置表单"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1457
msgid ""
"If you don't want to use the built-in views, but want the convenience of not"
" having to write forms for this functionality, the authentication system "
"provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr "如果你不想使用内置视图，但希望不必为此功能编写表单，验证系统提供很多在 :mod:`django.contrib.auth.forms` 中的内置表单。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1462
msgid ""
"The built-in authentication forms make certain assumptions about the user "
"model that they are working with. If you're using a :ref:`custom user model "
"<auth-custom-user>`, it may be necessary to define your own forms for the "
"authentication system. For more information, refer to the documentation "
"about :ref:`using the built-in authentication forms with custom user models "
"<custom-users-and-the-built-in-auth-forms>`."
msgstr "内置验证表单对用户正在使用的的用户模型做了某些假设。如果你正在使用 :ref:`custom user model ` ，它可能需要为验证系统定义你自己的表单。如需了解更多信息，参考文档 :ref:`using the built-in authentication forms with custom user models <custom-users-and-the-built-in-auth-forms>` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1471
msgid "A form used in the admin interface to change a user's password."
msgstr "在管理界面修改用户密码所使用的表单。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1473
msgid "Takes the ``user`` as the first positional argument."
msgstr "将 ``user`` 作为第一个参数。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1477
msgid "A form for logging a user in."
msgstr "用户登录的表单。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1479
msgid ""
"Takes ``request`` as its first positional argument, which is stored on the "
"form instance for use by sub-classes."
msgstr "将 ``request`` 作为第一个参数，该参数存储在表单实例上，供子类使用。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1484
msgid ""
"By default, ``AuthenticationForm`` rejects users whose ``is_active`` flag is"
" set to ``False``. You may override this behavior with a custom policy to "
"determine which users can log in. Do this with a custom form that subclasses"
" ``AuthenticationForm`` and overrides the ``confirm_login_allowed()`` "
"method. This method should raise a "
":exc:`~django.core.exceptions.ValidationError` if the given user may not log"
" in."
msgstr "默认情况下，``AuthenticationForm`` 拒绝  ``is_active`` 标识为 ``False`` 的用户。你可以通过自定义策略来覆盖这个行为来决定哪个用户可以登录。通过``AuthenticationForm`` 子类的自定义表单来执行这个操作，并覆盖 ``confirm_login_allowed()`` 方法。如果给定的用户无法登录，这个方法应该引发 :exc:`~django.core.exceptions.ValidationError` 错误。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1492
msgid ""
"For example, to allow all users to log in regardless of \"active\" status::"
msgstr "举例，允许所有用户登录而不管 \"active\" 状态："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1501
msgid ""
"(In this case, you'll also need to use an authentication backend that allows"
" inactive users, such as "
":class:`~django.contrib.auth.backends.AllowAllUsersModelBackend`.)"
msgstr "（在这个例子中，你将需要使用一个允许非活动用户的验证后端，比如 :class:`~django.contrib.auth.backends.AllowAllUsersModelBackend` 。）"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1505
msgid "Or to allow only some active users to log in::"
msgstr "或者只允许一些活动用户登录："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1522
msgid "A form for allowing a user to change their password."
msgstr "允许用户修改密码的表单:"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1526
msgid ""
"A form for generating and emailing a one-time use link to reset a user's "
"password."
msgstr "生成和邮件发送一次性重置密码链接的表单。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1531
msgid ""
"Uses the arguments to send an ``EmailMultiAlternatives``. Can be overridden "
"to customize how the email is sent to the user."
msgstr "使用参数发送 ``EmailMultiAlternatives``。可以重写自定义邮件发送给用户的方式。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:0
#: ../../../../sources/2.2/docs/topics/signals.txt:0
#: ../../../../sources/2.2/docs/topics/signals.txt:0
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:0
msgid "Parameters"
msgstr "参数"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1534
msgid "the template for the subject."
msgstr "主题模板"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1535
msgid "the template for the email body."
msgstr "邮件主体模板"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1536
msgid ""
"context passed to the ``subject_template``, ``email_template``, and "
"``html_email_template`` (if it is not ``None``)."
msgstr "上下文传递至 ``subject_template``, ``email_template``, 和 ``html_email_template`` （如果它非空）。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1539
msgid "the sender's email."
msgstr "发送方的邮箱地址。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1540
msgid "the email of the requester."
msgstr "接收方的邮箱地址。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1541
msgid ""
"the template for the HTML body; defaults to ``None``, in which case a plain "
"text email is sent."
msgstr "HTML 正文模板；默认是 ``None``，在这种情况下发送纯文本邮件。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1544
msgid ""
"By default, ``save()`` populates the ``context`` with the same variables "
"that :class:`~django.contrib.auth.views.PasswordResetView` passes to its "
"email context."
msgstr "默认情况下，``save()`` 使用 :class:`~django.contrib.auth.views.PasswordResetView` 传递给其电子邮件上下文的相同变量填充上下文。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1551
msgid ""
"A form that lets a user change their password without entering the old "
"password."
msgstr "让用户不输入旧密码就能改变它们密码的表单。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1556
msgid ""
"A form used in the admin interface to change a user's information and "
"permissions."
msgstr "在管理界面修改用户信息和权限的表单。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1561
msgid "A :class:`~django.forms.ModelForm` for creating a new user."
msgstr "建立新用户的 :class:`~django.forms.ModelForm` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1563
msgid ""
"It has three fields: ``username`` (from the user model), ``password1``, and "
"``password2``. It verifies that ``password1`` and ``password2`` match, "
"validates the password using "
":func:`~django.contrib.auth.password_validation.validate_password`, and sets"
" the user's password using "
":meth:`~django.contrib.auth.models.User.set_password()`."
msgstr "它有三个字段： ``username`` （来自用户模型），``password1`` ，和 ``password2`` 。它检查 ``password1`` 和 ``password2`` 是否匹配，使用 :func:`~django.contrib.auth.password_validation.validate_password` 验证密码，并且使用 :meth:`~django.contrib.auth.models.User.set_password()` 来设置用户密码。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1573
msgid "Authentication data in templates"
msgstr "模板内验证数据"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1575
msgid ""
"The currently logged-in user and their permissions are made available in the"
" :doc:`template context </ref/templates/api>` when you use "
":class:`~django.template.RequestContext`."
msgstr "当你使用 :class:`~django.template.RequestContext` 时，当前已登录用户和他们的权限在 :doc:`template context ` 中是可用的。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1579
msgid "Technicality"
msgstr "技术细节"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1581
msgid ""
"Technically, these variables are only made available in the template context"
" if you use :class:`~django.template.RequestContext` and the "
"``'django.contrib.auth.context_processors.auth'`` context processor is "
"enabled. It is in the default generated settings file. For more, see the "
":ref:`RequestContext docs <subclassing-context-requestcontext>`."
msgstr "从技术上讲，如果你使用 :class:`~django.template.RequestContext` ，这些变量只在模板上下文中可用，并且已启用 ``'django.contrib.auth.context_processors.auth'`` 处理机。它默认产生配置文件。了解更多，可以查看 :ref:`RequestContext docs <subclassing-context-requestcontext>` 。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1588
#: ../../../../sources/2.2/docs/topics/auth/index.txt:31
msgid "Users"
msgstr "用户"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1590
msgid ""
"When rendering a template :class:`~django.template.RequestContext`, the "
"currently logged-in user, either a  "
":class:`~django.contrib.auth.models.User` instance or an "
":class:`~django.contrib.auth.models.AnonymousUser` instance, is stored in "
"the template variable ``{{ user }}``:"
msgstr "当渲染模板 :class:`~django.template.RequestContext` ，当前登录用户（:class:`~django.contrib.auth.models.User` 实例或 :class:`~django.contrib.auth.models.AnonymousUser` 实例）被保存在模板变量 ``{{ user }}`` 中："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1603
msgid ""
"This template context variable is not available if a ``RequestContext`` is "
"not being used."
msgstr "如果没有使用 ``RequestContext`` ，那么这个模板上下文变量将不可用。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1607
msgid "Permissions"
msgstr "权限"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1609
msgid ""
"The currently logged-in user's permissions are stored in the template "
"variable ``{{ perms }}``. This is an instance of "
"``django.contrib.auth.context_processors.PermWrapper``, which is a template-"
"friendly proxy of permissions."
msgstr "当前登录用户的权限保存在模板变量 ``{{ perms }}`` 中。这是 ``django.contrib.auth.context_processors.PermWrapper`` 的一个实例，它是一个对模板友好的权限代理。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1614
msgid ""
"Evaluating a single-attribute lookup of ``{{ perms }}`` as a boolean is a "
"proxy to :meth:`User.has_module_perms() "
"<django.contrib.auth.models.User.has_module_perms>`. For example, to check "
"if the logged-in user has any permissions in the ``foo`` app::"
msgstr "将 ``{{ perms }}`` 的单属性查找作为布尔值为 :meth:`User.has_module_perms() <django.contrib.auth.models.User.has_module_perms>` 的代理。比如，检测登录用户是否拥有一些权限："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1621
msgid ""
"Evaluating a two-level-attribute lookup as a boolean is a proxy to "
":meth:`User.has_perm() <django.contrib.auth.models.User.has_perm>`. For "
"example, to check if the logged-in user has the permission "
"``foo.can_vote``::"
msgstr "将两层属性查找作为布尔值是 :meth:`User.has_perm() <django.contrib.auth.models.User.has_perm>` 的代理。比如，检测登录用户是否拥有  ``foo.can_vote`` 权限："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1627
msgid "Here's a more complete example of checking permissions in a template:"
msgstr "以下是一个在模板中检查权限的更完整的示例："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1643
msgid ""
"It is possible to also look permissions up by ``{% if in %}`` statements. "
"For example:"
msgstr "也可以通过 ``{% if in %}`` 语句来查找权限。比如："

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1657
msgid "Managing users in the admin"
msgstr "在管理界面中管理用户"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1659
msgid ""
"When you have both ``django.contrib.admin`` and ``django.contrib.auth`` "
"installed, the admin provides a convenient way to view and manage users, "
"groups, and permissions. Users can be created and deleted like any Django "
"model. Groups can be created, and permissions can be assigned to users or "
"groups. A log of user edits to models made within the admin is also stored "
"and displayed."
msgstr "当安装了 ``django.contrib.admin`` 和 ``django.contrib.auth``，管理后台提供了方便的方法来查看和管理用户、组和权限。用户可以增加和删除任何 Django 模型。可以创建组，也可以为用户和组分配权限。用户操作模型的日志也会在管理后台中保存和显示。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1669
msgid ""
"You should see a link to \"Users\" in the \"Auth\" section of the main admin"
" index page. The \"Add user\" admin page is different than standard admin "
"pages in that it requires you to choose a username and password before "
"allowing you to edit the rest of the user's fields."
msgstr "你可以在管理后台主页的 “认证和权限” 部分看到 “用户” 链接。“增加用户”的管理界面和其他标准的管理后台不同的是：你需要先输入一个新用户名和新密码，然后才能编辑新用户的剩余字段。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1674
msgid ""
"Also note: if you want a user account to be able to create users using the "
"Django admin site, you'll need to give them permission to add users *and* "
"change users (i.e., the \"Add user\" and \"Change user\" permissions). If an"
" account has permission to add users but not to change them, that account "
"won't be able to add users. Why? Because if you have permission to add "
"users, you have the power to create superusers, which can then, in turn, "
"change other users. So Django requires add *and* change permissions as a "
"slight security measure."
msgstr "注意：如果你希望某个用户账号可以在 Django 管理后台创建用户，你将需要给用户“创建”和“修改”权限。如果账号只有“创建”权限但没有“修改”权限，那么这个账号将不能增加用户。为什么？因为你有权限添加用户，那么你就拥有添加超级管理员的权利，而超级管理员就可以修改其他用户。因此，Django 需要添加和修改权限作为安全措施。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1683
msgid ""
"Be thoughtful about how you allow users to manage permissions. If you give a"
" non-superuser the ability to edit users, this is ultimately the same as "
"giving them superuser status because they will be able to elevate "
"permissions of users including themselves!"
msgstr "要考虑如何允许用户去管理权限。如果你允许普通管理员编辑用户，这和给他们超级管理员权限一样。因为他们有权利提升用户权限，包括他们自己。"

#: ../../../../sources/2.2/docs/topics/auth/default.txt:1691
msgid ""
"User passwords are not displayed in the admin (nor stored in the database), "
"but the :doc:`password storage details </topics/auth/passwords>` are "
"displayed. Included in the display of this information is a link to a "
"password change form that allows admins to change user passwords."
msgstr "用户密码不显示在管理界面中（也不在数据库中保存），但会显示 :doc:`password storage details </topics/auth/passwords>` 。这个信息中包含一个指向密码修改表单的链接，该表单允许管理员修改用户密码。"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:3
msgid "User authentication in Django"
msgstr "Django中的用户认证"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:15
msgid ""
"Django comes with a user authentication system. It handles user accounts, "
"groups, permissions and cookie-based user sessions. This section of the "
"documentation explains how the default implementation works out of the box, "
"as well as how to :doc:`extend and customize </topics/auth/customizing>` it "
"to suit your project's needs."
msgstr "Django 自带一个用户验证系统。它负责处理用户账号、组、权限和基于cookie的用户会话。文档的这部分解释了默认的实现如何开箱即用，以及如何扩展和自定义以满足你的项目需求。"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:22
#: ../../../../sources/2.2/docs/topics/http/urls.txt:15
#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:6
#: ../../../../sources/2.2/docs/topics/i18n/index.txt:14
#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:8
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:8
msgid "Overview"
msgstr "概况"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:24
msgid ""
"The Django authentication system handles both authentication and "
"authorization. Briefly, authentication verifies a user is who they claim to "
"be, and authorization determines what an authenticated user is allowed to "
"do. Here the term authentication is used to refer to both tasks."
msgstr "Django 验证系统处理验证和授权。简单来说，验证检验用户是否是他们的用户，授权决定已验证用户能做什么。这里的术语验证用于指代这两个任务。"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:29
msgid "The auth system consists of:"
msgstr "认证系统由以下部分组成："

#: ../../../../sources/2.2/docs/topics/auth/index.txt:32
msgid ""
"Permissions: Binary (yes/no) flags designating whether a user may perform a "
"certain task."
msgstr "权限：二进制（是/否）标识指定用户是否可以执行特定任务。"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:34
msgid ""
"Groups: A generic way of applying labels and permissions to more than one "
"user."
msgstr "组：将标签和权限应用于多个用户的一般方法。"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:36
msgid "A configurable password hashing system"
msgstr "可配置的密码哈希化系统"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:37
msgid "Forms and view tools for logging in users, or restricting content"
msgstr "为登录用户或限制内容提供表单和视图工具"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:38
msgid "A pluggable backend system"
msgstr "可插拔的后端系统"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:40
msgid ""
"The authentication system in Django aims to be very generic and doesn't "
"provide some features commonly found in web authentication systems. "
"Solutions for some of these common problems have been implemented in third-"
"party packages:"
msgstr "Django 里的验证系统旨在通用化，不提供一些常见的 web 验证系统的特性。其中一些常见问题的解决方案已在第三方包中实现。"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:44
msgid "Password strength checking"
msgstr "密码强度检查"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:45
msgid "Throttling of login attempts"
msgstr "限制登录尝试"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:46
msgid "Authentication against third-parties (OAuth, for example)"
msgstr "针对第三方的身份验证（例如OAuth）"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:47
msgid "Object-level permissions"
msgstr "对象级权限"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:50
msgid "Installation"
msgstr "安装"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:52
msgid ""
"Authentication support is bundled as a Django contrib module in "
"``django.contrib.auth``. By default, the required configuration is already "
"included in the :file:`settings.py` generated by :djadmin:`django-admin "
"startproject <startproject>`, these consist of two items listed in your "
":setting:`INSTALLED_APPS` setting:"
msgstr "验证系统被捆绑为 ``django.contrib.auth`` 的 Django contrib 模块。默认情况下，所需的配置以及包含在 :djadmin:`django-admin startproject <startproject>` 生成的 :file:`settings.py` 中，在 :setting:`INSTALLED_APPS` 配置列出了以下两个条目："

#: ../../../../sources/2.2/docs/topics/auth/index.txt:58
msgid ""
"``'django.contrib.auth'`` contains the core of the authentication framework,"
" and its default models."
msgstr "``'django.contrib.auth'`` 包含了验证框架的内核和它的默认模型。"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:60
msgid ""
"``'django.contrib.contenttypes'`` is the Django :doc:`content type system "
"</ref/contrib/contenttypes>`, which allows permissions to be associated with"
" models you create."
msgstr "``'django.contrib.contenttypes'`` 是 Django :doc:`content type system </ref/contrib/contenttypes>` ，允许你创建的模型和权限相关联。"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:64
msgid "and these items in your :setting:`MIDDLEWARE` setting:"
msgstr "这些条目在你的 :setting:`MIDDLEWARE` 设置中："

#: ../../../../sources/2.2/docs/topics/auth/index.txt:66
msgid ""
":class:`~django.contrib.sessions.middleware.SessionMiddleware` manages "
":doc:`sessions </topics/http/sessions>` across requests."
msgstr ":class:`~django.contrib.sessions.middleware.SessionMiddleware` 通过请求管理 :doc:`sessions </topics/http/sessions>` 。"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:68
msgid ""
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` associates"
" users with requests using sessions."
msgstr ":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` 使用会话将用户和请求关联。"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:71
msgid ""
"With these settings in place, running the command ``manage.py migrate`` "
"creates the necessary database tables for auth related models and "
"permissions for any models defined in your installed apps."
msgstr "有了这些设置，运行命令 ``manage.py migrate`` 为auth相关模型创建必要的数据表，并为已安装应用中定义的任何模型创建许可。"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:76
#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:633
#: ../../../../sources/2.2/docs/topics/templates.txt:92
msgid "Usage"
msgstr "用法"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:78
msgid ":doc:`Using Django's default implementation <default>`"
msgstr "使用 Django 的默认实现（:doc:`Using Django's default implementation <default>`）"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:80
msgid ":ref:`Working with User objects <user-objects>`"
msgstr "使用用户对象（:ref:`Working with User objects `）"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:81
msgid ":ref:`Permissions and authorization <topic-authorization>`"
msgstr "权限和授权（:ref:`Permissions and authorization <topic-authorization>`）"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:82
msgid ":ref:`Authentication in web requests <auth-web-requests>`"
msgstr "请求中的验证（:ref:`Authentication in web requests <auth-web-requests>`）"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:83
msgid ":ref:`Managing users in the admin <auth-admin>`"
msgstr "在管理系统中管理用户（:ref:`Managing users in the admin <auth-admin>`）"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:85
msgid ""
":doc:`API reference for the default implementation </ref/contrib/auth>`"
msgstr "默认实现的 API 参考（:doc:`API reference for the default implementation </ref/contrib/auth>`）"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:87
msgid ":doc:`Customizing Users and authentication <customizing>`"
msgstr "自定义的用户和验证（:doc:`Customizing Users and authentication <customizing>`）"

#: ../../../../sources/2.2/docs/topics/auth/index.txt:89
msgid ":doc:`Password management in Django <passwords>`"
msgstr "Django 中的密码管理（:doc:`Password management in Django <passwords>`）"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:3
msgid "Password management in Django"
msgstr "Django中的密码管理"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:5
msgid ""
"Password management is something that should generally not be reinvented "
"unnecessarily, and Django endeavors to provide a secure and flexible set of "
"tools for managing user passwords. This document describes how Django stores"
" passwords, how the storage hashing can be configured, and some utilities to"
" work with hashed passwords."
msgstr "密码管理通常不应该被重新再设计，Django 努力提供了一个安全且灵活的管理用户密码的工具。这篇文档描述了 Django 如何存储密码，如何配置存储哈希，和一些使用哈希密码的工具。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:13
msgid ""
"Even though users may use strong passwords, attackers might be able to "
"eavesdrop on their connections. Use :ref:`HTTPS <security-recommendation-"
"ssl>` to avoid sending passwords (or any other sensitive data) over plain "
"HTTP connections because they will be vulnerable to password sniffing."
msgstr "即使用户使用了很强壮的密码，攻击者还是可以窃听他们的网络链接。用户使用 :ref:`HTTPS <security-recommendation-ssl>` 可以避免通过纯 HTTP 链接发送密码（或其他一些敏感数据），因为它们很容易被密码嗅探。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:22
msgid "How Django stores passwords"
msgstr "Django 如何存储密码"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:24
msgid ""
"Django provides a flexible password storage system and uses PBKDF2 by "
"default."
msgstr "Django 提供灵活的密码存储系统，默认使用 PBKDF2。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:26
msgid ""
"The :attr:`~django.contrib.auth.models.User.password` attribute of a "
":class:`~django.contrib.auth.models.User` object is a string in this "
"format::"
msgstr ":class:`~django.contrib.auth.models.User` 对象的 :attr:`~django.contrib.auth.models.User.password` 属性是如下这种格式："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:31
msgid ""
"Those are the components used for storing a User's password, separated by "
"the dollar-sign character and consist of: the hashing algorithm, the number "
"of algorithm iterations (work factor), the random salt, and the resulting "
"password hash.  The algorithm is one of a number of one-way hashing or "
"password storage algorithms Django can use; see below. Iterations describe "
"the number of times the algorithm is run over the hash. Salt is the random "
"seed used and the hash is the result of the one-way function."
msgstr "这些是用来存储用户密码的插件，以美元符号分隔，包括：哈希算法，算法迭代次数（工作因子），随机 Salt 和最终的密码哈希值。该算法是 Django 可以使用的单向哈希或密码存储算法中的一种；见下文。迭代描述了算法在哈希上运行的次数。Salt 是所使用的随机种子，哈希是单向函数的结果。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:39
msgid ""
"By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password"
" stretching mechanism recommended by NIST_. This should be sufficient for "
"most users: it's quite secure, requiring massive amounts of computing time "
"to break."
msgstr "默认情况下，Django 使用带有 SHA256 哈希的 PBKDF2_ 算法，它是 NIST 推荐的密码延展机制。它足够安全，需要大量的运算时间才能破解，这对大部分用户来说足够了。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:44
msgid ""
"However, depending on your requirements, you may choose a different "
"algorithm, or even use a custom algorithm to match your specific security "
"situation. Again, most users shouldn't need to do this -- if you're not "
"sure, you probably don't.  If you do, please read on:"
msgstr "但是，根据你的需求，你可以选择不同的算法，甚至使用自定义的算法来匹配特定的安全场景。再次强调，大部分用户没必要这么做，如果你不确定的话，很可能并不需要。如果你坚持要做，请继续阅读："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:49
msgid ""
"Django chooses the algorithm to use by consulting the "
":setting:`PASSWORD_HASHERS` setting. This is a list of hashing algorithm "
"classes that this Django installation supports. The first entry in this list"
" (that is, ``settings.PASSWORD_HASHERS[0]``) will be used to store "
"passwords, and all the other entries are valid hashers that can be used to "
"check existing passwords.  This means that if you want to use a different "
"algorithm, you'll need to modify :setting:`PASSWORD_HASHERS` to list your "
"preferred algorithm first in the list."
msgstr "Django 通过查阅 :setting:`PASSWORD_HASHERS` 的设置来选择算法。这是一个 Django 支持的哈希算法类列表，第一个条目（ ``settings.PASSWORD_HASHERS[0]`` ）将被用来存储密码，其他条目都是有效的哈希函数，可用来检测已存密码。这意味着如果你想使用不同算法，你需要修改 :setting:`PASSWORD_HASHERS` ，在列表中首选列出你的算法。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:58
msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr ":setting:`PASSWORD_HASHERS` 的默认值是："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:67
msgid ""
"This means that Django will use PBKDF2_ to store all passwords but will "
"support checking passwords stored with PBKDF2SHA1, argon2_, and bcrypt_."
msgstr "这意味着 Django 除了使用 PBKDF2 来存储所有密码，也支持使用 PBKDF2SHA1 、argon2 和 bcrypt 来检测已存储的密码。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:70
msgid ""
"The next few sections describe a couple of common ways advanced users may "
"want to modify this setting."
msgstr "接下来的部分描述了高级用户修改这个配置的几个常见方法。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:76
msgid "Using Argon2 with Django"
msgstr "在 Django 中使用 Argon2"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:78
msgid ""
"Argon2_ is the winner of the 2015 `Password Hashing Competition`_, a "
"community organized open competition to select a next generation hashing "
"algorithm. It's designed not to be easier to compute on custom hardware than"
" it is to compute on an ordinary CPU."
msgstr "Argon2 是2015年哈希密码竞赛的获胜者，这是一个社区为选择下一代哈希算法而主办的公开竞赛。它被设计成在定制硬件上计算比普通CPU上计算要容易。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:83
msgid ""
"Argon2_ is not the default for Django because it requires a third-party "
"library. The Password Hashing Competition panel, however, recommends "
"immediate use of Argon2 rather than the other algorithms supported by "
"Django."
msgstr "Argon2 并不是 Django 的默认首选，因为它依赖第三方库。尽管哈希密码竞赛主办方建议立即使用 Argon2 ，而不是 Django 提供的其他算法。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:87
msgid "To use Argon2 as your default storage algorithm, do the following:"
msgstr "使用 Argon2 作为你的默认存储算法，需要以下步骤："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:89
msgid ""
"Install the `argon2-cffi library`_.  This can be done by running ``pip "
"install django[argon2]``, which is equivalent to ``pip install argon2-cffi``"
" (along with any version requirement from Django's ``setup.py``)."
msgstr "安装 argon2-cffi 库。通过 ``pip install django[argon2]`` 安装，相当于 ``pip install argon2-cffi`` （以及 Django 的 ``setup.py`` 的任何版本要求）。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:93
msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``Argon2PasswordHasher`` first. "
"That is, in your settings file, you'd put::"
msgstr "修改 :setting:`PASSWORD_HASHERS` 配置，把 ``Argon2PasswordHasher`` 放在首位。如下："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:103
#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:132
msgid ""
"Keep and/or add any entries in this list if you need Django to :ref:`upgrade"
" passwords <password-upgrades>`."
msgstr "如果你需要 Django 升级密码（ :ref:`upgrade passwords <password-upgrades>` ），请保留或添加这个列表中的任何条目。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:109
msgid "Using ``bcrypt`` with Django"
msgstr "在 Django 中使用 ``bcrypt`` "

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:111
msgid ""
"Bcrypt_ is a popular password storage algorithm that's specifically designed"
" for long-term password storage. It's not the default used by Django since "
"it requires the use of third-party libraries, but since many people may want"
" to use it Django supports bcrypt with minimal effort."
msgstr "Bcrypt 是一个非常流行的密码存储算法，尤其是为长期密码存储设计。Django 默认不使用它，因为它需要使用第三方库，但由于很多人想使用它，Django 只需要很少的努力就能支持 bcrypt 。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:116
msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr "使用 Bcrypt 作为你的默认存储算法，需要以下步骤："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:118
msgid ""
"Install the `bcrypt library`_. This can be done by running ``pip install "
"django[bcrypt]``, which is equivalent to  ``pip install bcrypt`` (along with"
" any version requirement from Django's ``setup.py``)."
msgstr "安装 bcrypt 库。通过 ``pip install django[bcrypt]`` 安装，相当于 ``pip install bcrypt`` （以及 Django 的 ``setup.py`` 的任何版本要求）。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:122
msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``BCryptSHA256PasswordHasher`` "
"first. That is, in your settings file, you'd put::"
msgstr "修改 :setting:`PASSWORD_HASHERS` 配置，把 ``BCryptSHA256PasswordHasher`` 放在首位。如下："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:135
msgid ""
"That's it -- now your Django install will use Bcrypt as the default storage "
"algorithm."
msgstr "现在 Django 将使用 Bcrypt 作为默认存储算法。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:141
msgid "Increasing the work factor"
msgstr "增加工作因子"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:144
msgid "PBKDF2 and bcrypt"
msgstr "PBKDF2 和 bcrypt"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:146
msgid ""
"The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of "
"hashing. This deliberately slows down attackers, making attacks against "
"hashed passwords harder. However, as computing power increases, the number "
"of iterations needs to be increased. We've chosen a reasonable default (and "
"will increase it with each release of Django), but you may wish to tune it "
"up or down, depending on your security needs and available processing power."
" To do so, you'll subclass the appropriate algorithm and override the "
"``iterations`` parameters. For example, to increase the number of iterations"
" used by the default PBKDF2 algorithm:"
msgstr "PBKDF2 和 bcrypt 算法使用一些迭代或几轮哈希。这样有意降低了攻击者的速度，使得破解密码变得更困难。然而，随着算力的增加，迭代的次数也需要增加。我们已经选择了合理的默认配置（也会对 Django 的每个版本加入），但你可能希望根据你的安全需求和可支配的能力来调高或调低它。为此，你将子类化合适的算法并覆盖 ``iterations`` 参数。比如，增加默认 PBKDF2 算法使用的一些迭代："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:156
msgid ""
"Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"
msgstr "创建 ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` 的子类："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:166
msgid ""
"Save this somewhere in your project. For example, you might put this in a "
"file like ``myproject/hashers.py``."
msgstr "在你的项目某些位置中保存。比如，你可以放在类似 ``myproject/hashers.py`` 里。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:169
msgid ""
"Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr "在 :setting:`PASSWORD_HASHERS` 中把新哈希放在首位："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:179
msgid ""
"That's it -- now your Django install will use more iterations when it stores"
" passwords using PBKDF2."
msgstr "现在 Django 使用 PBKDF2 存储密码时将会多次迭代。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:183
msgid "Argon2"
msgstr "Argon2"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:185
msgid "Argon2 has three attributes that can be customized:"
msgstr "Argon2 有三个可以自定义的属性："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:187
msgid "``time_cost`` controls the number of iterations within the hash."
msgstr "``time_cost`` 控制哈希的次数。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:188
msgid ""
"``memory_cost`` controls the size of memory that must be used during the "
"computation of the hash."
msgstr "``memory_cost`` 控制被用来计算哈希时的内存大小。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:190
msgid ""
"``parallelism`` controls how many CPUs the computation of the hash can be "
"parallelized on."
msgstr "``parallelism`` 控制并行计算哈希的 CPU 数量。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:193
msgid ""
"The default values of these attributes are probably fine for you. If you "
"determine that the password hash is too fast or too slow, you can tweak it "
"as follows:"
msgstr "这三个属性的默认值足够适合你。如果你确定密码哈希过快或过慢，可以按如下方式调整它："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:197
msgid ""
"Choose ``parallelism`` to be the number of threads you can spare computing "
"the hash."
msgstr "选择 ``parallelism`` 你可以节省计算哈希的线程数。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:199
msgid "Choose ``memory_cost`` to be the KiB of memory you can spare."
msgstr "选择 ``memory_cost`` 你可以节省内存的 KiB 。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:200
msgid ""
"Adjust ``time_cost`` and measure the time hashing a password takes. Pick a "
"``time_cost`` that takes an acceptable time for you. If ``time_cost`` set to"
" 1 is unacceptably slow, lower ``memory_cost``."
msgstr "调整 ``time_cost`` 和估计哈希一个密码所需的时间。挑选出你可以接受的 ``time_cost`` 。如果设置为1的  ``time_cost`` 慢的无法接受，则调低 ``memory_cost`` 。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:204
msgid "``memory_cost`` interpretation"
msgstr "``memory_cost`` 说明"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:206
msgid ""
"The argon2 command-line utility and some other libraries interpret the "
"``memory_cost`` parameter differently from the value that Django uses. The "
"conversion is given by ``memory_cost == 2 ** memory_cost_commandline``."
msgstr "argon2 命令行工具和一些其他的库解释了 ``memory_cost`` 参数不同于 Django 使用的值。换算公式是``memory_cost == 2 ** memory_cost_commandline`` 。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:213
msgid "Password upgrading"
msgstr "密码升级"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:215
msgid ""
"When users log in, if their passwords are stored with anything other than "
"the preferred algorithm, Django will automatically upgrade the algorithm to "
"the preferred one. This means that old installs of Django will get "
"automatically more secure as users log in, and it also means that you can "
"switch to new (and better) storage algorithms as they get invented."
msgstr "当用户登录时，如果用户的密码使用首选算法以外的算法保存，Django 会自动升级这个算法成为首选算法。这意味着旧的 Django 安装会在用户登录时自动得到更多的安全，并且当它们创建时你可以切换到新的更好的存储算法。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:221
msgid ""
"However, Django can only upgrade passwords that use algorithms mentioned in "
":setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should "
"make sure never to *remove* entries from this list. If you do, users using "
"unmentioned algorithms won't be able to upgrade. Hashed passwords will be "
"updated when increasing (or decreasing) the number of PBKDF2 iterations or "
"bcrypt rounds."
msgstr "然而，Django 只会使用 :setting:`PASSWORD_HASHERS` 提到的算法升级密码，因此当你升级到新系统时你要确保你从没有删除过这个列表的条目。如果你删除过，那么使用的没有列出的算法的用户将不会升级。当增加（或减少） PBKDF2 迭代的次数或 bcrypt 的轮次，哈希过的密码将被更新。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:228
msgid ""
"Be aware that if all the passwords in your database aren't encoded in the "
"default hasher's algorithm, you may be vulnerable to a user enumeration "
"timing attack due to a difference between the duration of a login request "
"for a user with a password encoded in a non-default algorithm and the "
"duration of a login request for a nonexistent user (which runs the default "
"hasher). You may be able to mitigate this by :ref:`upgrading older password "
"hashes <wrapping-password-hashers>`."
msgstr "注意，如果数据库内的所有密码没有在默认哈希算法里编码，则由于非默认算法的密码编码的用户登录请求持续时间和不存在用户（运行过默认哈希）的登录请求持续时间的不同，你可能会受到用户枚举时间攻击。你可以使用升级旧密码的哈希值来缓解此问题。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:239
msgid "Password upgrading without requiring a login"
msgstr "无需登录的密码升级"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:241
msgid ""
"If you have an existing database with an older, weak hash such as MD5 or "
"SHA1, you might want to upgrade those hashes yourself instead of waiting for"
" the upgrade to happen when a user logs in (which may never happen if a user"
" doesn't return to your site). In this case, you can use a \"wrapped\" "
"password hasher."
msgstr "如果数据库拥有老旧低效的哈希算法，比如 MD5 或 SHA1，那么你也许希望自己升级哈希而不是等待用户登录后升级（如果一个用户不再登录站点，密码就不会升级了）。在这里，你可以包装一下密码哈希。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:246
msgid ""
"For this example, we'll migrate a collection of SHA1 hashes to use "
"PBKDF2(SHA1(password)) and add the corresponding password hasher for "
"checking if a user entered the correct password on login. We assume we're "
"using the built-in ``User`` model and that our project has an ``accounts`` "
"app. You can modify the pattern to work with any algorithm or with a custom "
"user model."
msgstr "比如，你想迁移一个 SHA1 哈希集合来使用 PBKDF2(SHA1(password)) ，并添加相应的密码哈希来检查用户在登陆时是否输入了正确的密码。我们假设我们正在使用内建的 ``User`` 模型，并有一个 ``accounts`` app 。你可以修改模式以使用任何算法或自定义的模型。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:252
msgid "First, we'll add the custom hasher:"
msgstr "首先，我们添加一个自定义的哈希："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:254
msgid "accounts/hashers.py"
msgstr "accounts/hashers.py"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:272
msgid "The data migration might look something like:"
msgstr "数据迁移可能类似于这样："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:274
msgid "accounts/migrations/0002_migrate_sha1_passwords.py"
msgstr "accounts/migrations/0002_migrate_sha1_passwords.py"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:304
msgid ""
"Be aware that this migration will take on the order of several minutes for "
"several thousand users, depending on the speed of your hardware."
msgstr "注意，迁移将对上千名用户花费大约数十分钟，这取决于你的硬件速度。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:307
msgid "Finally, we'll add a :setting:`PASSWORD_HASHERS` setting:"
msgstr "最后，我们在 :setting:`PASSWORD_HASHERS` 中添加配置："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:309
msgid "mysite/settings.py"
msgstr "mysite/settings.py"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:317
msgid "Include any other hashers that your site uses in this list."
msgstr "包含你的站点使用的此列表中的其他算法。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:331
msgid "Included hashers"
msgstr "已包含的哈希"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:333
msgid "The full list of hashers included in Django is::"
msgstr "在 Django 中的所有列出的哈希是："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:348
msgid "The corresponding algorithm names are:"
msgstr "相应的算法名是："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:350
msgid "``pbkdf2_sha256``"
msgstr "``pbkdf2_sha256``"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:351
msgid "``pbkdf2_sha1``"
msgstr "``pbkdf2_sha1``"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:352
msgid "``argon2``"
msgstr "``argon2``"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:353
msgid "``bcrypt_sha256``"
msgstr "``bcrypt_sha256``"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:354
msgid "``bcrypt``"
msgstr "``bcrypt``"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:355
msgid "``sha1``"
msgstr "``sha1``"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:356
msgid "``md5``"
msgstr "``md5``"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:357
msgid "``unsalted_sha1``"
msgstr "``unsalted_sha1``"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:358
msgid "``unsalted_md5``"
msgstr "``unsalted_md5``"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:359
msgid "``crypt``"
msgstr "``crypt``"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:364
msgid "Writing your own hasher"
msgstr "编写你自己的哈希"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:366
msgid ""
"If you write your own password hasher that contains a work factor such as a "
"number of iterations, you should implement a ``harden_runtime(self, "
"password, encoded)`` method to bridge the runtime gap between the work "
"factor supplied in the ``encoded`` password and the default work factor of "
"the hasher. This prevents a user enumeration timing attack due to  "
"difference between a login request for a user with a password encoded in an "
"older number of iterations and a nonexistent user (which runs the default "
"hasher's default number of iterations)."
msgstr "如果你编写自己的密码哈希包含工作因子，比如迭代数量。你应该实现一个 ``harden_runtime(self, password, encoded)`` 方法来消除编码密码时提供的工作因子和默认的哈希工作因子之间的运行时间差。这样可以防止用户枚举时间攻击，因为旧的迭代次数中对密码编码的用户与不存在的用户（运行默认哈希的默认迭代次数）在登录时存在差异。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:375
msgid ""
"Taking PBKDF2 as example, if ``encoded`` contains 20,000 iterations and the "
"hasher's default ``iterations`` is 30,000, the method should run "
"``password`` through another 10,000 iterations of PBKDF2."
msgstr "以 PDKDF2 为例，如果编码包含20000次迭代，并且默认哈希迭代是30000，那么该方法应该通过另外的10000次迭代的 PBKDF2 运行密码。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:379
msgid ""
"If your hasher doesn't have a work factor, implement the method as a no-op "
"(``pass``)."
msgstr "如果你的哈希没有工作因子，可以将该方法实现为 no-op (pass) 。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:383
msgid "Manually managing a user's password"
msgstr "手动管理用户的密码"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:387
msgid ""
"The :mod:`django.contrib.auth.hashers` module provides a set of functions to"
" create and validate hashed passwords. You can use them independently from "
"the ``User`` model."
msgstr " :mod:`django.contrib.auth.hashers` 模块提供一个函数集来创建和验证哈希密码。你可以独立于 ``User``  模型来使用它们。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:393
msgid ""
"If you'd like to manually authenticate a user by comparing a plain-text "
"password to the hashed password in the database, use the convenience "
"function :func:`check_password`. It takes two arguments: the plain-text "
"password to check, and the full value of a user's ``password`` field in the "
"database to check against, and returns ``True`` if they match, ``False`` "
"otherwise."
msgstr "如果你想通过对比纯文本密码和数据库中的哈希密码来验证用户，可以使用  :func:`check_password` 快捷函数。它需要2个参数：要检查的纯文本密码和要检查的数据库中用户密码字段的值。如果匹配成功，返回 ``True`` ，否则返回 ``False`` 。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:402
msgid ""
"Creates a hashed password in the format used by this application. It takes "
"one mandatory argument: the password in plain-text. Optionally, you can "
"provide a salt and a hashing algorithm to use, if you don't want to use the "
"defaults (first entry of ``PASSWORD_HASHERS`` setting). See :ref:`auth-"
"included-hashers` for the algorithm name of each hasher. If the password "
"argument is ``None``, an unusable password is returned (one that will never "
"be accepted by :func:`check_password`)."
msgstr "通过此应用的格式创建一个哈希密码。它需要一个必需的参数：纯文本密码。或者，如果你不想使用默认配置（ ``PASSWORD_HASHERS`` 配置的首个条目 ），那么可以提供 salt 和 使用的哈希算法。有关每个哈希的算法名，可查看 :ref:`auth-included-hashers` 。如果密码参数是 ``None`` ，将返回一个不可用的密码（永远不会被 :func:`check_password` 通过的密码）。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:412
msgid ""
"Returns ``False`` if the password is a result of "
":meth:`.User.set_unusable_password`."
msgstr "如果密码是 :meth:`.User.set_unusable_password` 的结果，则返回 ``False`` 。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:417
msgid ""
"In older versions, this also returns ``False`` if the password is ``None`` "
"or an empty string, or if the password uses a hasher that's not in the "
":setting:`PASSWORD_HASHERS` setting. That behavior is considered a bug as it"
" prevents users with such passwords from requesting a password reset."
msgstr "在旧版本中，如果密码是 ``None`` 或空字符串或使用不在 :setting:`PASSWORD_HASHERS` 中的哈希，那么也会返回 ``False`` 。这个行为被认为是一个 bug ，因为它阻止有这样密码的用户通过请求重置密码。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:426
msgid "Password validation"
msgstr "密码验证"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:430
msgid ""
"Users often choose poor passwords. To help mitigate this problem, Django "
"offers pluggable password validation. You can configure multiple password "
"validators at the same time. A few validators are included in Django, but "
"it's simple to write your own as well."
msgstr "用户经常会选择弱密码。为了缓解这个问题，Django 提供可插拔的密码验证。你可以同时配置多个密码验证。Django 已经包含了一些验证，但你也可以很方便的编写你自己的验证。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:435
msgid ""
"Each password validator must provide a help text to explain the requirements"
" to the user, validate a given password and return an error message if it "
"does not meet the requirements, and optionally receive passwords that have "
"been set. Validators can also have optional settings to fine tune their "
"behavior."
msgstr "每个密码验证器必须提供给用户提供帮助文案以向用户解释要求，验证密码并在不符合要求时返回错误信息，并且可选择接受已经设置过的密码。验证器也可以使用可选设置来微调它们的行为。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:440
msgid ""
"Validation is controlled by the :setting:`AUTH_PASSWORD_VALIDATORS` setting."
" The default for the setting is an empty list, which means no validators are"
" applied. In new projects created with the default :djadmin:`startproject` "
"template, a simple set of validators is enabled."
msgstr "验证由 :setting:`AUTH_PASSWORD_VALIDATORS` 控制。默认的设置是一个空列表，意味着没有可应用的验证器。在使用默认的 :djadmin:`startproject` 创建新项目中，启用了一个简单的验证器设置。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:445
msgid ""
"By default, validators are used in the forms to reset or change passwords "
"and in the :djadmin:`createsuperuser` and :djadmin:`changepassword` "
"management commands. Validators aren't applied at the model level, for "
"example in ``User.objects.create_user()`` and ``create_superuser()``, "
"because we assume that developers, not users, interact with Django at that "
"level and also because model validation doesn't automatically run as part of"
" creating models."
msgstr "默认情况下，验证器在重置或修改密码的表单中使用，也可以在 :djadmin:`createsuperuser` 和 :djadmin:`changepassword` 命令中使用。验证器不能应用在模型层，比如 ``User.objects.create_user()`` 和 ``create_superuser()`` ，因为我们假设开发者（非用户）会在模型层与 Django 进行交互，也因为模型验证不会在创建模型时自动运行。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:454
msgid ""
"Password validation can prevent the use of many types of weak passwords. "
"However, the fact that a password passes all the validators doesn't "
"guarantee that it is a strong password. There are many factors that can "
"weaken a password that are not detectable by even the most advanced password"
" validators."
msgstr "密码验证器可以防止使用很多类型的弱密码。但是，密码通过所有的验证器并不能保证它就是强密码。这里有很多因素削弱即便最先进的密码验证程序也检测不到的密码。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:461
msgid "Enabling password validation"
msgstr "启用密码验证"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:463
msgid ""
"Password validation is configured in the :setting:`AUTH_PASSWORD_VALIDATORS`"
" setting::"
msgstr "在 :setting:`AUTH_PASSWORD_VALIDATORS` 中设置密码验证："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:484
msgid "This example enables all four included validators:"
msgstr "这个例子启用了所有包含的验证器："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:486
msgid ""
"``UserAttributeSimilarityValidator``, which checks the similarity between "
"the password and a set of attributes of the user."
msgstr "``UserAttributeSimilarityValidator`` 检查密码和一组用户属性集合之间的相似性。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:488
msgid ""
"``MinimumLengthValidator``, which simply checks whether the password meets a"
" minimum length. This validator is configured with a custom option: it now "
"requires the minimum length to be nine characters, instead of the default "
"eight."
msgstr "``MinimumLengthValidator`` 用来简单检查密码是否符合最小长度。这个验证器可以自定义设置：它现在需要最短9位字符，而不是默认的8个字符。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:492
msgid ""
"``CommonPasswordValidator``, which checks whether the password occurs in a "
"list of common passwords. By default, it compares to an included list of "
"20,000 common passwords."
msgstr "``CommonPasswordValidator`` 检查密码是否在常用密码列表中。默认情况下，它会与列表中的2000个常用密码作比较。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:495
msgid ""
"``NumericPasswordValidator``, which checks whether the password isn't "
"entirely numeric."
msgstr "``NumericPasswordValidator`` 检查密码是否是完全是数字的。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:498
msgid ""
"For ``UserAttributeSimilarityValidator`` and ``CommonPasswordValidator``, "
"we're simply using the default settings in this example. "
"``NumericPasswordValidator`` has no settings."
msgstr "对于 ``UserAttributeSimilarityValidator`` 和 ``CommonPasswordValidator`` 我们可以简单的使用这个例子中的默认配置。``NumericPasswordValidator`` 不需要设置。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:502
msgid ""
"The help texts and any errors from password validators are always returned "
"in the order they are listed in :setting:`AUTH_PASSWORD_VALIDATORS`."
msgstr "帮助文本和来自密码验证器的任何错误信息始终按照  :setting:`AUTH_PASSWORD_VALIDATORS` 列出的顺序返回。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:506
msgid "Included validators"
msgstr "已包含的验证器"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:508
msgid "Django includes four validators:"
msgstr "Django 包含了四种验证器："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:512
msgid ""
"Validates whether the password meets a minimum length. The minimum length "
"can be customized with the ``min_length`` parameter."
msgstr "验证密码是否符合最小长度。最小长度可以在 ``min_length`` 参数中自定义。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:517
msgid ""
"Validates whether the password is sufficiently different from certain "
"attributes of the user."
msgstr "验证密码是否与用户的某些属性有很大的区别。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:520
msgid ""
"The ``user_attributes`` parameter should be an iterable of names of user "
"attributes to compare to. If this argument is not provided, the default is "
"used: ``'username', 'first_name', 'last_name', 'email'``. Attributes that "
"don't exist are ignored."
msgstr "``user_attributes`` 参数应该是可比较的用户属性名的可迭代参数。如果没有提供这个参数，默认使用：``'username', 'first_name', 'last_name', 'email'`` 。不存在的属性会被忽略。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:525
msgid ""
"The minimum similarity of a rejected password can be set on a scale of 0 to "
"1 with the ``max_similarity`` parameter. A setting of 0 rejects all "
"passwords, whereas a setting of 1 rejects only passwords that are identical "
"to an attribute's value."
msgstr "不合格密码的最小相似度被设置为0到1这个区间。设置为0会拒绝所有密码，而设置为1只会拒绝与属性值相同的密码。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:532
msgid ""
"Validates whether the password is not a common password. This converts the "
"password to lowercase (to do a case-insensitive comparison) and checks it "
"against a list of 20,000 common password created by `Royce Williams "
"<https://gist.github.com/roycewilliams/281ce539915a947a23db17137d91aeb7>`_."
msgstr "验证密码是否是常用密码。先转换密码为小写字母（做一个不区分大小写的比较），然后根据 `Royce Williams <https://gist.github.com/roycewilliams/281ce539915a947a23db17137d91aeb7>`_ 创建的2000个常用密码的列表进行检查。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:537
msgid ""
"The ``password_list_path`` can be set to the path of a custom file of common"
" passwords. This file should contain one lowercase password per line and may"
" be plain text or gzipped."
msgstr "``password_list_path`` 用来设置自定义的常用密码列表文件的路径。这个文件应该每行包含一个小写密码，并且文件是纯文本或 gzip 压缩过的。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:543
msgid "In older versions, a list of 1,000 common passwords is used."
msgstr "在旧版本中使用的是1000个常用密码列表。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:547
msgid "Validates whether the password is not entirely numeric."
msgstr "检查密码是否完全是数字。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:550
msgid "Integrating validation"
msgstr "集成检查"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:552
msgid ""
"There are a few functions in ``django.contrib.auth.password_validation`` "
"that you can call from your own forms or other code to integrate password "
"validation. This can be useful if you use custom forms for password setting,"
" or if you have API calls that allow passwords to be set, for example."
msgstr "``django.contrib.auth.password_validation`` 包含一些你可以在表单或其他地方调用的函数，用来集成密码检查。如果你使用自定义表单来进行密码设置或者你有允许密码设置的 API 调用，此功能会很有用。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:559
msgid ""
"Validates a password. If all validators find the password valid, returns "
"``None``. If one or more validators reject the password, raises a "
":exc:`~django.core.exceptions.ValidationError` with all the error messages "
"from the validators."
msgstr "验证密码。如果所有验证器验证密码有效，则返回 ``None`` 。如果一个或多个验证器拒绝此密码，将会引发 :exc:`~django.core.exceptions.ValidationError` 和验证器的错误信息。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:564
msgid ""
"The ``user`` object is optional: if it's not provided, some validators may "
"not be able to perform any validation and will accept any password."
msgstr "``user`` 对象是可选的：如果不提供用户对象，一些验证器将不能执行验证，并将接受所有密码。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:569
msgid ""
"Informs all validators that the password has been changed. This can be used "
"by validators such as one that prevents password reuse. This should be "
"called once the password has been successfully changed."
msgstr "通知所有验证器密码已经更改。这可以由验证器使用，例如防止密码重用。一旦密码更改成功，则调用此方法。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:573
msgid ""
"For subclasses of :class:`~django.contrib.auth.models.AbstractBaseUser`, the"
" password field will be marked as \"dirty\" when calling "
":meth:`~django.contrib.auth.models.AbstractBaseUser.set_password` which "
"triggers a call to ``password_changed()`` after the user is saved."
msgstr "对于 :class:`~django.contrib.auth.models.AbstractBaseUser` 子类，当调用 :meth:`~django.contrib.auth.models.AbstractBaseUser.set_password` 是会将密码字段标记为 \"dirty\" ，这会在用户保存后调用 ``password_changed()`` 。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:580
msgid ""
"Returns a list of the help texts of all validators. These explain the "
"password requirements to the user."
msgstr "返回一个所有验证器帮助文案的列表。这些向用户解释了密码要求。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:585
msgid ""
"Returns an HTML string with all help texts in an ``<ul>``. This is helpful "
"when adding password validation to forms, as you can pass the output "
"directly to the ``help_text`` parameter of a form field."
msgstr "返回一个``<ul>`` ，包含所有帮助文案的 HTML 字符串。这在表单中添加密码验证时有帮助，因为你可以直接将输出传递到表单字段的 ``help_text`` 参数。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:591
msgid ""
"Returns a set of validator objects based on the ``validator_config`` "
"parameter. By default, all functions use the validators defined in "
":setting:`AUTH_PASSWORD_VALIDATORS`, but by calling this function with an "
"alternate set of validators and then passing the result into the "
"``password_validators`` parameter of the other functions, your custom set of"
" validators will be used instead. This is useful when you have a typical set"
" of validators to use for most scenarios, but also have a special situation "
"that requires a custom set. If you always use the same set of validators, "
"there is no need to use this function, as the configuration from "
":setting:`AUTH_PASSWORD_VALIDATORS` is used by default."
msgstr "返回一个基于 ``validator_config`` 的验证器对象的集合。默认情况下，所有函数使用 :setting:`AUTH_PASSWORD_VALIDATORS` 定义的验证器，但通过一个验证器替代集合来调用此函数，然后向其他函数传递的密码验证器参数传递结果，将使用你自定义的验证器集合。当你有一个应用于大多数场景的通用的验证器集合时，需要一个自定义的集合来用于特殊情况。当你始终使用同一个验证器集合时，则不需要这个函数，因为默认使用是 :setting:`AUTH_PASSWORD_VALIDATORS` 的配置。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:602
msgid ""
"The structure of ``validator_config`` is identical to the structure of "
":setting:`AUTH_PASSWORD_VALIDATORS`. The return value of this function can "
"be passed into the ``password_validators`` parameter of the functions listed"
" above."
msgstr "``validator_config`` 的结构和 :setting:`AUTH_PASSWORD_VALIDATORS` 的结构相同。这个函数的返回值可以传递给上述函数列表的``password_validators`` 参数。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:607
msgid ""
"Note that where the password is passed to one of these functions, this "
"should always be the clear text password - not a hashed password."
msgstr "注意，如果将密码传递给其中一个函数，应该始终是明文密码，而不是哈希过的密码。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:611
msgid "Writing your own validator"
msgstr "编写自定义的验证器"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:613
msgid ""
"If Django's built-in validators are not sufficient, you can write your own "
"password validators. Validators are fairly simple classes. They must "
"implement two methods:"
msgstr "如果 Django 内置的验证器不满足你的需求，你可以编写自定义的验证器。验证器是相当简单的类。它们必须实现两个方法："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:617
msgid ""
"``validate(self, password, user=None)``: validate a password. Return "
"``None`` if the password is valid, or raise a "
":exc:`~django.core.exceptions.ValidationError` with an error message if the "
"password is not valid. You must be able to deal with ``user`` being ``None``"
" - if that means your validator can't run, simply return ``None`` for no "
"error."
msgstr "``validate(self, password, user=None)`` ：验证密码。如果密码有效，返回 ``None`` ，否则引发 :exc:`~django.core.exceptions.ValidationError` 错误。你必须能够处理 ``user`` 为 ``None`` 的情况，如果这样会让验证器无法运行，只需返回 ``None`` 即可。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:623
msgid ""
"``get_help_text()``: provide a help text to explain the requirements to the "
"user."
msgstr "``get_help_text()`` ：提供一个帮助文本向用户解释密码要求。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:626
msgid ""
"Any items in the ``OPTIONS`` in :setting:`AUTH_PASSWORD_VALIDATORS` for your"
" validator will be passed to the constructor. All constructor arguments "
"should have a default value."
msgstr "验证器的 :setting:`AUTH_PASSWORD_VALIDATORS` 中， ``OPTIONS`` 里的任何条目将会传递到构造器中。所有构造器参数应该有一个默认值。"

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:630
msgid "Here's a basic example of a validator, with one optional setting::"
msgstr "这里是一个验证器的基本示例，其中包含一个可选的设置："

#: ../../../../sources/2.2/docs/topics/auth/passwords.txt:653
msgid ""
"You can also implement ``password_changed(password, user=None``), which will"
" be called after a successful password change. That can be used to prevent "
"password reuse, for example. However, if you decide to store a user's "
"previous passwords, you should never do so in clear text."
msgstr "你也可以实现 ``password_changed(password, user=None)`` ，在密码修改成功后调用。比如说用来防止密码重用。但是，如果你决定存储用户之前的密码，则不应该以明文形式存储。"

#: ../../../../sources/2.2/docs/topics/cache.txt:3
msgid "Django's cache framework"
msgstr "Django 缓存框架"

#: ../../../../sources/2.2/docs/topics/cache.txt:5
msgid ""
"A fundamental trade-off in dynamic websites is, well, they're dynamic. Each "
"time a user requests a page, the Web server makes all sorts of calculations "
"-- from database queries to template rendering to business logic -- to "
"create the page that your site's visitor sees. This is a lot more expensive,"
" from a processing-overhead perspective, than your standard read-a-file-off-"
"the-filesystem server arrangement."
msgstr "动态网站存在一个基本权衡是——它们是动态的。每次用户请求一个页面，web 服务器需要提供各种各样的计算——从数据库查询到模板渲染再到业务逻辑——最后建立页面呈现给用户。从处理开销的角度来看，这比标准读取文件系统服务安排的开销要高得多。"

#: ../../../../sources/2.2/docs/topics/cache.txt:12
msgid ""
"For most Web applications, this overhead isn't a big deal. Most Web "
"applications aren't ``washingtonpost.com`` or ``slashdot.org``; they're "
"simply small- to medium-sized sites with so-so traffic. But for medium- to "
"high-traffic sites, it's essential to cut as much overhead as possible."
msgstr "对于大多数 web 应用程序，这种开销并不算什么。大部分 web 应用程序并不是 ``washingtonpost.com`` 或 ``slashdot.org``; 它们是一般流量的小到中型网站。但对于中大型网站，必须尽可能减少开销。"

#: ../../../../sources/2.2/docs/topics/cache.txt:17
msgid "That's where caching comes in."
msgstr "这就是缓存的用武之地。"

#: ../../../../sources/2.2/docs/topics/cache.txt:19
msgid ""
"To cache something is to save the result of an expensive calculation so that"
" you don't have to perform the calculation next time. Here's some pseudocode"
" explaining how this would work for a dynamically generated Web page::"
msgstr "缓存一些经过大量费时的计算结果，这样你下次就不用执行这种计算。下面是一些伪代码解释了动态网站生成页面的时候，缓存是怎么工作的："

#: ../../../../sources/2.2/docs/topics/cache.txt:31
msgid ""
"Django comes with a robust cache system that lets you save dynamic pages so "
"they don't have to be calculated for each request. For convenience, Django "
"offers different levels of cache granularity: You can cache the output of "
"specific views, you can cache only the pieces that are difficult to produce,"
" or you can cache your entire site."
msgstr "Django 带有一个强大的缓存系统，你可以将动态页面保存，这样不用每次请求页面时都计算。为方便起见，Django 提供了不同级别的缓存粒度：你可以缓存特定视图，也可以只缓存难生成的部分内容，或者缓存整个网站。"

#: ../../../../sources/2.2/docs/topics/cache.txt:37
msgid ""
"Django also works well with \"downstream\" caches, such as `Squid "
"<http://www.squid-cache.org>`_ and browser-based caches. These are the types"
" of caches that you don't directly control but to which you can provide "
"hints (via HTTP headers) about which parts of your site should be cached, "
"and how."
msgstr "Django 也适用于 \"下游\" 缓存，比如 Squid 和基于浏览器的缓存。这些是不能直接控制的缓存类型，但你可以提供有关网站应该缓存哪些部分以及如何缓存的提示（通过 HTTP headers）。"

#: ../../../../sources/2.2/docs/topics/cache.txt:43
msgid ""
"The :ref:`Cache Framework design philosophy <cache-design-philosophy>` "
"explains a few of the design decisions of the framework."
msgstr "缓存框架设计理念<cache-design-philosophy>解释了框架的一些设计决策。"

#: ../../../../sources/2.2/docs/topics/cache.txt:49
msgid "Setting up the cache"
msgstr "设置缓存"

#: ../../../../sources/2.2/docs/topics/cache.txt:51
msgid ""
"The cache system requires a small amount of setup. Namely, you have to tell "
"it where your cached data should live -- whether in a database, on the "
"filesystem or directly in memory. This is an important decision that affects"
" your cache's performance; yes, some cache types are faster than others."
msgstr "缓存系统的设置需要一些步骤。也就是说，你必须指明你的缓存数据所存放的位置——无论是一个数据库，还是文件系统，或者直接存放在内存。这是一个影响缓存性能的重要决定，因为某些缓存类型会比其他缓存类型更快。"

#: ../../../../sources/2.2/docs/topics/cache.txt:56
msgid ""
"Your cache preference goes in the :setting:`CACHES` setting in your settings"
" file. Here's an explanation of all available values for :setting:`CACHES`."
msgstr "缓存设置项位于你的配置文件的缓存配置中。这里有缓存配置所有可用值的说明。"

#: ../../../../sources/2.2/docs/topics/cache.txt:63
msgid "Memcached"
msgstr "Memcached"

#: ../../../../sources/2.2/docs/topics/cache.txt:65
msgid ""
"The fastest, most efficient type of cache supported natively by Django, "
"Memcached__ is an entirely memory-based cache server, originally developed "
"to handle high loads at LiveJournal.com and subsequently open-sourced by "
"Danga Interactive. It is used by sites such as Facebook and Wikipedia to "
"reduce database access and dramatically increase site performance."
msgstr "Memcached 是一个完全基于内存的缓存服务器，是 Django 原生支持的最快、最高效的缓存类型，最初被开发出来用于处理 LiveJournal.com 的高负载，随后由 Danga Interactive 开源。Facebook 和 Wikipedia 等网站使用它来减少数据库访问并显著提高网站性能。"

#: ../../../../sources/2.2/docs/topics/cache.txt:73
msgid ""
"Memcached runs as a daemon and is allotted a specified amount of RAM. All it"
" does is provide a fast interface for adding, retrieving and deleting data "
"in the cache. All data is stored directly in memory, so there's no overhead "
"of database or filesystem usage."
msgstr "Memcached 以一个守护进程的形式运行，并且被分配了指定数量的 RAM。它所做的就是提供一个快速接口用于在缓存中添加，检索和删除数据。所有数据都直接存储在内存中，因此不会产生数据库或文件系统使用的开销。"

#: ../../../../sources/2.2/docs/topics/cache.txt:78
msgid ""
"After installing Memcached itself, you'll need to install a Memcached "
"binding. There are several Python Memcached bindings available; the two most"
" common are `python-memcached`_ and `pylibmc`_."
msgstr "在安装 Memcached 本身后，你还需要安装一个  Memcached 绑定。有许多可用的 Python Memcached 绑定，最常见的两个是 python-memcached 和pylibmc"

#: ../../../../sources/2.2/docs/topics/cache.txt:85
msgid "To use Memcached with Django:"
msgstr "在 Django 中使用 Memcached ："

#: ../../../../sources/2.2/docs/topics/cache.txt:87
msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to "
"``django.core.cache.backends.memcached.MemcachedCache`` or "
"``django.core.cache.backends.memcached.PyLibMCCache`` (depending on your "
"chosen memcached binding)"
msgstr "将 BACKEND<CACHES-BACKEND> 设置为 django.core.cache.backends.memcached.MemcachedCache 或者 django.core.cache.backends.memcached.PyLibMCCache （取决于你所选择的 memcached 绑定）"

#: ../../../../sources/2.2/docs/topics/cache.txt:92
msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``ip:port`` values, where "
"``ip`` is the IP address of the Memcached daemon and ``port`` is the port on"
" which Memcached is running, or to a ``unix:path`` value, where ``path`` is "
"the path to a Memcached Unix socket file."
msgstr "将 LOCATION<CACHES-LOCATION>设置为 ip:port 值，其中 ip 是 Memcached 守护进程的 IP 地址，port 是运行 Memcached 的端口；或者设置为一个 unix:path 值，其中 path 是 Memcached Unix 套接字文件的路径。"

#: ../../../../sources/2.2/docs/topics/cache.txt:97
msgid ""
"In this example, Memcached is running on localhost (127.0.0.1) port 11211, "
"using the ``python-memcached`` binding::"
msgstr "在这个示例中，Memcached 使用 python-memcached 绑定，在 localhost (127.0.0.1) 端口 11211 上运行："

#: ../../../../sources/2.2/docs/topics/cache.txt:107
msgid ""
"In this example, Memcached is available through a local Unix socket file "
":file:`/tmp/memcached.sock` using the ``python-memcached`` binding::"
msgstr "在这个示例中， Memcached 可通过本地 Unix 套接字文件 /tmp/memcached.sock 使用 python-memcached 绑定得到："

#: ../../../../sources/2.2/docs/topics/cache.txt:117
msgid ""
"When using the ``pylibmc`` binding, do not include the ``unix:/`` prefix::"
msgstr "当使用 pylibmc 绑定时，不要包含 unix:/ 前缀："

#: ../../../../sources/2.2/docs/topics/cache.txt:126
msgid ""
"One excellent feature of Memcached is its ability to share a cache over "
"multiple servers. This means you can run Memcached daemons on multiple "
"machines, and the program will treat the group of machines as a *single* "
"cache, without the need to duplicate cache values on each machine. To take "
"advantage of this feature, include all server addresses in "
":setting:`LOCATION <CACHES-LOCATION>`, either as a semicolon or comma "
"delimited string, or as a list."
msgstr "Memcached 的一个出色功能是它能够在多个服务器上共享缓存。这意味着您可以在多台计算机上运行 Memcached 守护程序，程序会视这组计算机为单个缓存，而无需在每台机器上复制缓存值。要使用此功能，需要在 LOCATION 中包含所有服务器的地址，可以是分号或者逗号分隔的字符串，也可以是一个列表。"

#: ../../../../sources/2.2/docs/topics/cache.txt:134
msgid ""
"In this example, the cache is shared over Memcached instances running on IP "
"address 172.19.26.240 and 172.19.26.242, both on port 11211::"
msgstr "在这个示例中，缓存通过端口 11211 的 IP 地址 172.19.26.240 、 172.19.26.242 运行的 Memcached 实例共享："

#: ../../../../sources/2.2/docs/topics/cache.txt:147
msgid ""
"In the following example, the cache is shared over Memcached instances "
"running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port "
"11212), and 172.19.26.244 (port 11213)::"
msgstr "在以下示例中，缓存通过在 IP 地址 172.19.26.240（端口号 11211），172.19.26.242（端口号 11212）和 172.19.26.244（端口号 11213）上运行的 Memcached 实例共享："

#: ../../../../sources/2.2/docs/topics/cache.txt:162
msgid ""
"A final point about Memcached is that memory-based caching has a "
"disadvantage: because the cached data is stored in memory, the data will be "
"lost if your server crashes. Clearly, memory isn't intended for permanent "
"data storage, so don't rely on memory-based caching as your only data "
"storage. Without a doubt, *none* of the Django caching backends should be "
"used for permanent storage -- they're all intended to be solutions for "
"caching, not storage -- but we point this out here because memory-based "
"caching is particularly temporary."
msgstr "关于 Memcached 的最后一点是，基于内存的缓存有一个缺点：因为缓存的数据存储在内存中，如果服务器崩溃，那么数据将会丢失。显然，内存不适用于持久数据存储，因此不要依赖基于内存的缓存作为你唯一的数据存储。毫无疑问，没有任何 Django 缓存后端应该被用于持久存储——它们都是适用于缓存的解决方案，而不是存储——我们在这里指出这一点是因为基于内存的缓存是格外临时的。"

#: ../../../../sources/2.2/docs/topics/cache.txt:174
msgid "Database caching"
msgstr "数据库缓存"

#: ../../../../sources/2.2/docs/topics/cache.txt:176
msgid ""
"Django can store its cached data in your database. This works best if you've"
" got a fast, well-indexed database server."
msgstr "Django 可以在数据库中存储缓存数据。如果你有一个快速、索引正常的数据库服务器，这种缓存效果最好。"

#: ../../../../sources/2.2/docs/topics/cache.txt:179
msgid "To use a database table as your cache backend:"
msgstr "用数据库表作为你的缓存后端："

#: ../../../../sources/2.2/docs/topics/cache.txt:181
msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to "
"``django.core.cache.backends.db.DatabaseCache``"
msgstr "将 :setting:`BACKEND <CACHES-BACKEND>` 设置为 ``django.core.cache.backends.db.DatabaseCache``"

#: ../../../../sources/2.2/docs/topics/cache.txt:184
msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``tablename``, the name of the "
"database table. This name can be whatever you want, as long as it's a valid "
"table name that's not already being used in your database."
msgstr "将 :setting:`LOCATION <CACHES-LOCATION>` 设置为 数据库表的``表名``。这个表名可以是没有使用过的任何符合要求的名称。"

#: ../../../../sources/2.2/docs/topics/cache.txt:188
msgid "In this example, the cache table's name is ``my_cache_table``::"
msgstr "在这个例子中，缓存表的名称是 ``my_cache_table`` ："

#: ../../../../sources/2.2/docs/topics/cache.txt:198
msgid "Creating the cache table"
msgstr "创建缓存表"

#: ../../../../sources/2.2/docs/topics/cache.txt:200
msgid ""
"Before using the database cache, you must create the cache table with this "
"command::"
msgstr "使用数据库缓存之前，必须通过下面的命令创建缓存表："

#: ../../../../sources/2.2/docs/topics/cache.txt:205
msgid ""
"This creates a table in your database that is in the proper format that "
"Django's database-cache system expects. The name of the table is taken from "
":setting:`LOCATION <CACHES-LOCATION>`."
msgstr "这将在数据库中创建一个表，该表的格式与 Django 数据库缓存系统期望的一致。该表的表名取自 :setting:`LOCATION <CACHES-LOCATION>` 。"

#: ../../../../sources/2.2/docs/topics/cache.txt:209
msgid ""
"If you are using multiple database caches, :djadmin:`createcachetable` "
"creates one table for each cache."
msgstr "如果你正在使用多数据库缓存， :djadmin:`createcachetable` 会对每个缓存创建一个表。"

#: ../../../../sources/2.2/docs/topics/cache.txt:212
msgid ""
"If you are using multiple databases, :djadmin:`createcachetable` observes "
"the ``allow_migrate()`` method of your database routers (see below)."
msgstr "如果你正在使用多数据库， :djadmin:`createcachetable` 将遵循数据库路由的 ``allow_migrate()`` 方法。"

#: ../../../../sources/2.2/docs/topics/cache.txt:215
msgid ""
"Like :djadmin:`migrate`, :djadmin:`createcachetable` won't touch an existing"
" table. It will only create missing tables."
msgstr "像 :djadmin:`migrate` 一样， :djadmin:`createcachetable` 不会影响已经存在的表，它只创建缺失的表。"

#: ../../../../sources/2.2/docs/topics/cache.txt:218
msgid ""
"To print the SQL that would be run, rather than run it, use the "
":option:`createcachetable --dry-run` option."
msgstr "要打印即将运行的 SQL，而不是运行它，请使用 :option:`createcachetable --dry-run` 选项。"

#: ../../../../sources/2.2/docs/topics/cache.txt:222
#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:3
msgid "Multiple databases"
msgstr "多数据库"

#: ../../../../sources/2.2/docs/topics/cache.txt:224
msgid ""
"If you use database caching with multiple databases, you'll also need to set"
" up routing instructions for your database cache table. For the purposes of "
"routing, the database cache table appears as a model named ``CacheEntry``, "
"in an application named ``django_cache``. This model won't appear in the "
"models cache, but the model details can be used for routing purposes."
msgstr "如果在多数据库中使用缓存，你也需要设置数据库缓存表的路由指令。因为路由的原因，数据库缓存表在 ``django_cache`` 应用程序中显示为 ``CacheEntry`` 的模型名。这个模型不会出现在模型缓存中，但模型详情可用于路由目的。"

#: ../../../../sources/2.2/docs/topics/cache.txt:231
msgid ""
"For example, the following router would direct all cache read operations to "
"``cache_replica``, and all write operations to ``cache_primary``. The cache "
"table will only be synchronized onto ``cache_primary``::"
msgstr "比如，下面的路由可以将所有缓存读取操作指向 ``cache_replica`` ，并且所有的写操作指向 ``cache_primary``。缓存表将会只同步到 ``cache_primary``。"

#: ../../../../sources/2.2/docs/topics/cache.txt:257
msgid ""
"If you don't specify routing directions for the database cache model, the "
"cache backend will use the ``default`` database."
msgstr "如果你没有指定路由指向数据库缓存模型，缓存后端将使用 ``默认`` 的数据库。"

#: ../../../../sources/2.2/docs/topics/cache.txt:260
msgid ""
"Of course, if you don't use the database cache backend, you don't need to "
"worry about providing routing instructions for the database cache model."
msgstr "当然，如果没使用数据库缓存后端，则无需担心为数据库缓存模型提供路由指令。"

#: ../../../../sources/2.2/docs/topics/cache.txt:265
msgid "Filesystem caching"
msgstr "文件系统缓存"

#: ../../../../sources/2.2/docs/topics/cache.txt:267
msgid ""
"The file-based backend serializes and stores each cache value as a separate "
"file. To use this backend set :setting:`BACKEND <CACHES-BACKEND>` to "
"``\"django.core.cache.backends.filebased.FileBasedCache\"`` and "
":setting:`LOCATION <CACHES-LOCATION>` to a suitable directory. For example, "
"to store cached data in ``/var/tmp/django_cache``, use this setting::"
msgstr "基于文件的后端序列化并保存每个缓存值作为单独的文件。要使用此后端，可将 :setting:`BACKEND <CACHES-BACKEND>` 设置为 ``\"django.core.cache.backends.filebased.FileBasedCache\"`` 并将 :setting:`LOCATION <CACHES-LOCATION>` 设置为一个合适的路径。比如，在 ``/var/tmp/django_cache`` 存储缓存数据，使用以下配置："

#: ../../../../sources/2.2/docs/topics/cache.txt:280
msgid ""
"If you're on Windows, put the drive letter at the beginning of the path, "
"like this::"
msgstr "如果使用 Windows 系统，将驱动器号放在路径开头，如下："

#: ../../../../sources/2.2/docs/topics/cache.txt:290
msgid ""
"The directory path should be absolute -- that is, it should start at the "
"root of your filesystem. It doesn't matter whether you put a slash at the "
"end of the setting."
msgstr "目录路径应该是绝对路径——因此，它应该以文件系统根目录开始。无需担心是否需要以斜杠结尾。"

#: ../../../../sources/2.2/docs/topics/cache.txt:294
msgid ""
"Make sure the directory pointed-to by this setting exists and is readable "
"and writable by the system user under which your Web server runs. Continuing"
" the above example, if your server runs as the user ``apache``, make sure "
"the directory ``/var/tmp/django_cache`` exists and is readable and writable "
"by the user ``apache``."
msgstr "确保这个配置指向的目录存在，并且可由运行 Web 服务器的系统用户读写。继续上面的例子，如果服务器被用户 ``apache`` 运行，确保目录 ``/var/tmp/django_cache`` 存在并且可被用户 ``apache`` 读写。"

#: ../../../../sources/2.2/docs/topics/cache.txt:303
msgid "Local-memory caching"
msgstr "本地内存缓存"

#: ../../../../sources/2.2/docs/topics/cache.txt:305
msgid ""
"This is the default cache if another is not specified in your settings file."
" If you want the speed advantages of in-memory caching but don't have the "
"capability of running Memcached, consider the local-memory cache backend. "
"This cache is per-process (see below) and thread-safe. To use it, set "
":setting:`BACKEND <CACHES-BACKEND>` to "
"``\"django.core.cache.backends.locmem.LocMemCache\"``. For example::"
msgstr "如果在配置文件中没有指定缓存，那么将默认使用本地内存缓存。如果你想要内存缓存的速度优势，但又没有条件使用 Memcached，那么可以考虑本地内存缓存后端。"

#: ../../../../sources/2.2/docs/topics/cache.txt:319
msgid ""
"The cache :setting:`LOCATION <CACHES-LOCATION>` is used to identify "
"individual memory stores. If you only have one ``locmem`` cache, you can "
"omit the :setting:`LOCATION <CACHES-LOCATION>`; however, if you have more "
"than one local memory cache, you will need to assign a name to at least one "
"of them in order to keep them separate."
msgstr ":setting:`LOCATION <CACHES-LOCATION>` 被用于标识各个内存存储。如果只有一个 ``locmem`` 缓存，你可以忽略 :setting:`LOCATION <CACHES-LOCATION>` 。但是如果你有多个本地内存缓存，那么你至少要为其中一个起个名字，以便将它们区分开。"

#: ../../../../sources/2.2/docs/topics/cache.txt:325
msgid "The cache uses a least-recently-used (LRU) culling strategy."
msgstr "这种缓存使用最近最少使用（LRU）的淘汰策略。"

#: ../../../../sources/2.2/docs/topics/cache.txt:327
msgid ""
"Note that each process will have its own private cache instance, which means"
" no cross-process caching is possible. This obviously also means the local "
"memory cache isn't particularly memory-efficient, so it's probably not a "
"good choice for production environments. It's nice for development."
msgstr "注意，每个进程将有它们自己的私有缓存实例，这意味着不存在跨进程的缓存。这也同样意味着本地内存缓存不是特别节省内存，因此它或许不是生成环境的好选择，不过它在开发环境中表现很好。"

#: ../../../../sources/2.2/docs/topics/cache.txt:334
msgid "Older versions use a pseudo-random culling strategy rather than LRU."
msgstr "旧版本中使用伪随机淘汰策略，而不是 LRU。"

#: ../../../../sources/2.2/docs/topics/cache.txt:337
msgid "Dummy caching (for development)"
msgstr "虚拟缓存（用于开发模式）"

#: ../../../../sources/2.2/docs/topics/cache.txt:339
msgid ""
"Finally, Django comes with a \"dummy\" cache that doesn't actually cache -- "
"it just implements the cache interface without doing anything."
msgstr "最后，Django 带有一个实际上不是缓存的 \"虚拟\" 缓存，它只是实现缓存接口，并不做其他操作。"

#: ../../../../sources/2.2/docs/topics/cache.txt:342
msgid ""
"This is useful if you have a production site that uses heavy-duty caching in"
" various places but a development/test environment where you don't want to "
"cache and don't want to have to change your code to special-case the latter."
" To activate dummy caching, set :setting:`BACKEND <CACHES-BACKEND>` like "
"so::"
msgstr "如果你有一个正式网站在不同地方使用了重型缓存，但你不想在开发环境使用缓存，而且不想为这个特殊场景而修改代码的时候，这将非常有用。要激活虚拟缓存，像这样设置 :setting:`BACKEND <CACHES-BACKEND>` 。"

#: ../../../../sources/2.2/docs/topics/cache.txt:354
msgid "Using a custom cache backend"
msgstr "使用自定义的缓存后台"

#: ../../../../sources/2.2/docs/topics/cache.txt:356
msgid ""
"While Django includes support for a number of cache backends out-of-the-box,"
" sometimes you might want to use a customized cache backend. To use an "
"external cache backend with Django, use the Python import path as the "
":setting:`BACKEND <CACHES-BACKEND>` of the :setting:`CACHES` setting, like "
"so::"
msgstr "虽然 Django 自带一些缓存后端，但有时你也想使用自定义的缓存后端。当使用第三方缓存后端时，使用 Python 导入路径作为 Cache 设置的后端，像这样："

#: ../../../../sources/2.2/docs/topics/cache.txt:367
msgid ""
"If you're building your own backend, you can use the standard cache backends"
" as reference implementations. You'll find the code in the "
"``django/core/cache/backends/`` directory of the Django source."
msgstr "如果你正在创建自己的后端，你可以使用标准缓存作为参考实现。你在 Django 源代码的 ``django/core/cache/backends/`` 目录找到代码。"

#: ../../../../sources/2.2/docs/topics/cache.txt:371
msgid ""
"Note: Without a really compelling reason, such as a host that doesn't "
"support them, you should stick to the cache backends included with Django. "
"They've been well-tested and are easy to use."
msgstr "注意：除非是令人信服的理由，诸如服务器不支持缓存，否则你应该使用 Django 附带的缓存后端。他们经过了良好的测试并易于使用。"

#: ../../../../sources/2.2/docs/topics/cache.txt:378
msgid "Cache arguments"
msgstr "缓存参数"

#: ../../../../sources/2.2/docs/topics/cache.txt:380
msgid ""
"Each cache backend can be given additional arguments to control caching "
"behavior. These arguments are provided as additional keys in the "
":setting:`CACHES` setting. Valid arguments are as follows:"
msgstr "每个缓存后端可以通过额外的参数来控制缓存行为。这些参数在 :setting:`CACHES` 设置中作为附加键提供。有效参数如下："

#: ../../../../sources/2.2/docs/topics/cache.txt:384
msgid ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to use"
" for the cache. This argument defaults to ``300`` seconds (5 minutes). You "
"can set ``TIMEOUT`` to ``None`` so that, by default, cache keys never "
"expire. A value of ``0`` causes keys to immediately expire (effectively "
"\"don't cache\")."
msgstr "缓存:setting:`TIMEOUT <CACHES-TIMEOUT>` ：用于缓存的默认超时时间（以秒为单位）。这个参数默认为 ``300`` 秒（5分钟）。你可以设置 ``TIMEOUT`` 为 ``None``，因此，默认情况下缓存键永不过时。值为 ``0`` 会导致键立刻过期（实际上就是不缓存）。"

#: ../../../../sources/2.2/docs/topics/cache.txt:390
msgid ""
":setting:`OPTIONS <CACHES-OPTIONS>`: Any options that should be passed to "
"the cache backend. The list of valid options will vary with each backend, "
"and cache backends backed by a third-party library will pass their options "
"directly to the underlying cache library."
msgstr ":setting:`OPTIONS <CACHES-OPTIONS>` ：任何选项应该传递到缓存后端。有效选项列表将随着每个后端变化，并且由第三方库缓存支持的后端将直接传递它们的选项到底层缓存库。"

#: ../../../../sources/2.2/docs/topics/cache.txt:395
msgid ""
"Cache backends that implement their own culling strategy (i.e., the "
"``locmem``, ``filesystem`` and ``database`` backends) will honor the "
"following options:"
msgstr "实现自有的淘汰策略的缓存后端（比如 ``locmem``, ``filesystem`` 和 ``database`` 后端）将遵循以下选项："

#: ../../../../sources/2.2/docs/topics/cache.txt:399
msgid ""
"``MAX_ENTRIES``: The maximum number of entries allowed in the cache before "
"old values are deleted. This argument defaults to ``300``."
msgstr "``MAX_ENTRIES`` ：删除旧值之前允许缓存的最大条目。默认是 ``300`` 。"

#: ../../../../sources/2.2/docs/topics/cache.txt:403
msgid ""
"``CULL_FREQUENCY``: The fraction of entries that are culled when "
"``MAX_ENTRIES`` is reached. The actual ratio is ``1 / CULL_FREQUENCY``, so "
"set ``CULL_FREQUENCY`` to ``2`` to cull half the entries when "
"``MAX_ENTRIES`` is reached. This argument should be an integer and defaults "
"to ``3``."
msgstr "``CULL_FREQUENCY`` ：当达到 ``MAX_ENTRIES`` 时被淘汰的部分条目。实际比率为 1 / CULL_FREQUENCY ，当达到 ``MAX_ENTRIES`` 时，设置为2就会淘汰一半的条目。这个参数应该是一个整数，默认为3。"

#: ../../../../sources/2.2/docs/topics/cache.txt:409
msgid ""
"A value of ``0`` for ``CULL_FREQUENCY`` means that the entire cache will be "
"dumped when ``MAX_ENTRIES`` is reached. On some backends (``database`` in "
"particular) this makes culling *much* faster at the expense of more cache "
"misses."
msgstr "``CULL_FREQUENCY`` 的值为 ``0`` 意味着当达到 ``MAX_ENTRIES`` 缓存时，整个缓存都会被清空。在一些后端（尤其是 ``database`` ），这会使以更多的缓存未命中为代价来更快的进行淘汰。"

#: ../../../../sources/2.2/docs/topics/cache.txt:414
msgid ""
"Memcached backends pass the contents of :setting:`OPTIONS <CACHES-OPTIONS>` "
"as keyword arguments to the client constructors, allowing for more advanced "
"control of client behavior. For example usage, see below."
msgstr "Memcached 后端传递 :setting:`OPTIONS <CACHES-OPTIONS>` 的内容作为键参数到客户端构造函数，从而允许对客户端行为进行更高级的控制。参见下文："

#: ../../../../sources/2.2/docs/topics/cache.txt:418
msgid ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: A string that will be "
"automatically included (prepended by default) to all cache keys used by the "
"Django server."
msgstr ":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` ：将自动包含（默认预先添加）到Django 服务器使用的所有缓存键的字符串。"

#: ../../../../sources/2.2/docs/topics/cache.txt:422
msgid ""
"See the :ref:`cache documentation <cache_key_prefixing>` for more "
"information."
msgstr "查看 :ref:`cache documentation <cache_key_prefixing>` 获取更多信息。"

#: ../../../../sources/2.2/docs/topics/cache.txt:425
msgid ""
":setting:`VERSION <CACHES-VERSION>`: The default version number for cache "
"keys generated by the Django server."
msgstr ":setting:`VERSION <CACHES-VERSION>` ：通过 Django 服务器生成的缓存键的默认版本号。"

#: ../../../../sources/2.2/docs/topics/cache.txt:428
msgid ""
"See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr "查看 :ref:`cache documentation <cache_versioning>` 获取更多信息。"

#: ../../../../sources/2.2/docs/topics/cache.txt:431
msgid ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` A string containing a dotted "
"path to a function that defines how to compose a prefix, version and key "
"into a final cache key."
msgstr ":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` ：一个包含指向函数的路径的字符串，该函数定义将如何前缀、版本和键组成最终的缓存键。"

#: ../../../../sources/2.2/docs/topics/cache.txt:435
msgid ""
"See the :ref:`cache documentation <cache_key_transformation>` for more "
"information."
msgstr "查看 :ref:`cache documentation <cache_key_transformation>` 获取更多信息。"

#: ../../../../sources/2.2/docs/topics/cache.txt:438
msgid ""
"In this example, a filesystem backend is being configured with a timeout of "
"60 seconds, and a maximum capacity of 1000 items::"
msgstr "在这个例子中，文件系统后端正被设置成60秒超时时间，并且最大容量是1000条。"

#: ../../../../sources/2.2/docs/topics/cache.txt:452
msgid ""
"Here's an example configuration for a ``python-memcached`` based backend "
"with an object size limit of 2MB::"
msgstr "这个的例子是基于 ``python-memcached`` 后端的设置，对象大小限制在 2MB ："

#: ../../../../sources/2.2/docs/topics/cache.txt:465
msgid ""
"Here's an example configuration for a ``pylibmc`` based backend that enables"
" the binary protocol, SASL authentication, and the ``ketama`` behavior "
"mode::"
msgstr "这个例子是基于 ``pylibmc`` 后端的设置，改设置支持二进制协议、SASL 验证和 ``ketama`` 行为模式："

#: ../../../../sources/2.2/docs/topics/cache.txt:486
msgid "The per-site cache"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:488
msgid ""
"Once the cache is set up, the simplest way to use caching is to cache your "
"entire site. You'll need to add "
"``'django.middleware.cache.UpdateCacheMiddleware'`` and "
"``'django.middleware.cache.FetchFromCacheMiddleware'`` to your "
":setting:`MIDDLEWARE` setting, as in this example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:502
msgid ""
"No, that's not a typo: the \"update\" middleware must be first in the list, "
"and the \"fetch\" middleware must be last. The details are a bit obscure, "
"but see `Order of MIDDLEWARE`_ below if you'd like the full story."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:506
msgid ""
"Then, add the following required settings to your Django settings file:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:508
msgid ""
":setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:509
msgid ""
":setting:`CACHE_MIDDLEWARE_SECONDS` -- The number of seconds each page "
"should be cached."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:511
msgid ""
":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across "
"multiple sites using the same Django installation, set this to the name of "
"the site, or some other string that is unique to this Django instance, to "
"prevent key collisions. Use an empty string if you don't care."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:516
msgid ""
"``FetchFromCacheMiddleware`` caches GET and HEAD responses with status 200, "
"where the request and response headers allow. Responses to requests for the "
"same URL with different query parameters are considered to be unique pages "
"and are cached separately. This middleware expects that a HEAD request is "
"answered with the same response headers as the corresponding GET request; in"
" which case it can return a cached GET response for HEAD request."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:523
msgid ""
"Additionally, ``UpdateCacheMiddleware`` automatically sets a few headers in "
"each :class:`~django.http.HttpResponse`:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:526
msgid ""
"Sets the ``Expires`` header to the current date/time plus the defined "
":setting:`CACHE_MIDDLEWARE_SECONDS`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:529
msgid ""
"Sets the ``Cache-Control`` header to give a max age for the page -- again, "
"from the :setting:`CACHE_MIDDLEWARE_SECONDS` setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:532
msgid "See :doc:`/topics/http/middleware` for more on middleware."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:534
msgid ""
"If a view sets its own cache expiry time (i.e. it has a ``max-age`` section "
"in its ``Cache-Control`` header) then the page will be cached until the "
"expiry time, rather than :setting:`CACHE_MIDDLEWARE_SECONDS`. Using the "
"decorators in ``django.views.decorators.cache`` you can easily set a view's "
"expiry time (using the :func:`~django.views.decorators.cache.cache_control` "
"decorator) or disable caching for a view (using the "
":func:`~django.views.decorators.cache.never_cache` decorator). See the "
"`using other headers`__ section for more on these decorators."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:545
msgid ""
"If :setting:`USE_I18N` is set to ``True`` then the generated cache key will "
"include the name of the active :term:`language<language code>` -- see also "
":ref:`how-django-discovers-language-preference`). This allows you to easily "
"cache multilingual sites without having to create the cache key yourself."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:550
msgid ""
"Cache keys also include the active :term:`language <language code>` when "
":setting:`USE_L10N` is set to ``True`` and the :ref:`current time zone "
"<default-current-time-zone>` when :setting:`USE_TZ` is set to ``True``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:557
msgid "The per-view cache"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:561
msgid ""
"A more granular way to use the caching framework is by caching the output of"
" individual views. ``django.views.decorators.cache`` defines a "
"``cache_page`` decorator that will automatically cache the view's response "
"for you. It's easy to use::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:572
msgid ""
"``cache_page`` takes a single argument: the cache timeout, in seconds. In "
"the above example, the result of the ``my_view()`` view will be cached for "
"15 minutes. (Note that we've written it as ``60 * 15`` for the purpose of "
"readability. ``60 * 15`` will be evaluated to ``900`` -- that is, 15 minutes"
" multiplied by 60 seconds per minute.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:578
msgid ""
"The per-view cache, like the per-site cache, is keyed off of the URL. If "
"multiple URLs point at the same view, each URL will be cached separately. "
"Continuing the ``my_view`` example, if your URLconf looks like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:586
msgid ""
"then requests to ``/foo/1/`` and ``/foo/23/`` will be cached separately, as "
"you may expect. But once a particular URL (e.g., ``/foo/23/``) has been "
"requested, subsequent requests to that URL will use the cache."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:590
msgid ""
"``cache_page`` can also take an optional keyword argument, ``cache``, which "
"directs the decorator to use a specific cache (from your :setting:`CACHES` "
"setting) when caching view results. By default, the ``default`` cache will "
"be used, but you can specify any cache you want::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:600
msgid ""
"You can also override the cache prefix on a per-view basis. ``cache_page`` "
"takes an optional keyword argument, ``key_prefix``, which works in the same "
"way as the :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the "
"middleware.  It can be used like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:609
msgid ""
"The ``key_prefix`` and ``cache`` arguments may be specified together. The "
"``key_prefix`` argument and the :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` "
"specified under :setting:`CACHES` will be concatenated."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:614
msgid "Specifying per-view cache in the URLconf"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:616
msgid ""
"The examples in the previous section have hard-coded the fact that the view "
"is cached, because ``cache_page`` alters the ``my_view`` function in place. "
"This approach couples your view to the cache system, which is not ideal for "
"several reasons. For instance, you might want to reuse the view functions on"
" another, cache-less site, or you might want to distribute the views to "
"people who might want to use them without being cached. The solution to "
"these problems is to specify the per-view cache in the URLconf rather than "
"next to the view functions themselves."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:625
msgid ""
"Doing so is easy: simply wrap the view function with ``cache_page`` when you"
" refer to it in the URLconf. Here's the old URLconf from earlier::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:632
msgid "Here's the same thing, with ``my_view`` wrapped in ``cache_page``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:643
msgid "Template fragment caching"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:645
msgid ""
"If you're after even more control, you can also cache template fragments "
"using the ``cache`` template tag. To give your template access to this tag, "
"put ``{% load cache %}`` near the top of your template."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:649
msgid ""
"The ``{% cache %}`` template tag caches the contents of the block for a "
"given amount of time. It takes at least two arguments: the cache timeout, in"
" seconds, and the name to give the cache fragment. The fragment is cached "
"forever if timeout is ``None``. The name will be taken as is, do not use a "
"variable. For example:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:662
msgid ""
"Sometimes you might want to cache multiple copies of a fragment depending on"
" some dynamic data that appears inside the fragment. For example, you might "
"want a separate cached copy of the sidebar used in the previous example for "
"every user of your site. Do this by passing one or more additional "
"arguments, which may be variables with or without filters, to the ``{% cache"
" %}`` template tag to uniquely identify the cache fragment:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:676
msgid ""
"If :setting:`USE_I18N` is set to ``True`` the per-site middleware cache will"
" :ref:`respect the active language<i18n-cache-key>`. For the ``cache`` "
"template tag you could use one of the :ref:`translation-specific variables"
"<template-translation-vars>` available in templates to achieve the same "
"result:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:693
msgid ""
"The cache timeout can be a template variable, as long as the template "
"variable resolves to an integer value. For example, if the template variable"
" ``my_timeout`` is set to the value ``600``, then the following two examples"
" are equivalent:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:703
msgid ""
"This feature is useful in avoiding repetition in templates. You can set the "
"timeout in a variable, in one place, and just reuse that value."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:706
msgid ""
"By default, the cache tag will try to use the cache called "
"\"template_fragments\". If no such cache exists, it will fall back to using "
"the default cache. You may select an alternate cache backend to use with the"
" ``using`` keyword argument, which must be the last argument to the tag."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:715
msgid ""
"It is considered an error to specify a cache name that is not configured."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:719
msgid ""
"If you want to obtain the cache key used for a cached fragment, you can use "
"``make_template_fragment_key``. ``fragment_name`` is the same as second "
"argument to the ``cache`` template tag; ``vary_on`` is a list of all "
"additional arguments passed to the tag. This function can be useful for "
"invalidating or overwriting a cached item, for example:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:736
msgid "The low-level cache API"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:740
msgid ""
"Sometimes, caching an entire rendered page doesn't gain you very much and "
"is, in fact, inconvenient overkill."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:743
msgid ""
"Perhaps, for instance, your site includes a view whose results depend on "
"several expensive queries, the results of which change at different "
"intervals. In this case, it would not be ideal to use the full-page caching "
"that the per-site or per-view cache strategies offer, because you wouldn't "
"want to cache the entire result (since some of the data changes often), but "
"you'd still want to cache the results that rarely change."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:750
msgid ""
"For cases like this, Django exposes a simple, low-level cache API. You can "
"use this API to store objects in the cache with any level of granularity you"
" like. You can cache any Python object that can be pickled safely: strings, "
"dictionaries, lists of model objects, and so forth. (Most common Python "
"objects can be pickled; refer to the Python documentation for more "
"information about pickling.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:758
msgid "Accessing the cache"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:762
msgid ""
"You can access the caches configured in the :setting:`CACHES` setting "
"through a dict-like object: ``django.core.cache.caches``. Repeated requests "
"for the same alias in the same thread will return the same object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:773
msgid ""
"If the named key does not exist, ``InvalidCacheBackendError`` will be "
"raised."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:776
msgid ""
"To provide thread-safety, a different instance of the cache backend will be "
"returned for each thread."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:781
msgid ""
"As a shortcut, the default cache is available as "
"``django.core.cache.cache``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:786
msgid "This object is equivalent to ``caches['default']``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:789
msgid "Basic usage"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:793
msgid "The basic interface is:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:804
msgid ""
"``key`` should be a ``str``, and ``value`` can be any picklable Python "
"object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:806
msgid ""
"The ``timeout`` argument is optional and defaults to the ``timeout`` "
"argument of the appropriate backend in the :setting:`CACHES` setting "
"(explained above). It's the number of seconds the value should be stored in "
"the cache. Passing in ``None`` for ``timeout`` will cache the value forever."
" A ``timeout`` of ``0`` won't cache the value."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:812
msgid ""
"If the object doesn't exist in the cache, ``cache.get()`` returns ``None``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:818
msgid ""
"We advise against storing the literal value ``None`` in the cache, because "
"you won't be able to distinguish between your stored ``None`` value and a "
"cache miss signified by a return value of ``None``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:822
msgid ""
"``cache.get()`` can take a ``default`` argument. This specifies which value "
"to return if the object doesn't exist in the cache::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:830
msgid ""
"To add a key only if it doesn't already exist, use the ``add()`` method. It "
"takes the same parameters as ``set()``, but it will not attempt to update "
"the cache if the key specified is already present::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:839
msgid ""
"If you need to know whether ``add()`` stored a value in the cache, you can "
"check the return value. It will return ``True`` if the value was stored, "
"``False`` otherwise."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:845
msgid ""
"If you want to get a key's value or set a value if the key isn't in the "
"cache, there is the ``get_or_set()`` method. It takes the same parameters as"
" ``get()`` but the default is set as the new cache value for that key, "
"rather than simply returned::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:854
msgid "You can also pass any callable as a *default* value::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:862
msgid ""
"There's also a ``get_many()`` interface that only hits the cache once. "
"``get_many()`` returns a dictionary with all the keys you asked for that "
"actually exist in the cache (and haven't expired)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:874
msgid ""
"To set multiple values more efficiently, use ``set_many()`` to pass a "
"dictionary of key-value pairs::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:881
msgid ""
"Like ``cache.set()``, ``set_many()`` takes an optional ``timeout`` "
"parameter."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:883
msgid ""
"On supported backends (memcached), ``set_many()`` returns a list of keys "
"that failed to be inserted."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:888
msgid ""
"You can delete keys explicitly with ``delete()``. This is an easy way of "
"clearing the cache for a particular object::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:895
msgid ""
"If you want to clear a bunch of keys at once, ``delete_many()`` can take a "
"list of keys to be cleared::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:902
msgid ""
"Finally, if you want to delete all the keys in the cache, use "
"``cache.clear()``.  Be careful with this; ``clear()`` will remove "
"*everything* from the cache, not just the keys set by your application. ::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:912
msgid ""
"``cache.touch()`` sets a new expiration for a key. For example, to update a "
"key to expire 10 seconds from now::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:918
msgid ""
"Like other methods, the ``timeout`` argument is optional and defaults to the"
" ``TIMEOUT`` option of the appropriate backend in the :setting:`CACHES` "
"setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:921
msgid ""
"``touch()`` returns ``True`` if the key was successfully touched, ``False`` "
"otherwise."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:927
msgid ""
"You can also increment or decrement a key that already exists using the "
"``incr()`` or ``decr()`` methods, respectively. By default, the existing "
"cache value will be incremented or decremented by 1. Other "
"increment/decrement values can be specified by providing an argument to the "
"increment/decrement call. A ValueError will be raised if you attempt to "
"increment or decrement a nonexistent cache key.::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:946
msgid ""
"``incr()``/``decr()`` methods are not guaranteed to be atomic. On those "
"backends that support atomic increment/decrement (most notably, the "
"memcached backend), increment and decrement operations will be atomic. "
"However, if the backend doesn't natively provide an increment/decrement "
"operation, it will be implemented using a two-step retrieve/update."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:954
msgid ""
"You can close the connection to your cache with ``close()`` if implemented "
"by the cache backend."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:961
msgid "For caches that don't implement ``close`` methods it is a no-op."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:966
msgid "Cache key prefixing"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:968
msgid ""
"If you are sharing a cache instance between servers, or between your "
"production and development environments, it's possible for data cached by "
"one server to be used by another server. If the format of cached data is "
"different between servers, this can lead to some very hard to diagnose "
"problems."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:974
msgid ""
"To prevent this, Django provides the ability to prefix all cache keys used "
"by a server. When a particular cache key is saved or retrieved, Django will "
"automatically prefix the cache key with the value of the "
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` cache setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:979
msgid ""
"By ensuring each Django instance has a different :setting:`KEY_PREFIX "
"<CACHES-KEY_PREFIX>`, you can ensure that there will be no collisions in "
"cache values."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:986
msgid "Cache versioning"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:988
msgid ""
"When you change running code that uses cached values, you may need to purge "
"any existing cached values. The easiest way to do this is to flush the "
"entire cache, but this can lead to the loss of cache values that are still "
"valid and useful."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:993
msgid ""
"Django provides a better way to target individual cache values. Django's "
"cache framework has a system-wide version identifier, specified using the "
":setting:`VERSION <CACHES-VERSION>` cache setting. The value of this setting"
" is automatically combined with the cache prefix and the user-provided cache"
" key to obtain the final cache key."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:999
msgid ""
"By default, any key request will automatically include the site default "
"cache key version. However, the primitive cache functions all include a "
"``version`` argument, so you can specify a particular cache key version to "
"set or get. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1013
msgid ""
"The version of a specific key can be incremented and decremented using the "
"``incr_version()`` and ``decr_version()`` methods. This enables specific "
"keys to be bumped to a new version, leaving other keys unaffected. "
"Continuing our previous example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1033
msgid "Cache key transformation"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1035
msgid ""
"As described in the previous two sections, the cache key provided by a user "
"is not used verbatim -- it is combined with the cache prefix and key version"
" to provide a final cache key. By default, the three parts are joined using "
"colons to produce a final string::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1043
msgid ""
"If you want to combine the parts in different ways, or apply other "
"processing to the final key (e.g., taking a hash digest of the key parts), "
"you can provide a custom key function."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1047
msgid ""
"The :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` cache setting specifies a "
"dotted-path to a function matching the prototype of ``make_key()`` above. If"
" provided, this custom key function will be used instead of the default key "
"combining function."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1053
msgid "Cache key warnings"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1055
msgid ""
"Memcached, the most commonly-used production cache backend, does not allow "
"cache keys longer than 250 characters or containing whitespace or control "
"characters, and using such keys will cause an exception. To encourage cache-"
"portable code and minimize unpleasant surprises, the other built-in cache "
"backends issue a warning "
"(``django.core.cache.backends.base.CacheKeyWarning``) if a key is used that "
"would cause an error on memcached."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1062
msgid ""
"If you are using a production backend that can accept a wider range of keys "
"(a custom backend, or one of the non-memcached built-in backends), and want "
"to use this wider range without warnings, you can silence "
"``CacheKeyWarning`` with this code in the ``management`` module of one of "
"your :setting:`INSTALLED_APPS`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1074
msgid ""
"If you want to instead provide custom key validation logic for one of the "
"built-in backends, you can subclass it, override just the ``validate_key`` "
"method, and follow the instructions for `using a custom cache backend`_. For"
" instance, to do this for the ``locmem`` backend, put this code in a "
"module::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1086
msgid ""
"...and use the dotted Python path to this class in the :setting:`BACKEND "
"<CACHES-BACKEND>` portion of your :setting:`CACHES` setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1090
msgid "Downstream caches"
msgstr "下游缓存"

#: ../../../../sources/2.2/docs/topics/cache.txt:1092
msgid ""
"So far, this document has focused on caching your *own* data. But another "
"type of caching is relevant to Web development, too: caching performed by "
"\"downstream\" caches. These are systems that cache pages for users even "
"before the request reaches your website."
msgstr "到目前为止，该文档主要关注缓存*自己的*数据。但另一种类型的缓存也与 Web 开发相关：缓存由“下游”缓存执行。这些系统甚至在请求到达您的网站之前为用户缓存页面。"

#: ../../../../sources/2.2/docs/topics/cache.txt:1097
msgid "Here are a few examples of downstream caches:"
msgstr "下面是一些下游缓存的例子："

#: ../../../../sources/2.2/docs/topics/cache.txt:1099
msgid ""
"Your ISP may cache certain pages, so if you requested a page from "
"https://example.com/, your ISP would send you the page without having to "
"access example.com directly. The maintainers of example.com have no "
"knowledge of this caching; the ISP sits between example.com and your Web "
"browser, handling all of the caching transparently."
msgstr "您的 ISP 可能会缓存某些页面，因此如果您从 https://example.com/ 请求页面，您的 ISP 将直接向您发送页面，而不必直接访问 example.com。example.com 的维护者对这个缓存一无所知；ISP 位于 example.com 和 Web 浏览器之间，透明地处理所有缓存。"

#: ../../../../sources/2.2/docs/topics/cache.txt:1105
msgid ""
"Your Django website may sit behind a *proxy cache*, such as Squid Web Proxy "
"Cache (http://www.squid-cache.org/), that caches pages for performance. In "
"this case, each request first would be handled by the proxy, and it would be"
" passed to your application only if needed."
msgstr "您的 Django 网站可能会在一个*代理缓存*的后面，例如Squid 网页代理缓存（http://www.squid-cache.org/），为了性能而缓存页面。在这种情况下，每个请求首先由代理来处理，只有在需要时才将其传递给应用程序。"

#: ../../../../sources/2.2/docs/topics/cache.txt:1110
msgid ""
"Your Web browser caches pages, too. If a Web page sends out the appropriate "
"headers, your browser will use the local cached copy for subsequent requests"
" to that page, without even contacting the Web page again to see whether it "
"has changed."
msgstr "你的网页浏览器也会缓存页面。如果 Web 页面发送了适当的请求头，浏览器将使用本地缓存的副本来对该页面进行后续请求，而不必再次与 Web 页面联系以查看它是否已经更改。"

#: ../../../../sources/2.2/docs/topics/cache.txt:1115
msgid ""
"Downstream caching is a nice efficiency boost, but there's a danger to it: "
"Many Web pages' contents differ based on authentication and a host of other "
"variables, and cache systems that blindly save pages based purely on URLs "
"could expose incorrect or sensitive data to subsequent visitors to those "
"pages."
msgstr "下游缓存是一个很好的效率提升，但是它有一个危险：许多网页的内容基于认证和其他变量的不同而不同，而纯粹基于 URL 的盲目保存页面的缓存系统可能会将不正确或敏感的数据暴露给那些页面的后续访问者。"

#: ../../../../sources/2.2/docs/topics/cache.txt:1120
msgid ""
"For example, say you operate a Web email system, and the contents of the "
"\"inbox\" page obviously depend on which user is logged in. If an ISP "
"blindly cached your site, then the first user who logged in through that ISP"
" would have their user-specific inbox page cached for subsequent visitors to"
" the site. That's not cool."
msgstr "比如说，你操作一个网络电子邮件系统，“收件箱”页面的内容显然取决于哪个用户登录。如果 ISP 盲目缓存您的站点，那么通过 ISP 登录的第一个用户将为随后的访问者缓存其特定于用户的收件箱页面。那就不妙了。"

#: ../../../../sources/2.2/docs/topics/cache.txt:1126
msgid ""
"Fortunately, HTTP provides a solution to this problem. A number of HTTP "
"headers exist to instruct downstream caches to differ their cache contents "
"depending on designated variables, and to tell caching mechanisms not to "
"cache particular pages. We'll look at some of these headers in the sections "
"that follow."
msgstr "幸运的是，HTTP 为这个问题提供了解决方案。存在许多 HTTP 报头以指示下游缓存根据指定的变量来区分它们的缓存内容，并且告诉缓存机制不缓存特定的页面。我们将在下面的章节中查看这些标题。"

#: ../../../../sources/2.2/docs/topics/cache.txt:1134
msgid "Using ``Vary`` headers"
msgstr "使用 ``Vary`` 标头"

#: ../../../../sources/2.2/docs/topics/cache.txt:1136
msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key. For example, if the contents "
"of a Web page depend on a user's language preference, the page is said to "
"\"vary on language.\""
msgstr "“可变”标头定义了缓存机制在构建其缓存密钥时应考虑哪些请求报头。例如，如果网页的内容取决于用户的语言偏好，则该页面被称为“在语言上有所不同”。"

#: ../../../../sources/2.2/docs/topics/cache.txt:1141
msgid ""
"By default, Django's cache system creates its cache keys using the requested"
" fully-qualified URL -- e.g., "
"``\"https://www.example.com/stories/2005/?order_by=author\"``. This means "
"every request to that URL will use the same cached version, regardless of "
"user-agent differences such as cookies or language preferences. However, if "
"this page produces different content based on some difference in request "
"headers -- such as a cookie, or a language, or a user-agent -- you'll need "
"to use the ``Vary`` header to tell caching mechanisms that the page output "
"depends on those things."
msgstr "默认情况下，Django 的缓存系统使用请求的完全合格的URL创建它的缓存密钥——例如，``\"https://www.example.com/stories/2005/?order_by=author\"``。这意味着对该 URL 的每个请求都将使用相同的缓存版本，而不管用户代理差异（如 cookies 或语言首选项）。但是，如果这个页面基于请求头（如 cookie、语言或用户代理）中的某些差异而产生不同的内容，则需要使用``Vary`` 标头来告诉缓存机制，页面输出取决于这些东西。"

#: ../../../../sources/2.2/docs/topics/cache.txt:1150
msgid ""
"To do this in Django, use the convenient "
":func:`django.views.decorators.vary.vary_on_headers` view decorator, like "
"so::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1159
msgid ""
"In this case, a caching mechanism (such as Django's own cache middleware) "
"will cache a separate version of the page for each unique user-agent."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1162
msgid ""
"The advantage to using the ``vary_on_headers`` decorator rather than "
"manually setting the ``Vary`` header (using something like "
"``response['Vary'] = 'user-agent'``) is that the decorator *adds* to the "
"``Vary`` header (which may already exist), rather than setting it from "
"scratch and potentially overriding anything that was already in there."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1168
msgid "You can pass multiple headers to ``vary_on_headers()``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1174
msgid ""
"This tells downstream caches to vary on *both*, which means each combination"
" of user-agent and cookie will get its own cache value. For example, a "
"request with the user-agent ``Mozilla`` and the cookie value ``foo=bar`` "
"will be considered different from a request with the user-agent ``Mozilla`` "
"and the cookie value ``foo=ham``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1180
msgid ""
"Because varying on cookie is so common, there's a "
":func:`django.views.decorators.vary.vary_on_cookie` decorator. These two "
"views are equivalent::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1192
msgid ""
"The headers you pass to ``vary_on_headers`` are not case sensitive; "
"``\"User-Agent\"`` is the same thing as ``\"user-agent\"``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1195
msgid ""
"You can also use a helper function, "
":func:`django.utils.cache.patch_vary_headers`, directly. This function sets,"
" or adds to, the ``Vary header``. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1207
msgid ""
"``patch_vary_headers`` takes an :class:`~django.http.HttpResponse` instance "
"as its first argument and a list/tuple of case-insensitive header names as "
"its second argument."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1211
msgid ""
"For more on Vary headers, see the :rfc:`official Vary spec "
"<7231#section-7.1.4>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1215
msgid "Controlling cache: Using other headers"
msgstr "使用其他标头控制高速缓存"

#: ../../../../sources/2.2/docs/topics/cache.txt:1217
msgid ""
"Other problems with caching are the privacy of data and the question of "
"where data should be stored in a cascade of caches."
msgstr "缓存的其他问题是数据的隐私和数据应该存储在缓存的级联中的问题。"

#: ../../../../sources/2.2/docs/topics/cache.txt:1220
msgid ""
"A user usually faces two kinds of caches: their own browser cache (a private"
" cache) and their provider's cache (a public cache). A public cache is used "
"by multiple users and controlled by someone else. This poses problems with "
"sensitive data--you don't want, say, your bank account number stored in a "
"public cache. So Web applications need a way to tell caches which data is "
"private and which is public."
msgstr "用户通常面临两种缓存：它们自己的浏览器缓存（私有缓存）和它们的提供者的缓存（公共缓存）。公共缓存由多个用户使用，并由其他用户控制。这给敏感数据带来了问题——你不希望，比如说，你的银行帐号存储在一个公共缓存中。因此，Web 应用程序需要一种方法来告诉缓存数据是私有的，哪些是公开的。"

#: ../../../../sources/2.2/docs/topics/cache.txt:1227
msgid ""
"The solution is to indicate a page's cache should be \"private.\" To do this"
" in Django, use the :func:`~django.views.decorators.cache.cache_control` "
"view decorator. Example::"
msgstr "解决方案是指出一个页面的缓存应该是“私有的”。在 Django中，使用 :func:`~django.views.decorators.cache.cache_control` 。例子："

#: ../../../../sources/2.2/docs/topics/cache.txt:1237
msgid ""
"This decorator takes care of sending out the appropriate HTTP header behind "
"the scenes."
msgstr "这个装饰器负责在场景后面发送适当的 HTTP 头。"

#: ../../../../sources/2.2/docs/topics/cache.txt:1240
msgid ""
"Note that the cache control settings \"private\" and \"public\" are mutually"
" exclusive. The decorator ensures that the \"public\" directive is removed "
"if \"private\" should be set (and vice versa). An example use of the two "
"directives would be a blog site that offers both private and public entries."
" Public entries may be cached on any shared cache. The following code uses "
":func:`~django.utils.cache.patch_cache_control`, the manual way to modify "
"the cache control header (it is internally called by the "
":func:`~django.views.decorators.cache.cache_control` decorator)::"
msgstr "注意，缓存控制设置“私有”和“公共”是互斥的。装饰器确保“公共”指令被移除，如果应该设置“私有”（反之亦然）。这两个指令的一个示例使用将是一个提供私人和公共条目的博客站点。公共条目可以缓存在任何共享缓存上。下面的代码使用 :func:`~django.utils.cache.patch_cache_control`，手动修改缓存控制头的方法（内部调用的是 :func:`~django.views.decorators.cache.cache_control` 装饰器）："

#: ../../../../sources/2.2/docs/topics/cache.txt:1263
msgid ""
"You can control downstream caches in other ways as well (see :rfc:`7234` for"
" details on HTTP caching). For example, even if you don't use Django's "
"server-side cache framework, you can still tell clients to cache a view for "
"a certain amount of time with the :rfc:`max-age <7234#section-5.2.2.8>` "
"directive::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1275
msgid ""
"(If you *do* use the caching middleware, it already sets the ``max-age`` "
"with the value of the :setting:`CACHE_MIDDLEWARE_SECONDS` setting. In that "
"case, the custom ``max_age`` from the "
":func:`~django.views.decorators.cache.cache_control` decorator will take "
"precedence, and the header values will be merged correctly.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1281
msgid ""
"Any valid ``Cache-Control`` response directive is valid in "
"``cache_control()``. Here are some more examples:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1284
msgid "``no_transform=True``"
msgstr "``no_transform=True``"

#: ../../../../sources/2.2/docs/topics/cache.txt:1285
msgid "``must_revalidate=True``"
msgstr "``must_revalidate=True``"

#: ../../../../sources/2.2/docs/topics/cache.txt:1286
msgid "``stale_while_revalidate=num_seconds``"
msgstr "``stale_while_revalidate=num_seconds``"

#: ../../../../sources/2.2/docs/topics/cache.txt:1288
msgid ""
"The full list of known directives can be found in the `IANA registry`_ (note"
" that not all of them apply to responses)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1293
msgid ""
"If you want to use headers to disable caching altogether, "
":func:`~django.views.decorators.cache.never_cache` is a view decorator that "
"adds headers to ensure the response won't be cached by browsers or other "
"caches. Example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/cache.txt:1305
msgid "Order of ``MIDDLEWARE``"
msgstr " ``MIDDLEWARE``顺序"

#: ../../../../sources/2.2/docs/topics/cache.txt:1307
msgid ""
"If you use caching middleware, it's important to put each half in the right "
"place within the :setting:`MIDDLEWARE` setting. That's because the cache "
"middleware needs to know which headers by which to vary the cache storage. "
"Middleware always adds something to the ``Vary`` response header when it "
"can."
msgstr "如果使用缓存中间件，重要的是将每一半放在 :setting:`MIDDLEWARE` 设置的正确位置。这是因为缓存中间件需要知道哪些头可以改变缓存存储。中间件总是可以在 ``Vary`` 响应头中添加一些东西。"

#: ../../../../sources/2.2/docs/topics/cache.txt:1312
msgid ""
"``UpdateCacheMiddleware`` runs during the response phase, where middleware "
"is run in reverse order, so an item at the top of the list runs *last* "
"during the response phase. Thus, you need to make sure that "
"``UpdateCacheMiddleware`` appears *before* any other middleware that might "
"add something to the ``Vary`` header. The following middleware modules do "
"so:"
msgstr "``UpdateCacheMiddleware`` 在响应阶段运行，其中中间件以相反的顺序运行，因此列表顶部的项目在响应阶段的*最后*运行。因此，您需要确保 ``UpdateCacheMiddleware`` 出现在任何其他可能添加到 ``Vary`` 标头的其他中间件*之前*。下面的中间件模块类似："

#: ../../../../sources/2.2/docs/topics/cache.txt:1318
msgid "``SessionMiddleware`` adds ``Cookie``"
msgstr "``SessionMiddleware`` 添加 ``Cookie``"

#: ../../../../sources/2.2/docs/topics/cache.txt:1319
msgid "``GZipMiddleware`` adds ``Accept-Encoding``"
msgstr "``GZipMiddleware`` 添加 ``Accept-Encoding``"

#: ../../../../sources/2.2/docs/topics/cache.txt:1320
msgid "``LocaleMiddleware`` adds ``Accept-Language``"
msgstr "``LocaleMiddleware`` 添加 ``Accept-Language``"

#: ../../../../sources/2.2/docs/topics/cache.txt:1322
msgid ""
"``FetchFromCacheMiddleware``, on the other hand, runs during the request "
"phase, where middleware is applied first-to-last, so an item at the top of "
"the list runs *first* during the request phase. The "
"``FetchFromCacheMiddleware`` also needs to run after other middleware "
"updates the ``Vary`` header, so ``FetchFromCacheMiddleware`` must be *after*"
" any item that does so."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:3
msgid "System check framework"
msgstr "系统检查框架"

#: ../../../../sources/2.2/docs/topics/checks.txt:7
msgid ""
"The system check framework is a set of static checks for validating Django "
"projects. It detects common problems and provides hints for how to fix them."
" The framework is extensible so you can easily add your own checks."
msgstr "系统检查框架是一组验证Django项目的静态检查。 它检测到常见的问题，并提供了如何解决这些问题的提示。 该框架是可扩展的，所以你可以轻松地添加自己的检查。"

#: ../../../../sources/2.2/docs/topics/checks.txt:11
msgid ""
"Checks can be triggered explicitly via the :djadmin:`check` command. Checks "
"are triggered implicitly before most commands, including "
":djadmin:`runserver` and :djadmin:`migrate`. For performance reasons, checks"
" are not run as part of the WSGI stack that is used in deployment. If you "
"need to run system checks on your deployment server, trigger them explicitly"
" using :djadmin:`check`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:17
msgid ""
"Serious errors will prevent Django commands (such as :djadmin:`runserver`) "
"from running at all. Minor problems are reported to the console. If you have"
" inspected the cause of a warning and are happy to ignore it, you can hide "
"specific warnings using the :setting:`SILENCED_SYSTEM_CHECKS` setting in "
"your project settings file."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:22
msgid ""
"A full list of all checks that can be raised by Django can be found in the "
":doc:`System check reference </ref/checks>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:26
msgid "Writing your own checks"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:28
msgid ""
"The framework is flexible and allows you to write functions that perform any"
" other kind of check you may require. The following is an example stub check"
" function::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:49
msgid ""
"The check function *must* accept an ``app_configs`` argument; this argument "
"is the list of applications that should be inspected. If None, the check "
"must be run on *all* installed apps in the project. The ``**kwargs`` "
"argument is required for future expansion."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:55
msgid "Messages"
msgstr "消息"

#: ../../../../sources/2.2/docs/topics/checks.txt:57
msgid ""
"The function must return a list of messages. If no problems are found as a "
"result of the check, the check function must return an empty list."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:60
msgid ""
"The warnings and errors raised by the check method must be instances of "
":class:`~django.core.checks.CheckMessage`. An instance of "
":class:`~django.core.checks.CheckMessage` encapsulates a single reportable "
"error or warning. It also provides context and hints applicable to the "
"message, and a unique identifier that is used for filtering purposes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:66
msgid ""
"The concept is very similar to messages from the :doc:`message framework "
"</ref/contrib/messages>` or the :doc:`logging framework </topics/logging>`. "
"Messages are tagged with a ``level`` indicating the severity of the message."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:70
msgid ""
"There are also shortcuts to make creating messages with common levels "
"easier. When using these classes you can omit the ``level`` argument because"
" it is implied by the class name."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:74
msgid ":class:`Debug`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:75
msgid ":class:`Info`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:76
msgid ":class:`Warning`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:77
msgid ":class:`Error`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:78
msgid ":class:`Critical`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:81
msgid "Registering and labeling checks"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:83
msgid ""
"Lastly, your check function must be registered explicitly with system check "
"registry. Checks should be registered in a file that's loaded when your "
"application is loaded; for example, in the :meth:`AppConfig.ready() "
"<django.apps.AppConfig.ready>` method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:90
msgid ""
"You can pass as many tags to ``register`` as you want in order to label your"
" check. Tagging checks is useful since it allows you to run only a certain "
"group of checks. For example, to register a compatibility check, you would "
"make the following call::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:102
msgid ""
"You can register \"deployment checks\" that are only relevant to a "
"production settings file like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:109
msgid ""
"These checks will only be run if the :option:`check --deploy` option is "
"used."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:111
msgid ""
"You can also use ``register`` as a function rather than a decorator by "
"passing a callable object (usually a function) as the first argument to "
"``register``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:115
msgid "The code below is equivalent to the code above::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:124
msgid "Field, model, manager, and database checks"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:126
msgid ""
"In some cases, you won't need to register your check function -- you can "
"piggyback on an existing registration."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:129
msgid ""
"Fields, models, model managers, and database backends all implement a "
"``check()`` method that is already registered with the check framework. If "
"you want to add extra checks, you can extend the implementation on the base "
"class, perform any extra checks you need, and append any messages to those "
"generated by the base class. It's recommended that you delegate each check "
"to separate methods."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:136
msgid ""
"Consider an example where you are implementing a custom field named "
"``RangedIntegerField``. This field adds ``min`` and ``max`` arguments to the"
" constructor of ``IntegerField``. You may want to add a check to ensure that"
" users provide a min value that is less than or equal to the max value. The "
"following code snippet shows how you can implement this check::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:176
msgid ""
"If you wanted to add checks to a model manager, you would take the same "
"approach on your subclass of :class:`~django.db.models.Manager`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:179
msgid ""
"If you want to add a check to a model class, the approach is *almost* the "
"same: the only difference is that the check is a classmethod, not an "
"instance method::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:190
#: ../../../../sources/2.2/docs/topics/testing/overview.txt:18
msgid "Writing tests"
msgstr ""

#: ../../../../sources/2.2/docs/topics/checks.txt:192
msgid "Messages are comparable. That allows you to easily write tests::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:3
msgid "Built-in class-based generic views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:5
msgid ""
"Writing Web applications can be monotonous, because we repeat certain "
"patterns again and again. Django tries to take away some of that monotony at"
" the model and template layers, but Web developers also experience this "
"boredom at the view level."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:10
msgid ""
"Django's *generic views* were developed to ease that pain. They take certain"
" common idioms and patterns found in view development and abstract them so "
"that you can quickly write common views of data without having to write too "
"much code."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:15
msgid ""
"We can recognize certain common tasks, like displaying a list of objects, "
"and write code that displays a list of *any* object. Then the model in "
"question can be passed as an extra argument to the URLconf."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:19
msgid "Django ships with generic views to do the following:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:21
msgid ""
"Display list and detail pages for a single object. If we were creating an "
"application to manage conferences then a ``TalkListView`` and a "
"``RegisteredUserListView`` would be examples of list views. A single talk "
"page is an example of what we call a \"detail\" view."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:26
msgid ""
"Present date-based objects in year/month/day archive pages, associated "
"detail, and \"latest\" pages."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:29
msgid ""
"Allow users to create, update, and delete objects -- with or without "
"authorization."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:32
msgid ""
"Taken together, these views provide easy interfaces to perform the most "
"common tasks developers encounter."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:37
msgid "Extending generic views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:39
msgid ""
"There's no question that using generic views can speed up development "
"substantially. In most projects, however, there comes a moment when the "
"generic views no longer suffice. Indeed, the most common question asked by "
"new Django developers is how to make generic views handle a wider array of "
"situations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:45
msgid ""
"This is one of the reasons generic views were redesigned for the 1.3 release"
" - previously, they were just view functions with a bewildering array of "
"options; now, rather than passing in a large amount of configuration in the "
"URLconf, the recommended way to extend generic views is to subclass them, "
"and override their attributes or methods."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:51
msgid ""
"That said, generic views will have a limit. If you find you're struggling to"
" implement your view as a subclass of a generic view, then you may find it "
"more effective to write just the code you need, using your own class-based "
"or functional views."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:56
msgid ""
"More examples of generic views are available in some third party "
"applications, or you could write your own as needed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:61
msgid "Generic views of objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:63
msgid ""
":class:`~django.views.generic.base.TemplateView` certainly is useful, but "
"Django's generic views really shine when it comes to presenting views of "
"your database content. Because it's such a common task, Django comes with a "
"handful of built-in generic views that make generating list and detail views"
" of objects incredibly easy."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:69
msgid ""
"Let's start by looking at some examples of showing a list of objects or an "
"individual object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:74
msgid "We'll be using these models::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:108
msgid "Now we need to define a view::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:117
msgid "Finally hook that view into your urls::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:127
msgid ""
"That's all the Python code we need to write. We still need to write a "
"template, however. We could explicitly tell the view which template to use "
"by adding a ``template_name`` attribute to the view, but in the absence of "
"an explicit template Django will infer one from the object's name. In this "
"case, the inferred template will be ``\"books/publisher_list.html\"`` -- the"
" \"books\" part comes from the name of the app that defines the model, while"
" the \"publisher\" bit is just the lowercased version of the model's name."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:137
msgid ""
"Thus, when (for example) the ``APP_DIRS`` option of a ``DjangoTemplates`` "
"backend is set to True in :setting:`TEMPLATES`, a template location could "
"be: /path/to/project/books/templates/books/publisher_list.html"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:141
msgid ""
"This template will be rendered against a context containing a variable "
"called ``object_list`` that contains all the publisher objects. A very "
"simple template might look like the following:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:158
msgid ""
"That's really all there is to it. All the cool features of generic views "
"come from changing the attributes set on the generic view. The :doc:`generic"
" views reference</ref/class-based-views/index>` documents all the generic "
"views and their options in detail; the rest of this document will consider "
"some of the common ways you might customize and extend generic views."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:166
msgid "Making \"friendly\" template contexts"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:168
msgid ""
"You might have noticed that our sample publisher list template stores all "
"the publishers in a variable named ``object_list``. While this works just "
"fine, it isn't all that \"friendly\" to template authors: they have to "
"\"just know\" that they're dealing with publishers here."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:173
msgid ""
"Well, if you're dealing with a model object, this is already done for you. "
"When you are dealing with an object or queryset, Django is able to populate "
"the context using the lowercased version of the model class' name. This is "
"provided in addition to the default ``object_list`` entry, but contains "
"exactly the same data, i.e. ``publisher_list``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:179
msgid ""
"If this still isn't a good match, you can manually set the name of the "
"context variable. The ``context_object_name`` attribute on a generic view "
"specifies the context variable to use::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:191
msgid ""
"Providing a useful ``context_object_name`` is always a good idea. Your "
"coworkers who design templates will thank you."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:198
msgid "Adding extra context"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:200
msgid ""
"Often you simply need to present some extra information beyond that provided"
" by the generic view. For example, think of showing a list of all the books "
"on each publisher detail page. The "
":class:`~django.views.generic.detail.DetailView` generic view provides the "
"publisher to the context, but how do we get additional information in that "
"template?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:207
msgid ""
"The answer is to subclass :class:`~django.views.generic.detail.DetailView` "
"and provide your own implementation of the ``get_context_data`` method. The "
"default implementation simply adds the object being displayed to the "
"template, but you can override it to send more::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:228
msgid ""
"Generally, ``get_context_data`` will merge the context data of all parent "
"classes with those of the current class. To preserve this behavior in your "
"own classes where you want to alter the context, you should be sure to call "
"``get_context_data`` on the super class. When no two classes try to define "
"the same key, this will give the expected results. However if any class "
"attempts to override a key after parent classes have set it (after the call "
"to super), any children of that class will also need to explicitly set it "
"after super if they want to be sure to override all parents. If you're "
"having trouble, review the method resolution order of your view."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:238
msgid ""
"Another consideration is that the context data from class-based generic "
"views will override data provided by context processors; see "
":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data` for "
"an example."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:246
msgid "Viewing subsets of objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:248
msgid ""
"Now let's take a closer look at the ``model`` argument we've been using all "
"along. The ``model`` argument, which specifies the database model that the "
"view will operate upon, is available on all the generic views that operate "
"on a single object or a collection of objects. However, the ``model`` "
"argument is not the only way to specify the objects that the view will "
"operate upon -- you can also specify the list of objects using the "
"``queryset`` argument::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:264
msgid ""
"Specifying ``model = Publisher`` is really just shorthand for saying "
"``queryset = Publisher.objects.all()``. However, by using ``queryset`` to "
"define a filtered list of objects you can be more specific about the objects"
" that will be visible in the view (see :doc:`/topics/db/queries` for more "
"information about :class:`~django.db.models.query.QuerySet` objects, and see"
" the :doc:`class-based views reference </ref/class-based-views/index>` for "
"the complete details)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:272
msgid ""
"To pick a simple example, we might want to order a list of books by "
"publication date, with the most recent first::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:282
msgid ""
"That's a pretty simple example, but it illustrates the idea nicely. Of "
"course, you'll usually want to do more than just reorder objects. If you "
"want to present a list of books by a particular publisher, you can use the "
"same technique::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:296
msgid ""
"Notice that along with a filtered ``queryset``, we're also using a custom "
"template name. If we didn't, the generic view would use the same template as"
" the \"vanilla\" object list, which might not be what we want."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:300
msgid ""
"Also notice that this isn't a very elegant way of doing publisher-specific "
"books. If we want to add another publisher page, we'd need another handful "
"of lines in the URLconf, and more than a few publishers would get "
"unreasonable. We'll deal with this problem in the next section."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:307
msgid ""
"If you get a 404 when requesting ``/books/acme/``, check to ensure you "
"actually have a Publisher with the name 'ACME Publishing'.  Generic views "
"have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-"
"views reference</ref/class-based-views/index>` for more details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:315
msgid "Dynamic filtering"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:317
msgid ""
"Another common need is to filter down the objects given in a list page by "
"some key in the URL. Earlier we hard-coded the publisher's name in the "
"URLconf, but what if we wanted to write a view that displayed all the books "
"by some arbitrary publisher?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:322
msgid ""
"Handily, the ``ListView`` has a "
":meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset` method "
"we can override. Previously, it has just been returning the value of the "
"``queryset`` attribute, but now we can add more logic."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:327
msgid ""
"The key part to making this work is that when class-based views are called, "
"various useful things are stored on ``self``; as well as the request "
"(``self.request``) this includes the positional (``self.args``) and name-"
"based (``self.kwargs``) arguments captured according to the URLconf."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:332
msgid "Here, we have a URLconf with a single captured group::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:342
msgid "Next, we'll write the ``PublisherBookList`` view itself::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:357
msgid ""
"As you can see, it's quite easy to add more logic to the queryset selection;"
" if we wanted, we could use ``self.request.user`` to filter using the "
"current user, or other more complex logic."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:361
msgid ""
"We can also add the publisher into the context at the same time, so we can "
"use it in the template::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:376
msgid "Performing extra work"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:378
msgid ""
"The last common pattern we'll look at involves doing some extra work before "
"or after calling the generic view."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:381
msgid ""
"Imagine we had a ``last_accessed`` field on our ``Author`` model that we "
"were using to keep track of the last time anybody looked at that author::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:394
msgid ""
"The generic ``DetailView`` class, of course, wouldn't know anything about "
"this field, but once again we could easily write a custom view to keep that "
"field updated."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:398
msgid ""
"First, we'd need to add an author detail bit in the URLconf to point to a "
"custom view::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:409
msgid ""
"Then we'd write our new view -- ``get_object`` is the method that retrieves "
"the object -- so we simply override it and wrap the call::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:429
msgid ""
"The URLconf here uses the named group ``pk`` - this name is the default name"
" that ``DetailView`` uses to find the value of the primary key used to "
"filter the queryset."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-display.txt:433
msgid ""
"If you want to call the group something else, you can set ``pk_url_kwarg`` "
"on the view. More details can be found in the reference for "
":class:`~django.views.generic.detail.DetailView`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:3
msgid "Form handling with class-based views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:5
msgid "Form processing generally has 3 paths:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:7
msgid "Initial GET (blank or prepopulated form)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:8
msgid "POST with invalid data (typically redisplay form with errors)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:9
msgid "POST with valid data (process the data and typically redirect)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:11
msgid ""
"Implementing this yourself often results in a lot of repeated boilerplate "
"code (see :ref:`Using a form in a view<using-a-form-in-a-view>`). To help "
"avoid this, Django provides a collection of generic class-based views for "
"form processing."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:17
msgid "Basic forms"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:19
msgid "Given a simple contact form:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:21
#: ../../../../sources/2.2/docs/topics/forms/index.txt:229
#: ../../../../sources/2.2/docs/topics/forms/index.txt:407
#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:24
#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:136
msgid "forms.py"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:34
msgid "The view can be constructed using a ``FormView``:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:36
#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:115
#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:206
#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:225
#: ../../../../sources/2.2/docs/topics/forms/index.txt:279
#: ../../../../sources/2.2/docs/topics/forms/index.txt:456
#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:49
#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:148
msgid "views.py"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:53
#: ../../../../sources/2.2/docs/topics/http/urls.txt:83
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2011
msgid "Notes:"
msgstr "注意："

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:55
msgid ""
"FormView inherits :class:`~django.views.generic.base.TemplateResponseMixin` "
"so :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"can be used here."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:59
msgid ""
"The default implementation for "
":meth:`~django.views.generic.edit.FormMixin.form_valid` simply redirects to "
"the :attr:`~django.views.generic.edit.FormMixin.success_url`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:64
msgid "Model forms"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:66
msgid ""
"Generic views really shine when working with models.  These generic views "
"will automatically create a :class:`~django.forms.ModelForm`, so long as "
"they can work out which model class to use:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:70
msgid ""
"If the :attr:`~django.views.generic.edit.ModelFormMixin.model` attribute is "
"given, that model class will be used."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:72
msgid ""
"If :meth:`~django.views.generic.detail.SingleObjectMixin.get_object()` "
"returns an object, the class of that object will be used."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:74
msgid ""
"If a :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` is "
"given, the model for that queryset will be used."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:77
msgid ""
"Model form views provide a "
":meth:`~django.views.generic.edit.ModelFormMixin.form_valid()` "
"implementation that saves the model automatically.  You can override this if"
" you have any special requirements; see below for examples."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:82
msgid ""
"You don't even need to provide a ``success_url`` for "
":class:`~django.views.generic.edit.CreateView` or "
":class:`~django.views.generic.edit.UpdateView` - they will use "
":meth:`~django.db.models.Model.get_absolute_url()` on the model object if "
"available."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:87
msgid ""
"If you want to use a custom :class:`~django.forms.ModelForm` (for instance "
"to add extra validation) simply set "
":attr:`~django.views.generic.edit.FormMixin.form_class` on your view."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:92
msgid ""
"When specifying a custom form class, you must still specify the model, even "
"though the :attr:`~django.views.generic.edit.FormMixin.form_class` may be a "
":class:`~django.forms.ModelForm`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:96
msgid ""
"First we need to add :meth:`~django.db.models.Model.get_absolute_url()` to "
"our ``Author`` class:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:99
#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:190
msgid "models.py"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:111
msgid ""
"Then we can use :class:`CreateView` and friends to do the actual work. "
"Notice how we're just configuring the generic class-based views here; we "
"don't have to write any logic ourselves:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:135
msgid ""
"We have to use :func:`~django.urls.reverse_lazy` here, not just "
"``reverse()`` as the urls are not loaded when the file is imported."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:138
msgid ""
"The ``fields`` attribute works the same way as the ``fields`` attribute on "
"the inner ``Meta`` class on :class:`~django.forms.ModelForm`. Unless you "
"define the form class in another way, the attribute is required and the view"
" will raise an :exc:`~django.core.exceptions.ImproperlyConfigured` exception"
" if it's not."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:143
msgid ""
"If you specify both the "
":attr:`~django.views.generic.edit.ModelFormMixin.fields` and "
":attr:`~django.views.generic.edit.FormMixin.form_class` attributes, an "
":exc:`~django.core.exceptions.ImproperlyConfigured` exception will be "
"raised."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:147
msgid "Finally, we hook these new views into the URLconf:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:149
#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:258
#: ../../../../sources/2.2/docs/topics/http/urls.txt:761
#: ../../../../sources/2.2/docs/topics/http/urls.txt:844
msgid "urls.py"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:164
msgid ""
"These views inherit "
":class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin` "
"which uses "
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix`"
" to construct the "
":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` based"
" on the model."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:172
msgid "In this example:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:174
msgid ""
":class:`CreateView` and :class:`UpdateView` use ``myapp/author_form.html``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:175
msgid ":class:`DeleteView` uses ``myapp/author_confirm_delete.html``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:177
msgid ""
"If you wish to have separate templates for :class:`CreateView` and "
":class:`UpdateView`, you can set either "
":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` or "
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix`"
" on your view class."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:184
msgid "Models and ``request.user``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:186
msgid ""
"To track the user that created an object using a :class:`CreateView`, you "
"can use a custom :class:`~django.forms.ModelForm` to do this. First, add the"
" foreign key relation to the model:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:202
msgid ""
"In the view, ensure that you don't include ``created_by`` in the list of "
"fields to edit, and override "
":meth:`~django.views.generic.edit.ModelFormMixin.form_valid()` to add the "
"user:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:221
msgid ""
":class:`~django.contrib.auth.mixins.LoginRequiredMixin` prevents users who "
"aren't logged in from accessing the form. If you omit that, you'll need to "
"handle unauthorized users in :meth:`~.ModelFormMixin.form_valid()`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:226
msgid "AJAX example"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/generic-editing.txt:228
msgid ""
"Here is a simple example showing how you might go about implementing a form "
"that works for AJAX requests as well as 'normal' form POSTs::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:3
msgid "Class-based views"
msgstr "基于类的视图"

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:5
msgid ""
"A view is a callable which takes a request and returns a response. This can "
"be more than just a function, and Django provides an example of some classes"
" which can be used as views. These allow you to structure your views and "
"reuse code by harnessing inheritance and mixins. There are also some generic"
" views for simple tasks which we'll get to later, but you may want to design"
" your own structure of reusable views which suits your use case. For full "
"details, see the :doc:`class-based views reference documentation</ref/class-"
"based-views/index>`."
msgstr "视图是可调用的，能接受用户的请求并返回响应。视图远不只是个函数，Django提供了一些可用作视图的类的示例，允许你通过继承和复用构建自己的视图并且复用这些代码。虽然接下来还会介绍一些用于简单任务的通用视图，但你可能想自己设计可复用的视图结构，以便针对某些特殊场景。详情请见 class-based views reference documentation</ref/class-based-views/index> 。"

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:23
msgid "Basic examples"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:25
msgid ""
"Django provides base view classes which will suit a wide range of "
"applications. All views inherit from the "
":class:`~django.views.generic.base.View` class, which handles linking the "
"view in to the URLs, HTTP method dispatching and other simple features. "
":class:`~django.views.generic.base.RedirectView` is for a simple HTTP "
"redirect, and :class:`~django.views.generic.base.TemplateView` extends the "
"base class to make it also render a template."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:34
msgid "Simple usage in your URLconf"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:36
msgid ""
"The simplest way to use generic views is to create them directly in your "
"URLconf. If you're only changing a few simple attributes on a class-based "
"view, you can simply pass them into the "
":meth:`~django.views.generic.base.View.as_view` method call itself::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:48
msgid ""
"Any arguments passed to :meth:`~django.views.generic.base.View.as_view` will"
" override attributes set on the class. In this example, we set "
"``template_name`` on the ``TemplateView``. A similar overriding pattern can "
"be used for the ``url`` attribute on "
":class:`~django.views.generic.base.RedirectView`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:55
msgid "Subclassing generic views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:57
msgid ""
"The second, more powerful way to use generic views is to inherit from an "
"existing view and override attributes (such as the ``template_name``) or "
"methods (such as ``get_context_data``) in your subclass to provide new "
"values or methods. Consider, for example, a view that just displays one "
"template, ``about.html``. Django has a generic view to do this - "
":class:`~django.views.generic.base.TemplateView` - so we can just subclass "
"it, and override the template name::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:71
msgid ""
"Then we just need to add this new view into our URLconf. "
":class:`~django.views.generic.base.TemplateView` is a class, not a function,"
" so we point the URL to the :meth:`~django.views.generic.base.View.as_view` "
"class method instead, which provides a function-like entry to class-based "
"views::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:86
msgid ""
"For more information on how to use the built in generic views, consult the "
"next topic on :doc:`generic class-based views</topics/class-based-views"
"/generic-display>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:92
msgid "Supporting other HTTP methods"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:94
msgid ""
"Suppose somebody wants to access our book library over HTTP using the views "
"as an API. The API client would connect every now and then and download book"
" data for the books published since last visit. But if no new books appeared"
" since then, it is a waste of CPU time and bandwidth to fetch the books from"
" the database, render a full response and send it to the client. It might be"
" preferable to ask the API when the most recent book was published."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:101
msgid "We map the URL to book list view in the URLconf::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:110
msgid "And the view::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/index.txt:126
msgid ""
"If the view is accessed from a ``GET`` request, a plain-and-simple object "
"list is returned in the response (using ``book_list.html`` template). But if"
" the client issues a ``HEAD`` request, the response has an empty body and "
"the ``Last-Modified`` header indicates when the most recent book was "
"published. Based on this information, the client may or may not download the"
" full object list."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:3
msgid "Introduction to class-based views"
msgstr "基于类的视图"

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:5
msgid ""
"Class-based views provide an alternative way to implement views as Python "
"objects instead of functions. They do not replace function-based views, but "
"have certain differences and advantages when compared to function-based "
"views:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:9
msgid ""
"Organization of code related to specific HTTP methods (``GET``, ``POST``, "
"etc.) can be addressed by separate methods instead of conditional branching."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:12
msgid ""
"Object oriented techniques such as mixins (multiple inheritance) can be used"
" to factor code into reusable components."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:16
msgid ""
"The relationship and history of generic views, class-based views, and class-"
"based generic views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:18
msgid ""
"In the beginning there was only the view function contract, Django passed "
"your function an :class:`~django.http.HttpRequest` and expected back an "
":class:`~django.http.HttpResponse`. This was the extent of what Django "
"provided."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:22
msgid ""
"Early on it was recognized that there were common idioms and patterns found "
"in view development. Function-based generic views were introduced to "
"abstract these patterns and ease view development for the common cases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:26
msgid ""
"The problem with function-based generic views is that while they covered the"
" simple cases well, there was no way to extend or customize them beyond some"
" simple configuration options, limiting their usefulness in many real-world "
"applications."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:31
msgid ""
"Class-based generic views were created with the same objective as function-"
"based generic views, to make view development easier. However, the way the "
"solution is implemented, through the use of mixins, provides a toolkit that "
"results in class-based generic views being more extensible and flexible than"
" their function-based counterparts."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:37
msgid ""
"If you have tried function based generic views in the past and found them "
"lacking, you should not think of class-based generic views as simply a "
"class-based equivalent, but rather as a fresh approach to solving the "
"original problems that generic views were meant to solve."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:42
msgid ""
"The toolkit of base classes and mixins that Django uses to build class-based"
" generic views are built for maximum flexibility, and as such have many "
"hooks in the form of default method implementations and attributes that you "
"are unlikely to be concerned with in the simplest use cases. For example, "
"instead of limiting you to a class-based attribute for ``form_class``, the "
"implementation uses a ``get_form`` method, which calls a ``get_form_class`` "
"method, which in its default implementation just returns the ``form_class`` "
"attribute of the class. This gives you several options for specifying what "
"form to use, from a simple attribute, to a fully dynamic, callable hook. "
"These options seem to add hollow complexity for simple situations, but "
"without them, more advanced designs would be limited."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:55
msgid "Using class-based views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:57
msgid ""
"At its core, a class-based view allows you to respond to different HTTP "
"request methods with different class instance methods, instead of with "
"conditionally branching code inside a single view function."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:61
msgid ""
"So where the code to handle HTTP ``GET`` in a view function would look "
"something like::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:71
msgid "In a class-based view, this would become::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:81
msgid ""
"Because Django's URL resolver expects to send the request and associated "
"arguments to a callable function, not a class, class-based views have an "
":meth:`~django.views.generic.base.View.as_view` class method which returns a"
" function that can be called when a request arrives for a URL matching the "
"associated pattern. The function creates an instance of the class, calls "
":meth:`~django.views.generic.base.View.setup` to initialize its attributes, "
"and then calls its :meth:`~django.views.generic.base.View.dispatch` method. "
"``dispatch`` looks at the request to determine whether it is a ``GET``, "
"``POST``, etc, and relays the request to a matching method if one is "
"defined, or raises :class:`~django.http.HttpResponseNotAllowed` if not::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:101
msgid ""
"It is worth noting that what your method returns is identical to what you "
"return from a function-based view, namely some form of "
":class:`~django.http.HttpResponse`. This means that :doc:`http shortcuts "
"</topics/http/shortcuts>` or "
":class:`~django.template.response.TemplateResponse` objects are valid to use"
" inside a class-based view."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:108
msgid ""
"While a minimal class-based view does not require any class attributes to "
"perform its job, class attributes are useful in many class-based designs, "
"and there are two ways to configure or set class attributes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:112
msgid ""
"The first is the standard Python way of subclassing and overriding "
"attributes and methods in the subclass. So that if your parent class had an "
"attribute ``greeting`` like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:125
msgid "You can override that in a subclass::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:130
msgid ""
"Another option is to configure class attributes as keyword arguments to the "
":meth:`~django.views.generic.base.View.as_view` call in the URLconf::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:139
msgid ""
"While your class is instantiated for each request dispatched to it, class "
"attributes set through the :meth:`~django.views.generic.base.View.as_view` "
"entry point are configured only once at the time your URLs are imported."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:145
msgid "Using mixins"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:147
msgid ""
"Mixins are a form of multiple inheritance where behaviors and attributes of "
"multiple parent classes can be combined."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:150
msgid ""
"For example, in the generic class-based views there is a mixin called "
":class:`~django.views.generic.base.TemplateResponseMixin` whose primary "
"purpose is to define the method "
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`."
" When combined with the behavior of the "
":class:`~django.views.generic.base.View` base class, the result is a "
":class:`~django.views.generic.base.TemplateView` class that will dispatch "
"requests to the appropriate matching methods (a behavior defined in the "
"``View`` base class), and that has a "
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response` "
"method that uses a "
":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"attribute to return a :class:`~django.template.response.TemplateResponse` "
"object (a behavior defined in the ``TemplateResponseMixin``)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:164
msgid ""
"Mixins are an excellent way of reusing code across multiple classes, but "
"they come with some cost. The more your code is scattered among mixins, the "
"harder it will be to read a child class and know what exactly it is doing, "
"and the harder it will be to know which methods from which mixins to "
"override if you are subclassing something that has a deep inheritance tree."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:170
msgid ""
"Note also that you can only inherit from one generic view - that is, only "
"one parent class may inherit from :class:`~django.views.generic.base.View` "
"and the rest (if any) should be mixins. Trying to inherit from more than one"
" class that inherits from ``View`` - for example, trying to use a form at "
"the top of a list and combining "
":class:`~django.views.generic.edit.ProcessFormView` and "
":class:`~django.views.generic.list.ListView` - won't work as expected."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:179
msgid "Handling forms with class-based views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:181
msgid ""
"A basic function-based view that handles forms may look something like "
"this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:199
msgid "A similar class-based view might look like::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:224
msgid ""
"This is a very simple case, but you can see that you would then have the "
"option of customizing this view by overriding any of the class attributes, "
"e.g. ``form_class``, via URLconf configuration, or subclassing and "
"overriding one or more of the methods (or both!)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:230
msgid "Decorating class-based views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:232
msgid ""
"The extension of class-based views isn't limited to using mixins. You can "
"also use decorators. Since class-based views aren't functions, decorating "
"them works differently depending on if you're using ``as_view()`` or "
"creating a subclass."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:237
msgid "Decorating in URLconf"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:239
msgid ""
"The simplest way of decorating class-based views is to decorate the result "
"of the :meth:`~django.views.generic.base.View.as_view` method. The easiest "
"place to do this is in the URLconf where you deploy your view::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:253
msgid ""
"This approach applies the decorator on a per-instance basis. If you want "
"every instance of a view to be decorated, you need to take a different "
"approach."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:260
msgid "Decorating the class"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:262
msgid ""
"To decorate every instance of a class-based view, you need to decorate the "
"class definition itself. To do this you apply the decorator to the "
":meth:`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:266
msgid ""
"A method on a class isn't quite the same as a standalone function, so you "
"can't just apply a function decorator to the method -- you need to transform"
" it into a method decorator first. The ``method_decorator`` decorator "
"transforms a function decorator into a method decorator so that it can be "
"used on an instance method. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:283
msgid ""
"Or, more succinctly, you can decorate the class instead and pass the name of"
" the method to be decorated as the keyword argument ``name``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:290
msgid ""
"If you have a set of common decorators used in several places, you can "
"define a list or tuple of decorators and use this instead of invoking "
"``method_decorator()`` multiple times. These two classes are equivalent::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:305
msgid ""
"The decorators will process a request in the order they are passed to the "
"decorator. In the example, ``never_cache()`` will process the request before"
" ``login_required()``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:309
msgid ""
"In this example, every instance of ``ProtectedView`` will have login "
"protection. These examples use ``login_required``, however, the same "
"behavior can be obtained more simply using "
":class:`~django.contrib.auth.mixins.LoginRequiredMixin`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/intro.txt:316
msgid ""
"``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the "
"decorated method on the class. If your method does not accept a compatible "
"set of parameters it will raise a ``TypeError`` exception."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:3
msgid "Using mixins with class-based views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:7
msgid ""
"This is an advanced topic. A working knowledge of :doc:`Django's class-based"
" views<index>` is advised before exploring these techniques."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:11
msgid ""
"Django's built-in class-based views provide a lot of functionality, but some"
" of it you may want to use separately. For instance, you may want to write a"
" view that renders a template to make the HTTP response, but you can't use "
":class:`~django.views.generic.base.TemplateView`; perhaps you need to render"
" a template only on ``POST``, with ``GET`` doing something else entirely. "
"While you could use :class:`~django.template.response.TemplateResponse` "
"directly, this will likely result in duplicate code."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:21
msgid ""
"For this reason, Django also provides a number of mixins that provide more "
"discrete functionality. Template rendering, for instance, is encapsulated in"
" the :class:`~django.views.generic.base.TemplateResponseMixin`. The Django "
"reference documentation contains :doc:`full documentation of all the "
"mixins</ref/class-based-views/mixins>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:29
msgid "Context and template responses"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:31
msgid ""
"Two central mixins are provided that help in providing a consistent "
"interface to working with templates in class-based views."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:56
msgid ":class:`~django.views.generic.base.TemplateResponseMixin`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:35
msgid ""
"Every built in view which returns a "
":class:`~django.template.response.TemplateResponse` will call the "
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`"
" method that ``TemplateResponseMixin`` provides. Most of the time this will "
"be called for you (for instance, it is called by the ``get()`` method "
"implemented by both :class:`~django.views.generic.base.TemplateView` and "
":class:`~django.views.generic.detail.DetailView`); similarly, it's unlikely "
"that you'll need to override it, although if you want your response to "
"return something not rendered via a Django template then you'll want to do "
"it. For an example of this, see the :ref:`JSONResponseMixin example "
"<jsonresponsemixin-example>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:47
msgid ""
"``render_to_response()`` itself calls "
":meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names`,"
" which by default will just look up "
":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` on "
"the class-based view; two other mixins "
"(:class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin` and"
" :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`) "
"override this to provide more flexible defaults when dealing with actual "
"objects."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:66
msgid ":class:`~django.views.generic.base.ContextMixin`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:59
msgid ""
"Every built in view which needs context data, such as for rendering a "
"template (including ``TemplateResponseMixin`` above), should call "
":meth:`~django.views.generic.base.ContextMixin.get_context_data()` passing "
"any data they want to ensure is in there as keyword arguments. "
"``get_context_data()`` returns a dictionary; in ``ContextMixin`` it simply "
"returns its keyword arguments, but it is common to override this to add more"
" members to the dictionary. You can also use the "
":attr:`~django.views.generic.base.ContextMixin.extra_context` attribute."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:69
msgid "Building up Django's generic class-based views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:71
msgid ""
"Let's look at how two of Django's generic class-based views are built out of"
" mixins providing discrete functionality. We'll consider "
":class:`~django.views.generic.detail.DetailView`, which renders a \"detail\""
" view of an object, and :class:`~django.views.generic.list.ListView`, which "
"will render a list of objects, typically from a queryset, and optionally "
"paginate them. This will introduce us to four mixins which between them "
"provide useful functionality when working with either a single Django "
"object, or multiple objects."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:81
msgid ""
"There are also mixins involved in the generic edit views "
"(:class:`~django.views.generic.edit.FormView`, and the model-specific views "
":class:`~django.views.generic.edit.CreateView`, "
":class:`~django.views.generic.edit.UpdateView` and "
":class:`~django.views.generic.edit.DeleteView`), and in the date-based "
"generic views. These are covered in the :doc:`mixin reference "
"documentation</ref/class-based-views/mixins>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:91
msgid "``DetailView``: working with a single Django object"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:93
msgid ""
"To show the detail of an object, we basically need to do two things: we need"
" to look up the object and then we need to make a "
":class:`~django.template.response.TemplateResponse` with a suitable "
"template, and that object as context."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:98
msgid ""
"To get the object, :class:`~django.views.generic.detail.DetailView` relies "
"on :class:`~django.views.generic.detail.SingleObjectMixin`, which provides a"
" :meth:`~django.views.generic.detail.SingleObjectMixin.get_object` method "
"that figures out the object based on the URL of the request (it looks for "
"``pk`` and ``slug`` keyword arguments as declared in the URLConf, and looks "
"the object up either from the "
":attr:`~django.views.generic.detail.SingleObjectMixin.model` attribute on "
"the view, or the "
":attr:`~django.views.generic.detail.SingleObjectMixin.queryset` attribute if"
" that's provided). ``SingleObjectMixin`` also overrides "
":meth:`~django.views.generic.base.ContextMixin.get_context_data()`, which is"
" used across all Django's built in class-based views to supply context data "
"for template renders."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:113
msgid ""
"To then make a :class:`~django.template.response.TemplateResponse`, "
":class:`DetailView` uses "
":class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`, "
"which extends :class:`~django.views.generic.base.TemplateResponseMixin`, "
"overriding "
":meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()`"
" as discussed above. It actually provides a fairly sophisticated set of "
"options, but the main one that most people are going to use is "
"``<app_label>/<model_name>_detail.html``. The ``_detail`` part can be "
"changed by setting "
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix`"
" on a subclass to something else. (For instance, the :doc:`generic edit "
"views<generic-editing>` use ``_form`` for create and update views, and "
"``_confirm_delete`` for delete views.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:129
msgid "``ListView``: working with many Django objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:131
msgid ""
"Lists of objects follow roughly the same pattern: we need a (possibly "
"paginated) list of objects, typically a "
":class:`~django.db.models.query.QuerySet`, and then we need to make a "
":class:`~django.template.response.TemplateResponse` with a suitable template"
" using that list of objects."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:137
msgid ""
"To get the objects, :class:`~django.views.generic.list.ListView` uses "
":class:`~django.views.generic.list.MultipleObjectMixin`, which provides both"
" :meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset` and "
":meth:`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`. "
"Unlike with :class:`~django.views.generic.detail.SingleObjectMixin`, there's"
" no need to key off parts of the URL to figure out the queryset to work "
"with, so the default just uses the "
":attr:`~django.views.generic.list.MultipleObjectMixin.queryset` or "
":attr:`~django.views.generic.list.MultipleObjectMixin.model` attribute on "
"the view class. A common reason to override "
":meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset` here "
"would be to dynamically vary the objects, such as depending on the current "
"user or to exclude posts in the future for a blog."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:153
msgid ""
":class:`~django.views.generic.list.MultipleObjectMixin` also overrides "
":meth:`~django.views.generic.base.ContextMixin.get_context_data()` to "
"include appropriate context variables for pagination (providing dummies if "
"pagination is disabled). It relies on ``object_list`` being passed in as a "
"keyword argument, which :class:`ListView` arranges for it."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:160
msgid ""
"To make a :class:`~django.template.response.TemplateResponse`, "
":class:`ListView` then uses "
":class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`; as "
"with :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`"
" above, this overrides ``get_template_names()`` to provide :meth:`a range of"
" options <django.views.generic.list.MultipleObjectTemplateResponseMixin>`, "
"with the most commonly-used being ``<app_label>/<model_name>_list.html``, "
"with the ``_list`` part again being taken from the "
":attr:`~django.views.generic.list.MultipleObjectTemplateResponseMixin.template_name_suffix`"
" attribute. (The date based generic views use suffixes such as ``_archive``,"
" ``_archive_year`` and so on to use different templates for the various "
"specialized date-based list views.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:175
msgid "Using Django's class-based view mixins"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:177
msgid ""
"Now we've seen how Django's generic class-based views use the provided "
"mixins, let's look at other ways we can combine them. Of course we're still "
"going to be combining them with either built-in class-based views, or other "
"generic class-based views, but there are a range of rarer problems you can "
"solve than are provided for by Django out of the box."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:186
msgid ""
"Not all mixins can be used together, and not all generic class based views "
"can be used with all other mixins. Here we present a few examples that do "
"work; if you want to bring together other functionality then you'll have to "
"consider interactions between attributes and methods that overlap between "
"the different classes you're using, and how `method resolution order`_ will "
"affect which versions of the methods will be called in what order."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:194
msgid ""
"The reference documentation for Django's :doc:`class-based views</ref/class-"
"based-views/index>` and :doc:`class-based view mixins</ref/class-based-"
"views/mixins>` will help you in understanding which attributes and methods "
"are likely to cause conflict between different classes and mixins."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:200
msgid ""
"If in doubt, it's often better to back off and base your work on "
":class:`View` or :class:`TemplateView`, perhaps with "
":class:`~django.views.generic.detail.SingleObjectMixin` and "
":class:`~django.views.generic.list.MultipleObjectMixin`. Although you will "
"probably end up writing more code, it is more likely to be clearly "
"understandable to someone else coming to it later, and with fewer "
"interactions to worry about you will save yourself some thinking. (Of "
"course, you can always dip into Django's implementation of the generic "
"class-based views for inspiration on how to tackle problems.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:213
msgid "Using ``SingleObjectMixin`` with View"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:215
msgid ""
"If we want to write a simple class-based view that responds only to "
"``POST``, we'll subclass :class:`~django.views.generic.base.View` and write "
"a ``post()`` method in the subclass. However if we want our processing to "
"work on a particular object, identified from the URL, we'll want the "
"functionality provided by "
":class:`~django.views.generic.detail.SingleObjectMixin`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:222
msgid ""
"We'll demonstrate this with the ``Author`` model we used in the "
":doc:`generic class-based views introduction<generic-display>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:248
msgid ""
"In practice you'd probably want to record the interest in a key-value store "
"rather than in a relational database, so we've left that bit out. The only "
"bit of the view that needs to worry about using "
":class:`~django.views.generic.detail.SingleObjectMixin` is where we want to "
"look up the author we're interested in, which it just does with a simple "
"call to ``self.get_object()``. Everything else is taken care of for us by "
"the mixin."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:256
msgid "We can hook this into our URLs easily enough:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:269
msgid ""
"Note the ``pk`` named group, which "
":meth:`~django.views.generic.detail.SingleObjectMixin.get_object` uses to "
"look up the ``Author`` instance. You could also use a slug, or any of the "
"other features of :class:`~django.views.generic.detail.SingleObjectMixin`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:276
msgid "Using ``SingleObjectMixin`` with ``ListView``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:278
msgid ""
":class:`~django.views.generic.list.ListView` provides built-in pagination, "
"but you might want to paginate a list of objects that are all linked (by a "
"foreign key) to another object. In our publishing example, you might want to"
" paginate through all the books by a particular publisher."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:284
msgid ""
"One way to do this is to combine :class:`ListView` with "
":class:`~django.views.generic.detail.SingleObjectMixin`, so that the "
"queryset for the paginated list of books can hang off the publisher found as"
" the single object. In order to do this, we need to have two different "
"querysets:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:292
msgid ""
"``Book`` queryset for use by :class:`~django.views.generic.list.ListView`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:290
msgid ""
"Since we have access to the ``Publisher`` whose books we want to list, we "
"simply override ``get_queryset()`` and use the ``Publisher``’s :ref:`reverse"
" foreign key manager<backwards-related-objects>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:300
msgid ""
"``Publisher`` queryset for use in "
":meth:`~django.views.generic.detail.SingleObjectMixin.get_object()`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:295
msgid ""
"We'll rely on the default implementation of ``get_object()`` to fetch the "
"correct ``Publisher`` object. However, we need to explicitly pass a "
"``queryset`` argument because otherwise the default implementation of "
"``get_object()`` would call ``get_queryset()`` which we have overridden to "
"return ``Book`` objects instead of ``Publisher`` ones."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:304
msgid ""
"We have to think carefully about ``get_context_data()``. Since both "
":class:`~django.views.generic.detail.SingleObjectMixin` and "
":class:`ListView` will put things in the context data under the value of "
"``context_object_name`` if it's set, we'll instead explicitly ensure the "
"``Publisher`` is in the context data. :class:`ListView` will add in the "
"suitable ``page_obj`` and ``paginator`` for us providing we remember to call"
" ``super()``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:313
msgid "Now we can write a new ``PublisherDetail``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:335
msgid ""
"Notice how we set ``self.object`` within ``get()`` so we can use it again "
"later in ``get_context_data()`` and ``get_queryset()``. If you don't set "
"``template_name``, the template will default to the normal :class:`ListView`"
" choice, which in this case would be ``\"books/book_list.html\"`` because "
"it's a list of books; :class:`ListView` knows nothing about "
":class:`~django.views.generic.detail.SingleObjectMixin`, so it doesn't have "
"any clue this view is anything to do with a ``Publisher``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:344
msgid ""
"The ``paginate_by`` is deliberately small in the example so you don't have "
"to create lots of books to see the pagination working! Here's the template "
"you'd want to use:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:379
msgid "Avoid anything more complex"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:381
msgid ""
"Generally you can use "
":class:`~django.views.generic.base.TemplateResponseMixin` and "
":class:`~django.views.generic.detail.SingleObjectMixin` when you need their "
"functionality. As shown above, with a bit of care you can even combine "
"``SingleObjectMixin`` with :class:`~django.views.generic.list.ListView`. "
"However things get increasingly complex as you try to do so, and a good rule"
" of thumb is:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:391
msgid ""
"Each of your views should use only mixins or views from one of the groups of"
" generic class-based views: :doc:`detail, list<generic-display>`, "
":doc:`editing<generic-editing>` and date. For example it's fine to combine "
":class:`TemplateView` (built in view) with "
":class:`~django.views.generic.list.MultipleObjectMixin` (generic list), but "
"you're likely to have problems combining ``SingleObjectMixin`` (generic "
"detail) with ``MultipleObjectMixin`` (generic list)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:400
msgid ""
"To show what happens when you try to get more sophisticated, we show an "
"example that sacrifices readability and maintainability when there is a "
"simpler solution. First, let's look at a naive attempt to combine "
":class:`~django.views.generic.detail.DetailView` with "
":class:`~django.views.generic.edit.FormMixin` to enable us to ``POST`` a "
"Django :class:`~django.forms.Form` to the same URL as we're displaying an "
"object using :class:`DetailView`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:409
msgid "Using ``FormMixin`` with ``DetailView``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:411
msgid ""
"Think back to our earlier example of using :class:`View` and "
":class:`~django.views.generic.detail.SingleObjectMixin` together. We were "
"recording a user's interest in a particular author; say now that we want to "
"let them leave a message saying why they like them. Again, let's assume "
"we're not going to store this in a relational database but instead in "
"something more esoteric that we won't worry about here."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:418
msgid ""
"At this point it's natural to reach for a :class:`~django.forms.Form` to "
"encapsulate the information sent from the user's browser to Django. Say also"
" that we're heavily invested in `REST`_, so we want to use the same URL for "
"displaying the author as for capturing the message from the user. Let's "
"rewrite our ``AuthorDetailView`` to do that."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:426
msgid ""
"We'll keep the ``GET`` handling from :class:`DetailView`, although we'll "
"have to add a :class:`~django.forms.Form` into the context data so we can "
"render it in the template. We'll also want to pull in form processing from "
":class:`~django.views.generic.edit.FormMixin`, and write a bit of code so "
"that on ``POST`` the form gets called appropriately."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:434
msgid ""
"We use :class:`~django.views.generic.edit.FormMixin` and implement "
"``post()`` ourselves rather than try to mix :class:`DetailView` with "
":class:`FormView` (which provides a suitable ``post()`` already) because "
"both of the views implement ``get()``, and things would get much more "
"confusing."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:440
msgid "Our new ``AuthorDetail`` looks like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:484
msgid ""
"``get_success_url()`` is just providing somewhere to redirect to, which gets"
" used in the default implementation of ``form_valid()``. We have to provide "
"our own ``post()`` as noted earlier, and override ``get_context_data()`` to "
"make the :class:`~django.forms.Form` available in the context data."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:491
msgid "A better solution"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:493
msgid ""
"It should be obvious that the number of subtle interactions between "
":class:`~django.views.generic.edit.FormMixin` and :class:`DetailView` is "
"already testing our ability to manage things. It's unlikely you'd want to "
"write this kind of class yourself."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:498
msgid ""
"In this case, it would be fairly easy to just write the ``post()`` method "
"yourself, keeping :class:`DetailView` as the only generic functionality, "
"although writing :class:`~django.forms.Form` handling code involves a lot of"
" duplication."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:503
msgid ""
"Alternatively, it would still be easier than the above approach to have a "
"separate view for processing the form, which could use "
":class:`~django.views.generic.edit.FormView` distinct from "
":class:`DetailView` without concerns."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:509
msgid "An alternative better solution"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:511
msgid ""
"What we're really trying to do here is to use two different class based "
"views from the same URL. So why not do just that? We have a very clear "
"division here: ``GET`` requests should get the :class:`DetailView` (with the"
" :class:`~django.forms.Form` added to the context data), and ``POST`` "
"requests should get the :class:`FormView`. Let's set up those views first."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:518
msgid ""
"The ``AuthorDisplay`` view is almost the same as :ref:`when we first "
"introduced AuthorDetail<generic-views-extra-work>`; we have to write our own"
" ``get_context_data()`` to make the ``AuthorInterestForm`` available to the "
"template. We'll skip the ``get_object()`` override from before for clarity::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:539
msgid ""
"Then the ``AuthorInterest`` is a simple :class:`FormView`, but we have to "
"bring in :class:`~django.views.generic.detail.SingleObjectMixin` so we can "
"find the author we're talking about, and we have to remember to set "
"``template_name`` to ensure that form errors will render the same template "
"as ``AuthorDisplay`` is using on ``GET``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:564
msgid ""
"Finally we bring this together in a new ``AuthorDetail`` view. We already "
"know that calling :meth:`~django.views.generic.base.View.as_view()` on a "
"class-based view gives us something that behaves exactly like a function "
"based view, so we can do that at the point we choose between the two "
"subviews."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:569
msgid ""
"You can of course pass through keyword arguments to "
":meth:`~django.views.generic.base.View.as_view()` in the same way you would "
"in your URLconf, such as if you wanted the ``AuthorInterest`` behavior to "
"also appear at another URL but using a different template::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:586
msgid ""
"This approach can also be used with any other generic class-based views or "
"your own class-based views inheriting directly from :class:`View` or "
":class:`TemplateView`, as it keeps the different views as separate as "
"possible."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:594
msgid "More than just HTML"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:596
msgid ""
"Where class-based views shine is when you want to do the same thing many "
"times. Suppose you're writing an API, and every view should return JSON "
"instead of rendered HTML."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:600
msgid ""
"We can create a mixin class to use in all of our views, handling the "
"conversion to JSON once."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:603
msgid "For example, a simple JSON mixin might look something like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:632
msgid ""
"Check out the :doc:`/topics/serialization` documentation for more "
"information on how to correctly transform Django models and querysets into "
"JSON."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:636
msgid ""
"This mixin provides a ``render_to_json_response()`` method with the same "
"signature as "
":func:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`."
" To use it, we simply need to mix it into a ``TemplateView`` for example, "
"and override ``render_to_response()`` to call ``render_to_json_response()`` "
"instead::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:647
msgid ""
"Equally we could use our mixin with one of the generic views. We can make "
"our own version of :class:`~django.views.generic.detail.DetailView` by "
"mixing ``JSONResponseMixin`` with the "
"``django.views.generic.detail.BaseDetailView`` -- (the "
":class:`~django.views.generic.detail.DetailView` before template rendering "
"behavior has been mixed in)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:660
msgid ""
"This view can then be deployed in the same way as any other "
":class:`~django.views.generic.detail.DetailView`, with exactly the same "
"behavior -- except for the format of the response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:664
msgid ""
"If you want to be really adventurous, you could even mix a "
":class:`~django.views.generic.detail.DetailView` subclass that is able to "
"return *both* HTML and JSON content, depending on some property of the HTTP "
"request, such as a query argument or a HTTP header. Just mix in both the "
"``JSONResponseMixin`` and a "
":class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`, and"
" override the implementation of "
":func:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`"
" to defer to the appropriate rendering method depending on the type of "
"response that the user requested::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/class-based-views/mixins.txt:685
msgid ""
"Because of the way that Python resolves method overloading, the call to "
"``super().render_to_response(context)`` ends up calling the "
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`"
" implementation of "
":class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:3
msgid "Conditional View Processing"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:5
msgid ""
"HTTP clients can send a number of headers to tell the server about copies of"
" a resource that they have already seen. This is commonly used when "
"retrieving a Web page (using an HTTP ``GET`` request) to avoid sending all "
"the data for something the client has already retrieved. However, the same "
"headers can be used for all HTTP methods (``POST``, ``PUT``, ``DELETE``, "
"etc.)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:11
msgid ""
"For each page (response) that Django sends back from a view, it might "
"provide two HTTP headers: the ``ETag`` header and the ``Last-Modified`` "
"header. These headers are optional on HTTP responses. They can be set by "
"your view function, or you can rely on the "
":class:`~django.middleware.http.ConditionalGetMiddleware` middleware to set "
"the ``ETag`` header."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:17
msgid ""
"When the client next requests the same resource, it might send along a "
"header such as either `If-modified-since`_ or `If-unmodified-since`_, "
"containing the date of the last modification time it was sent, or either "
"`If-match`_ or `If-none-match`_, containing the last ``ETag`` it was sent. "
"If the current version of the page matches the ``ETag`` sent by the client, "
"or if the resource has not been modified, a 304 status code can be sent "
"back, instead of a full response, telling the client that nothing has "
"changed. Depending on the header, if the page has been modified or does not "
"match the ``ETag`` sent by the client, a 412 status code (Precondition "
"Failed) may be returned."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:33
msgid ""
"When you need more fine-grained control you may use per-view conditional "
"processing functions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:39
msgid "The ``condition`` decorator"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:41
msgid ""
"Sometimes (in fact, quite often) you can create functions to rapidly compute"
" the ETag_ value or the last-modified time for a resource, **without** "
"needing to do all the computations needed to construct the full view. Django"
" can then use these functions to provide an \"early bailout\" option for the"
" view processing. Telling the client that the content has not been modified "
"since the last request, perhaps."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:50
msgid ""
"These two functions are passed as parameters to the "
"``django.views.decorators.http.condition`` decorator. This decorator uses "
"the two functions (you only need to supply one, if you can't compute both "
"quantities easily and quickly) to work out if the headers in the HTTP "
"request match those on the resource. If they don't match, a new copy of the "
"resource must be computed and your normal view is called."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:57
msgid "The ``condition`` decorator's signature looks like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:61
msgid ""
"The two functions, to compute the ETag and the last modified time, will be "
"passed the incoming ``request`` object and the same parameters, in the same "
"order, as the view function they are helping to wrap. The function passed "
"``last_modified_func`` should return a standard datetime value specifying "
"the last time the resource was modified, or ``None`` if the resource doesn't"
" exist. The function passed to the ``etag`` decorator should return a string"
" representing the `ETag`_ for the resource, or ``None`` if it doesn't exist."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:69
msgid ""
"The decorator sets the ``ETag`` and ``Last-Modified`` headers on the "
"response if they are not already set by the view and if the request's method"
" is safe (``GET`` or ``HEAD``)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:73
msgid ""
"Using this feature usefully is probably best explained with an example. "
"Suppose you have this pair of models, representing a simple blog system::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:87
msgid ""
"If the front page, displaying the latest blog entries, only changes when you"
" add a new blog entry, you can compute the last modified time very quickly. "
"You need the latest ``published`` date for every entry associated with that "
"blog. One way to do this would be::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:95
msgid ""
"You can then use this function to provide early detection of an unchanged "
"page for your front page view::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:104
msgid "Be careful with the order of decorators"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:106
msgid ""
"When ``condition()`` returns a conditional response, any decorators below it"
" will be skipped and won't apply to the response. Therefore, any decorators "
"that need to apply to both the regular view response and a conditional "
"response must be above ``condition()``. In particular, "
":func:`~django.views.decorators.vary.vary_on_cookie`, "
":func:`~django.views.decorators.vary.vary_on_headers`, and "
":func:`~django.views.decorators.cache.cache_control` should come first "
"because :rfc:`RFC 7232 <7232#section-4.1>` requires that the headers they "
"set be present on 304 responses."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:117
msgid "Shortcuts for only computing one value"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:119
msgid ""
"As a general rule, if you can provide functions to compute *both* the ETag "
"and the last modified time, you should do so. You don't know which headers "
"any given HTTP client will send you, so be prepared to handle both. However,"
" sometimes only one value is easy to compute and Django provides decorators "
"that handle only ETag or only last-modified computations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:125
msgid ""
"The ``django.views.decorators.http.etag`` and "
"``django.views.decorators.http.last_modified`` decorators are passed the "
"same type of functions as the ``condition`` decorator. Their signatures "
"are::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:132
msgid ""
"We could write the earlier example, which only uses a last-modified "
"function, using one of these decorators::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:139
msgid "...or::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:146
msgid "Use ``condition`` when testing both conditions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:148
msgid ""
"It might look nicer to some people to try and chain the ``etag`` and "
"``last_modified`` decorators if you want to test both preconditions. "
"However, this would lead to incorrect behavior."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:162
msgid ""
"The first decorator doesn't know anything about the second and might answer "
"that the response is not modified even if the second decorators would "
"determine otherwise. The ``condition`` decorator uses both callback "
"functions simultaneously to work out the right action to take."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:168
msgid "Using the decorators with other HTTP methods"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:170
msgid ""
"The ``condition`` decorator is useful for more than only ``GET`` and "
"``HEAD`` requests (``HEAD`` requests are the same as ``GET`` in this "
"situation). It can also be used to provide checking for ``POST``, ``PUT`` "
"and ``DELETE`` requests. In these situations, the idea isn't to return a "
"\"not modified\" response, but to tell the client that the resource they are"
" trying to change has been altered in the meantime."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:177
msgid ""
"For example, consider the following exchange between the client and server:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:179
msgid "Client requests ``/foo/``."
msgstr "用户请求``/foo/``。"

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:180
msgid "Server responds with some content with an ETag of ``\"abcd1234\"``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:181
msgid ""
"Client sends an HTTP ``PUT`` request to ``/foo/`` to update the resource. It"
" also sends an ``If-Match: \"abcd1234\"`` header to specify the version it "
"is trying to update."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:184
msgid ""
"Server checks to see if the resource has changed, by computing the ETag the "
"same way it does for a ``GET`` request (using the same function). If the "
"resource *has* changed, it will return a 412 status code, meaning "
"\"precondition failed\"."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:188
msgid ""
"Client sends a ``GET`` request to ``/foo/``, after receiving a 412 response,"
" to retrieve an updated version of the content before updating it."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:192
msgid ""
"The important thing this example shows is that the same functions can be "
"used to compute the ETag and last modification values in all situations. In "
"fact, you **should** use the same functions, so that the same values are "
"returned every time."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:197
msgid "Validator headers with non-safe request methods"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:199
msgid ""
"The ``condition`` decorator only sets validator headers (``ETag`` and "
"``Last-Modified``) for safe HTTP methods, i.e. ``GET`` and ``HEAD``. If you "
"wish to return them in other cases, set them in your view. See "
":rfc:`7231#section-4.3.4` to learn about the distinction between setting a "
"validator header in response to requests made with ``PUT`` versus ``POST``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:206
msgid "Comparison with middleware conditional processing"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:208
msgid ""
"Django provides simple and straightforward conditional ``GET`` handling via "
":class:`django.middleware.http.ConditionalGetMiddleware`. While being easy "
"to use and suitable for many situations, the middleware has limitations for "
"advanced usage:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:213
msgid "It's applied globally to all views in your project."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:214
msgid ""
"It doesn't save you from generating the response, which may be expensive."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:215
msgid "It's only appropriate for HTTP ``GET`` requests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/conditional-view-processing.txt:217
msgid ""
"You should choose the most appropriate tool for your particular problem "
"here. If you have a way to compute ETags and modification times quickly and "
"if some view takes a while to generate the content, you should consider "
"using the ``condition`` decorator described in this document. If everything "
"already runs fairly quickly, stick to using the middleware and the amount of"
" network traffic sent back to the clients will still be reduced if the view "
"hasn't changed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:3
msgid "Aggregation"
msgstr "聚合"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:7
msgid ""
"The topic guide on :doc:`Django's database-abstraction API "
"</topics/db/queries>` described the way that you can use Django queries that"
" create, retrieve, update and delete individual objects. However, sometimes "
"you will need to retrieve values that are derived by summarizing or "
"*aggregating* a collection of objects. This topic guide describes the ways "
"that aggregate values can be generated and returned using Django queries."
msgstr ":doc:`Django 数据库抽象 API ` 描述了使用 Django queries 来增删查改单个对象的方法。 然而，有时候你要获取的值需要根据一组对象聚合后才能得到。这个主题指南描述了如何使用 Django queries 来生成和返回聚合值的方法。"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:14
msgid ""
"Throughout this guide, we'll refer to the following models. These models are"
" used to track the inventory for a series of online bookstores:"
msgstr "整篇指南我们将引用以下模型。这些模型用来记录多个网上书店的库存。"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:44
msgid "Cheat sheet"
msgstr "速查表"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:46
msgid ""
"In a hurry? Here's how to do common aggregate queries, assuming the models "
"above:"
msgstr "下面是根据以上模型执行常见的聚合查询："

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:101
msgid "Generating aggregates over a ``QuerySet``"
msgstr "在 ``QuerySet`` 上生成聚合"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:103
msgid ""
"Django provides two ways to generate aggregates. The first way is to "
"generate summary values over an entire ``QuerySet``. For example, say you "
"wanted to calculate the average price of all books available for sale. "
"Django's query syntax provides a means for describing the set of all books::"
msgstr "Django 提供了两种生成聚合的方法。第一种方法是从整个 ``QuerySet`` 生成汇总值。比如你想要计算所有在售书的平均价格。Django 的查询语法提供了一种用来描述所有图书集合的方法："

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:110
msgid ""
"What we need is a way to calculate summary values over the objects that "
"belong to this ``QuerySet``. This is done by appending an ``aggregate()`` "
"clause onto the ``QuerySet``::"
msgstr "可以通过在 ``QuerySet`` 后添加 ``aggregate()`` 子句来计算 ``QuerySet`` 对象的汇总值。"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:118
msgid ""
"The ``all()`` is redundant in this example, so this could be simplified to::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:123
msgid ""
"The argument to the ``aggregate()`` clause describes the aggregate value "
"that we want to compute - in this case, the average of the ``price`` field "
"on the ``Book`` model. A list of the aggregate functions that are available "
"can be found in the :ref:`QuerySet reference <aggregation-functions>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:128
msgid ""
"``aggregate()`` is a terminal clause for a ``QuerySet`` that, when invoked, "
"returns a dictionary of name-value pairs. The name is an identifier for the "
"aggregate value; the value is the computed aggregate. The name is "
"automatically generated from the name of the field and the aggregate "
"function. If you want to manually specify a name for the aggregate value, "
"you can do so by providing that name when you specify the aggregate clause::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:138
msgid ""
"If you want to generate more than one aggregate, you just add another "
"argument to the ``aggregate()`` clause. So, if we also wanted to know the "
"maximum and minimum price of all books, we would issue the query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:147
msgid "Generating aggregates for each item in a ``QuerySet``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:149
msgid ""
"The second way to generate summary values is to generate an independent "
"summary for each object in a :class:`.QuerySet`. For example, if you are "
"retrieving a list of books, you may want to know how many authors "
"contributed to each book. Each Book has a many-to-many relationship with the"
" Author; we want to summarize this relationship for each book in the "
"``QuerySet``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:155
msgid ""
"Per-object summaries can be generated using the :meth:`~.QuerySet.annotate` "
"clause. When an ``annotate()`` clause is specified, each object in the "
"``QuerySet`` will be annotated with the specified values."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:160
msgid ""
"The syntax for these annotations is identical to that used for the "
":meth:`~.QuerySet.aggregate` clause. Each argument to ``annotate()`` "
"describes an aggregate that is to be calculated. For example, to annotate "
"books with the number of authors:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:181
msgid ""
"As with ``aggregate()``, the name for the annotation is automatically "
"derived from the name of the aggregate function and the name of the field "
"being aggregated. You can override this default name by providing an alias "
"when you specify the annotation::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:192
msgid ""
"Unlike ``aggregate()``, ``annotate()`` is *not* a terminal clause. The "
"output of the ``annotate()`` clause is a ``QuerySet``; this ``QuerySet`` can"
" be modified using any other ``QuerySet`` operation, including ``filter()``,"
" ``order_by()``, or even additional calls to ``annotate()``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:200
msgid "Combining multiple aggregations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:202
msgid ""
"Combining multiple aggregations with ``annotate()`` will `yield the wrong "
"results <https://code.djangoproject.com/ticket/10060>`_ because joins are "
"used instead of subqueries:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:217
msgid ""
"For most aggregates, there is no way to avoid this problem, however, the "
":class:`~django.db.models.Count` aggregate has a ``distinct`` parameter that"
" may help:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:227
msgid "If in doubt, inspect the SQL query!"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:229
msgid ""
"In order to understand what happens in your query, consider inspecting the "
"``query`` property of your ``QuerySet``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:233
msgid "Joins and aggregates"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:235
msgid ""
"So far, we have dealt with aggregates over fields that belong to the model "
"being queried. However, sometimes the value you want to aggregate will "
"belong to a model that is related to the model you are querying."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:239
msgid ""
"When specifying the field to be aggregated in an aggregate function, Django "
"will allow you to use the same :ref:`double underscore notation <field-"
"lookups-intro>` that is used when referring to related fields in filters. "
"Django will then handle any table joins that are required to retrieve and "
"aggregate the related value."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:245
msgid ""
"For example, to find the price range of books offered in each store, you "
"could use the annotation::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:251
msgid ""
"This tells Django to retrieve the ``Store`` model, join (through the many-"
"to-many relationship) with the ``Book`` model, and aggregate on the price "
"field of the book model to produce a minimum and maximum value."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:255
msgid ""
"The same rules apply to the ``aggregate()`` clause. If you wanted to know "
"the lowest and highest price of any book that is available for sale in any "
"of the stores, you could use the aggregate::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:261
msgid ""
"Join chains can be as deep as you require. For example, to extract the age "
"of the youngest author of any book available for sale, you could issue the "
"query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:268
msgid "Following relationships backwards"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:270
msgid ""
"In a way similar to :ref:`lookups-that-span-relationships`, aggregations and"
" annotations on fields of models or models that are related to the one you "
"are querying can include traversing \"reverse\" relationships. The lowercase"
" name of related models and double-underscores are used here too."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:275
msgid ""
"For example, we can ask for all publishers, annotated with their respective "
"total book stock counters (note how we use ``'book'`` to specify the "
"``Publisher`` -> ``Book`` reverse foreign key hop)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:282
msgid ""
"(Every ``Publisher`` in the resulting ``QuerySet`` will have an extra "
"attribute called ``book__count``.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:285
msgid ""
"We can also ask for the oldest book of any of those managed by every "
"publisher::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:289
msgid ""
"(The resulting dictionary will have a key called ``'oldest_pubdate'``. If no"
" such alias were specified, it would be the rather long "
"``'book__pubdate__min'``.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:292
msgid ""
"This doesn't apply just to foreign keys. It also works with many-to-many "
"relations. For example, we can ask for every author, annotated with the "
"total number of pages considering all the books the author has (co-)authored"
" (note how we use ``'book'`` to specify the ``Author`` -> ``Book`` reverse "
"many-to-many hop)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:299
msgid ""
"(Every ``Author`` in the resulting ``QuerySet`` will have an extra attribute"
" called ``total_pages``. If no such alias were specified, it would be the "
"rather long ``book__pages__sum``.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:303
msgid ""
"Or ask for the average rating of all the books written by author(s) we have "
"on file::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:308
msgid ""
"(The resulting dictionary will have a key called ``'average_rating'``. If no"
" such alias were specified, it would be the rather long "
"``'book__rating__avg'``.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:312
msgid "Aggregations and other ``QuerySet`` clauses"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:315
msgid "``filter()`` and ``exclude()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:317
msgid ""
"Aggregates can also participate in filters. Any ``filter()`` (or "
"``exclude()``) applied to normal model fields will have the effect of "
"constraining the objects that are considered for aggregation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:321
msgid ""
"When used with an ``annotate()`` clause, a filter has the effect of "
"constraining the objects for which an annotation is calculated. For example,"
" you can generate an annotated list of all books that have a title starting "
"with \"Django\" using the query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:329
msgid ""
"When used with an ``aggregate()`` clause, a filter has the effect of "
"constraining the objects over which the aggregate is calculated. For "
"example, you can generate the average price of all books with a title that "
"starts with \"Django\" using the query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:339
msgid "Filtering on annotations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:341
msgid ""
"Annotated values can also be filtered. The alias for the annotation can be "
"used in ``filter()`` and ``exclude()`` clauses in the same way as any other "
"model field."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:345
msgid ""
"For example, to generate a list of books that have more than one author, you"
" can issue the query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:350
msgid ""
"This query generates an annotated result set, and then generates a filter "
"based upon that annotation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:353
msgid ""
"If you need two annotations with two separate filters you can use the "
"``filter`` argument with any aggregate. For example, to generate a list of "
"authors with a count of highly rated books::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:360
msgid ""
"Each ``Author`` in the result set will have the ``num_books`` and "
"``highly_rated_books`` attributes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:363
msgid "Choosing between ``filter`` and ``QuerySet.filter()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:365
msgid ""
"Avoid using the ``filter`` argument with a single annotation or aggregation."
" It's more efficient to use ``QuerySet.filter()`` to exclude rows. The "
"aggregation ``filter`` argument is only useful when using two or more "
"aggregations over the same relations with different conditionals."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:371
msgid "Order of ``annotate()`` and ``filter()`` clauses"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:373
msgid ""
"When developing a complex query that involves both ``annotate()`` and "
"``filter()`` clauses, pay particular attention to the order in which the "
"clauses are applied to the ``QuerySet``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:377
msgid ""
"When an ``annotate()`` clause is applied to a query, the annotation is "
"computed over the state of the query up to the point where the annotation is"
" requested. The practical implication of this is that ``filter()`` and "
"``annotate()`` are not commutative operations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:382
msgid "Given:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:384
msgid "Publisher A has two books with ratings 4 and 5."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:385
msgid "Publisher B has two books with ratings 1 and 4."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:386
msgid "Publisher C has one book with rating 1."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:388
msgid "Here's an example with the ``Count`` aggregate::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:402
msgid ""
"Both queries return a list of publishers that have at least one book with a "
"rating exceeding 3.0, hence publisher C is excluded."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:405
msgid ""
"In the first query, the annotation precedes the filter, so the filter has no"
" effect on the annotation. ``distinct=True`` is required to avoid a "
":ref:`query bug <combining-multiple-aggregations>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:409
msgid ""
"The second query counts the number of books that have a rating exceeding 3.0"
" for each publisher. The filter precedes the annotation, so the filter "
"constrains the objects considered when calculating the annotation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:413
msgid "Here's another example with the ``Avg`` aggregate::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:427
msgid ""
"The first query asks for the average rating of all a publisher's books for "
"publisher's that have at least one book with a rating exceeding 3.0. The "
"second query asks for the average of a publisher's book's ratings for only "
"those ratings exceeding 3.0."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:432
msgid ""
"It's difficult to intuit how the ORM will translate complex querysets into "
"SQL queries so when in doubt, inspect the SQL with ``str(queryset.query)`` "
"and write plenty of tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:437
msgid "``order_by()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:439
msgid ""
"Annotations can be used as a basis for ordering. When you define an "
"``order_by()`` clause, the aggregates you provide can reference any alias "
"defined as part of an ``annotate()`` clause in the query."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:443
msgid ""
"For example, to order a ``QuerySet`` of books by the number of authors that "
"have contributed to the book, you could use the following query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:449
msgid "``values()``"
msgstr "``values()``"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:451
msgid ""
"Ordinarily, annotations are generated on a per-object basis - an annotated "
"``QuerySet`` will return one result for each object in the original "
"``QuerySet``. However, when a ``values()`` clause is used to constrain the "
"columns that are returned in the result set, the method for evaluating "
"annotations is slightly different. Instead of returning an annotated result "
"for each result in the original ``QuerySet``, the original results are "
"grouped according to the unique combinations of the fields specified in the "
"``values()`` clause. An annotation is then provided for each unique group; "
"the annotation is computed over all members of the group."
msgstr "通常，注解值会添加到每个对象上，即一个被注解的 ``QuerySet`` 将会为初始 ``QuerySet`` 的每个对象返回一个结果集。然而，当使用 ``values()`` 子句来对结果集进行约束时，生成注解值的方法会稍有不同。不是在原始 ``QuerySet`` 中对每个对象添加注解并返回，而是根据定义在 ``values()`` 子句中的字段组合先对结果进行分组，再对每个单独的分组进行注解，这个注解值是根据分组中所有的对象计算得到的。"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:461
msgid ""
"For example, consider an author query that attempts to find out the average "
"rating of books written by each author:"
msgstr "下面是一个关于作者的查询例子，查询每个作者所著书的平均评分："

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:466
msgid ""
"This will return one result for each author in the database, annotated with "
"their average book rating."
msgstr "这段代码返回的是数据库中的所有作者及其所著书的平均评分。"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:469
msgid ""
"However, the result will be slightly different if you use a ``values()`` "
"clause::"
msgstr "但是如果你使用 ``values()`` 子句，结果会稍有不同："

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:473
msgid ""
"In this example, the authors will be grouped by name, so you will only get "
"an annotated result for each *unique* author name. This means if you have "
"two authors with the same name, their results will be merged into a single "
"result in the output of the query; the average will be computed as the "
"average over the books written by both authors."
msgstr "在这个例子中，作者会按名字分组，所以你只能得到不重名的作者分组的注解值。这意味着如果你有两个作者同名，那么他们原本各自的查询结果将被合并到同一个结果中；两个作者的所有评分都将被计算为一个平均分。"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:480
msgid "Order of ``annotate()`` and ``values()`` clauses"
msgstr "``annotate()`` 和 ``values()`` 的顺序"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:482
msgid ""
"As with the ``filter()`` clause, the order in which ``annotate()`` and "
"``values()`` clauses are applied to a query is significant. If the "
"``values()`` clause precedes the ``annotate()``, the annotation will be "
"computed using the grouping described by the ``values()`` clause."
msgstr "和使用 ``filter()`` 一样，作用于某个查询的 ``annotate()`` 和 ``values()`` 子句的顺序非常重要。如果 ``values()`` 子句在 ``annotate()`` 之前，就会根据 ``values()`` 子句产生的分组来计算注解。"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:487
msgid ""
"However, if the ``annotate()`` clause precedes the ``values()`` clause, the "
"annotations will be generated over the entire query set. In this case, the "
"``values()`` clause only constrains the fields that are generated on output."
msgstr "然而如果 ``annotate()`` 子句在 ``values()`` 之前，就会根据整个查询集生成注解。这种情况下，``values()`` 子句只能限制输出的字段。"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:492
msgid ""
"For example, if we reverse the order of the ``values()`` and ``annotate()`` "
"clause from our previous example::"
msgstr "举个例子，如果我们颠倒上个例子中 ``values()`` 和 ``annotate()`` 的顺序："

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:497
msgid ""
"This will now yield one unique result for each author; however, only the "
"author's name and the ``average_rating`` annotation will be returned in the "
"output data."
msgstr "这段代码将为每个作者添加一个唯一注解，但只有作者姓名和 ``average_rating`` 注解会返回在输出结果中。"

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:501
msgid ""
"You should also note that ``average_rating`` has been explicitly included in"
" the list of values to be returned. This is required because of the ordering"
" of the ``values()`` and ``annotate()`` clause."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:505
msgid ""
"If the ``values()`` clause precedes the ``annotate()`` clause, any "
"annotations will be automatically added to the result set. However, if the "
"``values()`` clause is applied after the ``annotate()`` clause, you need to "
"explicitly include the aggregate column."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:513
msgid "Interaction with default ordering or ``order_by()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:517
msgid ""
"Starting in Django 3.1, the ordering from a model's ``Meta.ordering`` won't "
"be used in ``GROUP BY`` queries, such as ``.annotate().values()``. Since "
"Django 2.2, these queries issue a deprecation warning indicating to add an "
"explicit ``order_by()`` to the queryset to silence the warning."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:522
msgid ""
"Fields that are mentioned in the ``order_by()`` part of a queryset (or which"
" are used in the default ordering on a model) are used when selecting the "
"output data, even if they are not otherwise specified in the ``values()`` "
"call. These extra fields are used to group \"like\" results together and "
"they can make otherwise identical result rows appear to be separate. This "
"shows up, particularly, when counting things."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:529
msgid "By way of example, suppose you have a model like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:540
msgid ""
"The important part here is the default ordering on the ``name`` field. If "
"you want to count how many times each distinct ``data`` value appears, you "
"might try this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:547
msgid ""
"...which will group the ``Item`` objects by their common ``data`` values and"
" then count the number of ``id`` values in each group. Except that it won't "
"quite work. The default ordering by ``name`` will also play a part in the "
"grouping, so this query will group by distinct ``(data, name)`` pairs, which"
" isn't what you want. Instead, you should construct this queryset::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:555
msgid ""
"...clearing any ordering in the query. You could also order by, say, "
"``data`` without any harmful effects, since that is already playing a role "
"in the query."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:559
msgid ""
"This behavior is the same as that noted in the queryset documentation for "
":meth:`~django.db.models.query.QuerySet.distinct` and the general rule is "
"the same: normally you won't want extra columns playing a part in the "
"result, so clear out the ordering, or at least make sure it's restricted "
"only to those fields you also select in a ``values()`` call."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:566
msgid ""
"You might reasonably ask why Django doesn't remove the extraneous columns "
"for you. The main reason is consistency with ``distinct()`` and other "
"places: Django **never** removes ordering constraints that you have "
"specified (and we can't change those other methods' behavior, as that would "
"violate our :doc:`/misc/api-stability` policy)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:573
msgid "Aggregating annotations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:575
msgid ""
"You can also generate an aggregate on the result of an annotation. When you "
"define an ``aggregate()`` clause, the aggregates you provide can reference "
"any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/aggregation.txt:579
msgid ""
"For example, if you wanted to calculate the average number of authors per "
"book you first annotate the set of books with the author count, then "
"aggregate that author count, referencing the annotation field::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/index.txt:3
msgid "Examples of model relationship API usage"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:3
#: ../../../../sources/2.2/docs/topics/db/models.txt:365
#: ../../../../sources/2.2/docs/topics/db/queries.txt:1245
msgid "Many-to-many relationships"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:7
msgid ""
"To define a many-to-many relationship, use "
":class:`~django.db.models.ManyToManyField`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:10
msgid ""
"In this example, an ``Article`` can be published in multiple ``Publication``"
" objects, and a ``Publication`` has multiple ``Article`` objects:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:36
#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:28
#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:38
msgid ""
"What follows are examples of operations that can be performed using the "
"Python API facilities."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:39
msgid "Create a few ``Publications``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:48
msgid "Create an ``Article``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:52
msgid "You can't associate it with a ``Publication`` until it's been saved::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:59
msgid "Save it! ::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:64
msgid "Associate the ``Article`` with a ``Publication``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:68
msgid ""
"Create another ``Article``, and set it to appear in the ``Publications``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:75
msgid "Adding a second time is OK, it will not duplicate the relation::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:79
msgid "Adding an object of the wrong type raises :exc:`TypeError`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:86
msgid ""
"Create and add a ``Publication`` to an ``Article`` in one step using "
":meth:`~django.db.models.fields.related.RelatedManager.create`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:91
msgid ""
"``Article`` objects have access to their related ``Publication`` objects::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:98
msgid ""
"``Publication`` objects have access to their related ``Article`` objects::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:107
msgid ""
"Many-to-many relationships can be queried using :ref:`lookups across "
"relationships <lookups-that-span-relationships>`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:125
msgid ""
"The :meth:`~django.db.models.query.QuerySet.count` function respects "
":meth:`~django.db.models.query.QuerySet.distinct` as well::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:139
msgid ""
"Reverse m2m queries are supported (i.e., starting at the table that doesn't "
"have a :class:`~django.db.models.ManyToManyField`)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:164
msgid ""
"Excluding a related item works as you would expect, too (although the SQL "
"involved is a little complex)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:170
msgid ""
"If we delete a ``Publication``, its ``Articles`` won't be able to access "
"it::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:179
msgid ""
"If we delete an ``Article``, its ``Publications`` won't be able to access "
"it::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:187
msgid "Adding via the 'other' end of an m2m::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:197
msgid "Adding via the other end using keywords::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:206
msgid "Removing ``Publication`` from an ``Article``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:214
msgid "And from the other end::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:222
msgid "Relation sets can be set::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:230
msgid "Relation sets can be cleared::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:236
msgid "And you can clear from the other end::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:249
msgid "Recreate the ``Article`` and ``Publication`` we have deleted::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:257
msgid ""
"Bulk delete some ``Publications`` - references to deleted publications "
"should go::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:268
msgid "Bulk delete some articles - references to deleted objects should go::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_many.txt:275
msgid ""
"After the :meth:`~django.db.models.query.QuerySet.delete`, the "
":class:`~django.db.models.query.QuerySet` cache needs to be cleared, and the"
" referenced objects should be gone::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:3
#: ../../../../sources/2.2/docs/topics/db/models.txt:310
msgid "Many-to-one relationships"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:5
msgid ""
"To define a many-to-one relationship, use "
":class:`~django.db.models.ForeignKey`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:33
msgid "Create a few Reporters::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:41
msgid "Create an Article::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:53
msgid ""
"Note that you must save an object before it can be assigned to a foreign key"
" relationship. For example, creating an ``Article`` with unsaved "
"``Reporter`` raises ``ValueError``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:63
msgid "Article objects have access to their related Reporter objects::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:67
msgid "Create an Article via the Reporter object::"
msgstr "通过 Reporter 对象来创建一个 Article"

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:77
msgid "Create a new article::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:87
msgid ""
"Add the same article to a different article set - check that it moves::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:95
msgid "Adding an object of the wrong type raises TypeError::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:113
msgid "Note that in the last example the article has moved from John to Paul."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:115
msgid ""
"Related managers support field lookups as well. The API automatically "
"follows relationships as far as you need. Use double underscores to separate"
" relationships. This works as many levels deep as you want. There's no "
"limit. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:127
msgid "Exact match is implied here::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:132
msgid ""
"Query twice over the related field. This translates to an AND condition in "
"the WHERE clause::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:138
msgid ""
"For the related lookup you can supply a primary key value or pass the "
"related object explicitly::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:153
msgid "You can also use a queryset instead of a literal list of instances::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:158
msgid "Querying in the opposite direction::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:172
msgid ""
"Counting in the opposite direction works in conjunction with distinct()::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:179
msgid "Queries can go round in circles::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:188
msgid ""
"If you delete a reporter, his articles will be deleted (assuming that the "
"ForeignKey was defined with :attr:`django.db.models.ForeignKey.on_delete` "
"set to ``CASCADE``, which is the default)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/many_to_one.txt:202
msgid "You can delete using a JOIN in the query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:3
#: ../../../../sources/2.2/docs/topics/db/models.txt:583
#: ../../../../sources/2.2/docs/topics/db/queries.txt:1282
msgid "One-to-one relationships"
msgstr "一对一关联"

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:5
msgid ""
"To define a one-to-one relationship, use "
":class:`~django.db.models.OneToOneField`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:8
msgid "In this example, a ``Place`` optionally can be a ``Restaurant``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:43
msgid "Create a couple of Places::"
msgstr "创建几个地方："

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:50
msgid ""
"Create a Restaurant. Pass the ID of the \"parent\" object as this object's "
"ID::"
msgstr "创建一个餐馆，将“父”对象的ID传递为该对象的ID："

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:55
msgid "A Restaurant can access its place::"
msgstr "餐厅可进入其地点："

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:60
msgid "A Place can access its restaurant, if available::"
msgstr "一个可以进入餐厅的地方（如果有的话）："

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:65
msgid "p2 doesn't have an associated restaurant::"
msgstr "p2没有关联餐厅："

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:74
msgid ""
"You can also use ``hasattr`` to avoid the need for exception catching::"
msgstr "您还可以使用``hasattr`` 来避免例外捕获的需要："

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:79
msgid ""
"Set the place using assignment notation. Because place is the primary key on"
" Restaurant, the save will create a new restaurant::"
msgstr "使用赋值符号来设置地方。因为地方是餐厅的主键，保存将创建一个新的餐馆："

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:89
msgid "Set the place back again, using assignment in the reverse direction::"
msgstr "再次设置地方，使用相反方向的赋值："

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:95
msgid ""
"Note that you must save an object before it can be assigned to a one-to-one "
"relationship. For example, creating a ``Restaurant`` with unsaved ``Place`` "
"raises ``ValueError``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:105
msgid ""
"Restaurant.objects.all() just returns the Restaurants, not the Places.  Note"
" that there are two restaurants - Ace Hardware the Restaurant was created in"
" the call to r.place = p2::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:112
msgid ""
"Place.objects.all() returns all Places, regardless of whether they have "
"Restaurants::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:118
msgid ""
"You can query the models using :ref:`lookups across relationships <lookups-"
"that-span-relationships>`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:129
msgid "This of course works in reverse::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:140
msgid "Add a Waiter to the Restaurant::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/examples/one_to_one.txt:146
msgid "Query the waiters::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/index.txt:3
msgid "Models and databases"
msgstr "模型和数据库"

#: ../../../../sources/2.2/docs/topics/db/index.txt:7
msgid ""
"A model is the single, definitive source of data about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Generally, each model maps to a single database table."
msgstr "模型准确且唯一的描述了数据。它包含您储存的数据的重要字段和行为。一般来说，每一个模型都映射一张数据库表。"

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:3
msgid "Database instrumentation"
msgstr "数据库工具"

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:5
msgid ""
"To help you understand and control the queries issued by your code, Django "
"provides a hook for installing wrapper functions around the execution of "
"database queries. For example, wrappers can count queries, measure query "
"duration, log queries, or even prevent query execution (e.g. to make sure "
"that no queries are issued while rendering a template with prefetched data)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:11
msgid ""
"The wrappers are modeled after :doc:`middleware </topics/http/middleware>` "
"-- they are callables which take another callable as one of their arguments."
" They call that callable to invoke the (possibly wrapped) database query, "
"and they can do what they want around that call. They are, however, created "
"and installed by user code, and so don't need a separate factory like "
"middleware do."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:17
msgid ""
"Installing a wrapper is done in a context manager -- so the wrappers are "
"temporary and specific to some flow in your code."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:20
msgid ""
"As mentioned above, an example of a wrapper is a query execution blocker. It"
" could look like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:26
msgid ""
"And it would be used in a view to block queries from the template like so::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:37
msgid "The parameters sent to the wrappers are:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:39
msgid ""
"``execute`` -- a callable, which should be invoked with the rest of the "
"parameters in order to execute the query."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:42
msgid "``sql`` -- a ``str``, the SQL query to be sent to the database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:44
msgid ""
"``params`` -- a list/tuple of parameter values for the SQL command, or a "
"list/tuple of lists/tuples if the wrapped call is ``executemany()``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:47
msgid ""
"``many`` -- a ``bool`` indicating whether the ultimately invoked call is "
"``execute()`` or ``executemany()`` (and whether ``params`` is expected to be"
" a sequence of values, or a sequence of sequences of values)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:51
msgid ""
"``context`` -- a dictionary with further data about the context of "
"invocation. This includes the connection and cursor."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:54
msgid ""
"Using the parameters, a slightly more complex version of the blocker could "
"include the connection name in the error message::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:61
msgid "For a more complete example, a query logger could look like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:87
msgid ""
"To use this, you would create a logger object and install it as a wrapper::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:100
msgid "``connection.execute_wrapper()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:104
msgid ""
"Returns a context manager which, when entered, installs a wrapper around "
"database query executions, and when exited, removes the wrapper. The wrapper"
" is installed on the thread-local connection object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/instrumentation.txt:108
msgid ""
"``wrapper`` is a callable taking five arguments.  It is called for every "
"query execution in the scope of the context manager, with arguments "
"``execute``, ``sql``, ``params``, ``many``, and ``context`` as described "
"above. It's expected to call ``execute(sql, params, many, context)`` and "
"return the return value of that call."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:3
msgid "Managers"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:9
msgid ""
"A ``Manager`` is the interface through which database query operations are "
"provided to Django models. At least one ``Manager`` exists for every model "
"in a Django application."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:13
msgid ""
"The way ``Manager`` classes work is documented in :doc:`/topics/db/queries`;"
" this document specifically touches on model options that customize "
"``Manager`` behavior."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:20
msgid "Manager names"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:22
msgid ""
"By default, Django adds a ``Manager`` with the name ``objects`` to every "
"Django model class. However, if you want to use ``objects`` as a field name,"
" or if you want to use a name other than ``objects`` for the ``Manager``, "
"you can rename it on a per-model basis. To rename the ``Manager`` for a "
"given class, define a class attribute of type ``models.Manager()`` on that "
"model. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:34
msgid ""
"Using this example model, ``Person.objects`` will generate an "
"``AttributeError`` exception, but ``Person.people.all()`` will provide a "
"list of all ``Person`` objects."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:41
msgid "Custom managers"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:43
msgid ""
"You can use a custom ``Manager`` in a particular model by extending the base"
" ``Manager`` class and instantiating your custom ``Manager`` in your model."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:46
msgid ""
"There are two reasons you might want to customize a ``Manager``: to add "
"extra ``Manager`` methods, and/or to modify the initial ``QuerySet`` the "
"``Manager`` returns."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:51
msgid "Adding extra manager methods"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:53
msgid ""
"Adding extra ``Manager`` methods is the preferred way to add \"table-level\""
" functionality to your models. (For \"row-level\" functionality -- i.e., "
"functions that act on a single instance of a model object -- use :ref:`Model"
" methods <model-methods>`, not custom ``Manager`` methods.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:58
msgid ""
"A custom ``Manager`` method can return anything you want. It doesn't have to"
" return a ``QuerySet``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:61
msgid ""
"For example, this custom ``Manager`` offers a method ``with_counts()``, "
"which returns a list of all ``OpinionPoll`` objects, each with an extra "
"``num_responses`` attribute that is the result of an aggregate query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:94
msgid ""
"With this example, you'd use ``OpinionPoll.objects.with_counts()`` to return"
" that list of ``OpinionPoll`` objects with ``num_responses`` attributes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:97
msgid ""
"Another thing to note about this example is that ``Manager`` methods can "
"access ``self.model`` to get the model class to which they're attached."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:101
msgid "Modifying a manager's initial ``QuerySet``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:103
msgid ""
"A ``Manager``’s base ``QuerySet`` returns all objects in the system. For "
"example, using this model::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:112
msgid ""
"...the statement ``Book.objects.all()`` will return all books in the "
"database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:114
msgid ""
"You can override a ``Manager``’s base ``QuerySet`` by overriding the "
"``Manager.get_queryset()`` method. ``get_queryset()`` should return a "
"``QuerySet`` with the properties you require."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:118
msgid ""
"For example, the following model has *two* ``Manager``\\s -- one that "
"returns all objects, and one that returns only the books by Roald Dahl::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:134
msgid ""
"With this sample model, ``Book.objects.all()`` will return all books in the "
"database, but ``Book.dahl_objects.all()`` will only return the ones written "
"by Roald Dahl."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:138
msgid ""
"Of course, because ``get_queryset()`` returns a ``QuerySet`` object, you can"
" use ``filter()``, ``exclude()`` and all the other ``QuerySet`` methods on "
"it. So these statements are all legal::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:146
msgid ""
"This example also pointed out another interesting technique: using multiple "
"managers on the same model. You can attach as many ``Manager()`` instances "
"to a model as you'd like. This is an easy way to define common \"filters\" "
"for your models."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:169
msgid ""
"This example allows you to request ``Person.authors.all()``, "
"``Person.editors.all()``, and ``Person.people.all()``, yielding predictable "
"results."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:175
msgid "Default managers"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:179
msgid ""
"If you use custom ``Manager`` objects, take note that the first ``Manager`` "
"Django encounters (in the order in which they're defined in the model) has a"
" special status. Django interprets the first ``Manager`` defined in a class "
"as the \"default\" ``Manager``, and several parts of Django (including "
":djadmin:`dumpdata`) will use that ``Manager`` exclusively for that model. "
"As a result, it's a good idea to be careful in your choice of default "
"manager in order to avoid a situation where overriding ``get_queryset()`` "
"results in an inability to retrieve objects you'd like to work with."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:188
msgid ""
"You can specify a custom default manager using "
":attr:`Meta.default_manager_name "
"<django.db.models.Options.default_manager_name>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:191
msgid ""
"If you're writing some code that must handle an unknown model, for example, "
"in a third-party app that implements a generic view, use this manager (or "
":attr:`~Model._base_manager`) rather than assuming the model has an "
"``objects`` manager."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:197
msgid "Base managers"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:204
msgid "Using managers for related object access"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:206
msgid ""
"By default, Django uses an instance of the ``Model._base_manager`` manager "
"class when accessing related objects (i.e. ``choice.question``), not the "
"``_default_manager`` on the related object. This is because Django needs to "
"be able to retrieve the related object, even if it would otherwise be "
"filtered out (and hence be inaccessible) by the default manager."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:212
msgid ""
"If the normal base manager class (:class:`django.db.models.Manager`) isn't "
"appropriate for your circumstances, you can tell Django which class to use "
"by setting :attr:`Meta.base_manager_name "
"<django.db.models.Options.base_manager_name>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:217
msgid ""
"Base managers aren't used when querying on related models. For example, if "
"the ``Question`` model :ref:`from the tutorial <creating-models>` had a "
"``deleted`` field and a base manager that filters out instances with "
"``deleted=True``, a queryset like "
"``Choice.objects.filter(question__name__startswith='What')`` would include "
"choices related to deleted questions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:224
msgid "Don't filter away any results in this type of manager subclass"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:226
msgid ""
"This manager is used to access objects that are related to from some other "
"model. In those situations, Django has to be able to see all the objects for"
" the model it is fetching, so that *anything* which is referred to can be "
"retrieved."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:231
msgid ""
"If you override the ``get_queryset()`` method and filter out any rows, "
"Django will return incorrect results. Don't do that. A manager that filters "
"results in ``get_queryset()`` is not appropriate for use as a base manager."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:238
msgid "Calling custom ``QuerySet`` methods from the manager"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:240
msgid ""
"While most methods from the standard ``QuerySet`` are accessible directly "
"from the ``Manager``, this is only the case for the extra methods defined on"
" a custom ``QuerySet`` if you also implement them on the ``Manager``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:267
msgid ""
"This example allows you to call both ``authors()`` and ``editors()`` "
"directly from the manager ``Person.people``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:273
msgid "Creating a manager with ``QuerySet`` methods"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:275
msgid ""
"In lieu of the above approach which requires duplicating methods on both the"
" ``QuerySet`` and the ``Manager``, :meth:`QuerySet.as_manager() "
"<django.db.models.query.QuerySet.as_manager>` can be used to create an "
"instance of ``Manager`` with a copy of a custom ``QuerySet``’s methods::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:284
msgid ""
"The ``Manager`` instance created by :meth:`QuerySet.as_manager() "
"<django.db.models.query.QuerySet.as_manager>` will be virtually identical to"
" the ``PersonManager`` from the previous example."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:288
msgid ""
"Not every ``QuerySet`` method makes sense at the ``Manager`` level; for "
"instance we intentionally prevent the :meth:`QuerySet.delete() "
"<django.db.models.query.QuerySet.delete>` method from being copied onto the "
"``Manager`` class."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:293
msgid "Methods are copied according to the following rules:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:295
msgid "Public methods are copied by default."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:296
msgid ""
"Private methods (starting with an underscore) are not copied by default."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:297
msgid ""
"Methods with a ``queryset_only`` attribute set to ``False`` are always "
"copied."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:298
msgid ""
"Methods with a ``queryset_only`` attribute set to ``True`` are never copied."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:322
msgid "``from_queryset()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:326
msgid ""
"For advanced usage you might want both a custom ``Manager`` and a custom "
"``QuerySet``. You can do that by calling ``Manager.from_queryset()`` which "
"returns a *subclass* of your base ``Manager`` with a copy of the custom "
"``QuerySet`` methods::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/managers.txt:342
msgid "You may also store the generated class into a variable::"
msgstr "还可以将生成的类存储到变量中："

#: ../../../../sources/2.2/docs/topics/db/managers.txt:352
msgid "Custom managers and model inheritance"
msgstr "自定义管理器和模型继承"

#: ../../../../sources/2.2/docs/topics/db/managers.txt:354
msgid ""
"Here's how Django handles custom managers and :ref:`model inheritance "
"<model-inheritance>`:"
msgstr "下面是Django如何处理自定义管理器和 :ref:`model inheritance <model-inheritance>`："

#: ../../../../sources/2.2/docs/topics/db/managers.txt:357
msgid ""
"Managers from base classes are always inherited by the child class, using "
"Python's normal name resolution order (names on the child class override all"
" others; then come names on the first parent class, and so on)."
msgstr "基类的管理者总是由子类继承，使用Python的正常名称解析顺序（子类上的名称覆盖所有其他类；然后在第一个父类上命名）等等。"

#: ../../../../sources/2.2/docs/topics/db/managers.txt:362
msgid ""
"If no managers are declared on a model and/or its parents, Django "
"automatically creates the ``objects`` manager."
msgstr "如果没有在模型和/或其父母上宣布管理人员，Django就会自动创建``objects``管理器。"

#: ../../../../sources/2.2/docs/topics/db/managers.txt:365
msgid ""
"The default manager on a class is either the one chosen with "
":attr:`Meta.default_manager_name "
"<django.db.models.Options.default_manager_name>`, or the first manager "
"declared on the model, or the default manager of the first parent model."
msgstr "类上的默认管理器要么是使用:attr:`Meta.default_manager_name <django.db.models.Options.default_manager_name>`，要么是在模型上声明的第一个管理器，或者是第一个父模型的默认管理器。"

#: ../../../../sources/2.2/docs/topics/db/managers.txt:370
msgid ""
"These rules provide the necessary flexibility if you want to install a "
"collection of custom managers on a group of models, via an abstract base "
"class, but still customize the default manager. For example, suppose you "
"have this base class::"
msgstr "如果您想通过抽象基类在一组模型上安装自定义管理器集合，但仍然自定义默认管理器，则这些规则提供了必要的灵活性。"

#: ../../../../sources/2.2/docs/topics/db/managers.txt:382
msgid ""
"If you use this directly in a subclass, ``objects`` will be the default "
"manager if you declare no managers in the base class::"
msgstr "如果您在子类中直接使用这一点，如果您在基类中没有声明任何管理器，那么 ``objects`` 将是默认的管理器："

#: ../../../../sources/2.2/docs/topics/db/managers.txt:390
msgid ""
"If you want to inherit from ``AbstractBase``, but provide a different "
"default manager, you can provide the default manager on the child class::"
msgstr "如果您想从``AbstractBase``继承，但提供不同的默认管理器，则可以在子类上提供默认管理器："

#: ../../../../sources/2.2/docs/topics/db/managers.txt:398
msgid ""
"Here, ``default_manager`` is the default. The ``objects`` manager is still "
"available, since it's inherited. It just isn't used as the default."
msgstr "在这里，``default_manager``是默认的。 ``objects`` 管理器仍然可用，因为它是继承的。它只是没有被用作默认值。"

#: ../../../../sources/2.2/docs/topics/db/managers.txt:401
msgid ""
"Finally for this example, suppose you want to add extra managers to the "
"child class, but still use the default from ``AbstractBase``. You can't add "
"the new manager directly in the child class, as that would override the "
"default and you would have to also explicitly include all the managers from "
"the abstract base class. The solution is to put the extra managers in "
"another base class and introduce it into the inheritance hierarchy *after* "
"the defaults::"
msgstr "最后，对于这个示例，假设您想要向子类中添加额外的管理器，但是仍然使用来自``AbstractBase``的默认管理器。您不能直接在子类中添加新的管理器，因为这将覆盖默认值，并且您还必须显式地包含来自抽象基类的所有管理器。解决方案是将额外的管理器放到另一个基类中，并在默认值*之后*将其引入继承层次结构："

#: ../../../../sources/2.2/docs/topics/db/managers.txt:420
msgid ""
"Note that while you can *define* a custom manager on the abstract model, you"
" can't *invoke* any methods using the abstract model. That is::"
msgstr "请注意，虽然可以在抽象模型上定义*自定义管理器，但不能使用抽象模型*调用*任何方法。即："

#: ../../../../sources/2.2/docs/topics/db/managers.txt:425
msgid "is legal, but::"
msgstr "是合法的，但："

#: ../../../../sources/2.2/docs/topics/db/managers.txt:429
msgid ""
"will raise an exception. This is because managers are intended to "
"encapsulate logic for managing collections of objects. Since you can't have "
"a collection of abstract objects, it doesn't make sense to be managing them."
" If you have functionality that applies to the abstract model, you should "
"put that functionality in a ``staticmethod`` or ``classmethod`` on the "
"abstract model."
msgstr "这将引起一个例外。这是因为管理人员打算封装管理对象集合的逻辑。因为您不能拥有抽象对象的集合，所以管理抽象对象是没有意义的。如果您有适用于抽象模型的功能，则应该将该功能放在抽象模型上的 ``静态方法`` 或``类方法`` 中。"

#: ../../../../sources/2.2/docs/topics/db/managers.txt:436
msgid "Implementation concerns"
msgstr "执行关系"

#: ../../../../sources/2.2/docs/topics/db/managers.txt:438
msgid ""
"Whatever features you add to your custom ``Manager``, it must be possible to"
" make a shallow copy of a ``Manager`` instance; i.e., the following code "
"must work::"
msgstr "无论您在自定义的 ``Manager`` 中添加了什么特性，都必须能够对 ``Manager`` 实例进行简单的复制；也就是说，以下代码必须有效："

#: ../../../../sources/2.2/docs/topics/db/managers.txt:446
msgid ""
"Django makes shallow copies of manager objects during certain queries; if "
"your Manager cannot be copied, those queries will fail."
msgstr "Django在某些查询期间对管理器对象进行浅拷贝；如果您的管理器无法被复制，那么这些查询将失败。"

#: ../../../../sources/2.2/docs/topics/db/managers.txt:449
msgid ""
"This won't be an issue for most custom managers. If you are just adding "
"simple methods to your ``Manager``, it is unlikely that you will "
"inadvertently make instances of your ``Manager`` uncopyable. However, if "
"you're overriding ``__getattr__`` or some other private method of your "
"``Manager`` object that controls object state, you should ensure that you "
"don't affect the ability of your ``Manager`` to be copied."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/models.txt:3
msgid "Models"
msgstr "模型"

#: ../../../../sources/2.2/docs/topics/db/models.txt:7
msgid ""
"A model is the single, definitive source of information about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Generally, each model maps to a single database table."
msgstr "模型准确且唯一的描述了数据。它包含您储存的数据的重要字段和行为。一般来说，每一个模型都映射一张数据库表。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:11
msgid "The basics:"
msgstr "基础："

#: ../../../../sources/2.2/docs/topics/db/models.txt:13
msgid ""
"Each model is a Python class that subclasses "
":class:`django.db.models.Model`."
msgstr "每个模型都是一个 Python 的类，这些类继承 :class:`django.db.models.Model`"

#: ../../../../sources/2.2/docs/topics/db/models.txt:16
msgid "Each attribute of the model represents a database field."
msgstr "模型类的每个属性都相当于一个数据库的字段。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:18
msgid ""
"With all of this, Django gives you an automatically-generated database-"
"access API; see :doc:`/topics/db/queries`."
msgstr "利用这些，Django 提供了一个自动生成访问数据库的 API；请参阅 :doc:`/topics/db/queries`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:23
#: ../../../../sources/2.2/docs/topics/email.txt:17
msgid "Quick example"
msgstr "快速上手"

#: ../../../../sources/2.2/docs/topics/db/models.txt:25
msgid ""
"This example model defines a ``Person``, which has a ``first_name`` and "
"``last_name``::"
msgstr "这个样例定义了一个 ``Person`` 模型，拥有 ``first_name`` 和 ``last_name``::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:34
msgid ""
"``first_name`` and ``last_name`` are fields_ of the model. Each field is "
"specified as a class attribute, and each attribute maps to a database "
"column."
msgstr "``first_name`` 和 ``last_name`` 是模型的 字段_。每个字段都被指定为一个类属性，并且每个属性映射为一个数据库列。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:37
msgid "The above ``Person`` model would create a database table like this:"
msgstr "上面的 ``Person`` 模型会创建一个如下的数据库表："

#: ../../../../sources/2.2/docs/topics/db/models.txt:47
msgid "Some technical notes:"
msgstr "一些技术上的说明："

#: ../../../../sources/2.2/docs/topics/db/models.txt:49
msgid ""
"The name of the table, ``myapp_person``, is automatically derived from some "
"model metadata but can be overridden. See :ref:`table-names` for more "
"details."
msgstr "该表的名称 ``myapp_person`` 是自动从某些模型元数据中派生出来，但可以被改写。参阅 :ref:`table-names` 获取更多信息。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:53
msgid ""
"An ``id`` field is added automatically, but this behavior can be overridden."
" See :ref:`automatic-primary-key-fields`."
msgstr "一个 ``id`` 字段会被自动添加，但是这种行为可以被改写。请参阅 :ref:`automatic-primary-key-fields`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:56
msgid ""
"The ``CREATE TABLE`` SQL in this example is formatted using PostgreSQL "
"syntax, but it's worth noting Django uses SQL tailored to the database "
"backend specified in your :doc:`settings file </topics/settings>`."
msgstr "本例子中 ``创建数据表`` 的语法是 PostgreSQL 格式的。值得注意的是，Django 依据你在 :doc:`配置文件 </topics/settings>` 中指定的数据库后端生成对应的 SQL 语句。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:61
msgid "Using models"
msgstr "使用模型"

#: ../../../../sources/2.2/docs/topics/db/models.txt:63
msgid ""
"Once you have defined your models, you need to tell Django you're going to "
"*use* those models. Do this by editing your settings file and changing the "
":setting:`INSTALLED_APPS` setting to add the name of the module that "
"contains your ``models.py``."
msgstr "一旦你定义了你的模型，你需要告诉 Django 你准备 *使用* 这些模型。你需要修改设置文件中的 :setting:`INSTALLED_APPS` ，在这个设置中添加包含  ``models.py`` 文件的模块名称。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:68
msgid ""
"For example, if the models for your application live in the module "
"``myapp.models`` (the package structure that is created for an application "
"by the :djadmin:`manage.py startapp <startapp>` script), "
":setting:`INSTALLED_APPS` should read, in part::"
msgstr "例如，若模型位于项目中的 ``myapp.models`` 模块（ 此包结构由 :djadmin:`manage.py startapp <startapp>` 命令创建）， :setting:`INSTALLED_APPS` 应设置如下："

#: ../../../../sources/2.2/docs/topics/db/models.txt:79
msgid ""
"When you add new apps to :setting:`INSTALLED_APPS`, be sure to run "
":djadmin:`manage.py migrate <migrate>`, optionally making migrations for "
"them first with :djadmin:`manage.py makemigrations <makemigrations>`."
msgstr "当你向 :setting:`INSTALLED_APPS` 添加新的应用的时候，请务必运行 :djadmin:`manage.py migrate <migrate>`，此外你也可以先使用以下命令进行迁移 :djadmin:`manage.py makemigrations <makemigrations>`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:84
msgid "Fields"
msgstr "字段"

#: ../../../../sources/2.2/docs/topics/db/models.txt:86
msgid ""
"The most important part of a model -- and the only required part of a model "
"-- is the list of database fields it defines. Fields are specified by class "
"attributes. Be careful not to choose field names that conflict with the "
":doc:`models API </ref/models/instances>` like ``clean``, ``save``, or "
"``delete``."
msgstr "模型中最重要且唯一必要的是数据库的字段定义。字段在类属性中定义。定义字段名时应小心避免使用与 :doc:`模型 API </ref/models/instances>` 冲突的名称， 如 ``clean``, ``save``, or ``delete`` 等."

#: ../../../../sources/2.2/docs/topics/db/models.txt:92
#: ../../../../sources/2.2/docs/topics/db/queries.txt:251
#: ../../../../sources/2.2/docs/topics/db/queries.txt:1100
#: ../../../../sources/2.2/docs/topics/db/queries.txt:1150
#: ../../../../sources/2.2/docs/topics/settings.txt:187
msgid "Example::"
msgstr "举例："

#: ../../../../sources/2.2/docs/topics/db/models.txt:108
#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:42
msgid "Field types"
msgstr "字段类型"

#: ../../../../sources/2.2/docs/topics/db/models.txt:110
msgid ""
"Each field in your model should be an instance of the appropriate "
":class:`~django.db.models.Field` class. Django uses the field class types to"
" determine a few things:"
msgstr "模型中每一个字段都应该是某个 :class:`~django.db.models.Field` 类的实例， Django 利用这些字段类来实现以下功能："

#: ../../../../sources/2.2/docs/topics/db/models.txt:114
msgid ""
"The column type, which tells the database what kind of data to store (e.g. "
"``INTEGER``, ``VARCHAR``, ``TEXT``)."
msgstr "字段类型用以指定数据库数据类型（如：``INTEGER``, ``VARCHAR``, ``TEXT``）。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:117
msgid ""
"The default HTML :doc:`widget </ref/forms/widgets>` to use when rendering a "
"form field (e.g. ``<input type=\"text\">``, ``<select>``)."
msgstr "在渲染表单字段时默认使用的 HTML :doc:`视图 </ref/forms/widgets>`  (如： ``<input type=\"text\">``, ``<select>``)。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:120
msgid ""
"The minimal validation requirements, used in Django's admin and in "
"automatically-generated forms."
msgstr "基本的有效性验证功能，用于 Django 后台和自动生成的表单。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:123
msgid ""
"Django ships with dozens of built-in field types; you can find the complete "
"list in the :ref:`model field reference <model-field-types>`. You can easily"
" write your own fields if Django's built-in ones don't do the trick; see "
":doc:`/howto/custom-model-fields`."
msgstr "Django 内置了数十种字段类型；你可以在 :ref:`模型字段参考<model-field-types>` 中看到完整列表。如果 Django 内置类型不能满足你的需求，你可以很轻松地编写自定义的字段类型；参见 :doc:`/howto/custom-model-fields`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:129
msgid "Field options"
msgstr "字段选项"

#: ../../../../sources/2.2/docs/topics/db/models.txt:131
msgid ""
"Each field takes a certain set of field-specific arguments (documented in "
"the :ref:`model field reference <model-field-types>`). For example, "
":class:`~django.db.models.CharField` (and its subclasses) require a "
":attr:`~django.db.models.CharField.max_length` argument which specifies the "
"size of the ``VARCHAR`` database field used to store the data."
msgstr "每一种字段都需要指定一些特定的参数（参考 :ref:`模型字段 <model-field-types>` ）。 例如， :class:`~django.db.models.CharField` （以及它的子类）需要接收一个 :attr:`~django.db.models.CharField.max_length` 参数，用以指定数据库存储 ``VARCHAR`` 数据时用的字节数。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:137
msgid ""
"There's also a set of common arguments available to all field types. All are"
" optional. They're fully explained in the :ref:`reference <common-model-"
"field-options>`, but here's a quick summary of the most often-used ones:"
msgstr "一些可选的参数是通用的，可以用于任何字段类型，详情请见 :ref:`参考 <common-model-field-options>` ，下面介绍一部分经常用到的通用参数："

#: ../../../../sources/2.2/docs/topics/db/models.txt:144
msgid ":attr:`~Field.null`"
msgstr ":attr:`~Field.null`"

#: ../../../../sources/2.2/docs/topics/db/models.txt:143
msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr "如果设置为 ``True``，当该字段为空时，Django 会将数据库中该字段设置为 ``NULL``。默认为 ``False`` 。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:154
msgid ":attr:`~Field.blank`"
msgstr ":attr:`~Field.blank`"

#: ../../../../sources/2.2/docs/topics/db/models.txt:147
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr "如果设置为 ``True``，该字段允许为空。默认为 ``False``。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:149
msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is"
" purely database-related, whereas :attr:`~Field.blank` is validation-"
"related. If a field has :attr:`blank=True <Field.blank>`, form validation "
"will allow entry of an empty value. If a field has :attr:`blank=False "
"<Field.blank>`, the field will be required."
msgstr "注意该选项与 ``False`` 不同， :attr:`~Field.null` 选项仅仅是数据库层面的设置，然而 :attr:`~Field.blank` 是涉及表单验证方面。如果一个字段设置为 :attr:`blank=True <Field.blank>` ，在进行表单验证时，接收的数据该字段值允许为空，而设置为 :attr:`blank=False <Field.blank>` 时，不允许为空。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:197
msgid ":attr:`~Field.choices`"
msgstr ":attr:`~Field.choices`"

#: ../../../../sources/2.2/docs/topics/db/models.txt:157
msgid ""
"An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this "
"field. If this is given, the default form widget will be a select box "
"instead of the standard text field and will limit choices to the choices "
"given."
msgstr "该参数接收一个可迭代的列表或元组（基本单位为二元组）。如果指定了该参数，在实例化该模型时，该字段只能取选项列表中的值。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:162
msgid "A choices list looks like this::"
msgstr "一个选项列表："

#: ../../../../sources/2.2/docs/topics/db/models.txt:172
msgid ""
"The first element in each tuple is the value that will be stored in the "
"database. The second element is displayed by the field's form widget."
msgstr "每个二元组的第一个值会储存在数据库中，而第二个值将只会用于在表单中显示。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:175
msgid ""
"Given a model instance, the display value for a field with ``choices`` can "
"be accessed using the :meth:`~django.db.models.Model.get_FOO_display` "
"method. For example::"
msgstr "对于一个模型实例，要获取该字段二元组中相对应的第二个值，使用 :meth:`~django.db.models.Model.get_FOO_display` 方法。例如："

#: ../../../../sources/2.2/docs/topics/db/models.txt:202
msgid ":attr:`~Field.default`"
msgstr ":attr:`~Field.default`"

#: ../../../../sources/2.2/docs/topics/db/models.txt:200
msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr "该字段的默认值。可以是一个值或者是个可调用的对象，如果是个可调用对象，每次实例化模型时都会调用该对象。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:206
msgid ":attr:`~Field.help_text`"
msgstr ":attr:`~Field.help_text`"

#: ../../../../sources/2.2/docs/topics/db/models.txt:205
msgid ""
"Extra \"help\" text to be displayed with the form widget. It's useful for "
"documentation even if your field isn't used on a form."
msgstr "额外的“帮助”文本，随表单控件一同显示。即便你的字段未用于表单，它对于生成文档也是很有用的。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:233
msgid ":attr:`~Field.primary_key`"
msgstr ":attr:`~Field.primary_key`"

#: ../../../../sources/2.2/docs/topics/db/models.txt:209
msgid "If ``True``, this field is the primary key for the model."
msgstr "如果设置为 ``True`` ，将该字段设置为该模型的主键。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:211
msgid ""
"If you don't specify :attr:`primary_key=True <Field.primary_key>` for any "
"fields in your model, Django will automatically add an :class:`IntegerField`"
" to hold the primary key, so you don't need to set :attr:`primary_key=True "
"<Field.primary_key>` on any of your fields unless you want to override the "
"default primary-key behavior. For more, see :ref:`automatic-primary-key-"
"fields`."
msgstr "在一个模型中，如果你没有对任何一个字段设置 :attr:`primary_key=True <Field.primary_key>` 选项。 Django 会自动添加一个 :class:`IntegerField` 字段，并设置为主键，因此除非你想重写 Django 默认的主键设置行为，你可以不手动设置主键。详情请见 :ref:`automatic-primary-key-fields` 。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:218
msgid ""
"The primary key field is read-only. If you change the value of the primary "
"key on an existing object and then save it, a new object will be created "
"alongside the old one. For example::"
msgstr "主键字段是只可读的，如果你修改一个模型实例的主键并保存，这等同于创建了一个新的模型实例。例如："

#: ../../../../sources/2.2/docs/topics/db/models.txt:236
msgid ":attr:`~Field.unique`"
msgstr ":attr:`~Field.unique`"

#: ../../../../sources/2.2/docs/topics/db/models.txt:236
msgid "If ``True``, this field must be unique throughout the table."
msgstr "如果设置为 ``True``，这个字段的值必须在整个表中保持唯一。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:238
msgid ""
"Again, these are just short descriptions of the most common field options. "
"Full details can be found in the :ref:`common model field option reference "
"<common-model-field-options>`."
msgstr "再次声明，以上只是一些通用参数的简略描述。你可以在 :ref:`通用可选参数参考<common-model-field-options>` 中找到完整的介绍。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:245
msgid "Automatic primary key fields"
msgstr "自动设置主键"

#: ../../../../sources/2.2/docs/topics/db/models.txt:247
msgid "By default, Django gives each model the following field::"
msgstr "默认情况下， Django 会给每一个模型添加下面的字段："

#: ../../../../sources/2.2/docs/topics/db/models.txt:251
msgid "This is an auto-incrementing primary key."
msgstr "这是一个自增的主键。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:253
msgid ""
"If you'd like to specify a custom primary key, just specify "
":attr:`primary_key=True <Field.primary_key>` on one of your fields. If "
"Django sees you've explicitly set :attr:`Field.primary_key`, it won't add "
"the automatic ``id`` column."
msgstr "如果你想自己指定主键， 在你想要设置为主键的字段上设置参数 :attr:`primary_key=True <Field.primary_key>`。如果 Django 看到你显式地设置了 :attr:`Field.primary_key`，将不会自动在表（模型）中添加 ``id`` 列。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:258
msgid ""
"Each model requires exactly one field to have :attr:`primary_key=True "
"<Field.primary_key>` (either explicitly declared or automatically added)."
msgstr "每个模型都需要拥有一个设置了 :attr:`primary_key=True <Field.primary_key>` 的字段（无论是显式的设置还是 Django 自动设置）。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:264
msgid "Verbose field names"
msgstr "字段备注名"

#: ../../../../sources/2.2/docs/topics/db/models.txt:266
msgid ""
"Each field type, except for :class:`~django.db.models.ForeignKey`, "
":class:`~django.db.models.ManyToManyField` and "
":class:`~django.db.models.OneToOneField`, takes an optional first positional"
" argument -- a verbose name. If the verbose name isn't given, Django will "
"automatically create it using the field's attribute name, converting "
"underscores to spaces."
msgstr "除了  :class:`~django.db.models.ForeignKey`， :class:`~django.db.models.ManyToManyField` 和 :class:`~django.db.models.OneToOneField`，任何字段类型都接收一个可选的位置参数 :attr:`~Field.verbose_name`，如果未指定该参数值， Django 会自动使用字段的属性名作为该参数值，并且把下划线转换为空格。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:273
msgid "In this example, the verbose name is ``\"person's first name\"``::"
msgstr "在该例中：备注名为 ``\"person's first name\"``::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:277
msgid "In this example, the verbose name is ``\"first name\"``::"
msgstr "在该例中：备注名为 ``\"first name\"``::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:281
msgid ""
":class:`~django.db.models.ForeignKey`, "
":class:`~django.db.models.ManyToManyField` and "
":class:`~django.db.models.OneToOneField` require the first argument to be a "
"model class, so use the :attr:`~Field.verbose_name` keyword argument::"
msgstr ":class:`~django.db.models.ForeignKey`, :class:`~django.db.models.ManyToManyField` and :class:`~django.db.models.OneToOneField` 接收的第一个参数为模型的类名，后面可以添加一个 :attr:`~Field.verbose_name` 参数："

#: ../../../../sources/2.2/docs/topics/db/models.txt:298
msgid ""
"The convention is not to capitalize the first letter of the "
":attr:`~Field.verbose_name`. Django will automatically capitalize the first "
"letter where it needs to."
msgstr "惯例是不将 :attr:`~Field.verbose_name` 的首字母大写，必要时 Djanog 会自动把首字母转换为大写。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:303
msgid "Relationships"
msgstr "关联关系"

#: ../../../../sources/2.2/docs/topics/db/models.txt:305
msgid ""
"Clearly, the power of relational databases lies in relating tables to each "
"other. Django offers ways to define the three most common types of database "
"relationships: many-to-one, many-to-many and one-to-one."
msgstr "显然，关系型数据库的强大之处在于各表之间的关联关系。 Django 提供了定义三种最常见的数据库关联关系的方法：一对多，多对多，一对一。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:312
msgid ""
"To define a many-to-one relationship, use "
":class:`django.db.models.ForeignKey`. You use it just like any other "
":class:`~django.db.models.Field` type: by including it as a class attribute "
"of your model."
msgstr "定义一个一对多的关联关系，使用 :class:`django.db.models.ForeignKey` 类。就和其它 :class:`~django.db.models.Field` 字段类型一样，只需要在你模型中添加一个值为该类的属性。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:316
msgid ""
":class:`~django.db.models.ForeignKey` requires a positional argument: the "
"class to which the model is related."
msgstr " :class:`~django.db.models.ForeignKey` 类需要添加一个位置参数，即你想要关联的模型类名。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:319
msgid ""
"For example, if a ``Car`` model has a ``Manufacturer`` -- that is, a "
"``Manufacturer`` makes multiple cars but each ``Car`` only has one "
"``Manufacturer`` -- use the following definitions::"
msgstr "例如，如果一个 ``Car`` 模型有一个制造者 ``Manufacturer`` --就是说一个 ``Manufacturer`` 制造许多辆车，但是每辆车都仅有一个制造者-- 那么使用下面的方法定义这个关系："

#: ../../../../sources/2.2/docs/topics/db/models.txt:333
msgid ""
"You can also create :ref:`recursive relationships <recursive-relationships>`"
" (an object with a many-to-one relationship to itself) and "
":ref:`relationships to models not yet defined <lazy-relationships>`; see "
":ref:`the model field reference <ref-foreignkey>` for details."
msgstr "你也可以创建 :ref:`自关联关系 <recursive-relationships>` （一个模型与它本身有一对多的关系）和 :ref:`与未定义的模型间的关联关系 <lazy-relationships>` ；详情请见  :ref:`模型字段参考 <ref-foreignkey>` 。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:338
msgid ""
"It's suggested, but not required, that the name of a "
":class:`~django.db.models.ForeignKey` field (``manufacturer`` in the example"
" above) be the name of the model, lowercase. You can, of course, call the "
"field whatever you want. For example::"
msgstr "建议设置 :class:`~django.db.models.ForeignKey` 字段名（上例中的 ``manufacturer`` ）为想要关联的模型名，但是你也可以随意设置为你想要的名称，例如："

#: ../../../../sources/2.2/docs/topics/db/models.txt:352
msgid ""
":class:`~django.db.models.ForeignKey` fields accept a number of extra "
"arguments which are explained in :ref:`the model field reference <foreign-"
"key-arguments>`. These options help define how the relationship should work;"
" all are optional."
msgstr ":class:`~django.db.models.ForeignKey` 字段还可以接收一些其他的参数，详见 :ref:`模型字段参考 <foreign-key-arguments>` ，这些可选的参数可以更深入的规定关联关系的具体实现。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:357
msgid ""
"For details on accessing backwards-related objects, see the :ref:`Following "
"relationships backward example <backwards-related-objects>`."
msgstr "关于反向关联对象的细节，参见 :ref:`反向关联例子 <backwards-related-objects>`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:360
msgid ""
"For sample code, see the :doc:`Many-to-one relationship model example "
"</topics/db/examples/many_to_one>`."
msgstr "如要查看相关示例代码，详见 :doc:`模型一对多关联实例 </topics/db/examples/many_to_one>` 。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:367
msgid ""
"To define a many-to-many relationship, use "
":class:`~django.db.models.ManyToManyField`. You use it just like any other "
":class:`~django.db.models.Field` type: by including it as a class attribute "
"of your model."
msgstr "定义一个多对多的关联关系，使用 :class:`django.db.models.ManyToManyField` 类。就和其他 :class:`~django.db.models.Field` 字段类型一样，只需要在你模型中添加一个值为该类的属性。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:372
msgid ""
":class:`~django.db.models.ManyToManyField` requires a positional argument: "
"the class to which the model is related."
msgstr " :class:`~django.db.models.ManyToManyField` 类需要添加一个位置参数，即你想要关联的模型类名。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:375
msgid ""
"For example, if a ``Pizza`` has multiple ``Topping`` objects -- that is, a "
"``Topping`` can be on multiple pizzas and each ``Pizza`` has multiple "
"toppings -- here's how you'd represent that::"
msgstr "例如：如果 ``Pizza`` 含有多种 ``Topping`` （配料） -- 也就是一种 ``Topping`` 可能存在于多个 ``Pizza`` 中，并且每个 ``Pizza`` 含有多种 ``Topping`` --那么可以这样表示这种关系："

#: ../../../../sources/2.2/docs/topics/db/models.txt:389
msgid ""
"As with :class:`~django.db.models.ForeignKey`, you can also create "
":ref:`recursive relationships <recursive-relationships>` (an object with a "
"many-to-many relationship to itself) and :ref:`relationships to models not "
"yet defined <lazy-relationships>`."
msgstr "和 :class:`~django.db.models.ForeignKey` 类一样，你也可以创建 :ref:`自关联关系 <recursive-relationships>` （一个对象与他本身有着多对多的关系）和 :ref:`与未定义的模型的关系 <lazy-relationships>` 。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:394
msgid ""
"It's suggested, but not required, that the name of a "
":class:`~django.db.models.ManyToManyField` (``toppings`` in the example "
"above) be a plural describing the set of related model objects."
msgstr "建议设置 :class:`~django.db.models.ManyToManyField` 字段名（上例中的 ``toppings`` ）为一个复数名词，表示所要光联的模型对象的集合。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:398
msgid ""
"It doesn't matter which model has the "
":class:`~django.db.models.ManyToManyField`, but you should only put it in "
"one of the models -- not both."
msgstr "对于多对多光联关系的两个模型，可以在任何一个模型中添加 :class:`~django.db.models.ManyToManyField` 字段，但只能选择一个模型设置该字段，即不能同时在两模型中添加该字段。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:402
msgid ""
"Generally, :class:`~django.db.models.ManyToManyField` instances should go in"
" the object that's going to be edited on a form. In the above example, "
"``toppings`` is in ``Pizza`` (rather than ``Topping`` having a ``pizzas`` "
":class:`~django.db.models.ManyToManyField` ) because it's more natural to "
"think about a pizza having toppings than a topping being on multiple pizzas."
" The way it's set up above, the ``Pizza`` form would let users select the "
"toppings."
msgstr "一般来讲，应该把 :class:`~django.db.models.ManyToManyField` 实例放到需要在表单中被编辑的对象中。在之前的例子中， ``toppings`` 被放在 ``Pizza`` 当中（而不是 ``Topping`` 中有指向 ``pizzas`` 的 :class:`~django.db.models.ManyToManyField` 实例 ）因为相较于配料被放在不同的披萨当中，披萨当中有很多种配料更加符合常理。按照先前说的，在编辑 ``Pizza`` 的表单时用户可以选择多种配料。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:411
msgid ""
"See the :doc:`Many-to-many relationship model example "
"</topics/db/examples/many_to_many>` for a full example."
msgstr "如要查看完整示例代码，详见 :doc:`模型多对多关联实例 </topics/db/examples/many_to_many>`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:414
msgid ""
":class:`~django.db.models.ManyToManyField` fields also accept a number of "
"extra arguments which are explained in :ref:`the model field reference "
"<manytomany-arguments>`. These options help define how the relationship "
"should work; all are optional."
msgstr ":class:`~django.db.models.ManyToManyField` 字段也接受一些 :ref:`模型字段参考 <manytomany-arguments>` 中介绍的参数。这些可选的参数可以更深入地规定关联关系的具体实现。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:422
msgid "Extra fields on many-to-many relationships"
msgstr "在多对多(many-to-many)关系中添加添加额外的属性字段"

#: ../../../../sources/2.2/docs/topics/db/models.txt:424
msgid ""
"When you're only dealing with simple many-to-many relationships such as "
"mixing and matching pizzas and toppings, a standard "
":class:`~django.db.models.ManyToManyField` is all you need. However, "
"sometimes you may need to associate data with the relationship between two "
"models."
msgstr "如果你只是想要一个类似于记录披萨和配料之间混合和搭配的简单多对多关系，标准的 :class:`~django.db.models.ManyToManyField` 就足够你用了。然而，有的时候你可能会需要在两个模型的关系中记录更多的数据。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:429
msgid ""
"For example, consider the case of an application tracking the musical groups"
" which musicians belong to. There is a many-to-many relationship between a "
"person and the groups of which they are a member, so you could use a "
":class:`~django.db.models.ManyToManyField` to represent this relationship. "
"However, there is a lot of detail about the membership that you might want "
"to collect, such as the date at which the person joined the group."
msgstr "举例来讲，考虑一个需要跟踪音乐人属于哪个音乐组的应用程序。在人和他们所在的组之间有一个多对多关系，你可以使用 :class:`~django.db.models.ManyToManyField` 来代表这个关系。然而，你想要记录更多的信息在这样的关联关系当中，比如你想要记录某人是何时加入一个组的。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:436
msgid ""
"For these situations, Django allows you to specify the model that will be "
"used to govern the many-to-many relationship. You can then put extra fields "
"on the intermediate model. The intermediate model is associated with the "
":class:`~django.db.models.ManyToManyField` using the :attr:`through "
"<ManyToManyField.through>` argument to point to the model that will act as "
"an intermediary. For our musician example, the code would look something "
"like this::"
msgstr "对于这些情况，Django 允许你指定用于控制多对多关系的模型。你可以在中间模型当中添加额外的字段。在实例化 :class:`~django.db.models.ManyToManyField` 的时候使用 :attr:`through <ManyToManyField.through>` 参数指定多对多关系使用哪个中间模型。对于我们举的音乐家的例子，代码如下："

#: ../../../../sources/2.2/docs/topics/db/models.txt:465
msgid ""
"When you set up the intermediary model, you explicitly specify foreign keys "
"to the models that are involved in the many-to-many relationship. This "
"explicit declaration defines how the two models are related."
msgstr "你需要在设置中间模型的时候，显式地为多对多关系中涉及的中间模型指定外键。这种显式声明定义了这两个模型之间是如何关联的。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:469
msgid "There are a few restrictions on the intermediate model:"
msgstr "在中间模型当中有一些限制条件："

#: ../../../../sources/2.2/docs/topics/db/models.txt:471
msgid ""
"Your intermediate model must contain one - and *only* one - foreign key to "
"the source model (this would be ``Group`` in our example), or you must "
"explicitly specify the foreign keys Django should use for the relationship "
"using :attr:`ManyToManyField.through_fields "
"<ManyToManyField.through_fields>`. If you have more than one foreign key and"
" ``through_fields`` is not specified, a validation error will be raised. A "
"similar restriction applies to the foreign key to the target model (this "
"would be ``Person`` in our example)."
msgstr "你的中间模型要么有且 *仅* 有一个指向源模型（我们例子当中的 ``Group`` ）的外键，要么你必须通过 :attr:`ManyToManyField.through_fields <ManyToManyField.through_fields>` 参数在多个外键当中手动选择一个外键，如果有多个外健且没有用 ``through_fields`` 参数选择一个的话，会出现验证错误。对于指向目标模型（我们例子当中的 ``Person`` ）的外键也有同样的限制。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:480
msgid ""
"For a model which has a many-to-many relationship to itself through an "
"intermediary model, two foreign keys to the same model are permitted, but "
"they will be treated as the two (different) sides of the many-to-many "
"relationship. If there are *more* than two foreign keys though, you must "
"also specify ``through_fields`` as above, or a validation error will be "
"raised."
msgstr "在一个用于描述模型当中自己指向自己的多对多关系的中间模型当中，可以有两个指向同一个模型的外健，但这两个外健分表代表多对多关系（不同）的两端。如果外健的个数 *超过* 两个，你必须和上面一样指定 ``through_fields`` 参数，要不然会出现验证错误。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:487
msgid ""
"When defining a many-to-many relationship from a model to itself, using an "
"intermediary model, you *must* use :attr:`symmetrical=False "
"<ManyToManyField.symmetrical>` (see :ref:`the model field reference "
"<manytomany-arguments>`)."
msgstr "在定义模型自己指向自己的多对多关系时，如果使用中间模型，你 *必须* 定义 :attr:`symmetrical=False <ManyToManyField.symmetrical>` （查看 :ref:`木星字段参考 <manytomany-arguments>`）。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:492
msgid ""
"Now that you have set up your :class:`~django.db.models.ManyToManyField` to "
"use your intermediary model (``Membership``, in this case), you're ready to "
"start creating some many-to-many relationships. You do this by creating "
"instances of the intermediate model::"
msgstr "现在你已经通过中间模型完成你的 :class:`~django.db.models.ManyToManyField` （例子中的 ``Membership`` ），可以开始创建一些多对多关系了。你通过实例化中间模型来创建关系："

#: ../../../../sources/2.2/docs/topics/db/models.txt:514
msgid ""
"You can also use ``add()``, ``create()``, or ``set()`` to create "
"relationships, as long as your specify ``through_defaults`` for any required"
" fields::"
msgstr "你也可以使用 ``add()`` ， ``create()`` ，或 ``set()`` 创建关联关系，只要你为必须的字段指定 ``through_defaults`` ："

#: ../../../../sources/2.2/docs/topics/db/models.txt:521
msgid "You may prefer to create instances of the intermediate model directly."
msgstr "你可能更倾向直接创建中间模型。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:523
msgid ""
"If the custom through table defined by the intermediate model does not "
"enforce uniqueness on the ``(model1, model2)`` pair, allowing multiple "
"values, the :meth:`~django.db.models.fields.related.RelatedManager.remove` "
"call will remove all intermediate model instances::"
msgstr "如果自定义中间模型没有强制 ``(model1, model2)`` 对的唯一性，调用 :meth:`~django.db.models.fields.related.RelatedManager.remove` 方法会删除所有中间模型的实例："

#: ../../../../sources/2.2/docs/topics/db/models.txt:538
msgid ""
"The :meth:`~django.db.models.fields.related.RelatedManager.clear` method can"
" be used to remove all many-to-many relationships for an instance::"
msgstr "方法 :meth:`~django.db.models.fields.related.RelatedManager.clear` 用于实例的所有多对多关系："

#: ../../../../sources/2.2/docs/topics/db/models.txt:547
msgid ""
"Once you have established the many-to-many relationships, you can issue "
"queries. Just as with normal many-to-many relationships, you can query using"
" the attributes of the many-to-many-related model::"
msgstr "一旦你建立了自定义多对多关联关系，就可以执行查询操作。和一般的多对多关联关系一样，你可以使用多对多关联模型的属性来查询："

#: ../../../../sources/2.2/docs/topics/db/models.txt:555
msgid ""
"As you are using an intermediate model, you can also query on its "
"attributes::"
msgstr "当你使用中间模型的时候，你也可以查询他的属性："

#: ../../../../sources/2.2/docs/topics/db/models.txt:563
msgid ""
"If you need to access a membership's information you may do so by directly "
"querying the ``Membership`` model::"
msgstr "如果你想访问一个关系的信息时你可以直接查询 ``Membership`` 模型："

#: ../../../../sources/2.2/docs/topics/db/models.txt:572
msgid ""
"Another way to access the same information is by querying the :ref:`many-to-"
"many reverse relationship<m2m-reverse-relationships>` from a ``Person`` "
"object::"
msgstr "另一种访问同样信息的方法是通过 ``Person`` 对象来查询 :ref:`多对多递归关联关系<m2m-reverse-relationships>` ："

#: ../../../../sources/2.2/docs/topics/db/models.txt:585
msgid ""
"To define a one-to-one relationship, use "
":class:`~django.db.models.OneToOneField`. You use it just like any other "
"``Field`` type: by including it as a class attribute of your model."
msgstr "使用 :class:`~django.db.models.OneToOneField` 来定义一对一关系。就像使用其他类型的 ``Field`` 一样：在模型属性中包含它。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:589
msgid ""
"This is most useful on the primary key of an object when that object "
"\"extends\" another object in some way."
msgstr "当一个对象以某种方式“继承”另一个对象时，这对该对象的主键非常有用。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:592
msgid ""
":class:`~django.db.models.OneToOneField` requires a positional argument: the"
" class to which the model is related."
msgstr ":class:`~django.db.models.OneToOneField` 需要一个位置参数：与模型相关的类。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:595
msgid ""
"For example, if you were building a database of \"places\", you would build "
"pretty standard stuff such as address, phone number, etc. in the database. "
"Then, if you wanted to build a database of restaurants on top of the places,"
" instead of repeating yourself and replicating those fields in the "
"``Restaurant`` model, you could make ``Restaurant`` have a "
":class:`~django.db.models.OneToOneField` to ``Place`` (because a restaurant "
"\"is a\" place; in fact, to handle this you'd typically use "
":ref:`inheritance <model-inheritance>`, which involves an implicit one-to-"
"one relation)."
msgstr "例如，当你要建立一个有关“位置”信息的数据库时，你可能会包含通常的地址，电话等字段。接着，如果你想接着建立一个关于关于餐厅的数据库，除了将位置数据库当中的字段复制到 ``Restaurant`` 模型，你也可以将一个指向 ``Place`` :class:`~django.db.models.OneToOneField` 放到 ``Restaurant`` 当中（因为餐厅“是一个”地点）；事实上，在处理这样的情况时最好使用 :ref:`模型继承<model-inheritance>` ，它隐含的包括了一个一对一关系。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:605
msgid ""
"As with :class:`~django.db.models.ForeignKey`, a :ref:`recursive "
"relationship <recursive-relationships>` can be defined and :ref:`references "
"to as-yet undefined models <lazy-relationships>` can be made."
msgstr "和  :class:`~django.db.models.ForeignKey` 一样，可以创建 :ref:`自关联关系 <recursive-relationships>` 也可以创建 :ref:`与尚未定义的模型的关系 <lazy-relationships>` 。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:611
msgid ""
"See the :doc:`One-to-one relationship model example "
"</topics/db/examples/one_to_one>` for a full example."
msgstr "点击文档 :doc:`一对一关联模型实例 </topics/db/examples/one_to_one>` 来查看完整的例子。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:614
msgid ""
":class:`~django.db.models.OneToOneField` fields also accept an optional "
":attr:`~django.db.models.OneToOneField.parent_link` argument."
msgstr ":class:`~django.db.models.OneToOneField` 字段还接受一个可选的 :attr:`~django.db.models.OneToOneField.parent_link` 参数。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:617
msgid ""
":class:`~django.db.models.OneToOneField` classes used to automatically "
"become the primary key on a model. This is no longer true (although you can "
"manually pass in the :attr:`~django.db.models.Field.primary_key` argument if"
" you like). Thus, it's now possible to have multiple fields of type "
":class:`~django.db.models.OneToOneField` on a single model."
msgstr ":class:`~django.db.models.OneToOneField` 类通常自动的成为模型的主键，这条规则现在不再使用了（然而你可以手动指定 :attr:`~django.db.models.Field.primary_key` 参数）。因此，现在可以在单个模型当中指定多个 :class:`~django.db.models.OneToOneField` 字段。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:624
msgid "Models across files"
msgstr "跨文件模型"

#: ../../../../sources/2.2/docs/topics/db/models.txt:626
msgid ""
"It's perfectly OK to relate a model to one from another app. To do this, "
"import the related model at the top of the file where your model is defined."
" Then, just refer to the other model class wherever needed. For example::"
msgstr "关联另一个应用中的模型是当然可以的。为了实现这一点，在定义模型的文件开头导入需要被关联的模型。接着就可以在其他有需要的模型类当中关联它了。比如："

#: ../../../../sources/2.2/docs/topics/db/models.txt:643
msgid "Field name restrictions"
msgstr "字段命名限制"

#: ../../../../sources/2.2/docs/topics/db/models.txt:645
msgid "Django places some restrictions on model field names:"
msgstr "Django 对模型的字段名有一些限制："

#: ../../../../sources/2.2/docs/topics/db/models.txt:647
msgid ""
"A field name cannot be a Python reserved word, because that would result in "
"a Python syntax error. For example::"
msgstr "一个字段的名称不能是 Python 保留字，因为这会导致 Python 语法错误。比如："

#: ../../../../sources/2.2/docs/topics/db/models.txt:653
msgid ""
"A field name cannot contain more than one underscore in a row, due to the "
"way Django's query lookup syntax works. For example::"
msgstr "一个字段名称不能包含连续的多个下划线，原因在于 Django 查询语法的工作方式。比如："

#: ../../../../sources/2.2/docs/topics/db/models.txt:659
msgid "A field name cannot end with an underscore, for similar reasons."
msgstr "字段名不能以下划线结尾，原因同上。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:661
msgid ""
"These limitations can be worked around, though, because your field name "
"doesn't necessarily have to match your database column name. See the "
":attr:`~Field.db_column` option."
msgstr "但是，这些限制是可以被解决的，因为字段名没要求和数据库列名一样。查看 :attr:`~Field.db_column` 选项。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:665
msgid ""
"SQL reserved words, such as ``join``, ``where`` or ``select``, *are* allowed"
" as model field names, because Django escapes all database table names and "
"column names in every underlying SQL query. It uses the quoting syntax of "
"your particular database engine."
msgstr "SQL保留字，例如 ``join``， ``where`` 或 ``select``， *是* 可以被用在模型字段名当中的，因为 Django 在对底层的 SQL 查询当中清洗了所有的数据库表名和字段名，通过使用特定数据库引擎的引用语法。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:671
msgid "Custom field types"
msgstr "自定义的字段类型"

#: ../../../../sources/2.2/docs/topics/db/models.txt:673
msgid ""
"If one of the existing model fields cannot be used to fit your purposes, or "
"if you wish to take advantage of some less common database column types, you"
" can create your own field class. Full coverage of creating your own fields "
"is provided in :doc:`/howto/custom-model-fields`."
msgstr "如果已经存在的模型字段不能满足你的需求，或者你希望支持一些不太常见的数据库列类型，你可以创建自己的字段类。在 :doc:`/howto/custom-model-fields` 中提供了创建自定义字段的各方面内容。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:681
msgid "``Meta`` options"
msgstr "``Meta`` 选项"

#: ../../../../sources/2.2/docs/topics/db/models.txt:683
msgid "Give your model metadata by using an inner ``class Meta``, like so::"
msgstr "使用内部 ``Meta类`` 来给模型赋予元数据，就像："

#: ../../../../sources/2.2/docs/topics/db/models.txt:694
msgid ""
"Model metadata is \"anything that's not a field\", such as ordering options "
"(:attr:`~Options.ordering`), database table name "
"(:attr:`~Options.db_table`), or human-readable singular and plural names "
"(:attr:`~Options.verbose_name` and :attr:`~Options.verbose_name_plural`). "
"None are required, and adding ``class Meta`` to a model is completely "
"optional."
msgstr "模型的元数据即“所有不是字段的东西”，比如排序选项（ :attr:`~Options.ordering` ），数据库表名（ :attr:`~Options.db_table` ），或是阅读友好的单复数名（ :attr:`~Options.verbose_name` 和 :attr:`~Options.verbose_name_plural` ）。这些都不是必须的，并且在模型当中添加 ``Meta类`` 也完全是可选的。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:700
msgid ""
"A complete list of all possible ``Meta`` options can be found in the "
":doc:`model option reference </ref/models/options>`."
msgstr "在 :doc:`模型可选参数参考 </ref/models/options>` 中列出了 ``Meta`` 可使用的全部选项。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:706
msgid "Model attributes"
msgstr "模型属性"

#: ../../../../sources/2.2/docs/topics/db/models.txt:715
msgid "``objects``"
msgstr "``objects``"

#: ../../../../sources/2.2/docs/topics/db/models.txt:709
msgid ""
"The most important attribute of a model is the "
":class:`~django.db.models.Manager`. It's the interface through which "
"database query operations are provided to Django models and is used to "
":ref:`retrieve the instances <retrieving-objects>` from the database. If no "
"custom ``Manager`` is defined, the default name is "
":attr:`~django.db.models.Model.objects`. Managers are only accessible via "
"model classes, not the model instances."
msgstr "模型当中最重要的属性是 :class:`~django.db.models.Manager`。它是 Django 模型和数据库查询操作之间的接口，并且它被用作从数据库当中 :ref:`获取实例 <retrieving-objects>`，如果没有指定自定义的 ``Manager`` 默认名称是 :attr:`~django.db.models.Model.objects`。Manager 只能通过模型类来访问，不能通过模型实例来访问。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:720
msgid "Model methods"
msgstr "模型方法"

#: ../../../../sources/2.2/docs/topics/db/models.txt:722
msgid ""
"Define custom methods on a model to add custom \"row-level\" functionality "
"to your objects. Whereas :class:`~django.db.models.Manager` methods are "
"intended to do \"table-wide\" things, model methods should act on a "
"particular model instance."
msgstr "在模型中添加自定义方法会给你的对象提供自定义的“行级”操作能力。与之对应的是类 :class:`~django.db.models.Manager` 的方法意在提供“表级”的操作，模型方法应该在某个对象实例上生效。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:726
msgid ""
"This is a valuable technique for keeping business logic in one place -- the "
"model."
msgstr "这是一个将相关逻辑代码放在一个地方的技巧——模型。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:729
msgid "For example, this model has a few custom methods::"
msgstr "比如，该模型有一些自定义方法："

#: ../../../../sources/2.2/docs/topics/db/models.txt:753
msgid "The last method in this example is a :term:`property`."
msgstr "例子中最后一个方法是 :term:`property`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:755
msgid ""
"The :doc:`model instance reference </ref/models/instances>` has a complete "
"list of :ref:`methods automatically given to each model <model-instance-"
"methods>`. You can override most of these -- see `overriding predefined "
"model methods`_, below -- but there are a couple that you'll almost always "
"want to define:"
msgstr "文档 :doc:`模型实例参考 </ref/models/instances>` 包含了 :ref:`自动提供给每个模型的方法 <model-instance-methods>` 的完整列表。你可以复写大部分的方法，参考下面的 `overriding predefined model methods`_ ——下面介绍两个你最可能期望复写的："

#: ../../../../sources/2.2/docs/topics/db/models.txt:768
msgid ":meth:`~Model.__str__`"
msgstr ":meth:`~Model.__str__`"

#: ../../../../sources/2.2/docs/topics/db/models.txt:761
msgid ""
"A Python \"magic method\" that returns a string representation of any "
"object. This is what Python and Django will use whenever a model instance "
"needs to be coerced and displayed as a plain string. Most notably, this "
"happens when you display an object in an interactive console or in the "
"admin."
msgstr "一个 Python 的“魔法方法”，返回值友好地展示了一个对象。Python 和 Django 在要将模型实例展示为纯文本时调用。最有可能的应用场景是交互式控制台或后台。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:767
msgid ""
"You'll always want to define this method; the default isn't very helpful at "
"all."
msgstr "你将会经常定义此方法；默认提供的不是很好用。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:776
msgid ":meth:`~Model.get_absolute_url`"
msgstr ":meth:`~Model.get_absolute_url`"

#: ../../../../sources/2.2/docs/topics/db/models.txt:771
msgid ""
"This tells Django how to calculate the URL for an object. Django uses this "
"in its admin interface, and any time it needs to figure out a URL for an "
"object."
msgstr "该方法告诉 Django 如何计算一个对象的 URL。Django 在后台接口使用此方法，或任意时间它需要计算一个对象的 URL。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:775
msgid ""
"Any object that has a URL that uniquely identifies it should define this "
"method."
msgstr "任何需要一个唯一 URL 的对象需要定义此方法。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:781
msgid "Overriding predefined model methods"
msgstr "重写之前定义的模型方法"

#: ../../../../sources/2.2/docs/topics/db/models.txt:783
msgid ""
"There's another set of :ref:`model methods <model-instance-methods>` that "
"encapsulate a bunch of database behavior that you'll want to customize. In "
"particular you'll often want to change the way :meth:`~Model.save` and "
":meth:`~Model.delete` work."
msgstr "还有一个 :ref:`模型方法 <model-instance-methods>` 的集合，包含了一些你可能自定义的数据库行为。尤其是这两个你最有可能定制的方法 :meth:`~Model.save` 和 :meth:`~Model.delete`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:788
msgid ""
"You're free to override these methods (and any other model method) to alter "
"behavior."
msgstr "你可以随意地重写这些方法（或其它模型方法）来更改方法的行为。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:791
msgid ""
"A classic use-case for overriding the built-in methods is if you want "
"something to happen whenever you save an object. For example (see "
":meth:`~Model.save` for documentation of the parameters it accepts)::"
msgstr "一个典型的重写内置方法的场景是你想在保存对象时额外做些事。比如（查看文档 :meth:`~Model.save` 了解其接受的参数）::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:806
msgid "You can also prevent saving::"
msgstr "你也可以阻止保存::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:820
msgid ""
"It's important to remember to call the superclass method -- that's that "
"``super().save(*args, **kwargs)`` business -- to ensure that the object "
"still gets saved into the database. If you forget to call the superclass "
"method, the default behavior won't happen and the database won't get "
"touched."
msgstr "调用父类的方法非常重要——这里指 ``super().save(*args, **kwargs)`` ——确保对象正确的写入数据库。若你忘记调用父类方法，默认行为不会被触发，数据库也不会被操作。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:826
msgid ""
"It's also important that you pass through the arguments that can be passed "
"to the model method -- that's what the ``*args, **kwargs`` bit does. Django "
"will, from time to time, extend the capabilities of built-in model methods, "
"adding new arguments. If you use ``*args, **kwargs`` in your method "
"definitions, you are guaranteed that your code will automatically support "
"those arguments when they are added."
msgstr "同时传递模型方法接受的参数也很重要—— ``*args, **kwargs`` 会接受这些参数。Django 会不时地扩展模型内置方法的功能，也会添加新参数。如果你在重写的方法中使用了 ``*args, **kwargs``，这将确保你的方法能接受这些新加的参数。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:833
msgid "Overridden model methods are not called on bulk operations"
msgstr "重写的模型方法不会在批量操作中调用"

#: ../../../../sources/2.2/docs/topics/db/models.txt:835
msgid ""
"Note that the :meth:`~Model.delete()` method for an object is not "
"necessarily called when :ref:`deleting objects in bulk using a QuerySet "
"<topics-db-queries-delete>` or as a result of a :attr:`cascading delete "
"<django.db.models.ForeignKey.on_delete>`. To ensure customized delete logic "
"gets executed, you can use :data:`~django.db.models.signals.pre_delete` "
"and/or :data:`~django.db.models.signals.post_delete` signals."
msgstr "注意，删除一个模型对象不总是要调用 :meth:`~Model.delete()` 方法。例如， ref:`使用 QuerySet 批量删除对象 <topics-db-queries-delete>` 和 :attr:`级联删除 <django.db.models.ForeignKey.on_delete>`。为了确保自定义的删除逻辑被执行，你可以使用 :data:`~django.db.models.signals.pre_delete` 和 :data:`~django.db.models.signals.post_delete` 信号。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:843
msgid ""
"Unfortunately, there isn't a workaround when "
":meth:`creating<django.db.models.query.QuerySet.bulk_create>` or "
":meth:`updating<django.db.models.query.QuerySet.update>` objects in bulk, "
"since none of :meth:`~Model.save()`, "
":data:`~django.db.models.signals.pre_save`, and "
":data:`~django.db.models.signals.post_save` are called."
msgstr "不幸的是，批量 :meth:`creating<django.db.models.query.QuerySet.bulk_create>` 和 :meth:`updating<django.db.models.query.QuerySet.update>` 操作不支持上述操作，因为这两种操作未调用 :meth:`~Model.save()`，:data:`~django.db.models.signals.pre_save` 和 :data:`~django.db.models.signals.post_save`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:851
msgid "Executing custom SQL"
msgstr "执行自定义 SQL"

#: ../../../../sources/2.2/docs/topics/db/models.txt:853
msgid ""
"Another common pattern is writing custom SQL statements in model methods and"
" module-level methods. For more details on using raw SQL, see the "
"documentation on :doc:`using raw SQL</topics/db/sql>`."
msgstr "另一个常见的模式是在模型方法和模块方法中编写自定义 SQL 语句。更多关于使用原生 SQL的细节，参见文档 :doc:`使用原生 SQL </topics/db/sql>`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:860
msgid "Model inheritance"
msgstr "模型继承"

#: ../../../../sources/2.2/docs/topics/db/models.txt:862
msgid ""
"Model inheritance in Django works almost identically to the way normal class"
" inheritance works in Python, but the basics at the beginning of the page "
"should still be followed. That means the base class should subclass "
":class:`django.db.models.Model`."
msgstr "模型继承在 Django 中与普通类继承在 Python 中的工作方式几乎完全相同，但也仍应遵循本页开头的内容。这意味着其基类应该继承自 :class:`django.db.models.Model`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:867
msgid ""
"The only decision you have to make is whether you want the parent models to "
"be models in their own right (with their own database tables), or if the "
"parents are just holders of common information that will only be visible "
"through the child models."
msgstr "你只需要决定父类模型是否需要拥有它们的权利（拥有它们的数据表），或者父类仅作为承载仅子类中可见的公共信息的载体。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:872
msgid "There are three styles of inheritance that are possible in Django."
msgstr "Django 有三种可用的集成风格。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:874
msgid ""
"Often, you will just want to use the parent class to hold information that "
"you don't want to have to type out for each child model. This class isn't "
"going to ever be used in isolation, so :ref:`abstract-base-classes` are what"
" you're after."
msgstr "常见情况下，你仅将父类用于子类公共信息的载体，因为你不会想在每个子类中把这些代码都敲一遍。这样的父类永远都不会单独使用，所以 :ref:`abstract-base-classes` 是你需要的。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:878
msgid ""
"If you're subclassing an existing model (perhaps something from another "
"application entirely) and want each model to have its own database table, "
":ref:`multi-table-inheritance` is the way to go."
msgstr "若你继承了一个模型（可能来源其它应用），且想要每个模型都有对应的数据表，客官这边请 :ref:`multi-table-inheritance`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:881
msgid ""
"Finally, if you only want to modify the Python-level behavior of a model, "
"without changing the models fields in any way, you can use :ref:`proxy-"
"models`."
msgstr "最后，若你只想修改模型的 Python 级行为，而不是以任何形式修改模型字段， :ref:`proxy-models` 会是你的菜。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:888
msgid "Abstract base classes"
msgstr "抽象基类"

#: ../../../../sources/2.2/docs/topics/db/models.txt:890
msgid ""
"Abstract base classes are useful when you want to put some common "
"information into a number of other models. You write your base class and put"
" ``abstract=True`` in the :ref:`Meta <meta-options>` class. This model will "
"then not be used to create any database table. Instead, when it is used as a"
" base class for other models, its fields will be added to those of the child"
" class."
msgstr "抽象基类在你要将公共信息放入很多模型时会很有用。编写你的基类，并在 :ref:`Meta <meta-options>` 类中填入 ``abstract=True``。该模型将不会创建任何数据表。当其用作其它模型类的基类时，它的字段会自动添加至子类。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:897
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:687
msgid "An example::"
msgstr "一个例子::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:911
msgid ""
"The ``Student`` model will have three fields: ``name``, ``age`` and "
"``home_group``. The ``CommonInfo`` model cannot be used as a normal Django "
"model, since it is an abstract base class. It does not generate a database "
"table or have a manager, and cannot be instantiated or saved directly."
msgstr "``Student`` 模型拥有3个字段： ``name``， ``age`` 和 ``home_group``。 ``CommonInfo`` 模型不能用作普通的 Django 模型，因为它是一个抽象基类。它不会生成数据表，也没有管理器，也不能被实例化和保存。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:916
msgid ""
"Fields inherited from abstract base classes can be overridden with another "
"field or value, or be removed with ``None``."
msgstr "从抽象基类继承来的字段可被其它字段或值重写，或用 ``None`` 删除。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:919
msgid ""
"For many uses, this type of model inheritance will be exactly what you want."
" It provides a way to factor out common information at the Python level, "
"while still only creating one database table per child model at the database"
" level."
msgstr "对很多用户来说，这种继承可能就是你想要的。它提供了一种在 Python 级抽出公共信息的方法，但仍会在子类模型中创建数据表。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:924
msgid "``Meta`` inheritance"
msgstr "``Meta`` 继承"

#: ../../../../sources/2.2/docs/topics/db/models.txt:926
msgid ""
"When an abstract base class is created, Django makes any :ref:`Meta <meta-"
"options>` inner class you declared in the base class available as an "
"attribute. If a child class does not declare its own :ref:`Meta <meta-"
"options>` class, it will inherit the parent's :ref:`Meta <meta-options>`. If"
" the child wants to extend the parent's :ref:`Meta <meta-options>` class, it"
" can subclass it. For example::"
msgstr "当一个抽象基类被建立，Django 将所有你在基类中申明的 :ref:`Meta <meta-options>` 内部类以属性的形式提供。若子类未定义自己的 :ref:`Meta <meta-options>` 类，它会继承父类的 :ref:`Meta <meta-options>`。当然，子类也可继承父类的 :ref:`Meta <meta-options>`，比如::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:945
msgid ""
"Django does make one adjustment to the :ref:`Meta <meta-options>` class of "
"an abstract base class: before installing the :ref:`Meta <meta-options>` "
"attribute, it sets ``abstract=False``. This means that children of abstract "
"base classes don't automatically become abstract classes themselves. Of "
"course, you can make an abstract base class that inherits from another "
"abstract base class. You just need to remember to explicitly set "
"``abstract=True`` each time."
msgstr "Django 在安装 :ref:`Meta <meta-options>` 属性前，对抽象基类的 :ref:`Meta <meta-options>` 做了一个调整——设置 ``abstract=False``。这意味着抽象基类的子类不会自动地变成抽象类。当然，你可以继承一个抽象基类创建另一个抽象基类。你只需记住显示地设置 ``abstract=True``。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:952
msgid ""
"Some attributes won't make sense to include in the :ref:`Meta <meta-"
"options>` class of an abstract base class. For example, including "
"``db_table`` would mean that all the child classes (the ones that don't "
"specify their own :ref:`Meta <meta-options>`) would use the same database "
"table, which is almost certainly not what you want."
msgstr "抽象基类的某些 :ref:`Meta <meta-options>` 属性对子类是没用的。比如，包含 ``db_table`` 意味着所有的子类（你并未在子类中指定它们的 :ref:`Meta <meta-options>`）会使用同一张数据表，这肯定不是你想要的。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:960
msgid "Be careful with ``related_name`` and ``related_query_name``"
msgstr "对  ``related_name`` 和 ``related_query_name`` 要格外小心"

#: ../../../../sources/2.2/docs/topics/db/models.txt:962
msgid ""
"If you are using :attr:`~django.db.models.ForeignKey.related_name` or "
":attr:`~django.db.models.ForeignKey.related_query_name` on a ``ForeignKey`` "
"or ``ManyToManyField``, you must always specify a *unique* reverse name and "
"query name for the field. This would normally cause a problem in abstract "
"base classes, since the fields on this class are included into each of the "
"child classes, with exactly the same values for the attributes (including "
":attr:`~django.db.models.ForeignKey.related_name` and "
":attr:`~django.db.models.ForeignKey.related_query_name`) each time."
msgstr "若你在 ``外键`` 或 ``多对多字段`` 使用了 :attr:`~django.db.models.ForeignKey.related_name` 或 :attr:`~django.db.models.ForeignKey.related_query_name`，你必须为该字段提供一个 *独一无二* 的反向名字和查询名字。这在抽象基类中一般会引发问题，因为基类中的字段都被子类继承，且保持了同样的值（包括 :attr:`~django.db.models.ForeignKey.related_name` 和 :attr:`~django.db.models.ForeignKey.related_query_name`）。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:971
msgid ""
"To work around this problem, when you are using "
":attr:`~django.db.models.ForeignKey.related_name` or "
":attr:`~django.db.models.ForeignKey.related_query_name` in an abstract base "
"class (only), part of the value should contain ``'%(app_label)s'`` and "
"``'%(class)s'``."
msgstr "为了解决此问题，当你在抽象基类中（也只能是在抽象基类中）使用 :attr:`~django.db.models.ForeignKey.related_name` 和 :attr:`~django.db.models.ForeignKey.related_query_name`，部分值需要包含 ``'%(app_label)s'`` 和 ``'%(class)s'``。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:977
msgid ""
"``'%(class)s'`` is replaced by the lowercased name of the child class that "
"the field is used in."
msgstr "``'%(class)s'`` 用使用了该字段的子类的小写类名替换。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:979
msgid ""
"``'%(app_label)s'`` is replaced by the lowercased name of the app the child "
"class is contained within. Each installed application name must be unique "
"and the model class names within each app must also be unique, therefore the"
" resulting name will end up being different."
msgstr "``'%(app_label)s'`` 用小写的包含子类的应用名替换。每个安装的应用名必须是唯一的，应用内的每个模型类名也必须是唯一的。因此，替换后的名字也是唯一的。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:984
msgid "For example, given an app ``common/models.py``::"
msgstr "举个例子，有个应用 ``common/models.py``::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1004
msgid "Along with another app ``rare/models.py``::"
msgstr "附带另一个应用 ``rare/models.py``::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1011
msgid ""
"The reverse name of the ``common.ChildA.m2m`` field will be "
"``common_childa_related`` and the reverse query name will be "
"``common_childas``. The reverse name of the ``common.ChildB.m2m`` field will"
" be ``common_childb_related`` and the reverse query name will be "
"``common_childbs``. Finally, the reverse name of the ``rare.ChildB.m2m`` "
"field will be ``rare_childb_related`` and the reverse query name will be "
"``rare_childbs``. It's up to you how you use the ``'%(class)s'`` and "
"``'%(app_label)s'`` portion to construct your related name or related query "
"name but if you forget to use it, Django will raise errors when you perform "
"system checks (or run :djadmin:`migrate`)."
msgstr "``common.ChildA.m2m`` 字段的反转名是 ``common_childa_related``，反转查询名是 ``common_childas``。 ``common.ChildB.m2m`` 字段的反转名是 ``common_childb_related``， 反转查询名是 ``common_childbs``。 ``rare.ChildB.m2m`` 字段的反转名是 ``rare_childb_related``，反转查询名是 ``rare_childbs``。这决定于你如何使用 ``'%(class)s'`` 和 ``'%(app_label)s'`` 构建关联名字和关联查询名。但是，若你忘了使用它们，Django 会在你执行系统检查（或运行 :djadmin:`migrate`）时抛出错误。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1022
msgid ""
"If you don't specify a :attr:`~django.db.models.ForeignKey.related_name` "
"attribute for a field in an abstract base class, the default reverse name "
"will be the name of the child class followed by ``'_set'``, just as it "
"normally would be if you'd declared the field directly on the child class. "
"For example, in the above code, if the "
":attr:`~django.db.models.ForeignKey.related_name` attribute was omitted, the"
" reverse name for the ``m2m`` field would be ``childa_set`` in the "
"``ChildA`` case and ``childb_set`` for the ``ChildB`` field."
msgstr "如果你未指定抽象基类中的 :attr:`~django.db.models.ForeignKey.related_name` 属性，默认的反转名会是子类名，后接 ``'_set'`` 。这名字看起来就像你在子类中定义的一样。比如，在上述代码中，若省略了 :attr:`~django.db.models.ForeignKey.related_name` 属性，  ``ChildA`` 的 ``m2m`` 字段的反转名会是 ``childa_set`` ， ``ChildB`` 的是 ``childb_set``。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1034
msgid "Multi-table inheritance"
msgstr "多表继承"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1036
msgid ""
"The second type of model inheritance supported by Django is when each model "
"in the hierarchy is a model all by itself. Each model corresponds to its own"
" database table and can be queried and created individually. The inheritance"
" relationship introduces links between the child model and each of its "
"parents (via an automatically-created "
":class:`~django.db.models.OneToOneField`). For example::"
msgstr "Django 支持的第二种模型继承方式是层次结构中的每个模型都是一个单独的模型。某个模型都指向分离的数据表，且可被独立查询和创建。继承关系介绍了子类和父类之间的连接（通过一个自动创建的 :class:`~django.db.models.OneToOneField` ）。比如::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1053
msgid ""
"All of the fields of ``Place`` will also be available in ``Restaurant``, "
"although the data will reside in a different database table. So these are "
"both possible::"
msgstr "``Place`` 的所有字段均在 ``Restaurant`` 中可用，虽然数据分别存在不同的表中。所有，以下操作均可::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1060
msgid ""
"If you have a ``Place`` that is also a ``Restaurant``, you can get from the "
"``Place`` object to the ``Restaurant`` object by using the lowercase version"
" of the model name::"
msgstr "若有一个 ``Place`` 同时也是 ``Restaurant``，你可以通过小写的模型名将 ``Place`` 对象转为 ``Restaurant`` 对象。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1069
msgid ""
"However, if ``p`` in the above example was *not* a ``Restaurant`` (it had "
"been created directly as a ``Place`` object or was the parent of some other "
"class), referring to ``p.restaurant`` would raise a "
"``Restaurant.DoesNotExist`` exception."
msgstr "然而，若上述例子中的 ``p`` *不是* 一个 ``Restaurant`` （它仅是个 ``Place`` 对象或是其它类的父类），指向 ``p.restaurant`` 会抛出一个 ``Restaurant.DoesNotExist`` 异常。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1074
msgid ""
"The automatically-created :class:`~django.db.models.OneToOneField` on "
"``Restaurant`` that links it to ``Place`` looks like this::"
msgstr "``Restaurant`` 中自动创建的连接至 ``Place`` 的 :class:`~django.db.models.OneToOneField` 看起来像这样::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1082
msgid ""
"You can override that field by declaring your own "
":class:`~django.db.models.OneToOneField` with :attr:`parent_link=True "
"<django.db.models.OneToOneField.parent_link>` on ``Restaurant``."
msgstr "你可以在 ``Restaurant`` 中重写该字段，通过申明你自己的 :class:`~django.db.models.OneToOneField`，并设置 :attr:`parent_link=True <django.db.models.OneToOneField.parent_link>`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1089
msgid "``Meta`` and multi-table inheritance"
msgstr "``Meta`` 和多表继承"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1091
msgid ""
"In the multi-table inheritance situation, it doesn't make sense for a child "
"class to inherit from its parent's :ref:`Meta <meta-options>` class. All the"
" :ref:`Meta <meta-options>` options have already been applied to the parent "
"class and applying them again would normally only lead to contradictory "
"behavior (this is in contrast with the abstract base class case, where the "
"base class doesn't exist in its own right)."
msgstr "多表继承情况下，子类不会继承父类的 :ref:`Meta <meta-options>`。所以的 :ref:`Meta <meta-options>` 类选项已被应用至父类，在子类中再次应用会导致行为冲突（与抽象基类中应用场景对比，这种情况下，基类并不存在）。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1098
msgid ""
"So a child model does not have access to its parent's :ref:`Meta <meta-"
"options>` class. However, there are a few limited cases where the child "
"inherits behavior from the parent: if the child does not specify an "
":attr:`~django.db.models.Options.ordering` attribute or a "
":attr:`~django.db.models.Options.get_latest_by` attribute, it will inherit "
"these from its parent."
msgstr "故，子类模型无法访问父类的 :ref:`Meta <meta-options>` 类。不过，有限的几种情况下：若子类未指定 :attr:`~django.db.models.Options.ordering` 属性或 :attr:`~django.db.models.Options.get_latest_by` 属性，子类会从父类继承这些。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1105
msgid ""
"If the parent has an ordering and you don't want the child to have any "
"natural ordering, you can explicitly disable it::"
msgstr "如果父类有排序，而你并不期望子类有排序，你可以显示的禁止它::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1115
msgid "Inheritance and reverse relations"
msgstr "继承与反向关系"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1117
msgid ""
"Because multi-table inheritance uses an implicit "
":class:`~django.db.models.OneToOneField` to link the child and the parent, "
"it's possible to move from the parent down to the child, as in the above "
"example. However, this uses up the name that is the default "
":attr:`~django.db.models.ForeignKey.related_name` value for "
":class:`~django.db.models.ForeignKey` and "
":class:`~django.db.models.ManyToManyField` relations.  If you are putting "
"those types of relations on a subclass of the parent model, you **must** "
"specify the :attr:`~django.db.models.ForeignKey.related_name` attribute on "
"each such field. If you forget, Django will raise a validation error."
msgstr "由于多表继承使用隐式的 :class:`~django.db.models.OneToOneField` 连接子类和父类，所以直接从父类访问子类是可能的，就像上述例子展示的那样。然而，使用的名字是 :class:`~django.db.models.ForeignKey` 和 :class:`~django.db.models.ManyToManyField` 关系的默认值。如果你在继承父类模型的子类中添加了这些关联，你 **必须** 指定 :attr:`~django.db.models.ForeignKey.related_name` 属性。假如你忘了，Django 会抛出一个合法性错误。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1129
msgid ""
"For example, using the above ``Place`` class again, let's create another "
"subclass with a :class:`~django.db.models.ManyToManyField`::"
msgstr "比如，让我们用上面的 ``Place`` 类创建另一个子类，包含一个 :class:`~django.db.models.ManyToManyField`::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1135
msgid "This results in the error::"
msgstr "这会导致以下错误::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1143
msgid ""
"Adding ``related_name`` to the ``customers`` field as follows would resolve "
"the error: ``models.ManyToManyField(Place, related_name='provider')``."
msgstr "将 ``related_name`` 像下面这样加至 ``customers`` 字段能解决此错误： ``models.ManyToManyField(Place, related_name='provider')``。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1147
msgid "Specifying the parent link field"
msgstr "指定父类连接字段"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1149
msgid ""
"As mentioned, Django will automatically create a "
":class:`~django.db.models.OneToOneField` linking your child class back to "
"any non-abstract parent models. If you want to control the name of the "
"attribute linking back to the parent, you can create your own "
":class:`~django.db.models.OneToOneField` and set :attr:`parent_link=True "
"<django.db.models.OneToOneField.parent_link>` to indicate that your field is"
" the link back to the parent class."
msgstr "如上所述，Django 会自动创建一个 :class:`~django.db.models.OneToOneField` ，将子类连接回非抽象的父类。如果你想修改连接回父类的属性名，你可以自己创建 :class:`~django.db.models.OneToOneField`，并设置 :attr:`parent_link=True <django.db.models.OneToOneField.parent_link>`，表明该属性用于连接回父类。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1162
msgid ""
"When using :ref:`multi-table inheritance <multi-table-inheritance>`, a new "
"database table is created for each subclass of a model. This is usually the "
"desired behavior, since the subclass needs a place to store any additional "
"data fields that are not present on the base class. Sometimes, however, you "
"only want to change the Python behavior of a model -- perhaps to change the "
"default manager, or add a new method."
msgstr "使用 :ref:`多表继承 <multi-table-inheritance>` 时，每个子类模型都会创建一张新表。这一般是期望的行为，因为子类需要一个地方存储基类中不存在的额外数据字段。不过，有时候你只想修改模型的 Python 级行为——可能是修改默认管理器，或添加一个方法。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1169
msgid ""
"This is what proxy model inheritance is for: creating a *proxy* for the "
"original model. You can create, delete and update instances of the proxy "
"model and all the data will be saved as if you were using the original (non-"
"proxied) model. The difference is that you can change things like the "
"default model ordering or the default manager in the proxy, without having "
"to alter the original."
msgstr "这是代理模型继承的目的：为原模型创建一个 *代理*。你可以创建，删除和更新代理模型的实例，所以的数据都会存储的像你使用原模型（未代理的）一样。不同点是你可以修改代理默认的模型排序和默认管理器，而不需要修改原模型。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1176
msgid ""
"Proxy models are declared like normal models. You tell Django that it's a "
"proxy model by setting the :attr:`~django.db.models.Options.proxy` attribute"
" of the ``Meta`` class to ``True``."
msgstr "代理模型就像普通模型一样申明。你需要告诉 Django 这是一个代理模型，通过将 ``Meta`` 类的 :attr:`~django.db.models.Options.proxy` 属性设置为 ``True``。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1180
msgid ""
"For example, suppose you want to add a method to the ``Person`` model. You "
"can do it like this::"
msgstr "例如，假设你想为 ``Person`` 模型添加一个方法。你可以这么做::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1196
msgid ""
"The ``MyPerson`` class operates on the same database table as its parent "
"``Person`` class. In particular, any new instances of ``Person`` will also "
"be accessible through ``MyPerson``, and vice-versa::"
msgstr "``MyPerson`` 类与父类 ``Person`` 操作同一张数据表。特别提醒， ``Person`` 的实例能通过 ``MyPerson`` 访问，反之亦然。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1204
msgid ""
"You could also use a proxy model to define a different default ordering on a"
" model. You might not always want to order the ``Person`` model, but "
"regularly order by the ``last_name`` attribute when you use the proxy. This "
"is easy::"
msgstr "你也可以用代理模型定义模型的另一种不同的默认排序方法。你也许不期望总对 “Persion” 进行排序，但是在使用代理时，总是依据 “last_name” 属性进行排序。这很简单::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1213
msgid ""
"Now normal ``Person`` queries will be unordered and ``OrderedPerson`` "
"queries will be ordered by ``last_name``."
msgstr "现在，普通的 ``Person`` 查询结果不会被排序，但 ``OrderdPerson`` 查询接轨会按 ``last_name`` 排序。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1216
msgid ""
"Proxy models inherit ``Meta`` attributes :ref:`in the same way as regular "
"models <meta-and-multi-table-inheritance>`."
msgstr "代理模型继承“Meta”属性 :ref:`和普通模型一样 <meta-and-multi-table-inheritance>`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1220
msgid "``QuerySet``\\s still return the model that was requested"
msgstr "``QuerySet`` 仍会返回请求的模型"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1222
msgid ""
"There is no way to have Django return, say, a ``MyPerson`` object whenever "
"you query for ``Person`` objects. A queryset for ``Person`` objects will "
"return those types of objects. The whole point of proxy objects is that code"
" relying on the original ``Person`` will use those and your own code can use"
" the extensions you included (that no other code is relying on anyway). It "
"is not a way to replace the ``Person`` (or any other) model everywhere with "
"something of your own creation."
msgstr "当你用 ``Person`` 对象查询时，Django 永远不会返回 ``MyPerson`` 对象。``Person`` 对象的查询结果集总是返回对应类型。代理对象存在的全部意义是帮你复用原 ``Person`` 提供的代码和自定义的功能代码（并未依赖其它代码）。不存在什么方法能在你创建完代理后，帮你替换所有 ``Person`` （或其它）模型。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1231
msgid "Base class restrictions"
msgstr "基类约束"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1233
msgid ""
"A proxy model must inherit from exactly one non-abstract model class. You "
"can't inherit from multiple non-abstract models as the proxy model doesn't "
"provide any connection between the rows in the different database tables. A "
"proxy model can inherit from any number of abstract model classes, providing"
" they do *not* define any model fields. A proxy model may also inherit from "
"any number of proxy models that share a common non-abstract parent class."
msgstr "一个代理模型必须继承自一个非抽象模型类。你不能继承多个非抽象模型类，因为代理模型无法在不同数据表之间提供任何行间连接。一个代理模型可以继承任意数量的抽象模型类，假如他们 *没有* 定义任何的模型字段。一个代理模型也可以继承任意数量的代理模型，只需他们共享同一个非抽象父类。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1241
msgid "Proxy model managers"
msgstr "代理模型管理器"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1243
msgid ""
"If you don't specify any model managers on a proxy model, it inherits the "
"managers from its model parents. If you define a manager on the proxy model,"
" it will become the default, although any managers defined on the parent "
"classes will still be available."
msgstr "若你未在代理模型中指定模型管理器，它会从父类模型中继承。如果你在代理模型中指定了管理器，它会成为默认管理器，但父类中定义的管理器仍是可用的。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1248
msgid ""
"Continuing our example from above, you could change the default manager used"
" when you query the ``Person`` model like this::"
msgstr "随着上面的例子一路走下来，你可以在查询 ``Person`` 模型时这样修改默认管理器::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1263
msgid ""
"If you wanted to add a new manager to the Proxy, without replacing the "
"existing default, you can use the techniques described in the :ref:`custom "
"manager <custom-managers-and-inheritance>` documentation: create a base "
"class containing the new managers and inherit that after the primary base "
"class::"
msgstr "若你在不替换已存在的默认管理器的情况下，为代理添加新管理器，你可以使用文档 :ref:`自定义管理器 <custom-managers-and-inheritance>` 中介绍的技巧：创建一个包含新管理器的基类，在继承列表中，主类后追加这个基类::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1279
msgid ""
"You probably won't need to do this very often, but, when you do, it's "
"possible."
msgstr "通常情况下，你可能不需要这么做。然而，你需要的时候，这也是可以的。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1285
msgid "Differences between proxy inheritance and unmanaged models"
msgstr "代理继承和未托管的模型间的区别"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1287
msgid ""
"Proxy model inheritance might look fairly similar to creating an unmanaged "
"model, using the :attr:`~django.db.models.Options.managed` attribute on a "
"model's ``Meta`` class."
msgstr "代理模型继承可能看起来和创建未托管的模型很类似，通过在模型的 ``Meta`` 类中定义 :attr:`~django.db.models.Options.managed` 属性。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1291
msgid ""
"With careful setting of :attr:`Meta.db_table "
"<django.db.models.Options.db_table>` you could create an unmanaged model "
"that shadows an existing model and adds Python methods to it. However, that "
"would be very repetitive and fragile as you need to keep both copies "
"synchronized if you make any changes."
msgstr "通过小心地配置 :attr:`Meta.db_table <django.db.models.Options.db_table>`，你将创建一个未托管的模型，该模型将对现有模型进行阴影处理，并添加一些 Python 方法。然而，这会是个经常重复的且容易出错的过程，因为你要在做任何修改时保持两个副本的同步。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1297
msgid ""
"On the other hand, proxy models are intended to behave exactly like the "
"model they are proxying for. They are always in sync with the parent model "
"since they directly inherit its fields and managers."
msgstr "另一方面，代理模型意在表现的和所代理的模型一样。它们总是与父模型保持一致，因为它们直接从福利继承字段和管理器。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1301
msgid "The general rules are:"
msgstr "通用性规则："

#: ../../../../sources/2.2/docs/topics/db/models.txt:1303
msgid ""
"If you are mirroring an existing model or database table and don't want all "
"the original database table columns, use ``Meta.managed=False``. That option"
" is normally useful for modeling database views and tables not under the "
"control of Django."
msgstr "当你克隆一个已存在模型或数据表时，并且不想要所以的原数据表列，配置 ``Meta.managed=False``。这个选项在模型化未受 Django 控制的数据库视图和表格时很有用。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1307
msgid ""
"If you are wanting to change the Python-only behavior of a model, but keep "
"all the same fields as in the original, use ``Meta.proxy=True``. This sets "
"things up so that the proxy model is an exact copy of the storage structure "
"of the original model when data is saved."
msgstr "如果你只想修改模型的 Python 行为，并保留原有字段，配置 ``Meta.proxy=True``。这个配置使得代理模型在保存数据时，确保数据结构和原模型的完全一样。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1315
msgid "Multiple inheritance"
msgstr "多重继承"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1317
msgid ""
"Just as with Python's subclassing, it's possible for a Django model to "
"inherit from multiple parent models. Keep in mind that normal Python name "
"resolution rules apply. The first base class that a particular name (e.g. "
":ref:`Meta <meta-options>`) appears in will be the one that is used; for "
"example, this means that if multiple parents contain a :ref:`Meta <meta-"
"options>` class, only the first one is going to be used, and all others will"
" be ignored."
msgstr "和 Python 中的继承一样，Django 模型也能继承自多个父类模型。请记住，Python 的命名规则这里也有效。第一个出现的基类（比如 :ref:`Meta <meta-options>` ）就是会被使用的那个；举个例子，如果存在多个父类包含 :ref:`Meta <meta-options>`，只有第一个会被使用，其它的都会被忽略。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1324
msgid ""
"Generally, you won't need to inherit from multiple parents. The main use-"
"case where this is useful is for \"mix-in\" classes: adding a particular "
"extra field or method to every class that inherits the mix-in. Try to keep "
"your inheritance hierarchies as simple and straightforward as possible so "
"that you won't have to struggle to work out where a particular piece of "
"information is coming from."
msgstr "一般来说，你并不会同时继承多个父类。常见的应用场景是 “混合” 类：为每个继承此类的添加额外的字段或方法。试着保持你的继承层级尽可能的简单和直接，这样未来你就不用为了确认某段信息是哪来的而拔你为数不多的头发了。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1331
msgid ""
"Note that inheriting from multiple models that have a common ``id`` primary "
"key field will raise an error. To properly use multiple inheritance, you can"
" use an explicit :class:`~django.db.models.AutoField` in the base models::"
msgstr "注意，继承自多个包含 ``id`` 主键的字段会抛出错误。正确的使用多继承，你可以在基类中显示使用 :class:`~django.db.models.AutoField`::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1346
msgid ""
"Or use a common ancestor to hold the :class:`~django.db.models.AutoField`. "
"This requires using an explicit :class:`~django.db.models.OneToOneField` "
"from each parent model to the common ancestor to avoid a clash between the "
"fields that are automatically generated and inherited by the child::"
msgstr "或者在公共祖先中存储 :class:`~django.db.models.AutoField`。这会要求为每个父类模型和公共祖先使用显式的 :class:`~django.db.models.OneToOneField` ，避免与子类自动生成或继承的字段发生冲突::"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1366
msgid "Field name \"hiding\" is not permitted"
msgstr "不能用字段名 \"hiding\""

#: ../../../../sources/2.2/docs/topics/db/models.txt:1368
msgid ""
"In normal Python class inheritance, it is permissible for a child class to "
"override any attribute from the parent class. In Django, this isn't usually "
"permitted for model fields. If a non-abstract model base class has a field "
"called ``author``, you can't create another model field or define an "
"attribute called ``author`` in any class that inherits from that base class."
msgstr "在普通的 Python 类继承中，允许子类重写父类的任何属性。在 Django 中，针对模型字段在，这一般是不允许的。如果有个非抽象模型基类，拥有一个名为 ``author`` 字段，你可以任意继承自基类的类中创建另一个模型字段，或定义一个叫 ``author`` 的属性。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1374
msgid ""
"This restriction doesn't apply to model fields inherited from an abstract "
"model. Such fields may be overridden with another field or value, or be "
"removed by setting ``field_name = None``."
msgstr "此规范不针对从抽象模型基类继承获得的字段。这些字段可被其它字段或值重写，也可以通过配置 ``field_name = None`` 删除。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1380
msgid ""
"Model managers are inherited from abstract base classes. Overriding an "
"inherited field which is referenced by an inherited "
":class:`~django.db.models.Manager` may cause subtle bugs. See :ref:`custom "
"managers and model inheritance <custom-managers-and-inheritance>`."
msgstr "模型管理器是由抽象基类继承来的。重写由 :class:`~django.db.models.Manager` 指定的字段可能会导致精细的 bug。参见 :ref:`自定义管理器和模型继承 <custom-managers-and-inheritance>`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1387
msgid ""
"Some fields define extra attributes on the model, e.g. a "
":class:`~django.db.models.ForeignKey` defines an extra attribute with "
"``_id`` appended to the field name, as well as ``related_name`` and "
"``related_query_name`` on the foreign model."
msgstr "某些字段在模型内定义了额外的属性，比如，一个 :class:`~django.db.models.ForeignKey` 定义了一个额外属性，名称为字段名接 ``_id``，并在外部模型中的添加 ``related_name`` 和 ``related_query_name``。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1392
msgid ""
"These extra attributes cannot be overridden unless the field that defines it"
" is changed or removed so that it no longer defines the extra attribute."
msgstr "这些额外属性不能被重写，除非定义该属性的字段被修改或删除，这样就不会定义额外属性了。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1395
msgid ""
"Overriding fields in a parent model leads to difficulties in areas such as "
"initializing new instances (specifying which field is being initialized in "
"``Model.__init__``) and serialization. These are features which normal "
"Python class inheritance doesn't have to deal with in quite the same way, so"
" the difference between Django model inheritance and Python class "
"inheritance isn't arbitrary."
msgstr "在父模型中重写字段会在很多方面造成困难，比如创建新实例（特指那些字段在 ``Model.__init__`` 中初始化的那些）和序列化。这些特性，普通的 Python 类继承不需要用完全一样的方式处理，故此， Django 的模型继承和 Python 的类继承之间的区别不是随意的。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1402
msgid ""
"This restriction only applies to attributes which are "
":class:`~django.db.models.Field` instances. Normal Python attributes can be "
"overridden if you wish. It also only applies to the name of the attribute as"
" Python sees it: if you are manually specifying the database column name, "
"you can have the same column name appearing in both a child and an ancestor "
"model for multi-table inheritance (they are columns in two different "
"database tables)."
msgstr "这些限制只针对那些是 :class:`~django.db.models.Field` 实例的属性。普通的 Python 属性可被随便重写。它还对 Python 能识别的属性生效：如果你同时在子类和多表继承的祖先类中指定了数据表的列名（它们是两张不同的数据表中的列）。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1410
msgid ""
"Django will raise a :exc:`~django.core.exceptions.FieldError` if you "
"override any model field in any ancestor model."
msgstr "若你在祖先模型中重写了任何模型字段，Django 会抛出一个 :exc:`~django.core.exceptions.FieldError`。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1414
msgid "Organizing models in a package"
msgstr "在一个包中管理模型"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1416
msgid ""
"The :djadmin:`manage.py startapp <startapp>` command creates an application "
"structure that includes a ``models.py`` file. If you have many models, "
"organizing them in separate files may be useful."
msgstr ":djadmin:`manage.py startapp <startapp>` 命令创建了一个应用结构，包含一个 ``models.py`` 文件。若你有很多木星，用独立的文件管理它们会很实用。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1420
msgid ""
"To do so, create a ``models`` package. Remove ``models.py`` and create a "
"``myapp/models/`` directory with an ``__init__.py`` file and the files to "
"store your models. You must import the models in the ``__init__.py`` file."
msgstr "为了达到此目的，创建一个 ``models`` 包。删除 ``models.py``，创建一个 ``myapp/models`` 目录，包含一个 ``__init__.py`` 文件和存储模型的文件。你必须在 ``__init__.py`` 文件中导入这些模块。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1424
msgid ""
"For example, if you had ``organic.py`` and ``synthetic.py`` in the "
"``models`` directory:"
msgstr "比如，若你在 ``models`` 目录下有 ``organic.py`` 和 ``synthetic.py``："

#: ../../../../sources/2.2/docs/topics/db/models.txt:1427
msgid "myapp/models/__init__.py"
msgstr "myapp/models/__init__.py"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1433
msgid ""
"Explicitly importing each model rather than using ``from .models import *`` "
"has the advantages of not cluttering the namespace, making code more "
"readable, and keeping code analysis tools useful."
msgstr "显式导入每个模块，而不是使用 ``from .models import *`` 有助于不打乱命名空间，使代码更具可读性，让代码分析工具更有用。"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1440
msgid ":doc:`The Models Reference </ref/models/index>`"
msgstr ":doc:`模型参考 </ref/models/index>`"

#: ../../../../sources/2.2/docs/topics/db/models.txt:1440
msgid ""
"Covers all the model related APIs including model fields, related objects, "
"and ``QuerySet``."
msgstr "覆盖所有的模型关联 API，包括模型字段，关联对象和 ``QuerySet``。"

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:5
msgid ""
"This topic guide describes Django's support for interacting with multiple "
"databases. Most of the rest of Django's documentation assumes you are "
"interacting with a single database. If you want to interact with multiple "
"databases, you'll need to take some additional steps."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:12
msgid ""
"See :ref:`testing-multi-db` for information about testing with multiple "
"databases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:16
msgid "Defining your databases"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:18
msgid ""
"The first step to using more than one database with Django is to tell Django"
" about the database servers you'll be using. This is done using the "
":setting:`DATABASES` setting. This setting maps database aliases, which are "
"a way to refer to a specific database throughout Django, to a dictionary of "
"settings for that specific connection. The settings in the inner "
"dictionaries are described fully in the :setting:`DATABASES` documentation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:26
msgid ""
"Databases can have any alias you choose. However, the alias ``default`` has "
"special significance. Django uses the database with the alias of ``default``"
" when no other database has been selected."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:30
msgid ""
"The following is an example ``settings.py`` snippet defining two databases "
"-- a default PostgreSQL database and a MySQL database called ``users``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:49
msgid ""
"If the concept of a ``default`` database doesn't make sense in the context "
"of your project, you need to be careful to always specify the database that "
"you want to use. Django requires that a ``default`` database entry be "
"defined, but the parameters dictionary can be left blank if it will not be "
"used. To do this, you must set up :setting:`DATABASE_ROUTERS` for all of "
"your apps' models, including those in any contrib and third-party apps "
"you're using, so that no queries are routed to the default database. The "
"following is an example ``settings.py`` snippet defining two non-default "
"databases, with the ``default`` entry intentionally left empty::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:75
msgid ""
"If you attempt to access a database that you haven't defined in your "
":setting:`DATABASES` setting, Django will raise a "
"``django.db.utils.ConnectionDoesNotExist`` exception."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:80
msgid "Synchronizing your databases"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:82
msgid ""
"The :djadmin:`migrate` management command operates on one database at a "
"time. By default, it operates on the ``default`` database, but by providing "
"the :option:`--database <migrate --database>` option, you can tell it to "
"synchronize a different database. So, to synchronize all models onto all "
"databases in the first example above, you would need to call::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:91
msgid ""
"If you don't want every application to be synchronized onto a particular "
"database, you can define a :ref:`database router<topics-db-multi-db-"
"routing>` that implements a policy constraining the availability of "
"particular models."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:96
msgid ""
"If, as in the second example above, you've left the ``default`` database "
"empty, you must provide a database name each time you run "
":djadmin:`migrate`. Omitting the database name would raise an error. For the"
" second example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:104
msgid "Using other management commands"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:106
msgid ""
"Most other ``django-admin`` commands that interact with the database operate"
" in the same way as :djadmin:`migrate` -- they only ever operate on one "
"database at a time, using ``--database`` to control the database used."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:110
msgid ""
"An exception to this rule is the :djadmin:`makemigrations` command. It "
"validates the migration history in the databases to catch problems with the "
"existing migration files (which could be caused by editing them) before "
"creating new migrations. By default, it checks only the ``default`` "
"database, but it consults the :meth:`allow_migrate` method of :ref:`routers "
"<topics-db-multi-db-routing>` if any are installed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:120
msgid "Automatic database routing"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:122
msgid ""
"The easiest way to use multiple databases is to set up a database routing "
"scheme. The default routing scheme ensures that objects remain 'sticky' to "
"their original database (i.e., an object retrieved from the ``foo`` database"
" will be saved on the same database). The default routing scheme ensures "
"that if a database isn't specified, all queries fall back to the ``default``"
" database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:129
msgid ""
"You don't have to do anything to activate the default routing scheme -- it "
"is provided 'out of the box' on every Django project. However, if you want "
"to implement more interesting database allocation behaviors, you can define "
"and install your own database routers."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:135
msgid "Database routers"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:137
msgid "A database Router is a class that provides up to four methods:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:141
msgid ""
"Suggest the database that should be used for read operations for objects of "
"type ``model``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:144
#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:156
msgid ""
"If a database operation is able to provide any additional information that "
"might assist in selecting a database, it will be provided in the ``hints`` "
"dictionary. Details on valid hints are provided :ref:`below <topics-db-"
"multi-db-hints>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:149
#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:161
msgid "Returns ``None`` if there is no suggestion."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:153
msgid ""
"Suggest the database that should be used for writes of objects of type "
"Model."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:165
msgid ""
"Return ``True`` if a relation between ``obj1`` and ``obj2`` should be "
"allowed, ``False`` if the relation should be prevented, or ``None`` if the "
"router has no opinion. This is purely a validation operation, used by "
"foreign key and many to many operations to determine if a relation should be"
" allowed between two objects."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:171
msgid ""
"If no router has an opinion (i.e. all routers return ``None``), only "
"relations within the same database are allowed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:176
msgid ""
"Determine if the migration operation is allowed to run on the database with "
"alias ``db``. Return ``True`` if the operation should run, ``False`` if it "
"shouldn't run, or ``None`` if the router has no opinion."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:180
msgid ""
"The ``app_label`` positional argument is the label of the application being "
"migrated."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:183
msgid ""
"``model_name`` is set by most migration operations to the value of "
"``model._meta.model_name`` (the lowercased version of the model "
"``__name__``) of the model being migrated. Its value is ``None`` for the "
":class:`~django.db.migrations.operations.RunPython` and "
":class:`~django.db.migrations.operations.RunSQL` operations unless they "
"provide it using hints."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:190
msgid ""
"``hints`` are used by certain operations to communicate additional "
"information to the router."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:193
msgid ""
"When ``model_name`` is set, ``hints`` normally contains the model class "
"under the key ``'model'``. Note that it may be a :ref:`historical model "
"<historical-models>`, and thus not have any custom attributes, methods, or "
"managers. You should only rely on ``_meta``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:198
msgid ""
"This method can also be used to determine the availability of a model on a "
"given database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:201
msgid ""
":djadmin:`makemigrations` always creates migrations for model changes, but "
"if ``allow_migrate()`` returns ``False``, any migration operations for the "
"``model_name`` will be silently skipped when running :djadmin:`migrate` on "
"the ``db``. Changing the behavior of ``allow_migrate()`` for models that "
"already have migrations may result in broken foreign keys, extra tables, or "
"missing tables. When :djadmin:`makemigrations` verifies the migration "
"history, it skips databases where no app is allowed to migrate."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:209
msgid ""
"A router doesn't have to provide *all* these methods -- it may omit one or "
"more of them. If one of the methods is omitted, Django will skip that router"
" when performing the relevant check."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:216
msgid "Hints"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:218
msgid ""
"The hints received by the database router can be used to decide which "
"database should receive a given request."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:221
msgid ""
"At present, the only hint that will be provided is ``instance``, an object "
"instance that is related to the read or write operation that is underway. "
"This might be the instance that is being saved, or it might be an instance "
"that is being added in a many-to-many relation. In some cases, no instance "
"hint will be provided at all. The router checks for the existence of an "
"instance hint, and determine if that hint should be used to alter routing "
"behavior."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:230
msgid "Using routers"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:232
msgid ""
"Database routers are installed using the :setting:`DATABASE_ROUTERS` "
"setting. This setting defines a list of class names, each specifying a "
"router that should be used by the master router (``django.db.router``)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:237
msgid ""
"The master router is used by Django's database operations to allocate "
"database usage. Whenever a query needs to know which database to use, it "
"calls the master router, providing a model and a hint (if available). Django"
" then tries each router in turn until a database suggestion can be found. If"
" no suggestion can be found, it tries the current ``_state.db`` of the hint "
"instance. If a hint instance wasn't provided, or the instance doesn't "
"currently have database state, the master router will allocate the "
"``default`` database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:247
#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:47
msgid "An example"
msgstr "一个例子"

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:249
msgid "Example purposes only!"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:251
msgid ""
"This example is intended as a demonstration of how the router infrastructure"
" can be used to alter database usage. It intentionally ignores some complex "
"issues in order to demonstrate how routers are used."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:256
msgid ""
"This example won't work if any of the models in ``myapp`` contain "
"relationships to models outside of the ``other`` database. :ref:`Cross-"
"database relationships <no_cross_database_relations>` introduce referential "
"integrity problems that Django can't currently handle."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:262
msgid ""
"The primary/replica (referred to as master/slave by some databases) "
"configuration described is also flawed -- it doesn't provide any solution "
"for handling replication lag (i.e., query inconsistencies introduced because"
" of the time taken for a write to propagate to the replicas). It also "
"doesn't consider the interaction of transactions with the database "
"utilization strategy."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:269
msgid ""
"So - what does this mean in practice? Let's consider another sample "
"configuration. This one will have several databases: one for the ``auth`` "
"application, and all other apps using a primary/replica setup with two read "
"replicas. Here are the settings specifying these databases::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:303
msgid ""
"Now we'll need to handle routing. First we want a router that knows to send "
"queries for the ``auth`` app to ``auth_db``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:345
msgid ""
"And we also want a router that sends all other apps to the primary/replica "
"configuration, and randomly chooses a replica to read from::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:380
msgid ""
"Finally, in the settings file, we add the following (substituting "
"``path.to.`` with the actual Python path to the module(s) where the routers "
"are defined)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:386
msgid ""
"The order in which routers are processed is significant. Routers will be "
"queried in the order they are listed in the :setting:`DATABASE_ROUTERS` "
"setting. In this example, the ``AuthRouter`` is processed before the "
"``PrimaryReplicaRouter``, and as a result, decisions concerning the models "
"in ``auth`` are processed before any other decision is made. If the "
":setting:`DATABASE_ROUTERS` setting listed the two routers in the other "
"order, ``PrimaryReplicaRouter.allow_migrate()`` would be processed first. "
"The catch-all nature of the PrimaryReplicaRouter implementation would mean "
"that all models would be available on all databases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:397
msgid "With this setup installed, lets run some Django code::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:422
msgid ""
"This example defined a router to handle interaction with models from the "
"``auth`` app, and other routers to handle interaction with all other apps. "
"If you left your ``default`` database empty and don't want to define a "
"catch-all database router to handle all apps not otherwise specified, your "
"routers must handle the names of all apps in :setting:`INSTALLED_APPS` "
"before you migrate. See :ref:`contrib_app_multiple_databases` for "
"information about contrib apps that must be together in one database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:431
msgid "Manually selecting a database"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:433
msgid ""
"Django also provides an API that allows you to maintain complete control "
"over database usage in your code. A manually specified database allocation "
"will take priority over a database allocated by a router."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:438
msgid "Manually selecting a database for a ``QuerySet``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:440
msgid ""
"You can select the database for a ``QuerySet`` at any point in the "
"``QuerySet`` \"chain.\" Just call ``using()`` on the ``QuerySet`` to get "
"another ``QuerySet`` that uses the specified database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:444
msgid ""
"``using()`` takes a single argument: the alias of the database on which you "
"want to run the query. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:457
msgid "Selecting a database for ``save()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:459
msgid ""
"Use the ``using`` keyword to ``Model.save()`` to specify to which database "
"the data should be saved."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:462
msgid ""
"For example, to save an object to the ``legacy_users`` database, you'd use "
"this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:467
msgid ""
"If you don't specify ``using``, the ``save()`` method will save into the "
"default database allocated by the routers."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:471
msgid "Moving an object from one database to another"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:473
msgid ""
"If you've saved an instance to one database, it might be tempting to use "
"``save(using=...)`` as a way to migrate the instance to a new database. "
"However, if you don't take appropriate steps, this could have some "
"unexpected consequences."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:478
msgid "Consider the following example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:484
msgid ""
"In statement 1, a new ``Person`` object is saved to the ``first`` database. "
"At this time, ``p`` doesn't have a primary key, so Django issues an SQL "
"``INSERT`` statement. This creates a primary key, and Django assigns that "
"primary key to ``p``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:489
msgid ""
"When the save occurs in statement 2, ``p`` already has a primary key value, "
"and Django will attempt to use that primary key on the new database. If the "
"primary key value isn't in use in the ``second`` database, then you won't "
"have any problems -- the object will be copied to the new database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:495
msgid ""
"However, if the primary key of ``p`` is already in use on the ``second`` "
"database, the existing object in the ``second`` database will be overridden "
"when ``p`` is saved."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:499
msgid ""
"You can avoid this in two ways. First, you can clear the primary key of the "
"instance. If an object has no primary key, Django will treat it as a new "
"object, avoiding any loss of data on the ``second`` database::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:509
msgid ""
"The second option is to use the ``force_insert`` option to ``save()`` to "
"ensure that Django does an SQL ``INSERT``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:516
msgid ""
"This will ensure that the person named ``Fred`` will have the same primary "
"key on both databases. If that primary key is already in use when you try to"
" save onto the ``second`` database, an error will be raised."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:522
msgid "Selecting a database to delete from"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:524
msgid ""
"By default, a call to delete an existing object will be executed on the same"
" database that was used to retrieve the object in the first place::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:531
msgid ""
"To specify the database from which a model will be deleted, pass a ``using``"
" keyword argument to the ``Model.delete()`` method. This argument works just"
" like the ``using`` keyword argument to ``save()``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:535
msgid ""
"For example, if you're migrating a user from the ``legacy_users`` database "
"to the ``new_users`` database, you might use these commands::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:542
msgid "Using managers with multiple databases"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:544
msgid ""
"Use the ``db_manager()`` method on managers to give managers access to a "
"non-default database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:547
msgid ""
"For example, say you have a custom manager method that touches the database "
"-- ``User.objects.create_user()``. Because ``create_user()`` is a manager "
"method, not a ``QuerySet`` method, you can't do "
"``User.objects.using('new_users').create_user()``. (The ``create_user()`` "
"method is only available on ``User.objects``, the manager, not on "
"``QuerySet`` objects derived from the manager.) The solution is to use "
"``db_manager()``, like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:557
msgid ""
"``db_manager()`` returns a copy of the manager bound to the database you "
"specify."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:560
msgid "Using ``get_queryset()`` with multiple databases"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:562
msgid ""
"If you're overriding ``get_queryset()`` on your manager, be sure to either "
"call the method on the parent (using ``super()``) or do the appropriate "
"handling of the ``_db`` attribute on the manager (a string containing the "
"name of the database to use)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:567
msgid ""
"For example, if you want to return a custom ``QuerySet`` class from the "
"``get_queryset`` method, you could do this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:578
msgid "Exposing multiple databases in Django's admin interface"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:580
msgid ""
"Django's admin doesn't have any explicit support for multiple databases. If "
"you want to provide an admin interface for a model on a database other than "
"that specified by your router chain, you'll need to write custom "
":class:`~django.contrib.admin.ModelAdmin` classes that will direct the admin"
" to use a specific database for content."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:586
msgid ""
"``ModelAdmin`` objects have five methods that require customization for "
"multiple-database support::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:615
msgid ""
"The implementation provided here implements a multi-database strategy where "
"all objects of a given type are stored on a specific database (e.g., all "
"``User`` objects are in the ``other`` database). If your usage of multiple "
"databases is more complex, your ``ModelAdmin`` will need to reflect that "
"strategy."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:621
msgid ""
":class:`~django.contrib.admin.InlineModelAdmin` objects can be handled in a "
"similar fashion. They require three customized methods::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:641
msgid ""
"Once you've written your model admin definitions, they can be registered "
"with any ``Admin`` instance::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:659
msgid ""
"This example sets up two admin sites. On the first site, the ``Author`` and "
"``Publisher`` objects are exposed; ``Publisher`` objects have a tabular "
"inline showing books published by that publisher. The second site exposes "
"just publishers, without the inlines."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:666
msgid "Using raw cursors with multiple databases"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:668
msgid ""
"If you are using more than one database you can use "
"``django.db.connections`` to obtain the connection (and cursor) for a "
"specific database. ``django.db.connections`` is a dictionary-like object "
"that allows you to retrieve a specific connection using its alias::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:679
msgid "Limitations of multiple databases"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:684
msgid "Cross-database relations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:686
msgid ""
"Django doesn't currently provide any support for foreign key or many-to-many"
" relationships spanning multiple databases. If you have used a router to "
"partition models to different databases, any foreign key and many-to-many "
"relationships defined by those models must be internal to a single database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:692
msgid ""
"This is because of referential integrity. In order to maintain a "
"relationship between two objects, Django needs to know that the primary key "
"of the related object is valid. If the primary key is stored on a separate "
"database, it's not possible to easily evaluate the validity of a primary "
"key."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:698
msgid ""
"If you're using Postgres, Oracle, or MySQL with InnoDB, this is enforced at "
"the database integrity level -- database level key constraints prevent the "
"creation of relations that can't be validated."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:702
msgid ""
"However, if you're using SQLite or MySQL with MyISAM tables, there is no "
"enforced referential integrity; as a result, you may be able to 'fake' cross"
" database foreign keys. However, this configuration is not officially "
"supported by Django."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:710
msgid "Behavior of contrib apps"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:712
msgid ""
"Several contrib apps include models, and some apps depend on others. Since "
"cross-database relationships are impossible, this creates some restrictions "
"on how you can split these models across databases:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:716
msgid ""
"each one of ``contenttypes.ContentType``, ``sessions.Session`` and "
"``sites.Site`` can be stored in any database, given a suitable router."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:718
msgid ""
"``auth`` models — ``User``, ``Group`` and ``Permission`` — are linked "
"together and linked to ``ContentType``, so they must be stored in the same "
"database as ``ContentType``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:721
msgid ""
"``admin`` depends on ``auth``, so its models must be in the same database as"
" ``auth``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:723
msgid ""
"``flatpages`` and ``redirects`` depend on ``sites``, so their models must be"
" in the same database as ``sites``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:726
msgid ""
"In addition, some objects are automatically created just after "
":djadmin:`migrate` creates a table to hold them in a database:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:729
msgid "a default ``Site``,"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:730
msgid ""
"a ``ContentType`` for each model (including those not stored in that "
"database),"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:732
msgid ""
"the ``Permission``\\s for each model (including those not stored in that "
"database)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:735
msgid ""
"For common setups with multiple databases, it isn't useful to have these "
"objects in more than one database. Common setups include primary/replica and"
" connecting to external databases. Therefore, it's recommended to write a "
":ref:`database router<topics-db-multi-db-routing>` that allows synchronizing"
" these three models to only one database. Use the same approach for contrib "
"and third-party apps that don't need their tables in multiple databases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/multi-db.txt:744
msgid ""
"If you're synchronizing content types to more than one database, be aware "
"that their primary keys may not match across databases. This may result in "
"data corruption or data loss."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:3
msgid "Database access optimization"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:5
msgid ""
"Django's database layer provides various ways to help developers get the "
"most out of their databases. This document gathers together links to the "
"relevant documentation, and adds various tips, organized under a number of "
"headings that outline the steps to take when attempting to optimize your "
"database usage."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:11
msgid "Profile first"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:13
msgid ""
"As general programming practice, this goes without saying. Find out "
":ref:`what queries you are doing and what they are costing you <faq-see-raw-"
"sql-queries>`. Use :meth:`.QuerySet.explain` to understand how specific "
"``QuerySet``\\s are executed by your database. You may also want to use an "
"external project like django-debug-toolbar_, or a tool that monitors your "
"database directly."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:19
msgid ""
"Remember that you may be optimizing for speed or memory or both, depending "
"on your requirements. Sometimes optimizing for one will be detrimental to "
"the other, but sometimes they will help each other. Also, work that is done "
"by the database process might not have the same cost (to you) as the same "
"amount of work done in your Python process. It is up to you to decide what "
"your priorities are, where the balance must lie, and profile all of these as"
" required since this will depend on your application and server."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:27
msgid ""
"With everything that follows, remember to profile after every change to "
"ensure that the change is a benefit, and a big enough benefit given the "
"decrease in readability of your code. **All** of the suggestions below come "
"with the caveat that in your circumstances the general principle might not "
"apply, or might even be reversed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:36
msgid "Use standard DB optimization techniques"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:38
msgid "...including:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:40
msgid ""
"Indexes_. This is a number one priority, *after* you have determined from "
"profiling what indexes should be added. Use :attr:`Field.db_index "
"<django.db.models.Field.db_index>` or :attr:`Meta.index_together "
"<django.db.models.Options.index_together>` to add these from Django. "
"Consider adding indexes to fields that you frequently query using "
":meth:`~django.db.models.query.QuerySet.filter()`, "
":meth:`~django.db.models.query.QuerySet.exclude()`, "
":meth:`~django.db.models.query.QuerySet.order_by()`, etc. as indexes may "
"help to speed up lookups. Note that determining the best indexes is a "
"complex database-dependent topic that will depend on your particular "
"application. The overhead of maintaining an index may outweigh any gains in "
"query speed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:54
msgid "Appropriate use of field types."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:56
msgid ""
"We will assume you have done the obvious things above. The rest of this "
"document focuses on how to use Django in such a way that you are not doing "
"unnecessary work. This document also does not address other optimization "
"techniques that apply to all expensive operations, such as :doc:`general "
"purpose caching </topics/cache>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:63
msgid "Understand ``QuerySet``\\s"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:65
msgid ""
"Understanding :doc:`QuerySets </ref/models/querysets>` is vital to getting "
"good performance with simple code. In particular:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:69
msgid "Understand ``QuerySet`` evaluation"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:71
msgid "To avoid performance problems, it is important to understand:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:73
msgid "that :ref:`QuerySets are lazy <querysets-are-lazy>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:75
msgid "when :ref:`they are evaluated <when-querysets-are-evaluated>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:77
msgid "how :ref:`the data is held in memory <caching-and-querysets>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:80
msgid "Understand cached attributes"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:82
msgid ""
"As well as caching of the whole ``QuerySet``, there is caching of the result"
" of attributes on ORM objects. In general, attributes that are not callable "
"will be cached. For example, assuming the :ref:`example Weblog models "
"<queryset-model-example>`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:91
msgid "But in general, callable attributes cause DB lookups every time::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:97
msgid ""
"Be careful when reading template code - the template system does not allow "
"use of parentheses, but will call callables automatically, hiding the above "
"distinction."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:101
msgid ""
"Be careful with your own custom properties - it is up to you to implement "
"caching when required, for example using the "
":class:`~django.utils.functional.cached_property` decorator."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:106
msgid "Use the ``with`` template tag"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:108
msgid ""
"To make use of the caching behavior of ``QuerySet``, you may need to use the"
" :ttag:`with` template tag."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:112
msgid "Use ``iterator()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:114
msgid ""
"When you have a lot of objects, the caching behavior of the ``QuerySet`` can"
" cause a large amount of memory to be used. In this case, "
":meth:`~django.db.models.query.QuerySet.iterator()` may help."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:119
msgid "Use ``explain()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:121
msgid ""
":meth:`.QuerySet.explain` gives you detailed information about how the "
"database executes a query, including indexes and joins that are used. These "
"details may help you find queries that could be rewritten more efficiently, "
"or identify indexes that could be added to improve performance."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:127
msgid "Do database work in the database rather than in Python"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:129
msgid "For instance:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:131
msgid ""
"At the most basic level, use :ref:`filter and exclude <queryset-api>` to do "
"filtering in the database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:134
msgid ""
"Use :class:`F expressions <django.db.models.F>` to filter based on other "
"fields within the same model."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:137
msgid ""
"Use :doc:`annotate to do aggregation in the database "
"</topics/db/aggregation>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:140
msgid "If these aren't enough to generate the SQL you need:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:143
msgid "Use ``RawSQL``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:145
msgid ""
"A less portable but more powerful method is the "
":class:`~django.db.models.expressions.RawSQL` expression, which allows some "
"SQL to be explicitly added to the query. If that still isn't powerful "
"enough:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:150
msgid "Use raw SQL"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:152
msgid ""
"Write your own :doc:`custom SQL to retrieve data or populate models "
"</topics/db/sql>`. Use ``django.db.connection.queries`` to find out what "
"Django is writing for you and start from there."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:157
msgid "Retrieve individual objects using a unique, indexed column"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:159
msgid ""
"There are two reasons to use a column with "
":attr:`~django.db.models.Field.unique` or "
":attr:`~django.db.models.Field.db_index` when using "
":meth:`~django.db.models.query.QuerySet.get` to retrieve individual objects."
" First, the query will be quicker because of the underlying database index. "
"Also, the query could run much slower if multiple objects match the lookup; "
"having a unique constraint on the column guarantees this will never happen."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:167
msgid "So using the :ref:`example Weblog models <queryset-model-example>`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:171
msgid "will be quicker than:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:175
msgid ""
"because ``id`` is indexed by the database and is guaranteed to be unique."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:177
msgid "Doing the following is potentially quite slow:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:181
msgid ""
"First of all, ``headline`` is not indexed, which will make the underlying "
"database fetch slower."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:184
msgid ""
"Second, the lookup doesn't guarantee that only one object will be returned. "
"If the query matches more than one object, it will retrieve and transfer all"
" of them from the database. This penalty could be substantial if hundreds or"
" thousands of records are returned. The penalty will be compounded if the "
"database lives on a separate server, where network overhead and latency also"
" play a factor."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:192
msgid "Retrieve everything at once if you know you will need it"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:194
msgid ""
"Hitting the database multiple times for different parts of a single 'set' of"
" data that you will need all parts of is, in general, less efficient than "
"retrieving it all in one query. This is particularly important if you have a"
" query that is executed in a loop, and could therefore end up doing many "
"database queries, when only one was needed. So:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:201
msgid "Use ``QuerySet.select_related()`` and ``prefetch_related()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:203
msgid ""
"Understand :meth:`~django.db.models.query.QuerySet.select_related` and "
":meth:`~django.db.models.query.QuerySet.prefetch_related` thoroughly, and "
"use them:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:207
msgid ""
"in :doc:`managers and default managers </topics/db/managers>` where "
"appropriate. Be aware when your manager is and is not used; sometimes this "
"is tricky so don't make assumptions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:211
msgid ""
"in view code or other layers, possibly making use of "
":func:`~django.db.models.prefetch_related_objects` where needed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:215
msgid "Don't retrieve things you don't need"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:218
msgid "Use ``QuerySet.values()`` and ``values_list()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:220
msgid ""
"When you just want a ``dict`` or ``list`` of values, and don't need ORM "
"model objects, make appropriate usage of "
":meth:`~django.db.models.query.QuerySet.values()`. These can be useful for "
"replacing model objects in template code - as long as the dicts you supply "
"have the same attributes as those used in the template, you are fine."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:228
msgid "Use ``QuerySet.defer()`` and ``only()``"
msgstr "使用 ``QuerySet.defer()`` 和 ``only()``"

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:230
msgid ""
"Use :meth:`~django.db.models.query.QuerySet.defer()` and "
":meth:`~django.db.models.query.QuerySet.only()` if there are database "
"columns you know that you won't need (or won't need in most cases) to avoid "
"loading them. Note that if you *do* use them, the ORM will have to go and "
"get them in a separate query, making this a pessimization if you use it "
"inappropriately."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:236
msgid ""
"Also, be aware that there is some (small extra) overhead incurred inside "
"Django when constructing a model with deferred fields. Don't be too "
"aggressive in deferring fields without profiling as the database has to read"
" most of the non-text, non-VARCHAR data from the disk for a single row in "
"the results, even if it ends up only using a few columns. The ``defer()`` "
"and ``only()`` methods are most useful when you can avoid loading a lot of "
"text data or for fields that might take a lot of processing to convert back "
"to Python. As always, profile first, then optimize."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:246
msgid "Use ``QuerySet.count()``"
msgstr "使用 ``QuerySet.exists()``"

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:248
msgid "...if you only want the count, rather than doing ``len(queryset)``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:251
msgid "Use ``QuerySet.exists()``"
msgstr "使用 ``QuerySet.exists()``"

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:253
msgid ""
"...if you only want to find out if at least one result exists, rather than "
"``if queryset``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:256
msgid "But:"
msgstr "但是："

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:261
msgid "Don't overuse ``count()`` and ``exists()``"
msgstr "请不要过度使用 ``count()`` 和 ``exists()``"

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:263
msgid ""
"If you are going to need other data from the QuerySet, just evaluate it."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:265
msgid ""
"For example, assuming an Email model that has a ``body`` attribute and a "
"many-to-many relation to User, the following template code is optimal:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:284
msgid "It is optimal because:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:286
msgid ""
"Since QuerySets are lazy, this does no database queries if 'display_inbox' "
"is False."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:289
msgid ""
"Use of :ttag:`with` means that we store ``user.emails.all`` in a variable "
"for later use, allowing its cache to be re-used."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:292
msgid ""
"The line ``{% if emails %}`` causes ``QuerySet.__bool__()`` to be called, "
"which causes the ``user.emails.all()`` query to be run on the database, and "
"at the least the first line to be turned into an ORM object. If there aren't"
" any results, it will return False, otherwise True."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:297
msgid ""
"The use of ``{{ emails|length }}`` calls ``QuerySet.__len__()``, filling out"
" the rest of the cache without doing another query."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:300
msgid "The :ttag:`for` loop iterates over the already filled cache."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:302
msgid ""
"In total, this code does either one or zero database queries. The only "
"deliberate optimization performed is the use of the :ttag:`with` tag. Using "
"``QuerySet.exists()`` or ``QuerySet.count()`` at any point would cause "
"additional queries."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:308
msgid "Use ``QuerySet.update()`` and ``delete()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:310
msgid ""
"Rather than retrieve a load of objects, set some values, and save them "
"individual, use a bulk SQL UPDATE statement, via :ref:`QuerySet.update() "
"<topics-db-queries-update>`. Similarly, do :ref:`bulk deletes <topics-db-"
"queries-delete>` where possible."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:315
msgid ""
"Note, however, that these bulk update methods cannot call the ``save()`` or "
"``delete()`` methods of individual instances, which means that any custom "
"behavior you have added for these methods will not be executed, including "
"anything driven from the normal database object :doc:`signals "
"</ref/signals>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:321
msgid "Use foreign key values directly"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:323
msgid ""
"If you only need a foreign key value, use the foreign key value that is "
"already on the object you've got, rather than getting the whole related "
"object and taking its primary key. i.e. do::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:329
msgid "instead of::"
msgstr "替换成："

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:334
msgid "Don't order results if you don't care"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:336
msgid ""
"Ordering is not free; each field to order by is an operation the database "
"must perform. If a model has a default ordering (:attr:`Meta.ordering "
"<django.db.models.Options.ordering>`) and you don't need it, remove it on a "
"``QuerySet`` by calling :meth:`~django.db.models.query.QuerySet.order_by()` "
"with no parameters."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:342
msgid ""
"Adding an index to your database may help to improve ordering performance."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:345
msgid "Insert in bulk"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:347
msgid ""
"When creating objects, where possible, use the "
":meth:`~django.db.models.query.QuerySet.bulk_create()` method to reduce the "
"number of SQL queries. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:356
#: ../../../../sources/2.2/docs/topics/db/optimization.txt:370
msgid "...is preferable to::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:361
msgid ""
"Note that there are a number of :meth:`caveats to this method "
"<django.db.models.query.QuerySet.bulk_create>`, so make sure it's "
"appropriate for your use case."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:365
msgid ""
"This also applies to :class:`ManyToManyFields "
"<django.db.models.ManyToManyField>`, so doing::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/optimization.txt:375
msgid "...where ``Bands`` and ``Artists`` have a many-to-many relationship."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:3
msgid "Making queries"
msgstr "进行查询"

#: ../../../../sources/2.2/docs/topics/db/queries.txt:7
msgid ""
"Once you've created your :doc:`data models </topics/db/models>`, Django "
"automatically gives you a database-abstraction API that lets you create, "
"retrieve, update and delete objects. This document explains how to use this "
"API. Refer to the :doc:`data model reference </ref/models/index>` for full "
"details of all the various model lookup options."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:13
msgid ""
"Throughout this guide (and in the reference), we'll refer to the following "
"models, which comprise a Weblog application:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:51
msgid "Creating objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:53
msgid ""
"To represent database-table data in Python objects, Django uses an intuitive"
" system: A model class represents a database table, and an instance of that "
"class represents a particular record in the database table."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:57
msgid ""
"To create an object, instantiate it using keyword arguments to the model "
"class, then call :meth:`~django.db.models.Model.save` to save it to the "
"database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:60
msgid ""
"Assuming models live in a file ``mysite/blog/models.py``, here's an "
"example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:66
msgid ""
"This performs an ``INSERT`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call "
":meth:`~django.db.models.Model.save`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:69
msgid "The :meth:`~django.db.models.Model.save` method has no return value."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:73
msgid ""
":meth:`~django.db.models.Model.save` takes a number of advanced options not "
"described here. See the documentation for "
":meth:`~django.db.models.Model.save` for complete details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:77
msgid ""
"To create and save an object in a single step, use the "
":meth:`~django.db.models.query.QuerySet.create()` method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:81
msgid "Saving changes to objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:83
msgid ""
"To save changes to an object that's already in the database, use "
":meth:`~django.db.models.Model.save`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:86
msgid ""
"Given a ``Blog`` instance ``b5`` that has already been saved to the "
"database, this example changes its name and updates its record in the "
"database::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:92
msgid ""
"This performs an ``UPDATE`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call "
":meth:`~django.db.models.Model.save`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:96
msgid "Saving ``ForeignKey`` and ``ManyToManyField`` fields"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:98
msgid ""
"Updating a :class:`~django.db.models.ForeignKey` field works exactly the "
"same way as saving a normal field -- simply assign an object of the right "
"type to the field in question. This example updates the ``blog`` attribute "
"of an ``Entry`` instance ``entry``, assuming appropriate instances of "
"``Entry`` and ``Blog`` are already saved to the database (so we can retrieve"
" them below)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:110
msgid ""
"Updating a :class:`~django.db.models.ManyToManyField` works a little "
"differently -- use the "
":meth:`~django.db.models.fields.related.RelatedManager.add` method on the "
"field to add a record to the relation. This example adds the ``Author`` "
"instance ``joe`` to the ``entry`` object::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:120
msgid ""
"To add multiple records to a :class:`~django.db.models.ManyToManyField` in "
"one go, include multiple arguments in the call to "
":meth:`~django.db.models.fields.related.RelatedManager.add`, like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:130
msgid ""
"Django will complain if you try to assign or add an object of the wrong "
"type."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:135
msgid "Retrieving objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:137
msgid ""
"To retrieve objects from your database, construct a "
":class:`~django.db.models.query.QuerySet` via a "
":class:`~django.db.models.Manager` on your model class."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:141
msgid ""
"A :class:`~django.db.models.query.QuerySet` represents a collection of "
"objects from your database. It can have zero, one or many *filters*. Filters"
" narrow down the query results based on the given parameters. In SQL terms, "
"a :class:`~django.db.models.query.QuerySet` equates to a ``SELECT`` "
"statement, and a filter is a limiting clause such as ``WHERE`` or ``LIMIT``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:147
msgid ""
"You get a :class:`~django.db.models.query.QuerySet` by using your model's "
":class:`~django.db.models.Manager`. Each model has at least one "
":class:`~django.db.models.Manager`, and it's called "
":attr:`~django.db.models.Model.objects` by default. Access it directly via "
"the model class, like so::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:163
msgid ""
"``Managers`` are accessible only via model classes, rather than from model "
"instances, to enforce a separation between \"table-level\" operations and "
"\"record-level\" operations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:167
msgid ""
"The :class:`~django.db.models.Manager` is the main source of ``QuerySets`` "
"for a model. For example, ``Blog.objects.all()`` returns a "
":class:`~django.db.models.query.QuerySet` that contains all ``Blog`` objects"
" in the database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:173
msgid "Retrieving all objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:175
msgid ""
"The simplest way to retrieve objects from a table is to get all of them. To "
"do this, use the :meth:`~django.db.models.query.QuerySet.all` method on a "
":class:`~django.db.models.Manager`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:181
msgid ""
"The :meth:`~django.db.models.query.QuerySet.all` method returns a "
":class:`~django.db.models.query.QuerySet` of all the objects in the "
"database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:185
msgid "Retrieving specific objects with filters"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:187
msgid ""
"The :class:`~django.db.models.query.QuerySet` returned by "
":meth:`~django.db.models.query.QuerySet.all` describes all objects in the "
"database table. Usually, though, you'll need to select only a subset of the "
"complete set of objects."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:192
msgid ""
"To create such a subset, you refine the initial "
":class:`~django.db.models.query.QuerySet`, adding filter conditions. The two"
" most common ways to refine a :class:`~django.db.models.query.QuerySet` are:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:198
msgid "``filter(**kwargs)``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:197
msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that match the given lookup parameters."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:202
msgid "``exclude(**kwargs)``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:201
msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that do *not* match the given lookup parameters."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:204
msgid ""
"The lookup parameters (``**kwargs`` in the above function definitions) "
"should be in the format described in `Field lookups`_ below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:207
msgid ""
"For example, to get a :class:`~django.db.models.query.QuerySet` of blog "
"entries from the year 2006, use "
":meth:`~django.db.models.query.QuerySet.filter` like so::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:213
msgid "With the default manager class, it is the same as::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:220
msgid "Chaining filters"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:222
msgid ""
"The result of refining a :class:`~django.db.models.query.QuerySet` is itself"
" a :class:`~django.db.models.query.QuerySet`, so it's possible to chain "
"refinements together. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:234
msgid ""
"This takes the initial :class:`~django.db.models.query.QuerySet` of all "
"entries in the database, adds a filter, then an exclusion, then another "
"filter. The final result is a :class:`~django.db.models.query.QuerySet` "
"containing all entries with a headline that starts with \"What\", that were "
"published between January 30, 2005, and the current day."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:243
msgid "Filtered ``QuerySet``\\s are unique"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:245
msgid ""
"Each time you refine a :class:`~django.db.models.query.QuerySet`, you get a "
"brand-new :class:`~django.db.models.query.QuerySet` that is in no way bound "
"to the previous :class:`~django.db.models.query.QuerySet`. Each refinement "
"creates a separate and distinct :class:`~django.db.models.query.QuerySet` "
"that can be stored, used and reused."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:257
msgid ""
"These three ``QuerySets`` are separate. The first is a base "
":class:`~django.db.models.query.QuerySet` containing all entries that "
"contain a headline starting with \"What\". The second is a subset of the "
"first, with an additional criteria that excludes records whose ``pub_date`` "
"is today or in the future. The third is a subset of the first, with an "
"additional criteria that selects only the records whose ``pub_date`` is "
"today or in the future. The initial "
":class:`~django.db.models.query.QuerySet` (``q1``) is unaffected by the "
"refinement process."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:269
msgid "``QuerySet``\\s are lazy"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:271
msgid ""
"``QuerySets`` are lazy -- the act of creating a "
":class:`~django.db.models.query.QuerySet` doesn't involve any database "
"activity. You can stack filters together all day long, and Django won't "
"actually run the query until the :class:`~django.db.models.query.QuerySet` "
"is *evaluated*. Take a look at this example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:282
msgid ""
"Though this looks like three database hits, in fact it hits the database "
"only once, at the last line (``print(q)``). In general, the results of a "
":class:`~django.db.models.query.QuerySet` aren't fetched from the database "
"until you \"ask\" for them. When you do, the "
":class:`~django.db.models.query.QuerySet` is *evaluated* by accessing the "
"database. For more details on exactly when evaluation takes place, see :ref"
":`when-querysets-are-evaluated`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:293
msgid "Retrieving a single object with ``get()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:295
msgid ""
":meth:`~django.db.models.query.QuerySet.filter` will always give you a "
":class:`~django.db.models.query.QuerySet`, even if only a single object "
"matches the query - in this case, it will be a "
":class:`~django.db.models.query.QuerySet` containing a single element."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:300
msgid ""
"If you know there is only one object that matches your query, you can use "
"the :meth:`~django.db.models.query.QuerySet.get` method on a "
":class:`~django.db.models.Manager` which returns the object directly::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:306
msgid ""
"You can use any query expression with "
":meth:`~django.db.models.query.QuerySet.get`, just like with "
":meth:`~django.db.models.query.QuerySet.filter` - again, see `Field "
"lookups`_ below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:311
msgid ""
"Note that there is a difference between using "
":meth:`~django.db.models.query.QuerySet.get`, and using "
":meth:`~django.db.models.query.QuerySet.filter` with a slice of ``[0]``. If "
"there are no results that match the query, "
":meth:`~django.db.models.query.QuerySet.get` will raise a ``DoesNotExist`` "
"exception. This exception is an attribute of the model class that the query "
"is being performed on - so in the code above, if there is no ``Entry`` "
"object with a primary key of 1, Django will raise ``Entry.DoesNotExist``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:320
msgid ""
"Similarly, Django will complain if more than one item matches the "
":meth:`~django.db.models.query.QuerySet.get` query. In this case, it will "
"raise :exc:`~django.core.exceptions.MultipleObjectsReturned`, which again is"
" an attribute of the model class itself."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:327
msgid "Other ``QuerySet`` methods"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:329
msgid ""
"Most of the time you'll use :meth:`~django.db.models.query.QuerySet.all`, "
":meth:`~django.db.models.query.QuerySet.get`, "
":meth:`~django.db.models.query.QuerySet.filter` and "
":meth:`~django.db.models.query.QuerySet.exclude` when you need to look up "
"objects from the database. However, that's far from all there is; see the "
":ref:`QuerySet API Reference <queryset-api>` for a complete list of all the "
"various :class:`~django.db.models.query.QuerySet` methods."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:340
msgid "Limiting ``QuerySet``\\s"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:342
msgid ""
"Use a subset of Python's array-slicing syntax to limit your "
":class:`~django.db.models.query.QuerySet` to a certain number of results. "
"This is the equivalent of SQL's ``LIMIT`` and ``OFFSET`` clauses."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:346
msgid "For example, this returns the first 5 objects (``LIMIT 5``)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:350
msgid "This returns the sixth through tenth objects (``OFFSET 5 LIMIT 5``)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:354
msgid "Negative indexing (i.e. ``Entry.objects.all()[-1]``) is not supported."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:356
msgid ""
"Generally, slicing a :class:`~django.db.models.query.QuerySet` returns a new"
" :class:`~django.db.models.query.QuerySet` -- it doesn't evaluate the query."
" An exception is if you use the \"step\" parameter of Python slice syntax. "
"For example, this would actually execute the query in order to return a list"
" of every *second* object of the first 10::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:364
msgid ""
"Further filtering or ordering of a sliced queryset is prohibited due to the "
"ambiguous nature of how that might work."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:367
msgid ""
"To retrieve a *single* object rather than a list (e.g. ``SELECT foo FROM bar"
" LIMIT 1``), use a simple index instead of a slice. For example, this "
"returns the first ``Entry`` in the database, after ordering entries "
"alphabetically by headline::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:374
msgid "This is roughly equivalent to::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:378
msgid ""
"Note, however, that the first of these will raise ``IndexError`` while the "
"second will raise ``DoesNotExist`` if no objects match the given criteria. "
"See :meth:`~django.db.models.query.QuerySet.get` for more details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:385
msgid "Field lookups"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:387
msgid ""
"Field lookups are how you specify the meat of an SQL ``WHERE`` clause. "
"They're specified as keyword arguments to the "
":class:`~django.db.models.query.QuerySet` methods "
":meth:`~django.db.models.query.QuerySet.filter`, "
":meth:`~django.db.models.query.QuerySet.exclude` and "
":meth:`~django.db.models.query.QuerySet.get`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:393
msgid ""
"Basic lookups keyword arguments take the form ``field__lookuptype=value``. "
"(That's a double-underscore). For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:398
msgid "translates (roughly) into the following SQL:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:404
msgid "How this is possible"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:406
msgid ""
"Python has the ability to define functions that accept arbitrary name-value "
"arguments whose names and values are evaluated at runtime. For more "
"information, see :ref:`tut-keywordargs` in the official Python tutorial."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:410
msgid ""
"The field specified in a lookup has to be the name of a model field. There's"
" one exception though, in case of a :class:`~django.db.models.ForeignKey` "
"you can specify the field name suffixed with ``_id``. In this case, the "
"value parameter is expected to contain the raw value of the foreign model's "
"primary key. For example:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:418
msgid ""
"If you pass an invalid keyword argument, a lookup function will raise "
"``TypeError``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:421
msgid ""
"The database API supports about two dozen lookup types; a complete reference"
" can be found in the :ref:`field lookup reference <field-lookups>`. To give "
"you a taste of what's available, here's some of the more common lookups "
"you'll probably use:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:446
msgid ":lookup:`exact`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:427
msgid "An \"exact\" match. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:431
msgid "Would generate SQL along these lines:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:437
msgid ""
"If you don't provide a lookup type -- that is, if your keyword argument "
"doesn't contain a double underscore -- the lookup type is assumed to be "
"``exact``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:441
msgid "For example, the following two statements are equivalent::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:446
msgid ""
"This is for convenience, because ``exact`` lookups are the common case."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:454
msgid ":lookup:`iexact`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:449
msgid "A case-insensitive match. So, the query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:453
msgid ""
"Would match a ``Blog`` titled ``\"Beatles Blog\"``, ``\"beatles blog\"``, or"
" even ``\"BeAtlES blOG\"``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:470
msgid ":lookup:`contains`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:457
msgid "Case-sensitive containment test. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:461
msgid "Roughly translates to this SQL:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:467
msgid ""
"Note this will match the headline ``'Today Lennon honored'`` but not "
"``'today lennon honored'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:470
msgid "There's also a case-insensitive version, :lookup:`icontains`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:475
msgid ":lookup:`startswith`, :lookup:`endswith`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:473
msgid ""
"Starts-with and ends-with search, respectively. There are also case-"
"insensitive versions called :lookup:`istartswith` and :lookup:`iendswith`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:477
msgid ""
"Again, this only scratches the surface. A complete reference can be found in"
" the :ref:`field lookup reference <field-lookups>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:483
msgid "Lookups that span relationships"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:485
msgid ""
"Django offers a powerful and intuitive way to \"follow\" relationships in "
"lookups, taking care of the SQL ``JOIN``\\s for you automatically, behind "
"the scenes. To span a relationship, just use the field name of related "
"fields across models, separated by double underscores, until you get to the "
"field you want."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:491
msgid ""
"This example retrieves all ``Entry`` objects with a ``Blog`` whose ``name`` "
"is ``'Beatles Blog'``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:496
msgid "This spanning can be as deep as you'd like."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:498
msgid ""
"It works backwards, too. To refer to a \"reverse\" relationship, just use "
"the lowercase name of the model."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:501
msgid ""
"This example retrieves all ``Blog`` objects which have at least one "
"``Entry`` whose ``headline`` contains ``'Lennon'``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:506
msgid ""
"If you are filtering across multiple relationships and one of the "
"intermediate models doesn't have a value that meets the filter condition, "
"Django will treat it as if there is an empty (all values are ``NULL``), but "
"valid, object there. All this means is that no error will be raised. For "
"example, in this filter::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:513
msgid ""
"(if there was a related ``Author`` model), if there was no ``author`` "
"associated with an entry, it would be treated as if there was also no "
"``name`` attached, rather than raising an error because of the missing "
"``author``. Usually this is exactly what you want to have happen. The only "
"case where it might be confusing is if you are using :lookup:`isnull`. "
"Thus::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:521
msgid ""
"will return ``Blog`` objects that have an empty ``name`` on the ``author`` "
"and also those which have an empty ``author`` on the ``entry``. If you don't"
" want those latter objects, you could write::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:528
msgid "Spanning multi-valued relationships"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:530
msgid ""
"When you are filtering an object based on a "
":class:`~django.db.models.ManyToManyField` or a reverse "
":class:`~django.db.models.ForeignKey`, there are two different sorts of "
"filter you may be interested in. Consider the ``Blog``/``Entry`` "
"relationship (``Blog`` to ``Entry`` is a one-to-many relation). We might be "
"interested in finding blogs that have an entry which has both *\"Lennon\"* "
"in the headline and was published in 2008. Or we might want to find blogs "
"that have an entry with *\"Lennon\"* in the headline as well as an entry "
"that was published in 2008. Since there are multiple entries associated with"
" a single ``Blog``, both of these queries are possible and make sense in "
"some situations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:541
msgid ""
"The same type of situation arises with a "
":class:`~django.db.models.ManyToManyField`. For example, if an ``Entry`` has"
" a :class:`~django.db.models.ManyToManyField` called ``tags``, we might want"
" to find entries linked to tags called *\"music\"* and *\"bands\"* or we "
"might want an entry that contains a tag with a name of *\"music\"* and a "
"status of *\"public\"*."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:547
msgid ""
"To handle both of these situations, Django has a consistent way of "
"processing :meth:`~django.db.models.query.QuerySet.filter` calls. Everything"
" inside a single :meth:`~django.db.models.query.QuerySet.filter` call is "
"applied simultaneously to filter out items matching all those requirements. "
"Successive :meth:`~django.db.models.query.QuerySet.filter` calls further "
"restrict the set of objects, but for multi-valued relations, they apply to "
"any object linked to the primary model, not necessarily those objects that "
"were selected by an earlier :meth:`~django.db.models.query.QuerySet.filter` "
"call."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:556
msgid ""
"That may sound a bit confusing, so hopefully an example will clarify. To "
"select all blogs that contain entries with both *\"Lennon\"* in the headline"
" and that were published in 2008 (the same entry satisfying both "
"conditions), we would write::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:563
msgid ""
"To select all blogs that contain an entry with *\"Lennon\"* in the headline "
"**as well as** an entry that was published in 2008, we would write::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:568
msgid ""
"Suppose there is only one blog that had both entries containing *\"Lennon\"*"
" and entries from 2008, but that none of the entries from 2008 contained "
"*\"Lennon\"*. The first query would not return any blogs, but the second "
"query would return that one blog."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:573
msgid ""
"In the second example, the first filter restricts the queryset to all those "
"blogs linked to entries with *\"Lennon\"* in the headline. The second filter"
" restricts the set of blogs *further* to those that are also linked to "
"entries that were published in 2008. The entries selected by the second "
"filter may or may not be the same as the entries in the first filter. We are"
" filtering the ``Blog`` items with each filter statement, not the ``Entry`` "
"items."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:582
msgid ""
"The behavior of :meth:`~django.db.models.query.QuerySet.filter` for queries "
"that span multi-value relationships, as described above, is not implemented "
"equivalently for :meth:`~django.db.models.query.QuerySet.exclude`. Instead, "
"the conditions in a single :meth:`~django.db.models.query.QuerySet.exclude` "
"call will not necessarily refer to the same item."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:588
msgid ""
"For example, the following query would exclude blogs that contain *both* "
"entries with *\"Lennon\"* in the headline *and* entries published in 2008::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:596
msgid ""
"However, unlike the behavior when using "
":meth:`~django.db.models.query.QuerySet.filter`, this will not limit blogs "
"based on entries that satisfy both conditions. In order to do that, i.e. to "
"select all blogs that do not contain entries published with *\"Lennon\"* "
"that were published in 2008, you need to make two queries::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:612
msgid "Filters can reference fields on the model"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:614
msgid ""
"In the examples given so far, we have constructed filters that compare the "
"value of a model field with a constant. But what if you want to compare the "
"value of a model field with another field on the same model?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:618
msgid ""
"Django provides :class:`F expressions <django.db.models.F>` to allow such "
"comparisons. Instances of ``F()`` act as a reference to a model field within"
" a query. These references can then be used in query filters to compare the "
"values of two different fields on the same model instance."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:623
msgid ""
"For example, to find a list of all blog entries that have had more comments "
"than pingbacks, we construct an ``F()`` object to reference the pingback "
"count, and use that ``F()`` object in the query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:630
msgid ""
"Django supports the use of addition, subtraction, multiplication, division, "
"modulo, and power arithmetic with ``F()`` objects, both with constants and "
"with other ``F()`` objects. To find all the blog entries with more than "
"*twice* as many comments as pingbacks, we modify the query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:637
msgid ""
"To find all the entries where the rating of the entry is less than the sum "
"of the pingback count and comment count, we would issue the query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:643
msgid ""
"You can also use the double underscore notation to span relationships in an "
"``F()`` object. An ``F()`` object with a double underscore will introduce "
"any joins needed to access the related object. For example, to retrieve all "
"the entries where the author's name is the same as the blog name, we could "
"issue the query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:651
msgid ""
"For date and date/time fields, you can add or subtract a "
":class:`~datetime.timedelta` object. The following would return all entries "
"that were modified more than 3 days after they were published::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:658
msgid ""
"The ``F()`` objects support bitwise operations by ``.bitand()``, "
"``.bitor()``, ``.bitrightshift()``, and ``.bitleftshift()``. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:664
msgid "The ``pk`` lookup shortcut"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:666
msgid ""
"For convenience, Django provides a ``pk`` lookup shortcut, which stands for "
"\"primary key\"."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:669
msgid ""
"In the example ``Blog`` model, the primary key is the ``id`` field, so these"
" three statements are equivalent::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:676
msgid ""
"The use of ``pk`` isn't limited to ``__exact`` queries -- any query term can"
" be combined with ``pk`` to perform a query on the primary key of a model::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:685
msgid ""
"``pk`` lookups also work across joins. For example, these three statements "
"are equivalent::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:693
msgid "Escaping percent signs and underscores in ``LIKE`` statements"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:695
msgid ""
"The field lookups that equate to ``LIKE`` SQL statements (``iexact``, "
"``contains``, ``icontains``, ``startswith``, ``istartswith``, ``endswith`` "
"and ``iendswith``) will automatically escape the two special characters used"
" in ``LIKE`` statements -- the percent sign and the underscore. (In a "
"``LIKE`` statement, the percent sign signifies a multiple-character wildcard"
" and the underscore signifies a single-character wildcard.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:702
msgid ""
"This means things should work intuitively, so the abstraction doesn't leak. "
"For example, to retrieve all the entries that contain a percent sign, just "
"use the percent sign as any other character::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:708
msgid ""
"Django takes care of the quoting for you; the resulting SQL will look "
"something like this:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:715
msgid ""
"Same goes for underscores. Both percentage signs and underscores are handled"
" for you transparently."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:721
msgid "Caching and ``QuerySet``\\s"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:723
msgid ""
"Each :class:`~django.db.models.query.QuerySet` contains a cache to minimize "
"database access. Understanding how it works will allow you to write the most"
" efficient code."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:727
msgid ""
"In a newly created :class:`~django.db.models.query.QuerySet`, the cache is "
"empty. The first time a :class:`~django.db.models.query.QuerySet` is "
"evaluated -- and, hence, a database query happens -- Django saves the query "
"results in the :class:`~django.db.models.query.QuerySet`’s cache and returns"
" the results that have been explicitly requested (e.g., the next element, if"
" the :class:`~django.db.models.query.QuerySet` is being iterated over). "
"Subsequent evaluations of the :class:`~django.db.models.query.QuerySet` "
"reuse the cached results."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:736
msgid ""
"Keep this caching behavior in mind, because it may bite you if you don't use"
" your :class:`~django.db.models.query.QuerySet`\\s correctly. For example, "
"the following will create two :class:`~django.db.models.query.QuerySet`\\s, "
"evaluate them, and throw them away::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:744
msgid ""
"That means the same database query will be executed twice, effectively "
"doubling your database load. Also, there's a possibility the two lists may "
"not include the same database records, because an ``Entry`` may have been "
"added or deleted in the split second between the two requests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:749
msgid ""
"To avoid this problem, simply save the "
":class:`~django.db.models.query.QuerySet` and reuse it::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:757
msgid "When ``QuerySet``\\s are not cached"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:759
msgid ""
"Querysets do not always cache their results.  When evaluating only *part* of"
" the queryset, the cache is checked, but if it is not populated then the "
"items returned by the subsequent query are not cached. Specifically, this "
"means that :ref:`limiting the queryset <limiting-querysets>` using an array "
"slice or an index will not populate the cache."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:765
msgid ""
"For example, repeatedly getting a certain index in a queryset object will "
"query the database each time::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:772
msgid ""
"However, if the entire queryset has already been evaluated, the cache will "
"be checked instead::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:780
msgid ""
"Here are some examples of other actions that will result in the entire "
"queryset being evaluated and therefore populate the cache::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:790
msgid ""
"Simply printing the queryset will not populate the cache. This is because "
"the call to ``__repr__()`` only returns a slice of the entire queryset."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:796
msgid "Complex lookups with ``Q`` objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:798
msgid ""
"Keyword argument queries -- in "
":meth:`~django.db.models.query.QuerySet.filter`, etc. -- are \"AND\"ed "
"together. If you need to execute more complex queries (for example, queries "
"with ``OR`` statements), you can use :class:`Q objects "
"<django.db.models.Q>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:802
msgid ""
"A :class:`Q object <django.db.models.Q>` (``django.db.models.Q``) is an "
"object used to encapsulate a collection of keyword arguments. These keyword "
"arguments are specified as in \"Field lookups\" above."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:806
msgid "For example, this ``Q`` object encapsulates a single ``LIKE`` query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:811
msgid ""
"``Q`` objects can be combined using the ``&`` and ``|`` operators. When an "
"operator is used on two ``Q`` objects, it yields a new ``Q`` object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:814
msgid ""
"For example, this statement yields a single ``Q`` object that represents the"
" \"OR\" of two ``\"question__startswith\"`` queries::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:819
msgid "This is equivalent to the following SQL ``WHERE`` clause::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:823
msgid ""
"You can compose statements of arbitrary complexity by combining ``Q`` "
"objects with the ``&`` and ``|`` operators and use parenthetical grouping. "
"Also, ``Q`` objects can be negated using the ``~`` operator, allowing for "
"combined lookups that combine both a normal query and a negated (``NOT``) "
"query::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:830
msgid ""
"Each lookup function that takes keyword-arguments (e.g. "
":meth:`~django.db.models.query.QuerySet.filter`, "
":meth:`~django.db.models.query.QuerySet.exclude`, "
":meth:`~django.db.models.query.QuerySet.get`) can also be passed one or more"
" ``Q`` objects as positional (not-named) arguments. If you provide multiple "
"``Q`` object arguments to a lookup function, the arguments will be \"AND\"ed"
" together. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:843
msgid "... roughly translates into the SQL::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:848
msgid ""
"Lookup functions can mix the use of ``Q`` objects and keyword arguments. All"
" arguments provided to a lookup function (be they keyword arguments or ``Q``"
" objects) are \"AND\"ed together. However, if a ``Q`` object is provided, it"
" must precede the definition of any keyword arguments. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:858
msgid "... would be a valid query, equivalent to the previous example; but::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:866
msgid "... would not be valid."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:870
msgid ""
"The :source:`OR lookups examples <tests/or_lookups/tests.py>` in Django's "
"unit tests show some possible uses of ``Q``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:874
msgid "Comparing objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:876
msgid ""
"To compare two model instances, just use the standard Python comparison "
"operator, the double equals sign: ``==``. Behind the scenes, that compares "
"the primary key values of two models."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:880
msgid ""
"Using the ``Entry`` example above, the following two statements are "
"equivalent::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:885
msgid ""
"If a model's primary key isn't called ``id``, no problem. Comparisons will "
"always use the primary key, whatever it's called. For example, if a model's "
"primary key field is called ``name``, these two statements are equivalent::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:895
msgid "Deleting objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:897
msgid ""
"The delete method, conveniently, is named "
":meth:`~django.db.models.Model.delete`. This method immediately deletes the "
"object and returns the number of objects deleted and a dictionary with the "
"number of deletions per object type. Example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:905
msgid ""
"You can also delete objects in bulk. Every "
":class:`~django.db.models.query.QuerySet` has a "
":meth:`~django.db.models.query.QuerySet.delete` method, which deletes all "
"members of that :class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:910
msgid ""
"For example, this deletes all ``Entry`` objects with a ``pub_date`` year of "
"2005::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:916
msgid ""
"Keep in mind that this will, whenever possible, be executed purely in SQL, "
"and so the ``delete()`` methods of individual object instances will not "
"necessarily be called during the process. If you've provided a custom "
"``delete()`` method on a model class and want to ensure that it is called, "
"you will need to \"manually\" delete instances of that model (e.g., by "
"iterating over a :class:`~django.db.models.query.QuerySet` and calling "
"``delete()`` on each object individually) rather than using the bulk "
":meth:`~django.db.models.query.QuerySet.delete` method of a "
":class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:926
msgid ""
"When Django deletes an object, by default it emulates the behavior of the "
"SQL constraint ``ON DELETE CASCADE`` -- in other words, any objects which "
"had foreign keys pointing at the object to be deleted will be deleted along "
"with it. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:935
msgid ""
"This cascade behavior is customizable via the "
":attr:`~django.db.models.ForeignKey.on_delete` argument to the "
":class:`~django.db.models.ForeignKey`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:939
msgid ""
"Note that :meth:`~django.db.models.query.QuerySet.delete` is the only "
":class:`~django.db.models.query.QuerySet` method that is not exposed on a "
":class:`~django.db.models.Manager` itself. This is a safety mechanism to "
"prevent you from accidentally requesting ``Entry.objects.delete()``, and "
"deleting *all* the entries. If you *do* want to delete all the objects, then"
" you have to explicitly request a complete query set::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:951
msgid "Copying model instances"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:953
msgid ""
"Although there is no built-in method for copying model instances, it is "
"possible to easily create new instance with all fields' values copied. In "
"the simplest case, you can just set ``pk`` to ``None``. Using our blog "
"example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:963
msgid ""
"Things get more complicated if you use inheritance. Consider a subclass of "
"``Blog``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:972
msgid ""
"Due to how inheritance works, you have to set both ``pk`` and ``id`` to "
"None::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:978
msgid ""
"This process doesn't copy relations that aren't part of the model's database"
" table. For example, ``Entry`` has a ``ManyToManyField`` to ``Author``. "
"After duplicating an entry, you must set the many-to-many relations for the "
"new entry::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:989
msgid ""
"For a ``OneToOneField``, you must duplicate the related object and assign it"
" to the new object's field to avoid violating the one-to-one unique "
"constraint. For example, assuming ``entry`` is already duplicated as above::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1001
msgid "Updating multiple objects at once"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1003
msgid ""
"Sometimes you want to set a field to a particular value for all the objects "
"in a :class:`~django.db.models.query.QuerySet`. You can do this with the "
":meth:`~django.db.models.query.QuerySet.update` method. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1010
msgid ""
"You can only set non-relation fields and "
":class:`~django.db.models.ForeignKey` fields using this method. To update a "
"non-relation field, provide the new value as a constant. To update "
":class:`~django.db.models.ForeignKey` fields, set the new value to be the "
"new model instance you want to point to. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1020
msgid ""
"The ``update()`` method is applied instantly and returns the number of rows "
"matched by the query (which may not be equal to the number of rows updated "
"if some rows already have the new value). The only restriction on the "
":class:`~django.db.models.query.QuerySet` being updated is that it can only "
"access one database table: the model's main table. You can filter based on "
"related fields, but you can only update columns in the model's main table. "
"Example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1033
msgid ""
"Be aware that the ``update()`` method is converted directly to an SQL "
"statement. It is a bulk operation for direct updates. It doesn't run any "
":meth:`~django.db.models.Model.save` methods on your models, or emit the "
"``pre_save`` or ``post_save`` signals (which are a consequence of calling "
":meth:`~django.db.models.Model.save`), or honor the "
":attr:`~django.db.models.DateField.auto_now` field option. If you want to "
"save every item in a :class:`~django.db.models.query.QuerySet` and make sure"
" that the :meth:`~django.db.models.Model.save` method is called on each "
"instance, you don't need any special function to handle that. Just loop over"
" them and call :meth:`~django.db.models.Model.save`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1047
msgid ""
"Calls to update can also use :class:`F expressions <django.db.models.F>` to "
"update one field based on the value of another field in the model. This is "
"especially useful for incrementing counters based upon their current value. "
"For example, to increment the pingback count for every entry in the blog::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1054
msgid ""
"However, unlike ``F()`` objects in filter and exclude clauses, you can't "
"introduce joins when you use ``F()`` objects in an update -- you can only "
"reference fields local to the model being updated. If you attempt to "
"introduce a join with an ``F()`` object, a ``FieldError`` will be raised::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1065
msgid "Related objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1067
msgid ""
"When you define a relationship in a model (i.e., a "
":class:`~django.db.models.ForeignKey`, "
":class:`~django.db.models.OneToOneField`, or "
":class:`~django.db.models.ManyToManyField`), instances of that model will "
"have a convenient API to access the related object(s)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1073
msgid ""
"Using the models at the top of this page, for example, an ``Entry`` object "
"``e`` can get its associated ``Blog`` object by accessing the ``blog`` "
"attribute: ``e.blog``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1077
msgid ""
"(Behind the scenes, this functionality is implemented by Python "
"descriptors_. This shouldn't really matter to you, but we point it out here "
"for the curious.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1080
msgid ""
"Django also creates API accessors for the \"other\" side of the relationship"
" -- the link from the related model to the model that defines the "
"relationship. For example, a ``Blog`` object ``b`` has access to a list of "
"all related ``Entry`` objects via the ``entry_set`` attribute: "
"``b.entry_set.all()``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1085
msgid ""
"All examples in this section use the sample ``Blog``, ``Author`` and "
"``Entry`` models defined at the top of this page."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1091
msgid "One-to-many relationships"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1094
msgid "Forward"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1096
msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of that "
"model will have access to the related (foreign) object via a simple "
"attribute of the model."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1105
msgid ""
"You can get and set via a foreign-key attribute. As you may expect, changes "
"to the foreign key aren't saved to the database until you call "
":meth:`~django.db.models.Model.save`. Example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1113
msgid ""
"If a :class:`~django.db.models.ForeignKey` field has ``null=True`` set "
"(i.e., it allows ``NULL`` values), you can assign ``None`` to remove the "
"relation. Example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1121
msgid ""
"Forward access to one-to-many relationships is cached the first time the "
"related object is accessed. Subsequent accesses to the foreign key on the "
"same object instance are cached. Example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1129
msgid ""
"Note that the :meth:`~django.db.models.query.QuerySet.select_related` "
":class:`~django.db.models.query.QuerySet` method recursively prepopulates "
"the cache of all one-to-many relationships ahead of time. Example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1140
msgid "Following relationships \"backward\""
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1142
msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of the "
"foreign-key model will have access to a :class:`~django.db.models.Manager` "
"that returns all instances of the first model. By default, this "
":class:`~django.db.models.Manager` is named ``FOO_set``, where ``FOO`` is "
"the source model name, lowercased. This :class:`~django.db.models.Manager` "
"returns ``QuerySets``, which can be filtered and manipulated as described in"
" the \"Retrieving objects\" section above."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1159
msgid ""
"You can override the ``FOO_set`` name by setting the "
":attr:`~django.db.models.ForeignKey.related_name` parameter in the "
":class:`~django.db.models.ForeignKey` definition. For example, if the "
"``Entry`` model was altered to ``blog = ForeignKey(Blog, "
"on_delete=models.CASCADE, related_name='entries')``, the above example code "
"would look like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1175
msgid "Using a custom reverse manager"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1177
msgid ""
"By default the :class:`~django.db.models.fields.related.RelatedManager` used"
" for reverse relations is a subclass of the :ref:`default manager <manager-"
"names>` for that model. If you would like to specify a different manager for"
" a given query you can use the following syntax::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1192
msgid ""
"If ``EntryManager`` performed default filtering in its ``get_queryset()`` "
"method, that filtering would apply to the ``all()`` call."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1195
msgid ""
"Of course, specifying a custom reverse manager also enables you to call its "
"custom methods::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1201
msgid "Additional methods to handle related objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1203
msgid ""
"In addition to the :class:`~django.db.models.query.QuerySet` methods defined"
" in \"Retrieving objects\" above, the :class:`~django.db.models.ForeignKey` "
":class:`~django.db.models.Manager` has additional methods used to handle the"
" set of related objects. A synopsis of each is below, and complete details "
"can be found in the :doc:`related objects reference "
"</ref/models/relations>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1210
msgid "``add(obj1, obj2, ...)``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1210
msgid "Adds the specified model objects to the related object set."
msgstr "将特定的模型对象加入关联对象集合。"

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1214
msgid "``create(**kwargs)``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1213
msgid ""
"Creates a new object, saves it and puts it in the related object set. "
"Returns the newly created object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1217
msgid "``remove(obj1, obj2, ...)``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1217
msgid "Removes the specified model objects from the related object set."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1220
msgid "``clear()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1220
msgid "Removes all objects from the related object set."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1223
msgid "``set(objs)``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1223
msgid "Replace the set of related objects."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1225
msgid ""
"To assign the members of a related set, use the ``set()`` method with an "
"iterable of object instances. For example, if ``e1`` and ``e2`` are "
"``Entry`` instances::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1232
msgid ""
"If the ``clear()`` method is available, any pre-existing objects will be "
"removed from the ``entry_set`` before all objects in the iterable (in this "
"case, a list) are added to the set. If the ``clear()`` method is *not* "
"available, all objects in the iterable will be added without removing any "
"existing elements."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1238
msgid ""
"Each \"reverse\" operation described in this section has an immediate effect"
" on the database. Every addition, creation and deletion is immediately and "
"automatically saved to the database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1247
msgid ""
"Both ends of a many-to-many relationship get automatic API access to the "
"other end. The API works similar to a \"backward\" one-to-many relationship,"
" above."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1250
msgid ""
"One difference is in the attribute naming: The model that defines the "
":class:`~django.db.models.ManyToManyField` uses the attribute name of that "
"field itself, whereas the \"reverse\" model uses the lowercased model name "
"of the original model, plus ``'_set'`` (just like reverse one-to-many "
"relationships)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1255
msgid "An example makes this easier to understand::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1265
msgid ""
"Like :class:`~django.db.models.ForeignKey`, "
":class:`~django.db.models.ManyToManyField` can specify "
":attr:`~django.db.models.ManyToManyField.related_name`. In the above "
"example, if the :class:`~django.db.models.ManyToManyField` in ``Entry`` had "
"specified ``related_name='entries'``, then each ``Author`` instance would "
"have an ``entries`` attribute instead of ``entry_set``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1272
msgid ""
"Another difference from one-to-many relationships is that in addition to "
"model instances,  the ``add()``, ``set()``, and ``remove()`` methods on "
"many-to-many relationships accept primary key values. For example, if ``e1``"
" and ``e2`` are ``Entry`` instances, then these ``set()`` calls work "
"identically::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1284
msgid ""
"One-to-one relationships are very similar to many-to-one relationships. If "
"you define a :class:`~django.db.models.OneToOneField` on your model, "
"instances of that model will have access to the related object via a simple "
"attribute of the model."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1298
msgid ""
"The difference comes in \"reverse\" queries. The related model in a one-to-"
"one relationship also has access to a :class:`~django.db.models.Manager` "
"object, but that :class:`~django.db.models.Manager` represents a single "
"object, rather than a collection of objects::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1306
msgid ""
"If no object has been assigned to this relationship, Django will raise a "
"``DoesNotExist`` exception."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1309
msgid ""
"Instances can be assigned to the reverse relationship in the same way as you"
" would assign the forward relationship::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1315
msgid "How are the backward relationships possible?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1317
msgid ""
"Other object-relational mappers require you to define relationships on both "
"sides. The Django developers believe this is a violation of the DRY (Don't "
"Repeat Yourself) principle, so Django only requires you to define the "
"relationship on one end."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1322
msgid ""
"But how is this possible, given that a model class doesn't know which other "
"model classes are related to it until those other model classes are loaded?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1325
msgid ""
"The answer lies in the :data:`app registry <django.apps.apps>`. When Django "
"starts, it imports each application listed in :setting:`INSTALLED_APPS`, and"
" then the ``models`` module inside each application. Whenever a new model "
"class is created, Django adds backward-relationships to any related models. "
"If the related models haven't been imported yet, Django keeps tracks of the "
"relationships and adds them when the related models eventually are imported."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1332
msgid ""
"For this reason, it's particularly important that all the models you're "
"using be defined in applications listed in :setting:`INSTALLED_APPS`. "
"Otherwise, backwards relations may not work properly."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1337
msgid "Queries over related objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1339
msgid ""
"Queries involving related objects follow the same rules as queries involving"
" normal value fields. When specifying the value for a query to match, you "
"may use either an object instance itself, or the primary key value for the "
"object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1343
msgid ""
"For example, if you have a Blog object ``b`` with ``id=5``, the following "
"three queries would be identical::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1351
msgid "Falling back to raw SQL"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1353
msgid ""
"If you find yourself needing to write an SQL query that is too complex for "
"Django's database-mapper to handle, you can fall back on writing SQL by "
"hand. Django has a couple of options for writing raw SQL queries; see "
":doc:`/topics/db/sql`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/queries.txt:1358
msgid ""
"Finally, it's important to note that the Django database layer is merely an "
"interface to your database. You can access your database via other tools, "
"programming languages or database frameworks; there's nothing Django-"
"specific about your database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:3
msgid "Search"
msgstr "搜索"

#: ../../../../sources/2.2/docs/topics/db/search.txt:5
msgid ""
"A common task for web applications is to search some data in the database "
"with user input. In a simple case, this could be filtering a list of objects"
" by a category. A more complex use case might require searching with "
"weighting, categorization, highlighting, multiple languages, and so on. This"
" document explains some of the possible use cases and the tools you can use."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:11
msgid "We'll refer to the same models used in :doc:`/topics/db/queries`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:14
msgid "Use Cases"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:17
msgid "Standard textual queries"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:19
msgid ""
"Text-based fields have a selection of simple matching operations. For "
"example, you may wish to allow lookup up an author like so::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:25
msgid ""
"This is a very fragile solution as it requires the user to know an exact "
"substring of the author's name. A better approach could be a case-"
"insensitive match (:lookup:`icontains`), but this is only marginally better."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:30
msgid "A database's more advanced comparison functions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:32
msgid ""
"If you're using PostgreSQL, Django provides :doc:`a selection of database "
"specific tools </ref/contrib/postgres/search>` to allow you to leverage more"
" complex querying options. Other databases have different selections of "
"tools, possibly via plugins or user-defined functions. Django doesn't "
"include any support for them at this time. We'll use some examples from "
"PostgreSQL to demonstrate the kind of functionality databases may have."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:39
msgid "Searching in other databases"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:41
msgid ""
"All of the searching tools provided by :mod:`django.contrib.postgres` are "
"constructed entirely on public APIs such as :doc:`custom lookups "
"</ref/models/lookups>` and :doc:`database functions </ref/models/database-"
"functions>`. Depending on your database, you should be able to construct "
"queries to allow similar APIs. If there are specific things which cannot be "
"achieved this way, please open a ticket."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:48
msgid ""
"In the above example, we determined that a case insensitive lookup would be "
"more useful. When dealing with non-English names, a further improvement is "
"to use :lookup:`unaccented comparison <unaccent>`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:55
msgid ""
"This shows another issue, where we are matching against a different spelling"
" of the name. In this case we have an asymmetry though - a search for "
"``Helen`` will pick up ``Helena`` or ``Hélène``, but not the reverse. "
"Another option would be to use a :lookup:`trigram_similar` comparison, which"
" compares sequences of letters."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:66
msgid ""
"Now we have a different problem - the longer name of \"Helena Bonham "
"Carter\" doesn't show up as it is much longer. Trigram searches consider all"
" combinations of three letters, and compares how many appear in both search "
"and source strings. For the longer name, there are more combinations which "
"appear in the source string so it is no longer considered a close match."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:72
msgid ""
"The correct choice of comparison functions here depends on your particular "
"data set, for example the language(s) used and the type of text being "
"searched. All of the examples we've seen are on short strings where the user"
" is likely to enter something close (by varying definitions) to the source "
"data."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:78
msgid "Document-based search"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:80
msgid ""
"Simple database operations are too simple an approach when you start "
"considering large blocks of text. Whereas the examples above can be thought "
"of as operations on a string of characters, full text search looks at the "
"actual words. Depending on the system used, it's likely to use some of the "
"following ideas:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:86
msgid "Ignoring \"stop words\" such as \"a\", \"the\", \"and\"."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:87
msgid "Stemming words, so that \"pony\" and \"ponies\" are considered similar."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:88
msgid ""
"Weighting words based on different criteria such as how frequently they "
"appear in the text, or the importance of the fields, such as the title or "
"keywords, that they appear in."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:92
msgid ""
"There are many alternatives for using searching software, some of the most "
"prominent are Elastic_ and Solr_. These are full document-based search "
"solutions. To use them with data from Django models, you'll need a layer "
"which translates your data into a textual document, including back-"
"references to the database ids. When a search using the engine returns a "
"certain document, you can then look it up in the database. There are a "
"variety of third-party libraries which are designed to help with this "
"process."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:104
msgid "PostgreSQL support"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:106
msgid ""
"PostgreSQL has its own full text search implementation built-in. While not "
"as powerful as some other search engines, it has the advantage of being "
"inside your database and so can easily be combined with other relational "
"queries such as categorization."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:111
msgid ""
"The :mod:`django.contrib.postgres` module provides some helpers to make "
"these queries. For example, a simple query might be to select all the blog "
"entries which mention \"cheese\"::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:118
msgid "You can also filter on a combination of fields and on related models::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/search.txt:129
msgid ""
"See the ``contrib.postgres`` :doc:`/ref/contrib/postgres/search` document "
"for complete details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:3
msgid "Performing raw SQL queries"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:7
msgid ""
"Django gives you two ways of performing raw SQL queries: you can use "
":meth:`Manager.raw()` to `perform raw queries and return model instances`__,"
" or you can avoid the model layer entirely and `execute custom SQL "
"directly`__."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:14
msgid "Explore the ORM before using raw SQL!"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:16
msgid ""
"The Django ORM provides many tools to express queries without writing raw "
"SQL. For example:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:19
msgid "The :doc:`QuerySet API </ref/models/querysets>` is extensive."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:20
msgid ""
"You can :meth:`annotate <.QuerySet.annotate>` and :doc:`aggregate "
"</topics/db/aggregation>` using many built-in :doc:`database functions "
"</ref/models/database-functions>`. Beyond those, you can create :doc:`custom"
" query expressions </ref/models/expressions/>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:25
msgid ""
"Before using raw SQL, explore :doc:`the ORM </topics/db/index>`. Ask on "
"|django-users| or the `#django IRC channel <irc://irc.freenode.net/django>`_"
" to see if the ORM supports your use case."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:31
msgid ""
"You should be very careful whenever you write raw SQL. Every time you use "
"it, you should properly escape any parameters that the user can control by "
"using ``params`` in order to protect against SQL injection attacks. Please "
"read more about :ref:`SQL injection protection <sql-injection-protection>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:40
msgid "Performing raw queries"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:42
msgid ""
"The ``raw()`` manager method can be used to perform raw SQL queries that "
"return model instances:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:47
msgid ""
"This method takes a raw SQL query, executes it, and returns a "
"``django.db.models.query.RawQuerySet`` instance. This ``RawQuerySet`` "
"instance can be iterated over just like a normal "
":class:`~django.db.models.query.QuerySet` to provide object instances."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:52
msgid ""
"This is best illustrated with an example. Suppose you have the following "
"model::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:59
msgid "You could then execute custom SQL like so::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:66
msgid ""
"Of course, this example isn't very exciting -- it's exactly the same as "
"running ``Person.objects.all()``. However, ``raw()`` has a bunch of other "
"options that make it very powerful."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:70
msgid "Model table names"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:72
msgid "Where did the name of the ``Person`` table come from in that example?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:74
msgid ""
"By default, Django figures out a database table name by joining the model's "
"\"app label\" -- the name you used in ``manage.py startapp`` -- to the "
"model's class name, with an underscore between them. In the example we've "
"assumed that the ``Person`` model lives in an app named ``myapp``, so its "
"table would be ``myapp_person``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:80
msgid ""
"For more details check out the documentation for the "
":attr:`~Options.db_table` option, which also lets you manually set the "
"database table name."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:86
msgid ""
"No checking is done on the SQL statement that is passed in to ``.raw()``. "
"Django expects that the statement will return a set of rows from the "
"database, but does nothing to enforce that. If the query does not return "
"rows, a (possibly cryptic) error will result."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:93
msgid ""
"If you are performing queries on MySQL, note that MySQL's silent type "
"coercion may cause unexpected results when mixing types. If you query on a "
"string type column, but with an integer value, MySQL will coerce the types "
"of all values in the table to an integer before performing the comparison. "
"For example, if your table contains the values ``'abc'``, ``'def'`` and you "
"query for ``WHERE mycolumn=0``, both rows will match. To prevent this, "
"perform the correct typecasting before using the value in a query."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:102
msgid "Mapping query fields to model fields"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:104
msgid ""
"``raw()`` automatically maps fields in the query to fields on the model."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:106
msgid ""
"The order of fields in your query doesn't matter. In other words, both of "
"the following queries work identically::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:114
msgid ""
"Matching is done by name. This means that you can use SQL's ``AS`` clauses "
"to map fields in the query to model fields. So if you had some other table "
"that had ``Person`` data in it, you could easily map it into ``Person`` "
"instances::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:124
msgid ""
"As long as the names match, the model instances will be created correctly."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:126
msgid ""
"Alternatively, you can map fields in the query to model fields using the "
"``translations`` argument to ``raw()``. This is a dictionary mapping names "
"of fields in the query to names of fields on the model. For example, the "
"above query could also be written::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:135
msgid "Index lookups"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:137
msgid ""
"``raw()`` supports indexing, so if you need only the first result you can "
"write::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:142
msgid ""
"However, the indexing and slicing are not performed at the database level. "
"If you have a large number of ``Person`` objects in your database, it is "
"more efficient to limit the query at the SQL level::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:149
msgid "Deferring model fields"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:151
msgid "Fields may also be left out::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:155
msgid ""
"The ``Person`` objects returned by this query will be deferred model "
"instances (see :meth:`~django.db.models.query.QuerySet.defer()`). This means"
" that the fields that are omitted from the query will be loaded on demand. "
"For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:166
msgid ""
"From outward appearances, this looks like the query has retrieved both the "
"first name and last name. However, this example actually issued 3 queries. "
"Only the first names were retrieved by the raw() query -- the last names "
"were both retrieved on demand when they were printed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:171
msgid ""
"There is only one field that you can't leave out - the primary key field. "
"Django uses the primary key to identify model instances, so it must always "
"be included in a raw query. An ``InvalidQuery`` exception will be raised if "
"you forget to include the primary key."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:177
msgid "Adding annotations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:179
msgid ""
"You can also execute queries containing fields that aren't defined on the "
"model. For example, we could use `PostgreSQL's age() function`__ to get a "
"list of people with their ages calculated by the database::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:190
msgid ""
"You can often avoid using raw SQL to compute annotations by instead using a "
":ref:`Func() expression <func-expressions>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:196
msgid "Passing parameters into ``raw()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:198
msgid ""
"If you need to perform parameterized queries, you can use the ``params`` "
"argument to ``raw()``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:204
msgid ""
"``params`` is a list or dictionary of parameters. You'll use ``%s`` "
"placeholders in the query string for a list, or ``%(key)s`` placeholders for"
" a dictionary (where ``key`` is replaced by a dictionary key, of course), "
"regardless of your database engine.  Such placeholders will be replaced with"
" parameters from the ``params`` argument."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:213
msgid ""
"Dictionary params are not supported with the SQLite backend; with this "
"backend, you must pass parameters as a list."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:218
msgid ""
"**Do not use string formatting on raw queries or quote placeholders in your "
"SQL strings!**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:221
msgid "It's tempting to write the above query as::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:226
msgid ""
"You might also think you should write your query like this (with quotes "
"around ``%s``)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:231
msgid "**Don't make either of these mistakes.**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:233
msgid ""
"As discussed in :ref:`sql-injection-protection`, using the ``params`` "
"argument and leaving the placeholders unquoted protects you from `SQL "
"injection attacks`__, a common exploit where attackers inject arbitrary SQL "
"into your database. If you use string interpolation or quote the "
"placeholder, you're at risk for SQL injection."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:244
msgid "Executing custom SQL directly"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:246
msgid ""
"Sometimes even :meth:`Manager.raw` isn't quite enough: you might need to "
"perform queries that don't map cleanly to models, or directly execute "
"``UPDATE``, ``INSERT``, or ``DELETE`` queries."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:250
msgid ""
"In these cases, you can always access the database directly, routing around "
"the model layer entirely."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:253
msgid ""
"The object ``django.db.connection`` represents the default database "
"connection. To use the database connection, call ``connection.cursor()`` to "
"get a cursor object. Then, call ``cursor.execute(sql, [params])`` to execute"
" the SQL and ``cursor.fetchone()`` or ``cursor.fetchall()`` to return the "
"resulting rows."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:271
msgid ""
"To protect against SQL injection, you must not include quotes around the "
"``%s`` placeholders in the SQL string."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:274
msgid ""
"Note that if you want to include literal percent signs in the query, you "
"have to double them in the case you are passing parameters::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:280
msgid ""
"If you are using :doc:`more than one database </topics/db/multi-db>`, you "
"can use ``django.db.connections`` to obtain the connection (and cursor) for "
"a specific database. ``django.db.connections`` is a dictionary-like object "
"that allows you to retrieve a specific connection using its alias::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:290
msgid ""
"By default, the Python DB API will return results without their field names,"
" which means you end up with a ``list`` of values, rather than a ``dict``. "
"At a small performance and memory cost, you can return results as a ``dict``"
" by using something like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:303
msgid ""
"Another option is to use :func:`collections.namedtuple` from the Python "
"standard library. A ``namedtuple`` is a tuple-like object that has fields "
"accessible by attribute lookup; it's also indexable and iterable. Results "
"are immutable and accessible by field names or indices, which might be "
"useful::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:316
msgid "Here is an example of the difference between the three::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:336
msgid "Connections and cursors"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:338
msgid ""
"``connection`` and ``cursor`` mostly implement the standard Python DB-API "
"described in :pep:`249` — except when it comes to :doc:`transaction handling"
" </topics/db/transactions>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:342
msgid ""
"If you're not familiar with the Python DB-API, note that the SQL statement "
"in ``cursor.execute()`` uses placeholders, ``\"%s\"``, rather than adding "
"parameters directly within the SQL. If you use this technique, the "
"underlying database library will automatically escape your parameters as "
"necessary."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:347
msgid ""
"Also note that Django expects the ``\"%s\"`` placeholder, *not* the "
"``\"?\"`` placeholder, which is used by the SQLite Python bindings. This is "
"for the sake of consistency and sanity."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:351
msgid "Using a cursor as a context manager::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:356
msgid "is equivalent to::"
msgstr "相当于::"

#: ../../../../sources/2.2/docs/topics/db/sql.txt:365
msgid "Calling stored procedures"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:369
msgid ""
"Calls a database stored procedure with the given name. A sequence "
"(``params``) or dictionary (``kparams``) of input parameters may be "
"provided. Most databases don't support ``kparams``. Of Django's built-in "
"backends, only Oracle supports it."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:374
msgid "For example, given this stored procedure in an Oracle database:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/sql.txt:387
msgid "This will call it::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:3
msgid "Tablespaces"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:5
msgid ""
"A common paradigm for optimizing performance in database systems is the use "
"of `tablespaces`_ to organize disk layout."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:11
msgid ""
"Django does not create the tablespaces for you. Please refer to your "
"database engine's documentation for details on creating and managing "
"tablespaces."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:17
msgid "Declaring tablespaces for tables"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:19
msgid ""
"A tablespace can be specified for the table generated by a model by "
"supplying the :attr:`~django.db.models.Options.db_tablespace` option inside "
"the model's ``class Meta``. This option also affects tables automatically "
"created for :class:`~django.db.models.ManyToManyField`\\ s in the model."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:24
msgid ""
"You can use the :setting:`DEFAULT_TABLESPACE` setting to specify a default "
"value for :attr:`~django.db.models.Options.db_tablespace`. This is useful "
"for setting a tablespace for the built-in Django apps and other applications"
" whose code you cannot control."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:30
msgid "Declaring tablespaces for indexes"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:32
msgid ""
"You can pass the :attr:`~django.db.models.Index.db_tablespace` option to an "
"``Index`` constructor to specify the name of a tablespace to use for the "
"index. For single field indexes, you can pass the "
":attr:`~django.db.models.Field.db_tablespace` option to a ``Field`` "
"constructor to specify an alternate tablespace for the field's column index."
" If the column doesn't have an index, the option is ignored."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:39
msgid ""
"You can use the :setting:`DEFAULT_INDEX_TABLESPACE` setting to specify a "
"default value for :attr:`~django.db.models.Field.db_tablespace`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:42
msgid ""
"If :attr:`~django.db.models.Field.db_tablespace` isn't specified and you "
"didn't set :setting:`DEFAULT_INDEX_TABLESPACE`, the index is created in the "
"same tablespace as the tables."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:61
msgid ""
"In this example, the tables generated by the ``TablespaceExample`` model "
"(i.e. the model table and the many-to-many table) would be stored in the "
"``tables`` tablespace. The index for the name field and the indexes on the "
"many-to-many table would be stored in the ``indexes`` tablespace. The "
"``data`` field would also generate an index, but no tablespace for it is "
"specified, so it would be stored in the model tablespace ``tables`` by "
"default. The index for the ``shortcut`` field would be stored in the "
"``other_indexes`` tablespace."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:70
msgid "Database support"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:72
msgid "PostgreSQL and Oracle support tablespaces. SQLite and MySQL don't."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/tablespaces.txt:74
msgid ""
"When you use a backend that lacks support for tablespaces, Django ignores "
"all tablespace-related options."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:3
msgid "Database transactions"
msgstr "数据库事务"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:7
msgid ""
"Django gives you a few ways to control how database transactions are "
"managed."
msgstr "Django 提供多种方式控制数据库事务。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:10
msgid "Managing database transactions"
msgstr "管理数据库事务"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:13
msgid "Django's default transaction behavior"
msgstr "Django 默认的事务行为"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:15
msgid ""
"Django's default behavior is to run in autocommit mode. Each query is "
"immediately committed to the database, unless a transaction is active. "
":ref:`See below for details <autocommit-details>`."
msgstr "Django 默认的事务行为是自动提交。除非事务正在执行，每个查询将会马上自动提交到数据库。 :ref:`详见 <autocommit-details>`."

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:19
msgid ""
"Django uses transactions or savepoints automatically to guarantee the "
"integrity of ORM operations that require multiple queries, especially "
":ref:`delete() <topics-db-queries-delete>` and :ref:`update() <topics-db-"
"queries-update>` queries."
msgstr "Django 自动使用事务或还原点，以确保需多次查询的 ORM 操作的一致性，特别是 :ref:`delete() <topics-db-queries-delete>` 和 :ref:`update() <topics-db-queries-update>` 操作."

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:24
msgid ""
"Django's :class:`~django.test.TestCase` class also wraps each test in a "
"transaction for performance reasons."
msgstr "由于性能原因，Django 的 :class:`~django.test.TestCase` 类同样将每个测试用事务封装起来。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:30
msgid "Tying transactions to HTTP requests"
msgstr "连结事务与 HTTP 请求"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:32
msgid ""
"A common way to handle transactions on the web is to wrap each request in a "
"transaction. Set :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` to "
"``True`` in the configuration of each database for which you want to enable "
"this behavior."
msgstr "在 Web 里，处理事务比较常用的方式是将每个请求封装在一个事务中。 在你想启用该行为的数据库中，把配置中的参数 :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` 设置为 ``True``。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:37
msgid ""
"It works like this. Before calling a view function, Django starts a "
"transaction. If the response is produced without problems, Django commits "
"the transaction. If the view produces an exception, Django rolls back the "
"transaction."
msgstr "它是这样工作的：在调用试图方法前，Django 先生成一个事务。如果响应能正常生成，Django 会提交该事务。而如果视图出现异常，Django 则会回滚该事务。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:42
msgid ""
"You may perform subtransactions using savepoints in your view code, "
"typically with the :func:`atomic` context manager. However, at the end of "
"the view, either all or none of the changes will be committed."
msgstr "你可以在你的视图代码中使用还原点执行子事务，一般会使用 :func:`atomic 上下文管理器。但是，在视图结束时，要么所有的更改都被提交，要么所有的更改都不被提交。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:48
msgid ""
"While the simplicity of this transaction model is appealing, it also makes "
"it inefficient when traffic increases. Opening a transaction for every view "
"has some overhead. The impact on performance depends on the query patterns "
"of your application and on how well your database handles locking."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:53
msgid "Per-request transactions and streaming responses"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:55
msgid ""
"When a view returns a :class:`~django.http.StreamingHttpResponse`, reading "
"the contents of the response will often execute code to generate the "
"content. Since the view has already returned, such code runs outside of the "
"transaction."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:60
msgid ""
"Generally speaking, it isn't advisable to write to the database while "
"generating a streaming response, since there's no sensible way to handle "
"errors after starting to send the response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:64
msgid ""
"In practice, this feature simply wraps every view function in the "
":func:`atomic` decorator described below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:67
msgid ""
"Note that only the execution of your view is enclosed in the transactions. "
"Middleware runs outside of the transaction, and so does the rendering of "
"template responses."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:71
msgid ""
"When :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` is enabled, it's "
"still possible to prevent views from running in a transaction."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:76
msgid ""
"This decorator will negate the effect of :setting:`ATOMIC_REQUESTS "
"<DATABASE-ATOMIC_REQUESTS>` for a given view::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:89
msgid "It only works if it's applied to the view itself."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:92
msgid "Controlling transactions explicitly"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:94
msgid "Django provides a single API to control database transactions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:98
msgid ""
"Atomicity is the defining property of database transactions. ``atomic`` "
"allows us to create a block of code within which the atomicity on the "
"database is guaranteed. If the block of code is successfully completed, the "
"changes are committed to the database. If there is an exception, the changes"
" are rolled back."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:104
msgid ""
"``atomic`` blocks can be nested. In this case, when an inner block completes"
" successfully, its effects can still be rolled back if an exception is "
"raised in the outer block at a later point."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:108
msgid "``atomic`` is usable both as a :py:term:`decorator`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:117
msgid "and as a :py:term:`context manager`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:129
msgid ""
"Wrapping ``atomic`` in a try/except block allows for natural handling of "
"integrity errors::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:146
msgid ""
"In this example, even if ``generate_relationships()`` causes a database "
"error by breaking an integrity constraint, you can execute queries in "
"``add_children()``, and the changes from ``create_parent()`` are still "
"there. Note that any operations attempted in ``generate_relationships()`` "
"will already have been rolled back safely when ``handle_exception()`` is "
"called, so the exception handler can also operate on the database if "
"necessary."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:154
msgid "Avoid catching exceptions inside ``atomic``!"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:156
msgid ""
"When exiting an ``atomic`` block, Django looks at whether it's exited "
"normally or with an exception to determine whether to commit or roll back. "
"If you catch and handle exceptions inside an ``atomic`` block, you may hide "
"from Django the fact that a problem has happened. This can result in "
"unexpected behavior."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:162
msgid ""
"This is mostly a concern for :exc:`~django.db.DatabaseError` and its "
"subclasses such as :exc:`~django.db.IntegrityError`. After such an error, "
"the transaction is broken and Django will perform a rollback at the end of "
"the ``atomic`` block. If you attempt to run database queries before the "
"rollback happens, Django will raise a "
":class:`~django.db.transaction.TransactionManagementError`. You may also "
"encounter this behavior when an ORM-related signal handler raises an "
"exception."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:171
msgid ""
"The correct way to catch database errors is around an ``atomic`` block as "
"shown above. If necessary, add an extra ``atomic`` block for this purpose. "
"This pattern has another advantage: it delimits explicitly which operations "
"will be rolled back if an exception occurs."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:176
msgid ""
"If you catch exceptions raised by raw SQL queries, Django's behavior is "
"unspecified and database-dependent."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:179
msgid ""
"You may need to manually revert model state when rolling back a transaction."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:181
msgid ""
"The values of a model's fields won't be reverted when a transaction rollback"
" happens. This could lead to an inconsistent model state unless you manually"
" restore the original field values."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:185
msgid ""
"For example, given ``MyModel`` with an ``active`` field, this snippet "
"ensures that the ``if obj.active`` check at the end uses the correct value "
"if updating ``active`` to ``True`` fails in the transaction::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:202
msgid ""
"In order to guarantee atomicity, ``atomic`` disables some APIs. Attempting "
"to commit, roll back, or change the autocommit state of the database "
"connection within an ``atomic`` block will raise an exception."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:206
msgid ""
"``atomic`` takes a ``using`` argument which should be the name of a "
"database. If this argument isn't provided, Django uses the ``\"default\"`` "
"database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:210
msgid "Under the hood, Django's transaction management code:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:212
msgid "opens a transaction when entering the outermost ``atomic`` block;"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:213
msgid "creates a savepoint when entering an inner ``atomic`` block;"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:214
msgid "releases or rolls back to the savepoint when exiting an inner block;"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:215
msgid ""
"commits or rolls back the transaction when exiting the outermost block."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:217
msgid ""
"You can disable the creation of savepoints for inner blocks by setting the "
"``savepoint`` argument to ``False``. If an exception occurs, Django will "
"perform the rollback when exiting the first parent block with a savepoint if"
" there is one, and the outermost block otherwise. Atomicity is still "
"guaranteed by the outer transaction. This option should only be used if the "
"overhead of savepoints is noticeable. It has the drawback of breaking the "
"error handling described above."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:225
msgid ""
"You may use ``atomic`` when autocommit is turned off. It will only use "
"savepoints, even for the outermost block."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:228
msgid "Performance considerations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:230
msgid ""
"Open transactions have a performance cost for your database server. To "
"minimize this overhead, keep your transactions as short as possible. This is"
" especially important if you're using :func:`atomic` in long-running "
"processes, outside of Django's request / response cycle."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:236
#: ../../../../sources/2.2/docs/topics/db/transactions.txt:433
msgid "Autocommit"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:241
msgid "Why Django uses autocommit"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:243
msgid ""
"In the SQL standards, each SQL query starts a transaction, unless one is "
"already active. Such transactions must then be explicitly committed or "
"rolled back."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:247
msgid ""
"This isn't always convenient for application developers. To alleviate this "
"problem, most databases provide an autocommit mode. When autocommit is "
"turned on and no transaction is active, each SQL query gets wrapped in its "
"own transaction. In other words, not only does each such query start a "
"transaction, but the transaction also gets automatically committed or rolled"
" back, depending on whether the query succeeded."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:254
msgid ""
":pep:`249`, the Python Database API Specification v2.0, requires autocommit "
"to be initially turned off. Django overrides this default and turns "
"autocommit on."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:258
msgid ""
"To avoid this, you can :ref:`deactivate the transaction management "
"<deactivate-transaction-management>`, but it isn't recommended."
msgstr "为了避免这种情况，你可以参考 deactivate the transaction management<deactivate-transaction-management> ，但并不推荐这样做。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:264
msgid "Deactivating transaction management"
msgstr "停用事务管理"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:266
msgid ""
"You can totally disable Django's transaction management for a given database"
" by setting :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` to ``False`` in its "
"configuration. If you do this, Django won't enable autocommit, and won't "
"perform any commits. You'll get the regular behavior of the underlying "
"database library."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:272
msgid ""
"This requires you to commit explicitly every transaction, even those started"
" by Django or by third-party libraries. Thus, this is best used in "
"situations where you want to run your own transaction-controlling middleware"
" or do something really strange."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:278
msgid "Performing actions after commit"
msgstr "提交后"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:280
msgid ""
"Sometimes you need to perform an action related to the current database "
"transaction, but only if the transaction successfully commits. Examples "
"might include a `Celery`_ task, an email notification, or a cache "
"invalidation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:286
msgid ""
"Django provides the :func:`on_commit` function to register callback "
"functions that should be executed after a transaction is successfully "
"committed:"
msgstr " Django 提供了函数  :func:`on_commit` ，允许注册一个回调函数，以便事务成功提交后执行。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:291
msgid "Pass any function (that takes no arguments) to :func:`on_commit`::"
msgstr "将任意函数（无参数）传递给 :func:`on_commit`::"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:300
msgid "You can also wrap your function in a lambda::"
msgstr "你也可以使用 lambda:: 包装函数"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:304
msgid ""
"The function you pass in will be called immediately after a hypothetical "
"database write made where ``on_commit()`` is called would be successfully "
"committed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:308
msgid ""
"If you call ``on_commit()`` while there isn't an active transaction, the "
"callback will be executed immediately."
msgstr "无任何活动事务时调用 ``on_commit()`` ，则回调函数会立即执行。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:311
msgid ""
"If that hypothetical database write is instead rolled back (typically when "
"an unhandled exception is raised in an :func:`atomic` block), your function "
"will be discarded and never called."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:316
#: ../../../../sources/2.2/docs/topics/db/transactions.txt:486
msgid "Savepoints"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:318
msgid ""
"Savepoints (i.e. nested :func:`atomic` blocks) are handled correctly. That "
"is, an :func:`on_commit` callable registered after a savepoint (in a nested "
":func:`atomic` block) will be called after the outer transaction is "
"committed, but not if a rollback to that savepoint or any previous savepoint"
" occurred during the transaction::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:332
msgid ""
"On the other hand, when a savepoint is rolled back (due to an exception "
"being raised), the inner callable will not be called::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:348
msgid "Order of execution"
msgstr "执行顺序"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:350
msgid ""
"On-commit functions for a given transaction are executed in the order they "
"were registered."
msgstr "事务提交后的的回调函数执行顺序与当初注册时的顺序一致。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:354
#: ../../../../sources/2.2/docs/topics/http/middleware.txt:267
msgid "Exception handling"
msgstr "异常处理"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:356
msgid ""
"If one on-commit function within a given transaction raises an uncaught "
"exception, no later registered functions in that same transaction will run. "
"This is, of course, the same behavior as if you'd executed the functions "
"sequentially yourself without :func:`on_commit`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:362
msgid "Timing of execution"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:364
msgid ""
"Your callbacks are executed *after* a successful commit, so a failure in a "
"callback will not cause the transaction to roll back. They are executed "
"conditionally upon the success of the transaction, but they are not *part* "
"of the transaction. For the intended use cases (mail notifications, Celery "
"tasks, etc.), this should be fine. If it's not (if your follow-up action is "
"so critical that its failure should mean the failure of the transaction "
"itself), then you don't want to use the :func:`on_commit` hook. Instead, you"
" may want `two-phase commit`_ such as the `psycopg Two-Phase Commit protocol"
" support`_ and the `optional Two-Phase Commit Extensions in the Python DB-"
"API specification`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:375
msgid ""
"Callbacks are not run until autocommit is restored on the connection "
"following the commit (because otherwise any queries done in a callback would"
" open an implicit transaction, preventing the connection from going back "
"into autocommit mode)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:380
msgid ""
"When in autocommit mode and outside of an :func:`atomic` block, the function"
" will run immediately, not on commit."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:383
msgid ""
"On-commit functions only work with :ref:`autocommit mode <managing-"
"autocommit>` and the :func:`atomic` (or :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>`) transaction API. Calling :func:`on_commit` when "
"autocommit is disabled and you are not within an atomic block will result in"
" an error."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:394
msgid "Use in tests"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:396
msgid ""
"Django's :class:`~django.test.TestCase` class wraps each test in a "
"transaction and rolls back that transaction after each test, in order to "
"provide test isolation. This means that no transaction is ever actually "
"committed, thus your :func:`on_commit` callbacks will never be run. If you "
"need to test the results of an :func:`on_commit` callback, use a "
":class:`~django.test.TransactionTestCase` instead."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:404
msgid "Why no rollback hook?"
msgstr "为什么没有事务回滚钩子？"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:406
msgid ""
"A rollback hook is harder to implement robustly than a commit hook, since a "
"variety of things can cause an implicit rollback."
msgstr "事务回滚钩子相比事务提交钩子更难实现，因为各种各样的情况都可能造成隐式回滚。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:409
msgid ""
"For instance, if your database connection is dropped because your process "
"was killed without a chance to shut down gracefully, your rollback hook will"
" never run."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:413
msgid ""
"The solution is simple: instead of doing something during the atomic block "
"(transaction) and then undoing it if the transaction fails, use "
":func:`on_commit` to delay doing it in the first place until after the "
"transaction succeeds. It's a lot easier to undo something you never did in "
"the first place!"
msgstr "解决方法很简单，与其在执行事务时（原子操作）进行某项操作，当事务执行失败后再取消这项操作，不如使用 :func:`on_commit` 来延迟该项操作，直到事务成功后再进行操作。毕竟事务成功后你才能确保之后的操作是有意义的。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:420
msgid "Low-level APIs"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:424
msgid ""
"Always prefer :func:`atomic` if possible at all. It accounts for the "
"idiosyncrasies of each database and prevents invalid operations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:427
msgid ""
"The low level APIs are only useful if you're implementing your own "
"transaction management."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:435
msgid ""
"Django provides a straightforward API in the :mod:`django.db.transaction` "
"module to manage the autocommit state of each database connection."
msgstr " Django 在模块 :mod:`django.db.transaction` 中提供了一个直接的 API 去管理不同数据库的自动提交情况。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:442
#: ../../../../sources/2.2/docs/topics/db/transactions.txt:477
msgid ""
"These functions take a ``using`` argument which should be the name of a "
"database. If it isn't provided, Django uses the ``\"default\"`` database."
msgstr "这些函数使接受一个  ``using`` 参数表示所要操作的数据库。如果未提供，则   Django 使用 ``\"default\"`` 数据库。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:445
msgid ""
"Autocommit is initially turned on. If you turn it off, it's your "
"responsibility to restore it."
msgstr "自动提交默认为开启，如果你将它关闭，自己承担后果。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:448
msgid ""
"Once you turn autocommit off, you get the default behavior of your database "
"adapter, and Django won't help you. Although that behavior is specified in "
":pep:`249`, implementations of adapters aren't always consistent with one "
"another. Review the documentation of the adapter you're using carefully."
msgstr "一旦你关闭了自动提交， Django 将无法帮助你，数据库将会按照你使用的数据库适配器的默认行为进行操作。虽然适配器的标准经过了 :pep:`249` 详细规定，但不同适配器的实现方式并不总是一致的。你需要谨慎地查看你所使用的适配器的文档。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:453
msgid ""
"You must ensure that no transaction is active, usually by issuing a "
":func:`commit` or a :func:`rollback`, before turning autocommit back on."
msgstr "在关闭自动提交之前，你必须确保当前没有活动的事务，通常你可以执行 :func:`commit` 或者 :func:`rollback` 函数以达到该条件。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:456
msgid ""
"Django will refuse to turn autocommit off when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr "当一个原子 :func:`atomic` 事务处于活动状态时， Django 将会拒绝关闭自动提交的请求，因为这样会破坏原子性。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:460
msgid "Transactions"
msgstr "事务"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:462
msgid ""
"A transaction is an atomic set of database queries. Even if your program "
"crashes, the database guarantees that either all the changes will be "
"applied, or none of them."
msgstr "事务是指具有原子性的一系列数据库操作。即使你的程序崩溃，数据库也会确保这些操作要么全部完成要么全部都未执行。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:466
msgid ""
"Django doesn't provide an API to start a transaction. The expected way to "
"start a transaction is to disable autocommit with :func:`set_autocommit`."
msgstr " Django 并没有提供一个直接的 API 来创建一个事务，如果需要手动创建一个事务必须通过 :func:`set_autocommit` 函数关闭自动提交。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:469
msgid ""
"Once you're in a transaction, you can choose either to apply the changes "
"you've performed until this point with :func:`commit`, or to cancel them "
"with :func:`rollback`. These functions are defined in "
":mod:`django.db.transaction`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:480
msgid ""
"Django will refuse to commit or to rollback when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr "当一个原子 :func:`atomic` 事务处于活动状态时， Django 将会拒绝进行事务提交或者事务回滚，因为这样会破坏原子性。"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:488
msgid ""
"A savepoint is a marker within a transaction that enables you to roll back "
"part of a transaction, rather than the full transaction. Savepoints are "
"available with the SQLite, PostgreSQL, Oracle, and MySQL (when using the "
"InnoDB storage engine) backends. Other backends provide the savepoint "
"functions, but they're empty operations -- they don't actually do anything."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:494
msgid ""
"Savepoints aren't especially useful if you are using autocommit, the default"
" behavior of Django. However, once you open a transaction with "
":func:`atomic`, you build up a series of database operations awaiting a "
"commit or rollback. If you issue a rollback, the entire transaction is "
"rolled back. Savepoints provide the ability to perform a fine-grained "
"rollback, rather than the full rollback that would be performed by "
"``transaction.rollback()``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:501
msgid ""
"When the :func:`atomic` decorator is nested, it creates a savepoint to allow"
" partial commit or rollback. You're strongly encouraged to use "
":func:`atomic` rather than the functions described below, but they're still "
"part of the public API, and there's no plan to deprecate them."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:506
msgid ""
"Each of these functions takes a ``using`` argument which should be the name "
"of a database for which the behavior applies.  If no ``using`` argument is "
"provided then the ``\"default\"`` database is used."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:510
msgid ""
"Savepoints are controlled by three functions in "
":mod:`django.db.transaction`:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:514
msgid ""
"Creates a new savepoint. This marks a point in the transaction that is known"
" to be in a \"good\" state. Returns the savepoint ID (``sid``)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:519
msgid ""
"Releases savepoint ``sid``. The changes performed since the savepoint was "
"created become part of the transaction."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:524
msgid "Rolls back the transaction to savepoint ``sid``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:526
msgid ""
"These functions do nothing if savepoints aren't supported or if the database"
" is in autocommit mode."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:529
msgid "In addition, there's a utility function:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:533
msgid "Resets the counter used to generate unique savepoint IDs."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:535
msgid "The following example demonstrates the use of savepoints::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:558
msgid ""
"Savepoints may be used to recover from a database error by performing a "
"partial rollback. If you're doing this inside an :func:`atomic` block, the "
"entire block will still be rolled back, because it doesn't know you've "
"handled the situation at a lower level! To prevent this, you can control the"
" rollback behavior with the following functions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:568
msgid ""
"Setting the rollback flag to ``True`` forces a rollback when exiting the "
"innermost atomic block. This may be useful to trigger a rollback without "
"raising an exception."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:572
msgid ""
"Setting it to ``False`` prevents such a rollback. Before doing that, make "
"sure you've rolled back the transaction to a known-good savepoint within the"
" current atomic block! Otherwise you're breaking atomicity and data "
"corruption may occur."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:578
msgid "Database-specific notes"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:583
msgid "Savepoints in SQLite"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:585
msgid ""
"While SQLite supports savepoints, a flaw in the design of the :mod:`sqlite3`"
" module makes them hardly usable."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:588
msgid ""
"When autocommit is enabled, savepoints don't make sense. When it's disabled,"
" :mod:`sqlite3` commits implicitly before savepoint statements. (In fact, it"
" commits before any statement other than ``SELECT``, ``INSERT``, ``UPDATE``,"
" ``DELETE`` and ``REPLACE``.) This bug has two consequences:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:593
msgid ""
"The low level APIs for savepoints are only usable inside a transaction ie. "
"inside an :func:`atomic` block."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:595
msgid "It's impossible to use :func:`atomic` when autocommit is turned off."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:598
msgid "Transactions in MySQL"
msgstr "MySQL 中的事务"

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:600
msgid ""
"If you're using MySQL, your tables may or may not support transactions; it "
"depends on your MySQL version and the table types you're using. (By \"table "
"types,\" we mean something like \"InnoDB\" or \"MyISAM\".) MySQL transaction"
" peculiarities are outside the scope of this article, but the MySQL site has"
" `information on MySQL transactions`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:606
msgid ""
"If your MySQL setup does *not* support transactions, then Django will always"
" function in autocommit mode: statements will be executed and committed as "
"soon as they're called. If your MySQL setup *does* support transactions, "
"Django will handle transactions as explained in this document."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:614
msgid "Handling exceptions within PostgreSQL transactions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:618
msgid ""
"This section is relevant only if you're implementing your own transaction "
"management. This problem cannot occur in Django's default mode and "
":func:`atomic` handles it automatically."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:622
msgid ""
"Inside a transaction, when a call to a PostgreSQL cursor raises an exception"
" (typically ``IntegrityError``), all subsequent SQL in the same transaction "
"will fail with the error \"current transaction is aborted, queries ignored "
"until end of transaction block\". While simple use of ``save()`` is unlikely"
" to raise an exception in PostgreSQL, there are more advanced usage patterns"
" which might, such as saving objects with unique fields, saving using the "
"force_insert/force_update flag, or invoking custom SQL."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:630
msgid "There are several ways to recover from this sort of error."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:633
msgid "Transaction rollback"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:635
msgid "The first option is to roll back the entire transaction. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:644
msgid ""
"Calling ``transaction.rollback()`` rolls back the entire transaction. Any "
"uncommitted database operations will be lost. In this example, the changes "
"made by ``a.save()`` would be lost, even though that operation raised no "
"error itself."
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:650
msgid "Savepoint rollback"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:652
msgid ""
"You can use :ref:`savepoints <topics-db-transactions-savepoints>` to control"
" the extent of a rollback. Before performing a database operation that could"
" fail, you can set or update the savepoint; that way, if the operation "
"fails, you can roll back the single offending operation, rather than the "
"entire transaction. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/db/transactions.txt:667
msgid ""
"In this example, ``a.save()`` will not be undone in the case where "
"``b.save()`` raises an exception."
msgstr ""

#: ../../../../sources/2.2/docs/topics/email.txt:3
msgid "Sending email"
msgstr "发送邮件"

#: ../../../../sources/2.2/docs/topics/email.txt:8
msgid ""
"Although Python makes sending email relatively easy via the :mod:`smtplib` "
"module, Django provides a couple of light wrappers over it. These wrappers "
"are provided to make sending email extra quick, to make it easy to test "
"email sending during development, and to provide support for platforms that "
"can't use SMTP."
msgstr "虽然 Python 借助 :mod:`smtplib` 模块简化了发送邮件的流程，但是 Django 在其基础上提供了更简化的支持。这些封装意在加快邮件发送，方便在开发时测试发送邮件，在不支持 SMTP 的平台上支持发送邮件。"

#: ../../../../sources/2.2/docs/topics/email.txt:14
msgid "The code lives in the ``django.core.mail`` module."
msgstr "这些代码位于 ``django.core.mail`` 模块。"

#: ../../../../sources/2.2/docs/topics/email.txt:19
msgid "In two lines::"
msgstr "仅需两行代码::"

#: ../../../../sources/2.2/docs/topics/email.txt:31
msgid ""
"Mail is sent using the SMTP host and port specified in the "
":setting:`EMAIL_HOST` and :setting:`EMAIL_PORT` settings. The "
":setting:`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD` settings, if "
"set, are used to authenticate to the SMTP server, and the "
":setting:`EMAIL_USE_TLS` and :setting:`EMAIL_USE_SSL` settings control "
"whether a secure connection is used."
msgstr "邮件是通过 SMTP 主机和端口发送的，由配置项 :setting:`EMAIL_HOST` 和 :setting:`EMAIL_PORT` 指定。如果配置了 :setting:`EMAIL_HOST_USER` 和 :setting:`EMAIL_HOST_PASSWORD` ，那么它们将被用来验证  SMTP 服务器。配置项 :setting:`EMAIL_USE_TLS` 和 :setting:`EMAIL_USE_SSL` 控制是否使用安全连接。"

#: ../../../../sources/2.2/docs/topics/email.txt:40
msgid ""
"The character set of email sent with ``django.core.mail`` will be set to the"
" value of your :setting:`DEFAULT_CHARSET` setting."
msgstr "通过 ``django.core.mail`` 发送的邮件的字符编码由 :setting:`DEFAULT_CHARSET` 设置项指定。"

#: ../../../../sources/2.2/docs/topics/email.txt:44
msgid "``send_mail()``"
msgstr "``send_mail()``"

#: ../../../../sources/2.2/docs/topics/email.txt:48
msgid ""
"The simplest way to send email is using ``django.core.mail.send_mail()``."
msgstr "发送邮件最简单的方式就是使用 ``django.core.mail.send_mail()``。"

#: ../../../../sources/2.2/docs/topics/email.txt:51
msgid ""
"The ``subject``, ``message``, ``from_email`` and ``recipient_list`` "
"parameters are required."
msgstr "参数 ``subject``, ``message``, ``from_email`` 和 ``recipient_list`` 是必须的。"

#: ../../../../sources/2.2/docs/topics/email.txt:54
msgid "``subject``: A string."
msgstr "``subject``: 一个字符串。"

#: ../../../../sources/2.2/docs/topics/email.txt:55
msgid "``message``: A string."
msgstr "``message``: 一个字符串。"

#: ../../../../sources/2.2/docs/topics/email.txt:56
msgid "``from_email``: A string."
msgstr "``from_email``: 一个字符串。"

#: ../../../../sources/2.2/docs/topics/email.txt:57
msgid ""
"``recipient_list``: A list of strings, each an email address. Each member of"
" ``recipient_list`` will see the other recipients in the \"To:\" field of "
"the email message."
msgstr "``recipient_list``: 一个字符串列表，每项都是一个邮箱地址。``recipient_list`` 中的每个成员都可以在邮件的 \"收件人:\" 中看到其他的收件人。"

#: ../../../../sources/2.2/docs/topics/email.txt:60
msgid ""
"``fail_silently``: A boolean. When it's ``False``, ``send_mail()`` will "
"raise an :exc:`smtplib.SMTPException` if an error occurs. See the "
":mod:`smtplib` docs for a list of possible exceptions, all of which are "
"subclasses of :exc:`~smtplib.SMTPException`."
msgstr "``fail_silently``: 一个布尔值。若为 ``False``， ``send_mail()`` 会在发生错误时抛出 :exc:`smtplib.SMTPException` 。可在 :mod:`smtplib` 文档找到一系列可能的异常，它们都是 :exc:`~smtplib.SMTPException` 的子类。"

#: ../../../../sources/2.2/docs/topics/email.txt:64
msgid ""
"``auth_user``: The optional username to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the "
":setting:`EMAIL_HOST_USER` setting."
msgstr "``auth_user``: 可选的用户名，用于验证登陆 SMTP 服务器。 若未提供，Django 会使用 :setting:`EMAIL_HOST_USER` 指定的值。"

#: ../../../../sources/2.2/docs/topics/email.txt:67
msgid ""
"``auth_password``: The optional password to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the "
":setting:`EMAIL_HOST_PASSWORD` setting."
msgstr "``auth_password``: 可选的密码，用于验证登陆 SMTP 服务器。若未提供， Django 会使用 :setting:`EMAIL_HOST_PASSWORD` 指定的值。"

#: ../../../../sources/2.2/docs/topics/email.txt:70
msgid ""
"``connection``: The optional email backend to use to send the mail. If "
"unspecified, an instance of the default backend will be used. See the "
"documentation on :ref:`Email backends <topic-email-backends>` for more "
"details."
msgstr "``connection``: 可选参数，发送邮件使用的后端。若未指定，则使用默认的后端。查询 :ref:`邮件后端 <topic-email-backends>` 文档获取更多细节。"

#: ../../../../sources/2.2/docs/topics/email.txt:74
msgid ""
"``html_message``: If ``html_message`` is provided, the resulting email will "
"be a :mimetype:`multipart/alternative` email with ``message`` as the "
":mimetype:`text/plain` content type and ``html_message`` as the "
":mimetype:`text/html` content type."
msgstr "``html_message``: 若提供了 ``html_message``，会使邮件成为 :mimetype:`multipart/alternative` 的实例， ``message`` 的内容类型则是 :mimetype:`text/plain` ，并且 ``html_message`` 的内容类型是 :mimetype:`text/html` 。"

#: ../../../../sources/2.2/docs/topics/email.txt:79
msgid ""
"The return value will be the number of successfully delivered messages "
"(which can be ``0`` or ``1`` since it can only send one message)."
msgstr "返回值会是成功发送的信息的数量（只能是 ``0`` 或 ``1`` ，因为同时只能发送一条消息）。"

#: ../../../../sources/2.2/docs/topics/email.txt:83
msgid "``send_mass_mail()``"
msgstr "``send_mass_mail()``"

#: ../../../../sources/2.2/docs/topics/email.txt:87
msgid ""
"``django.core.mail.send_mass_mail()`` is intended to handle mass emailing."
msgstr "``django.core.mail.send_mass_mail()`` 用于批量发送邮件。"

#: ../../../../sources/2.2/docs/topics/email.txt:89
msgid "``datatuple`` is a tuple in which each element is in this format::"
msgstr "``datatuple`` 是一个元组，形式如下::"

#: ../../../../sources/2.2/docs/topics/email.txt:93
msgid ""
"``fail_silently``, ``auth_user`` and ``auth_password`` have the same "
"functions as in :meth:`~django.core.mail.send_mail()`."
msgstr "``fail_silently``， ``auth_user`` 和 ``auth_password`` 拥有在 :meth:`~django.core.mail.send_mail()` 中一样的功能。"

#: ../../../../sources/2.2/docs/topics/email.txt:96
msgid ""
"Each separate element of ``datatuple`` results in a separate email message. "
"As in :meth:`~django.core.mail.send_mail()`, recipients in the same "
"``recipient_list`` will all see the other addresses in the email messages' "
"\"To:\" field."
msgstr "``datatuple`` 参数的每个元素会生成一份独立的邮件内容。就像 :meth:`~django.core.mail.send_mail()` 中的一样， ``recipient_list`` 中的每个收件人会在邮件的 \"收件人:\" 中看到其他收件人的地址一样。"

#: ../../../../sources/2.2/docs/topics/email.txt:101
msgid ""
"For example, the following code would send two different messages to two "
"different sets of recipients; however, only one connection to the mail "
"server would be opened::"
msgstr "举个例子，以下代码会向两个不同的收件人列表发送两封不同的邮件，却复用了同一条连接::"

#: ../../../../sources/2.2/docs/topics/email.txt:109
msgid ""
"The return value will be the number of successfully delivered messages."
msgstr "返回值是成功发送的消息的数量。"

#: ../../../../sources/2.2/docs/topics/email.txt:112
msgid "``send_mass_mail()`` vs. ``send_mail()``"
msgstr "``send_mass_mail()`` vs. ``send_mail()``"

#: ../../../../sources/2.2/docs/topics/email.txt:114
msgid ""
"The main difference between :meth:`~django.core.mail.send_mass_mail()` and "
":meth:`~django.core.mail.send_mail()` is that "
":meth:`~django.core.mail.send_mail()` opens a connection to the mail server "
"each time it's executed, while :meth:`~django.core.mail.send_mass_mail()` "
"uses a single connection for all of its messages. This makes "
":meth:`~django.core.mail.send_mass_mail()` slightly more efficient."
msgstr " :meth:`~django.core.mail.send_mass_mail()` 和 :meth:`~django.core.mail.send_mail()` 之间的主要区别是 :meth:`~django.core.mail.send_mail()` 每次执行都会新建一条至邮件服务器的连接，而 :meth:`~django.core.mail.send_mass_mail()` 对每封邮件复用同一个连接。这使得 :meth:`~django.core.mail.send_mass_mail()` 更高效。"

#: ../../../../sources/2.2/docs/topics/email.txt:122
msgid "``mail_admins()``"
msgstr "``mail_admins()``"

#: ../../../../sources/2.2/docs/topics/email.txt:126
msgid ""
"``django.core.mail.mail_admins()`` is a shortcut for sending an email to the"
" site admins, as defined in the :setting:`ADMINS` setting."
msgstr "``django.core.mail.mail_admins()`` 是定义在 :setting:`ADMINS` 配置项中，用于向网站所有者快速发送邮件。"

#: ../../../../sources/2.2/docs/topics/email.txt:129
msgid ""
"``mail_admins()`` prefixes the subject with the value of the "
":setting:`EMAIL_SUBJECT_PREFIX` setting, which is ``\"[Django] \"`` by "
"default."
msgstr "``mail_admins()`` 在主题前面添加 :setting:`EMAIL_SUBJECT_PREFIX` 指定的前缀，默认是 ``\"[Django] \"`` 。"

#: ../../../../sources/2.2/docs/topics/email.txt:132
msgid ""
"The \"From:\" header of the email will be the value of the "
":setting:`SERVER_EMAIL` setting."
msgstr "邮件头的 \"发件人:\" 由 :setting:`SERVER_EMAIL` 配置项指定。"

#: ../../../../sources/2.2/docs/topics/email.txt:135
msgid "This method exists for convenience and readability."
msgstr "创建这个方法是为了方便和可读性。"

#: ../../../../sources/2.2/docs/topics/email.txt:137
msgid ""
"If ``html_message`` is provided, the resulting email will be a "
":mimetype:`multipart/alternative` email with ``message`` as the "
":mimetype:`text/plain` content type and ``html_message`` as the "
":mimetype:`text/html` content type."
msgstr "若提供了 ``html_message``，会使邮件成为 :mimetype:`multipart/alternative` 的实例， ``message`` 的内容类型则是 :mimetype:`text/plain` ，并且 ``html_message`` 的内容类型是 :mimetype:`text/html` 。"

#: ../../../../sources/2.2/docs/topics/email.txt:143
msgid "``mail_managers()``"
msgstr "``mail_managers()``"

#: ../../../../sources/2.2/docs/topics/email.txt:147
msgid ""
"``django.core.mail.mail_managers()`` is just like ``mail_admins()``, except "
"it sends an email to the site managers, as defined in the "
":setting:`MANAGERS` setting."
msgstr "``django.core.mail.mail_managers()`` 类似 ``mail_admins()``，但它向 :setting:`MANAGERS` 指定的管理员们发送邮件。"

#: ../../../../sources/2.2/docs/topics/email.txt:152
#: ../../../../sources/2.2/docs/topics/http/sessions.txt:399
#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:118
#: ../../../../sources/2.2/docs/topics/http/urls.txt:583
#: ../../../../sources/2.2/docs/topics/logging.txt:236
msgid "Examples"
msgstr "示例"

#: ../../../../sources/2.2/docs/topics/email.txt:154
msgid ""
"This sends a single email to john@example.com and jane@example.com, with "
"them both appearing in the \"To:\"::"
msgstr "以下发送了一封邮件给 john@example.com 和 jane@example.com，他们都出现在 \"收件人:\"::"

#: ../../../../sources/2.2/docs/topics/email.txt:164
msgid ""
"This sends a message to john@example.com and jane@example.com, with them "
"both receiving a separate email::"
msgstr "以下分别发送了一封邮件给 john@example.com 和 jane@example.com，他们收到了独立的邮件::"

#: ../../../../sources/2.2/docs/topics/email.txt:174
msgid "Preventing header injection"
msgstr "防止头注入"

#: ../../../../sources/2.2/docs/topics/email.txt:176
msgid ""
"`Header injection`_ is a security exploit in which an attacker inserts extra"
" email headers to control the \"To:\" and \"From:\" in email messages that "
"your scripts generate."
msgstr "`Header injection`_ 是一个开发漏洞，攻击者可以利用它在邮件头插入额外信息，以控制脚本生成的邮件中的  \"收件人:\" 和 \"发件人:\" 内容。"

#: ../../../../sources/2.2/docs/topics/email.txt:180
msgid ""
"The Django email functions outlined above all protect against header "
"injection by forbidding newlines in header values. If any ``subject``, "
"``from_email`` or ``recipient_list`` contains a newline (in either Unix, "
"Windows or Mac style), the email function (e.g. "
":meth:`~django.core.mail.send_mail()`) will raise "
"``django.core.mail.BadHeaderError`` (a subclass of ``ValueError``) and, "
"hence, will not send the email. It's your responsibility to validate all "
"data before passing it to the email functions."
msgstr "Django 的邮件函数包含了以上所有的反头注入功能，通过在头中禁止新的行。如果 ``subject``， ``from_email`` 或 ``recipient_list`` 包含了新行（不管是 Unix，Windows 或 Mac 格式中的哪一种），邮件函数（比如 :meth:`~django.core.mail.send_mail()` ）都会抛出一个 ``django.core.mail.BadHeaderError`` （ ``ValueError`` 的子类），这会中断邮件发送。你需要在将参数传给邮件函数前确保数据的有效性和合法性。"

#: ../../../../sources/2.2/docs/topics/email.txt:188
msgid ""
"If a ``message`` contains headers at the start of the string, the headers "
"will simply be printed as the first bit of the email message."
msgstr "如果邮件的 ``内容`` 的开始部分包含了邮件头信息，这些头信息只会作为邮件内容原样打印。"

#: ../../../../sources/2.2/docs/topics/email.txt:191
msgid ""
"Here's an example view that takes a ``subject``, ``message`` and "
"``from_email`` from the request's POST data, sends that to admin@example.com"
" and redirects to \"/contact/thanks/\" when it's done::"
msgstr "以下是一个实例视图，从请求的 POST 数据中获取 ``subject``， ``message`` 和 ``from_email``，并将其发送至 admin@example.com ，成功后再重定向至 \"/contact/thanks/\" ::"

#: ../../../../sources/2.2/docs/topics/email.txt:218
msgid "The ``EmailMessage`` class"
msgstr "``EmailMessage`` 类"

#: ../../../../sources/2.2/docs/topics/email.txt:220
msgid ""
"Django's :meth:`~django.core.mail.send_mail()` and "
":meth:`~django.core.mail.send_mass_mail()` functions are actually thin "
"wrappers that make use of the :class:`~django.core.mail.EmailMessage` class."
msgstr "Django 的 :meth:`~django.core.mail.send_mail()` 和 :meth:`~django.core.mail.send_mass_mail()` 函数仅是对类 :class:`~django.core.mail.EmailMessage` 的简单封装利用。"

#: ../../../../sources/2.2/docs/topics/email.txt:224
msgid ""
"Not all features of the :class:`~django.core.mail.EmailMessage` class are "
"available through the :meth:`~django.core.mail.send_mail()` and related "
"wrapper functions. If you wish to use advanced features, such as BCC'ed "
"recipients, file attachments, or multi-part email, you'll need to create "
":class:`~django.core.mail.EmailMessage` instances directly."
msgstr "通过 :meth:`~django.core.mail.send_mail()` 和其它关联的封装函数，不是所有 :class:`~django.core.mail.EmailMessage` 的功能都是可用的。如果你想用进阶功能，比如密送收件人，附件，分段邮件，你需要直接创建 :class:`~django.core.mail.EmailMessage` 的实例。"

#: ../../../../sources/2.2/docs/topics/email.txt:231
msgid ""
"This is a design feature. :meth:`~django.core.mail.send_mail()` and related "
"functions were originally the only interface Django provided. However, the "
"list of parameters they accepted was slowly growing over time. It made sense"
" to move to a more object-oriented design for email messages and retain the "
"original functions only for backwards compatibility."
msgstr "这是一种设计方式。最初 Django 只提供了 :meth:`~django.core.mail.send_mail()` 和其它关联的函数。但是，随着时间的推移，它们的参数列表在慢慢地变长。所以，我们转向了更加面向对象的设计。在兼顾发送邮件的功能的同时，出于向后兼容的考虑，保留了这些函数。"

#: ../../../../sources/2.2/docs/topics/email.txt:238
msgid ""
":class:`~django.core.mail.EmailMessage` is responsible for creating the "
"email message itself. The :ref:`email backend <topic-email-backends>` is "
"then responsible for sending the email."
msgstr ":class:`~django.core.mail.EmailMessage` 用于创建邮件消息。 :ref:`邮件后端  <topic-email-backends>` 用于发送邮件。"

#: ../../../../sources/2.2/docs/topics/email.txt:242
msgid ""
"For convenience, :class:`~django.core.mail.EmailMessage` provides a simple "
"``send()`` method for sending a single email. If you need to send multiple "
"messages, the email backend API :ref:`provides an alternative <topics-"
"sending-multiple-emails>`."
msgstr "出于方便考虑， :class:`~django.core.mail.EmailMessage` 提供了一个简单的 ``send()`` 方法，用于发送一封邮件。如果你需要发送多封邮件，邮件后端 API :ref:`提供了选择 <topics-sending-multiple-emails>`。"

#: ../../../../sources/2.2/docs/topics/email.txt:248
msgid "``EmailMessage`` Objects"
msgstr "``EmailMessage`` 对象"

#: ../../../../sources/2.2/docs/topics/email.txt:252
msgid ""
"The :class:`~django.core.mail.EmailMessage` class is initialized with the "
"following parameters (in the given order, if positional arguments are used)."
" All parameters are optional and can be set at any time prior to calling the"
" ``send()`` method."
msgstr "类 :class:`~django.core.mail.EmailMessage` 通过以下参数构造（可选参数要按指定顺序提供）。所以的参数都是可选的，且可在调用 ``send()`` 方法前设置。"

#: ../../../../sources/2.2/docs/topics/email.txt:257
msgid "``subject``: The subject line of the email."
msgstr "``subject``: 邮件的主题。"

#: ../../../../sources/2.2/docs/topics/email.txt:259
msgid "``body``: The body text. This should be a plain text message."
msgstr "``body``: 邮件内容，需要为纯文本格式。"

#: ../../../../sources/2.2/docs/topics/email.txt:261
msgid ""
"``from_email``: The sender's address. Both ``fred@example.com`` and ``Fred "
"<fred@example.com>`` forms are legal. If omitted, the "
":setting:`DEFAULT_FROM_EMAIL` setting is used."
msgstr "``from_email``: 发件人地址。  ``fred@example.com`` 和 ``Fred <fred@example.com>`` 形式都是合法的。若省略，则使用 :setting:`DEFAULT_FROM_EMAIL` 配置的值。"

#: ../../../../sources/2.2/docs/topics/email.txt:265
msgid "``to``: A list or tuple of recipient addresses."
msgstr "``to``: 一个包含收件人地址的列表或元组。"

#: ../../../../sources/2.2/docs/topics/email.txt:267
msgid ""
"``bcc``: A list or tuple of addresses used in the \"Bcc\" header when "
"sending the email."
msgstr "``bcc``: 一个包含地址的列表或元组，指定“密送”对象。"

#: ../../../../sources/2.2/docs/topics/email.txt:270
msgid ""
"``connection``: An email backend instance. Use this parameter if you want to"
" use the same connection for multiple messages. If omitted, a new connection"
" is created when ``send()`` is called."
msgstr "``connection``: 一个邮件后端的实例。若在发送多份邮件时，若想复用连接，则设置此参数。如果省略，在调用 ``send()`` 时总会创建新连接。"

#: ../../../../sources/2.2/docs/topics/email.txt:274
msgid ""
"``attachments``: A list of attachments to put on the message. These can be "
"either :class:`~email.mime.base.MIMEBase` instances, or ``(filename, "
"content, mimetype)`` triples."
msgstr "``attachments``: 附加在邮件中的附件列表。 可以是 :class:`~email.mime.base.MIMEBase` 的实例，或 ``(文件名，内容，mimetype)`` 的元组。"

#: ../../../../sources/2.2/docs/topics/email.txt:278
msgid ""
"``headers``: A dictionary of extra headers to put on the message. The keys "
"are the header name, values are the header values. It's up to the caller to "
"ensure header names and values are in the correct format for an email "
"message. The corresponding attribute is ``extra_headers``."
msgstr "``headers``: 一个字典，包含邮件中额外的头信息。字典的关键字是头的名称，值为头的值。需要由调用者确保头名和值的正确性。对应的属性是 ``extra_headers`` 。"

#: ../../../../sources/2.2/docs/topics/email.txt:283
msgid ""
"``cc``: A list or tuple of recipient addresses used in the \"Cc\" header "
"when sending the email."
msgstr "``cc``: 一个包含收件人地址的列表或元组，指定“抄送”对象。"

#: ../../../../sources/2.2/docs/topics/email.txt:286
msgid ""
"``reply_to``: A list or tuple of recipient addresses used in the \"Reply-"
"To\" header when sending the email."
msgstr "``reply_to``: 一个包含收件人地址的列表或元组，指定“回复”对象。"

#: ../../../../sources/2.2/docs/topics/email.txt:303
msgid "The class has the following methods:"
msgstr "这个类拥有以下方法："

#: ../../../../sources/2.2/docs/topics/email.txt:305
msgid ""
"``send(fail_silently=False)`` sends the message. If a connection was "
"specified when the email was constructed, that connection will be used. "
"Otherwise, an instance of the default backend will be instantiated and used."
" If the keyword argument ``fail_silently`` is ``True``, exceptions raised "
"while sending the message will be quashed. An empty list of recipients will "
"not raise an exception."
msgstr "``send(fail_silently=False)`` 发送邮件。若在构建邮件时指定了连接，则会使用这个连接。否则，会实例化并使用一个默认的后端。若指定关键字参数 ``fail_silently`` 为 ``True``，发送邮件时抛出的异常会被和谐掉。一个空的收件人列表不会抛出异常。"

#: ../../../../sources/2.2/docs/topics/email.txt:312
msgid ""
"``message()`` constructs a ``django.core.mail.SafeMIMEText`` object (a "
"subclass of Python's :class:`~email.mime.text.MIMEText` class) or a "
"``django.core.mail.SafeMIMEMultipart`` object holding the message to be "
"sent. If you ever need to extend the :class:`~django.core.mail.EmailMessage`"
" class, you'll probably want to override this method to put the content you "
"want into the MIME object."
msgstr "``message()`` 构建了一个 ``django.core.mail.SafeMIMEText`` 对象（ :class:`~email.mime.text.MIMEText` 的子类）或一个 ``django.core.mail.SafeMIMEMultipart`` 对象用于存储邮件内容。如果你想继承 :class:`~django.core.mail.EmailMessage` ，你可能期望重写这个方法，在 MIME 对象中放入你期望的内容。"

#: ../../../../sources/2.2/docs/topics/email.txt:319
msgid ""
"``recipients()`` returns a list of all the recipients of the message, "
"whether they're recorded in the ``to``, ``cc`` or ``bcc`` attributes. This "
"is another method you might need to override when subclassing, because the "
"SMTP server needs to be told the full list of recipients when the message is"
" sent. If you add another way to specify recipients in your class, they need"
" to be returned from this method as well."
msgstr "``recipients()`` 返回一个包含邮件所以收件人的列表，不管他们是收件人，抄送人，密送人中的哪一个。这可能是另一个你在创建子类时想复现的方法，因为 SMTP 服务器需要你在发送邮件时告诉它完整的收件人列表。如果你在子类中实现了另一个方法，指定收件人列表，这个方法必须也返回相同的结果。"

#: ../../../../sources/2.2/docs/topics/email.txt:326
msgid ""
"``attach()`` creates a new file attachment and adds it to the message. There"
" are two ways to call ``attach()``:"
msgstr "``attach()`` 创建一个新的附件，并加到邮件。有两种调用 ``attach()`` 的方式:"

#: ../../../../sources/2.2/docs/topics/email.txt:329
msgid ""
"You can pass it a single argument that is a "
":class:`~email.mime.base.MIMEBase` instance. This will be inserted directly "
"into the resulting message."
msgstr "可以仅传送一个 :class:`~email.mime.base.MIMEBase` 的实例。这会被直接插入邮件。"

#: ../../../../sources/2.2/docs/topics/email.txt:333
msgid ""
"Alternatively, you can pass ``attach()`` three arguments: ``filename``, "
"``content`` and ``mimetype``. ``filename`` is the name of the file "
"attachment as it will appear in the email, ``content`` is the data that will"
" be contained inside the attachment and ``mimetype`` is the optional MIME "
"type for the attachment. If you omit ``mimetype``, the MIME content type "
"will be guessed from the filename of the attachment."
msgstr "另一个可选的方案，你可以向 ``attach()`` 传递 3 个参数： ``filename`` ， ``content`` 和 ``mimetype``。 ``filename`` 是文件附件的名字，它会显示在邮件中， ``content`` 是附件包含的数据，而 ``mimetype`` 是一个可选参数，指定附件的 MIME 类型。如果你省略了 ``mimetype``，MIME 类型将会参考附件的文件名。"

#: ../../../../sources/2.2/docs/topics/email.txt:345
msgid ""
"If you specify a ``mimetype`` of ``message/rfc822``, it will also accept "
":class:`django.core.mail.EmailMessage` and "
":py:class:`email.message.Message`."
msgstr "若你指定 ``mimetype`` 为 ``message/rfc822``，这将会使附件同时接受 :class:`django.core.mail.EmailMessage` 和 :py:class:`email.message.Message`。"

#: ../../../../sources/2.2/docs/topics/email.txt:348
msgid ""
"For a ``mimetype`` starting with ``text/``, content is expected to be a "
"string. Binary data will be decoded using UTF-8, and if that fails, the MIME"
" type will be changed to ``application/octet-stream`` and the data will be "
"attached unchanged."
msgstr "以 ``text/`` 开头的 ``mimetype`` 类型，其内容应该是字符串。二进制数据将会尝试以 UTF-8 解码，如果失败了，MIME 类型会被改为 ``application/octet-stream``，并不会修改数据内容。"

#: ../../../../sources/2.2/docs/topics/email.txt:353
msgid ""
"In addition, ``message/rfc822`` attachments will no longer be base64-encoded"
" in violation of :rfc:`2046#section-5.2.1`, which can cause issues with "
"displaying the attachments in `Evolution`__ and `Thunderbird`__."
msgstr "此外， ``message/rfc822`` 附件不再是 base64 编码，因为违反了 :rfc:`2046#section-5.2.1` 。之前在 `Evolution`__ 和 `Thunderbird`__ 会造成显示问题。"

#: ../../../../sources/2.2/docs/topics/email.txt:360
msgid ""
"``attach_file()`` creates a new attachment using a file from your "
"filesystem. Call it with the path of the file to attach and, optionally, the"
" MIME type to use for the attachment. If the MIME type is omitted, it will "
"be guessed from the filename. The simplest use would be::"
msgstr "``attach_file()`` 通过从本地文件系统中选择一个文件的方式创建附件。调用时，传入文件的路径。附件的 MIME 类型是可选的。如果省略了，会从参考文件名。最简单的使用方式如下::"

#: ../../../../sources/2.2/docs/topics/email.txt:367
msgid ""
"For MIME types starting with ``text/``, binary data is handled as in "
"``attach()``."
msgstr "对于 MIME 类型以 ``text/`` 开头的，二进制数据的处理方式与 ``attach()`` 中的一样。"

#: ../../../../sources/2.2/docs/topics/email.txt:371
msgid "Sending alternative content types"
msgstr "发送可选的内容类型。"

#: ../../../../sources/2.2/docs/topics/email.txt:373
msgid ""
"It can be useful to include multiple versions of the content in an email; "
"the classic example is to send both text and HTML versions of a message. "
"With Django's email library, you can do this using the "
"``EmailMultiAlternatives`` class. This subclass of "
":class:`~django.core.mail.EmailMessage` has an ``attach_alternative()`` "
"method for including extra versions of the message body in the email. All "
"the other methods (including the class initialization) are inherited "
"directly from :class:`~django.core.mail.EmailMessage`."
msgstr "在邮件中包含不同类型的内容是很实用的技巧；典型的例子是在邮件中同时包含文本和 HTML 内容。通过 Django 的邮件库，你可以使用 ``EmailMultiAlternatives`` 完成目的。它是 :class:`~django.core.mail.EmailMessage` 的子类，有一个 ``attach_alternative()`` 方法，用于在邮件主体中添加不同类型的内容。所以其它的方法（包括类构造器）都直接从父类 :class:`~django.core.mail.EmailMessage` 继承。"

#: ../../../../sources/2.2/docs/topics/email.txt:381
msgid "To send a text and HTML combination, you could write::"
msgstr "发送文本和 HTML 的混合体，你可以这么写::"

#: ../../../../sources/2.2/docs/topics/email.txt:392
msgid ""
"By default, the MIME type of the ``body`` parameter in an "
":class:`~django.core.mail.EmailMessage` is ``\"text/plain\"``. It is good "
"practice to leave this alone, because it guarantees that any recipient will "
"be able to read the email, regardless of their mail client. However, if you "
"are confident that your recipients can handle an alternative content type, "
"you can use the ``content_subtype`` attribute on the "
":class:`~django.core.mail.EmailMessage` class to change the main content "
"type. The major type will always be ``\"text\"``, but you can change the "
"subtype. For example::"
msgstr "默认情况下，:class:`~django.core.mail.EmailMessage` 的 ``body`` 参数的 MIME 类型是 ``\"text/plain\"``。经验告诉我们，不改它会更好。因为这样能确保不管收件人使用何种邮件客户端都可以正常的阅读邮件。不过，如果你能确保你的收件人都能处理可选的内容类型，你可以使用 :class:`~django.core.mail.EmailMessage` 类的 ``content_subtype`` 属性改变主要内容的类型。主类型一般总是 ``\"text\"``，但你可以修改子类型。比如::"

#: ../../../../sources/2.2/docs/topics/email.txt:409
msgid "Email backends"
msgstr "邮件后端"

#: ../../../../sources/2.2/docs/topics/email.txt:411
msgid "The actual sending of an email is handled by the email backend."
msgstr "发送邮件的动作是由邮件后端执行的。"

#: ../../../../sources/2.2/docs/topics/email.txt:413
msgid "The email backend class has the following methods:"
msgstr "邮件后端类拥有以下方法："

#: ../../../../sources/2.2/docs/topics/email.txt:415
msgid "``open()`` instantiates a long-lived email-sending connection."
msgstr "``open()`` 创建一个发送邮件的长连接。"

#: ../../../../sources/2.2/docs/topics/email.txt:417
msgid "``close()`` closes the current email-sending connection."
msgstr "``close()`` 关闭当前发送邮件的连接。"

#: ../../../../sources/2.2/docs/topics/email.txt:419
msgid ""
"``send_messages(email_messages)`` sends a list of "
":class:`~django.core.mail.EmailMessage` objects. If the connection is not "
"open, this call will implicitly open the connection, and close the "
"connection afterwards. If the connection is already open, it will be left "
"open after mail has been sent."
msgstr "``send_messages(email_messages)`` 发送包含多个 :class:`~django.core.mail.EmailMessage` 对象的列表。发送邮件时，若连接未建立，它会默默地创建连接，并在随后关闭。若连接已建立，它发送完邮件后，会保留连接。"

#: ../../../../sources/2.2/docs/topics/email.txt:425
msgid ""
"It can also be used as a context manager, which will automatically call "
"``open()`` and ``close()`` as needed::"
msgstr "这也可以用作内容管理器，它会在需要的时候自动调用 ``open()`` 和 ``close()``::"

#: ../../../../sources/2.2/docs/topics/email.txt:441
msgid "Obtaining an instance of an email backend"
msgstr "获取邮件后端的一个实例"

#: ../../../../sources/2.2/docs/topics/email.txt:443
msgid ""
"The :meth:`get_connection` function in ``django.core.mail`` returns an "
"instance of the email backend that you can use."
msgstr "``django.core.mail`` 中的 :meth:`get_connection` 函数返回一个你能使用的邮件后端实例。"

#: ../../../../sources/2.2/docs/topics/email.txt:450
msgid ""
"By default, a call to ``get_connection()`` will return an instance of the "
"email backend specified in :setting:`EMAIL_BACKEND`. If you specify the "
"``backend`` argument, an instance of that backend will be instantiated."
msgstr "默认情况下，调用 ``get_connection()`` 会返回配置项 :setting:`EMAIL_BACKEND` 指定的后端。如果你传入了 ``backend`` 参数，将会返回该后端的实例。"

#: ../../../../sources/2.2/docs/topics/email.txt:454
msgid ""
"The ``fail_silently`` argument controls how the backend should handle "
"errors. If ``fail_silently`` is True, exceptions during the email sending "
"process will be silently ignored."
msgstr "``fail_silently`` 控制后端怎么处理错误。若 ``fail_silently`` 为 True，发送邮件过程中的异常都会被和谐掉。"

#: ../../../../sources/2.2/docs/topics/email.txt:458
msgid ""
"All other arguments are passed directly to the constructor of the email "
"backend."
msgstr "剩余的参数将直接传给邮件后端的构造器。"

#: ../../../../sources/2.2/docs/topics/email.txt:461
msgid ""
"Django ships with several email sending backends. With the exception of the "
"SMTP backend (which is the default), these backends are only useful during "
"testing and development. If you have special email sending requirements, you"
" can :ref:`write your own email backend <topic-custom-email-backend>`."
msgstr "Django 自带了几种邮件后端。除了 SMTP 后端（默认值）外，这些后端应仅在开发和测试阶段使用。如果对发送邮件有特殊的需求，你可以 :ref:`编写自定义后端 <topic-custom-email-backend>`。"

#: ../../../../sources/2.2/docs/topics/email.txt:469
msgid "SMTP backend"
msgstr "SMTP 后端"

#: ../../../../sources/2.2/docs/topics/email.txt:473
msgid "This is the default backend. Email will be sent through a SMTP server."
msgstr "这是默认的后端。邮件将会通过 SMTP 服务器发送。"

#: ../../../../sources/2.2/docs/topics/email.txt:475
msgid ""
"The value for each argument is retrieved from the matching setting if the "
"argument is ``None``:"
msgstr "若以下某个参数值为 ``None``，则会从匹配的设置项中读取："

#: ../../../../sources/2.2/docs/topics/email.txt:478
msgid "``host``: :setting:`EMAIL_HOST`"
msgstr "``host``: :setting:`EMAIL_HOST`"

#: ../../../../sources/2.2/docs/topics/email.txt:479
msgid "``port``: :setting:`EMAIL_PORT`"
msgstr "``port``: :setting:`EMAIL_PORT`"

#: ../../../../sources/2.2/docs/topics/email.txt:480
msgid "``username``: :setting:`EMAIL_HOST_USER`"
msgstr "``username``: :setting:`EMAIL_HOST_USER`"

#: ../../../../sources/2.2/docs/topics/email.txt:481
msgid "``password``: :setting:`EMAIL_HOST_PASSWORD`"
msgstr "``password``: :setting:`EMAIL_HOST_PASSWORD`"

#: ../../../../sources/2.2/docs/topics/email.txt:482
msgid "``use_tls``: :setting:`EMAIL_USE_TLS`"
msgstr "``use_tls``: :setting:`EMAIL_USE_TLS`"

#: ../../../../sources/2.2/docs/topics/email.txt:483
msgid "``use_ssl``: :setting:`EMAIL_USE_SSL`"
msgstr "``use_ssl``: :setting:`EMAIL_USE_SSL`"

#: ../../../../sources/2.2/docs/topics/email.txt:484
msgid "``timeout``: :setting:`EMAIL_TIMEOUT`"
msgstr "``timeout``: :setting:`EMAIL_TIMEOUT`"

#: ../../../../sources/2.2/docs/topics/email.txt:485
msgid "``ssl_keyfile``: :setting:`EMAIL_SSL_KEYFILE`"
msgstr "``ssl_keyfile``: :setting:`EMAIL_SSL_KEYFILE`"

#: ../../../../sources/2.2/docs/topics/email.txt:486
msgid "``ssl_certfile``: :setting:`EMAIL_SSL_CERTFILE`"
msgstr "``ssl_certfile``: :setting:`EMAIL_SSL_CERTFILE`"

#: ../../../../sources/2.2/docs/topics/email.txt:488
msgid ""
"The SMTP backend is the default configuration inherited by Django. If you "
"want to specify it explicitly, put the following in your settings::"
msgstr "SMTP 后端是 Django 默认配置的。如果你想显示的指定，将以下内容放入你的配置中："

#: ../../../../sources/2.2/docs/topics/email.txt:493
msgid ""
"If unspecified, the default ``timeout`` will be the one provided by "
":func:`socket.getdefaulttimeout()`, which defaults to ``None`` (no timeout)."
msgstr "若未指定，``timeout`` 的默认值将由 :func:`socket.getdefaulttimeout()` 的返回值确定，其默认值为 ``None`` （无超时）。"

#: ../../../../sources/2.2/docs/topics/email.txt:499
msgid "Console backend"
msgstr "控制台后端"

#: ../../../../sources/2.2/docs/topics/email.txt:501
msgid ""
"Instead of sending out real emails the console backend just writes the "
"emails that would be sent to the standard output. By default, the console "
"backend writes to ``stdout``. You can use a different stream-like object by "
"providing the ``stream`` keyword argument when constructing the connection."
msgstr "控制台后端仅将邮件发送至标准输出，而不是真的发送。默认情况下，控制台后端输出至 ``stdout``。在创建连接时，你可以提供 ``stream`` 关键字参数来使用另一个类似 stream 的对象。"

#: ../../../../sources/2.2/docs/topics/email.txt:506
#: ../../../../sources/2.2/docs/topics/email.txt:524
#: ../../../../sources/2.2/docs/topics/email.txt:543
msgid "To specify this backend, put the following in your settings::"
msgstr "为了使用该后端，将以下代码加入你的配置中："

#: ../../../../sources/2.2/docs/topics/email.txt:510
#: ../../../../sources/2.2/docs/topics/email.txt:529
#: ../../../../sources/2.2/docs/topics/email.txt:560
msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development."
msgstr "该后端不是为了在生产环境使用的——出于方便的目的，让你在开发阶段使用。"

#: ../../../../sources/2.2/docs/topics/email.txt:516
msgid "File backend"
msgstr "文件后端"

#: ../../../../sources/2.2/docs/topics/email.txt:518
msgid ""
"The file backend writes emails to a file. A new file is created for each new"
" session that is opened on this backend. The directory to which the files "
"are written is either taken from the :setting:`EMAIL_FILE_PATH` setting or "
"from the ``file_path`` keyword when creating a connection with "
":meth:`~django.core.mail.get_connection`."
msgstr "文件后端将邮件写入文件。对该后端的每次会话都会创建新文件。存储这些文件的目录可以从配置项 :setting:`EMAIL_FILE_PATH` 获取，也可在调用 :meth:`~django.core.mail.get_connection` 时以关键字参数 ``file_path`` 指定。"

#: ../../../../sources/2.2/docs/topics/email.txt:535
msgid "In-memory backend"
msgstr "内存后端"

#: ../../../../sources/2.2/docs/topics/email.txt:537
msgid ""
"The ``'locmem'`` backend stores messages in a special attribute of the "
"``django.core.mail`` module. The ``outbox`` attribute is created when the "
"first message is sent. It's a list with an "
":class:`~django.core.mail.EmailMessage` instance for each message that would"
" be sent."
msgstr "该缓存式后端将内容存在 ``django.core.mail`` 模块的某个属性值中。``outbox`` 属性会在第一条消息发送时创建。这是一个列表，每项都是一个 :class:`~django.core.mail.EmailMessage` 实例，代表一条要被发送的消息。"

#: ../../../../sources/2.2/docs/topics/email.txt:547
msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development and testing."
msgstr "该后端不是为了在生产环境使用的——出于方便的目的，让你在开发阶段使用。"

#: ../../../../sources/2.2/docs/topics/email.txt:553
msgid "Dummy backend"
msgstr "虚拟后端"

#: ../../../../sources/2.2/docs/topics/email.txt:555
msgid ""
"As the name suggests the dummy backend does nothing with your messages. To "
"specify this backend, put the following in your settings::"
msgstr "就像该后端的名字表示的一样，该后端对你发送的消息什么也不做。指定该后端，将以下代码加入你的配置中："

#: ../../../../sources/2.2/docs/topics/email.txt:566
msgid "Defining a custom email backend"
msgstr "自定义邮件后端"

#: ../../../../sources/2.2/docs/topics/email.txt:568
msgid ""
"If you need to change how emails are sent you can write your own email "
"backend. The :setting:`EMAIL_BACKEND` setting in your settings file is then "
"the Python import path for your backend class."
msgstr "若你需要修改邮件发送的方式，你可以编写自定义的邮件后端。后面要在 :setting:`EMAIL_BACKEND` 配置项中指定你的后端类的路径。"

#: ../../../../sources/2.2/docs/topics/email.txt:572
msgid ""
"Custom email backends should subclass ``BaseEmailBackend`` that is located "
"in the ``django.core.mail.backends.base`` module. A custom email backend "
"must implement the ``send_messages(email_messages)`` method. This method "
"receives a list of :class:`~django.core.mail.EmailMessage` instances and "
"returns the number of successfully delivered messages. If your backend has "
"any concept of a persistent session or connection, you should also implement"
" the ``open()`` and ``close()`` methods. Refer to ``smtp.EmailBackend`` for "
"a reference implementation."
msgstr "自定义邮件后端需继承 ``django.core.mail.backends.base`` 模块中的 ``BaseEmailBackend`` 类。自定义邮件后端类必须实现 ``send_messages(email_messages)`` 方法。该方法接受一个包含 :class:`~django.core.mail.EmailMessage` 对象的列表。若你的后端还处理了持久性会话和连接，你还需要实现 ``open()`` 和 ``close()`` 方法。可以参考 ``smtp.EmailBackend`` 的实现。"

#: ../../../../sources/2.2/docs/topics/email.txt:584
msgid "Sending multiple emails"
msgstr "发送多封邮件"

#: ../../../../sources/2.2/docs/topics/email.txt:586
msgid ""
"Establishing and closing an SMTP connection (or any other network "
"connection, for that matter) is an expensive process. If you have a lot of "
"emails to send, it makes sense to reuse an SMTP connection, rather than "
"creating and destroying a connection every time you want to send an email."
msgstr "创建和关闭 SMTP 连接（或其它网络连接）是一项耗时的进程。如果你有很多封邮件要发送，复用连接就显得很有意义，而不是在每次发送邮件时创建和关闭连接。"

#: ../../../../sources/2.2/docs/topics/email.txt:591
msgid "There are two ways you tell an email backend to reuse a connection."
msgstr "有两种方式可以让邮件后端复用连接。"

#: ../../../../sources/2.2/docs/topics/email.txt:593
msgid ""
"Firstly, you can use the ``send_messages()`` method. ``send_messages()`` "
"takes a list of :class:`~django.core.mail.EmailMessage` instances (or "
"subclasses), and sends them all using a single connection."
msgstr "首先，你可以使用 ``send_messages()`` 方法。``send_messages()`` 接受一个包含 :class:`~django.core.mail.EmailMessage` （或其子类）实例的列表，并在发送它们时复用同一条连接。"

#: ../../../../sources/2.2/docs/topics/email.txt:597
msgid ""
"For example, if you have a function called ``get_notification_email()`` that"
" returns a list of :class:`~django.core.mail.EmailMessage` objects "
"representing some periodic email you wish to send out, you could send these "
"emails using a single call to send_messages::"
msgstr "举个例子，你有一个函数，叫做 ``get_notification_email()`` ，他会返回一个包含 :class:`~django.core.mail.EmailMessage` 对象的列表。这些对象是你想要发送的定期邮件。你可以简单的调用一次 send_messages 来发送它们："

#: ../../../../sources/2.2/docs/topics/email.txt:607
msgid ""
"In this example, the call to ``send_messages()`` opens a connection on the "
"backend, sends the list of messages, and then closes the connection again."
msgstr "在该例子中，调用 ``send_messages()`` 在后端创建了一条连接，发送完邮件列表后，关闭了这条连接。"

#: ../../../../sources/2.2/docs/topics/email.txt:610
msgid ""
"The second approach is to use the ``open()`` and ``close()`` methods on the "
"email backend to manually control the connection. ``send_messages()`` will "
"not manually open or close the connection if it is already open, so if you "
"manually open the connection, you can control when it is closed. For "
"example::"
msgstr "第二种方式是在后端使用 ``open()`` 和 ``close()`` 手动控制连接。``send_messages()`` 在连接已经建立的情况下不会控制连接的开关，故此，若你手动打开了连接，你可以决定何时关闭它。比如："

#: ../../../../sources/2.2/docs/topics/email.txt:653
msgid "Configuring email for development"
msgstr "为了开发配置邮件"

#: ../../../../sources/2.2/docs/topics/email.txt:655
msgid ""
"There are times when you do not want Django to send emails at all. For "
"example, while developing a website, you probably don't want to send out "
"thousands of emails -- but you may want to validate that emails will be sent"
" to the right people under the right conditions, and that those emails will "
"contain the correct content."
msgstr "曾经有很多次，你并不想 Django 真的发送邮件。举个例子，在开发网站时，你可能并不期望发送成千上万封邮件——但你想要确保这些邮件将会在正确的时间，包含正确的内容，发送给正确的人。"

#: ../../../../sources/2.2/docs/topics/email.txt:661
msgid ""
"The easiest way to configure email for local development is to use the "
":ref:`console <topic-email-console-backend>` email backend. This backend "
"redirects all email to stdout, allowing you to inspect the content of mail."
msgstr "出于开发的目的，最简单的配置邮件的方式是使用 :ref:`终端 <topic-email-console-backend>` 邮件后端。这个后端将所有的邮件重定向至标准输出，允许你观察邮件的内容。"

#: ../../../../sources/2.2/docs/topics/email.txt:665
msgid ""
"The :ref:`file <topic-email-file-backend>` email backend can also be useful "
"during development -- this backend dumps the contents of every SMTP "
"connection to a file that can be inspected at your leisure."
msgstr ":ref:`文件 <topic-email-file-backend>` 邮件后端在开发时也很有用——这个后端将每次 SMTP 连接的内容输出至一个文件，你可以在你闲暇时查看这个文件。"

#: ../../../../sources/2.2/docs/topics/email.txt:669
msgid ""
"Another approach is to use a \"dumb\" SMTP server that receives the emails "
"locally and displays them to the terminal, but does not actually send "
"anything. Python has a built-in way to accomplish this with a single "
"command::"
msgstr "另一个方法是使用一个“哑巴” SMTP 服务器，它从本地接收邮件，并输出至终端，并不会真的发送什么。Python 有一个内置的方式可以实现，仅需一行代码::"

#: ../../../../sources/2.2/docs/topics/email.txt:675
msgid ""
"This command will start a simple SMTP server listening on port 1025 of "
"localhost. This server simply prints to standard output all email headers "
"and the email body. You then only need to set the :setting:`EMAIL_HOST` and "
":setting:`EMAIL_PORT` accordingly. For a more detailed discussion of SMTP "
"server options, see the Python documentation for the :mod:`smtpd` module."
msgstr "该命令会在本机启动一个 SMTP 服务器，监听 1025 端口。这个服务器只会简单的在标准输出打印所有的邮件头和邮件内容。接下来，你只需要配置 :setting:`EMAIL_HOST` 和 :setting:`EMAIL_PORT` 。更多关于 SMTP 服务器配置的细节讨论，参考 :mod:`smtpd` 模块的Python 文档。"

#: ../../../../sources/2.2/docs/topics/email.txt:681
msgid ""
"For information about unit-testing the sending of emails in your "
"application, see the :ref:`topics-testing-email` section of the testing "
"documentation."
msgstr "关于发送邮件的单元测试资料，参见测试文档中 :ref:`topics-testing-email` 章节。"

#: ../../../../sources/2.2/docs/topics/external-packages.txt:3
msgid "External packages"
msgstr "扩展包"

#: ../../../../sources/2.2/docs/topics/external-packages.txt:5
msgid ""
"Django ships with a variety of extra, optional tools that solve common "
"problems (``contrib.*``). For easier maintenance and to trim the size of the"
" codebase, a few of those applications have been moved out to separate "
"projects."
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:10
msgid "Localflavor"
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:12
msgid ""
"``django-localflavor`` is a collection of utilities for particular countries"
" and cultures."
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:15
msgid "`GitHub <https://github.com/django/django-localflavor>`__"
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:16
msgid "`Documentation <https://django-localflavor.readthedocs.io/>`__"
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:17
msgid "`PyPI <https://pypi.org/project/django-localflavor/>`__"
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:20
#: ../../../../sources/2.2/docs/topics/templates.txt:753
msgid "Comments"
msgstr "注释(Comments)"

#: ../../../../sources/2.2/docs/topics/external-packages.txt:22
msgid ""
"``django-contrib-comments`` can be used to attach comments to any model, so "
"you can use it for comments on blog entries, photos, book chapters, or "
"anything else. Most users will be better served with a custom solution, or a"
" hosted product like Disqus."
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:27
msgid "`GitHub <https://github.com/django/django-contrib-comments>`__"
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:28
msgid "`Documentation <https://django-contrib-comments.readthedocs.io/>`__"
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:29
msgid "`PyPI <https://pypi.org/project/django-contrib-comments/>`__"
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:32
msgid "Formtools"
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:34
msgid ""
"``django-formtools`` is a collection of assorted utilities to work with "
"forms."
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:36
msgid "`GitHub <https://github.com/django/django-formtools>`__"
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:37
msgid "`Documentation <https://django-formtools.readthedocs.io/>`__"
msgstr ""

#: ../../../../sources/2.2/docs/topics/external-packages.txt:38
msgid "`PyPI <https://pypi.org/project/django-formtools/>`__"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:3
msgid "Managing files"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:5
msgid ""
"This document describes Django's file access APIs for files such as those "
"uploaded by a user. The lower level APIs are general enough that you could "
"use them for other purposes. If you want to handle \"static files\" (JS, "
"CSS, etc.), see :doc:`/howto/static-files/index`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:10
msgid ""
"By default, Django stores files locally, using the :setting:`MEDIA_ROOT` and"
" :setting:`MEDIA_URL` settings. The examples below assume that you're using "
"these defaults."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:14
msgid ""
"However, Django provides ways to write custom `file storage systems`_ that "
"allow you to completely customize where and how Django stores files. The "
"second half of this document describes how these storage systems work."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:21
msgid "Using files in models"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:23
msgid ""
"When you use a :class:`~django.db.models.FileField` or "
":class:`~django.db.models.ImageField`, Django provides a set of APIs you can"
" use to deal with that file."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:27
msgid ""
"Consider the following model, using an :class:`~django.db.models.ImageField`"
" to store a photo::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:37
msgid ""
"Any ``Car`` instance will have a ``photo`` attribute that you can use to get"
" at the details of the attached photo::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:50
msgid ""
"This object -- ``car.photo`` in the example -- is a ``File`` object, which "
"means it has all the methods and attributes described below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:54
msgid ""
"The file is saved as part of saving the model in the database, so the actual"
" file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:58
msgid ""
"For example, you can change the file name by setting the file's "
":attr:`~django.core.files.File.name` to a path relative to the file "
"storage's location (:setting:`MEDIA_ROOT` if you are using the default "
":class:`~django.core.files.storage.FileSystemStorage`)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:77
msgid "The ``File`` object"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:79
msgid ""
"Internally, Django uses a :class:`django.core.files.File` instance any time "
"it needs to represent a file."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:82
msgid ""
"Most of the time you'll simply use a ``File`` that Django's given you (i.e. "
"a file attached to a model as above, or perhaps an uploaded file)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:85
msgid ""
"If you need to construct a ``File`` yourself, the easiest way is to create "
"one using a Python built-in ``file`` object::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:94
msgid ""
"Now you can use any of the documented attributes and methods of the "
":class:`~django.core.files.File` class."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:97
msgid ""
"Be aware that files created in this way are not automatically closed. The "
"following approach may be used to close files automatically::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:112
msgid ""
"Closing files is especially important when accessing file fields in a loop "
"over a large number of objects. If files are not manually closed after "
"accessing them, the risk of running out of file descriptors may arise. This "
"may lead to the following error::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:121
msgid "File storage"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:123
msgid ""
"Behind the scenes, Django delegates decisions about how and where to store "
"files to a file storage system. This is the object that actually understands"
" things like file systems, opening and reading files, etc."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:127
msgid ""
"Django's default file storage is given by the "
":setting:`DEFAULT_FILE_STORAGE` setting; if you don't explicitly provide a "
"storage system, this is the one that will be used."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:131
msgid ""
"See below for details of the built-in default file storage system, and see "
":doc:`/howto/custom-file-storage` for information on writing your own file "
"storage system."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:136
msgid "Storage objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:138
msgid ""
"Though most of the time you'll want to use a ``File`` object (which "
"delegates to the proper storage for that file), you can use file storage "
"systems directly. You can create an instance of some custom file storage "
"class, or -- often more useful -- you can use the global default storage "
"system::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:159
msgid "See :doc:`/ref/files/storage` for the file storage API."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:164
msgid "The built-in filesystem storage class"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:166
msgid ""
"Django ships with a :class:`django.core.files.storage.FileSystemStorage` "
"class which implements basic local filesystem file storage."
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:169
msgid ""
"For example, the following code will store uploaded files under "
"``/media/photos`` regardless of what your :setting:`MEDIA_ROOT` setting is::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/files.txt:181
msgid ""
":doc:`Custom storage systems </howto/custom-file-storage>` work the same "
"way: you can pass them in as the ``storage`` argument to a "
":class:`~django.db.models.FileField`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:3
msgid "Formsets"
msgstr "表单集"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:10
msgid ""
"A formset is a layer of abstraction to work with multiple forms on the same "
"page. It can be best compared to a data grid. Let's say you have the "
"following form::"
msgstr "formset是一个抽象层，它可以在同一页面上处理多个表单的。它最适合被比喻成网格数据。我们假设您有以下表单::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:19
msgid ""
"You might want to allow the user to create several articles at once. To "
"create a formset out of an ``ArticleForm`` you would do::"
msgstr "您可能想允许用户一次创建多篇文章。 要创建一个 ``ArticleForm`` 的formset，您可以这样做::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:25
msgid ""
"You now have created a formset named ``ArticleFormSet``. The formset gives "
"you the ability to iterate over the forms in the formset and display them as"
" you would with a regular form::"
msgstr "现在您已经创建了一个名为 ``ArticleFormSet`` 的表单集。它能让你遍历formset中的表单，并像使用常规表单一样显示它们::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:35
msgid ""
"As you can see it only displayed one empty form. The number of empty forms "
"that is displayed is controlled by the ``extra`` parameter. By default, "
":func:`~django.forms.formsets.formset_factory` defines one extra form; the "
"following example will display two blank forms::"
msgstr "如您所见，它只显示了一个空的表单。参数 ``extra`` 控制显示表单的数量。:func:`~django.forms.formsets.formset_factory` 默认只定义一个表单；下面的例子将展示两个空白表单::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:42
msgid ""
"Iterating over the ``formset`` will render the forms in the order they were "
"created. You can change this order by providing an alternate implementation "
"for the ``__iter__()`` method."
msgstr "通过遍历 ``formset`` ，然后按他们创建的顺序渲染表单。您也可以通过替换 ``__iter__()`` 方法来改变顺序。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:46
msgid ""
"Formsets can also be indexed into, which returns the corresponding form. If "
"you override ``__iter__``, you will need to also override ``__getitem__`` to"
" have matching behavior."
msgstr "表单集也可以被索引然后返回对应的表单。如果您已经覆盖了 ``__iter__`` ，则还需覆盖  ``__getitem__`` 让它具备匹配行为。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:53
msgid "Using initial data with a formset"
msgstr "使用formset的初始数据"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:55
msgid ""
"Initial data is what drives the main usability of a formset. As shown above "
"you can define the number of extra forms. What this means is that you are "
"telling the formset how many additional forms to show in addition to the "
"number of forms it generates from the initial data. Let's take a look at an "
"example::"
msgstr "初始数据驱动着formset的主要能力。如上所示，您可以定义额外表单的数量。也就是说，您告诉formset，除了要生成初始数据所需数量的表单外，还要显示多少额外的表单。我们来看下例子::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:79
msgid ""
"There are now a total of three forms showing above. One for the initial data"
" that was passed in and two extra forms. Also note that we are passing in a "
"list of dictionaries as the initial data."
msgstr "现在上面显示了三张表单。一张是传了初始数据的，另外两张是额外的。需要注意的是，我们通过传递一个字典列表来作为初始数据。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:83
msgid ""
"If you use an ``initial`` for displaying a formset, you should pass the same"
" ``initial`` when processing that formset's submission so that the formset "
"can detect which forms were changed by the user. For example, you might have"
" something like: ``ArticleFormSet(request.POST, initial=[...])``."
msgstr "如果您使用了 ``initial`` 来显示formset，那么您需要在处理formset提交时传入相同的 ``initial`` ，以便formset检测用户更改了哪些表单。例如，您可能有这样的： ``ArticleFormSet(request.POST, initial=[...])`` 。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:90
msgid ""
":ref:`Creating formsets from models with model formsets <model-formsets>`."
msgstr ":ref:`创建模型表单集 <model-formsets>`。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:95
msgid "Limiting the maximum number of forms"
msgstr "限制表单的最大数量"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:97
msgid ""
"The ``max_num`` parameter to :func:`~django.forms.formsets.formset_factory` "
"gives you the ability to limit the number of forms the formset will "
"display::"
msgstr ":func:`~django.forms.formsets.formset_factory` 的参数 ``max_num`` 让您可以控制表单集将要显示的表单数量::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:109
msgid ""
"If the value of ``max_num`` is greater than the number of existing items in "
"the initial data, up to ``extra`` additional blank forms will be added to "
"the formset, so long as the total number of forms does not exceed "
"``max_num``. For example, if ``extra=2`` and ``max_num=2`` and the formset "
"is initialized with one ``initial`` item, a form for the initial item and "
"one blank form will be displayed."
msgstr "如果 ``max_num`` 的值大于初始数据现有数量，那空白表单可显示的数量取决于 ``extra`` 的数量，只要总表单数不超过 ``max_num`` 。例如， ``extra=2`` ， ``max_num=2`` 并且formset有一个 ``initial`` 初始化项，则会显示一张初始化表单和一张空白表单。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:116
msgid ""
"If the number of items in the initial data exceeds ``max_num``, all initial "
"data forms will be displayed regardless of the value of ``max_num`` and no "
"extra forms will be displayed. For example, if ``extra=3`` and ``max_num=1``"
" and the formset is initialized with two initial items, two forms with the "
"initial data will be displayed."
msgstr "如果初始数据项的数量超过 ``max_num`` ，那么 ``max_num`` 的值会被无视，所有初始数据表单都会显示，并且也不会有额外的表单显示。例如，假设 ``extra=3`` ， ``max_num=1`` 并且formset有两个初始化项，那么只会显示两张有初始化数据的表单。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:122
#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:971
msgid ""
"A ``max_num`` value of ``None`` (the default) puts a high limit on the "
"number of forms displayed (1000). In practice this is equivalent to no "
"limit."
msgstr "``max_num`` 的值 ``None`` (默认值)，它限制最多显示(1000)张表单，其实这相当于没有限制。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:125
msgid ""
"By default, ``max_num`` only affects how many forms are displayed and does "
"not affect validation.  If ``validate_max=True`` is passed to the "
":func:`~django.forms.formsets.formset_factory`, then ``max_num`` will affect"
" validation.  See :ref:`validate_max`."
msgstr "``max_num`` 默认只影响显示多少数量的表单而不影响验证。如果将 ``validate_max=True`` 传给 :func:`~django.forms.formsets.formset_factory`，那么 ``max_num`` 将会影响验证。参见 :ref:`validate_max` 。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:131
msgid "Formset validation"
msgstr "Formset验证"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:133
msgid ""
"Validation with a formset is almost identical to a regular ``Form``. There "
"is an ``is_valid`` method on the formset to provide a convenient way to "
"validate all forms in the formset::"
msgstr "formset的验证与常规 ``Form`` 几乎相同。formset提供了一个 ``is_valid`` 方法以便验证formset内所有表单::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:149
msgid ""
"We passed in no data to the formset which is resulting in a valid form. The "
"formset is smart enough to ignore extra forms that were not changed. If we "
"provide an invalid article::"
msgstr "我们传了空数据给formset，并被给了一个有效的结果。formset足够聪明去忽略那些没有变动的额外表单。如果我们提供了一篇无效的文章::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:168
msgid ""
"As we can see, ``formset.errors`` is a list whose entries correspond to the "
"forms in the formset. Validation was performed for each of the two forms, "
"and the expected error message appears for the second item."
msgstr "正如我们看到的，``formset.errors`` 是一张列表，它的内容对应着formset中表单。两张表都进行了验证，并且第二项中出现了预期的错误消息。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:172
msgid ""
"Just like when using a normal ``Form``, each field in a formset's forms may "
"include HTML attributes such as ``maxlength`` for browser validation. "
"However, form fields of formsets won't include the ``required`` attribute as"
" that validation may be incorrect when adding and deleting forms."
msgstr "和使用普通 ``Form`` 一样，formset表单中的每个字段都可能包含HTML属性，例如用于浏览器验证的 ``maxlength`` 。但是由于表单添加、删除的时候会影响属性 ``required`` 的验证，表单集中的表单不会包含此属性。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:179
msgid ""
"To check how many errors there are in the formset, we can use the "
"``total_error_count`` method::"
msgstr "我们可以使用 ``total_error_count`` 方法来检查formset中有多少错误::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:190
msgid ""
"We can also check if form data differs from the initial data (i.e. the form "
"was sent without any data)::"
msgstr "我们还可以检查表单数据与初始数据的区别(即表单没有发送任何数据)::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:207
msgid "Understanding the ``ManagementForm``"
msgstr "理解 ``ManagementForm`` "

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:209
msgid ""
"You may have noticed the additional data (``form-TOTAL_FORMS``, ``form-"
"INITIAL_FORMS`` and ``form-MAX_NUM_FORMS``) that was required in the "
"formset's data above. This data is required for the ``ManagementForm``. This"
" form is used by the formset to manage the collection of forms contained in "
"the formset. If you don't provide this management data, an exception will be"
" raised::"
msgstr "您可能已经注意到上面formset中有些必要的数据( ``form-TOTAL_FORMS`` ,  ``form-INITIAL_FORMS`` 以及 ``form-MAX_NUM_FORMS`` )。这些数据是 ``ManagementForm`` 所必须的。它被formset用来管理formset中所有表单。如果你不提供这些管理数据，则会引发一场::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:226
msgid ""
"It is used to keep track of how many form instances are being displayed. If "
"you are adding new forms via JavaScript, you should increment the count "
"fields in this form as well. On the other hand, if you are using JavaScript "
"to allow deletion of existing objects, then you need to ensure the ones "
"being removed are properly marked for deletion by including "
"``form-#-DELETE`` in the ``POST`` data. It is expected that all forms are "
"present in the ``POST`` data regardless."
msgstr "它被用来跟踪显示了多少个表单实例。如果您通过JavaScript添加新表单，那您同样需要增加相应内容到那些数量字段中，另一方面，如果您允许通过JavaScript来删除已存在对象，那么您需确认被移除的对象已经被标记在 ``form-#-DELETE`` 中并被放到 ``POST`` 内。无论如何，所有表单都要确保在 ``POST`` 数据中。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:233
msgid ""
"The management form is available as an attribute of the formset itself. When"
" rendering a formset in a template, you can include all the management data "
"by rendering ``{{ my_formset.management_form }}`` (substituting the name of "
"your formset as appropriate)."
msgstr "管理表单以formset的一项属性而存在。在模板中渲染formset时，你可以使用 ``{{ my_formset.management_form }}``  (将my_formset替换为自己的formset名称)渲染出所有管理表单的数据。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:239
msgid "``total_form_count`` and ``initial_form_count``"
msgstr " ``total_form_count`` 和 ``initial_form_count`` "

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:241
msgid ""
"``BaseFormSet`` has a couple of methods that are closely related to the "
"``ManagementForm``, ``total_form_count`` and ``initial_form_count``."
msgstr "``BaseFormSet`` 有一对与 ``ManagementForm`` 密切相关的方法， ``total_form_count``  和  ``initial_form_count`` 。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:244
msgid ""
"``total_form_count`` returns the total number of forms in this formset. "
"``initial_form_count`` returns the number of forms in the formset that were "
"pre-filled, and is also used to determine how many forms are required. You "
"will probably never need to override either of these methods, so please be "
"sure you understand what they do before doing so."
msgstr "``total_form_count`` 返回该formset内表单的总和。 ``initial_form_count`` 返回该formset内预填充的表单数量，同时用于定义需要多少表单。你可能永远不会重写这两个方法，因此在使用之前请理解它们的用途。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:253
msgid "``empty_form``"
msgstr "``empty_form``"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:255
msgid ""
"``BaseFormSet`` provides an additional attribute ``empty_form`` which "
"returns a form instance with a prefix of ``__prefix__`` for easier use in "
"dynamic forms with JavaScript."
msgstr "``BaseFormSet``有一项属性``empty_form``，它返回一个以``__prefix__`` 为前缀的表单实例，这是为了方便在动态表单中配合JavaScript使用。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:260
msgid "Custom formset validation"
msgstr "自定义formset验证"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:262
msgid ""
"A formset has a ``clean`` method similar to the one on a ``Form`` class. "
"This is where you define your own validation that works at the formset "
"level::"
msgstr "formset有个与 ``Form`` 类相似的 ``clean`` 方法。您可以在这里定义自己的验证规则，它会在formset层面进行验证。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:302
msgid ""
"The formset ``clean`` method is called after all the ``Form.clean`` methods "
"have been called. The errors will be found using the ``non_form_errors()`` "
"method on the formset."
msgstr "formset的 ``clean`` 方法会在所有 ``Form.clean`` 方法调用完之后被调用。可以使用formset的 ``non_form_errors()`` 方法来查看错误信息。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:307
msgid "Validating the number of forms in a formset"
msgstr "验证formset中表单的数量"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:309
msgid ""
"Django provides a couple ways to validate the minimum or maximum number of "
"submitted forms. Applications which need more customizable validation of the"
" number of forms should use custom formset validation."
msgstr "Django提供了一对方法来验证已提交的表单的最小和最大数量。如果要对应用程序进行更多的可定制验证，那需要使用自定义formset验证。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:316
msgid "``validate_max``"
msgstr "``validate_max``"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:318
msgid ""
"If ``validate_max=True`` is passed to "
":func:`~django.forms.formsets.formset_factory`, validation will also check "
"that the number of forms in the data set, minus those marked for deletion, "
"is less than or equal to ``max_num``."
msgstr "如果方法 :func:`~django.forms.formsets.formset_factory` 有设置参数 ``validate_max=True`` ，验证还会检查数据集内表单的数量，减去那些被标记为删除的表单数量，剩余数量需小于等于 ``max_num`` 。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:344
msgid ""
"``validate_max=True`` validates against ``max_num`` strictly even if "
"``max_num`` was exceeded because the amount of initial data supplied was "
"excessive."
msgstr "即使因为提供的初始数据量过大而超过了 ``max_num`` 所定义的，``validate_max=True`` 还是会严格针对 ``max_num`` 进行验证。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:350
msgid ""
"Regardless of ``validate_max``, if the number of forms in a data set exceeds"
" ``max_num`` by more than 1000, then the form will fail to validate as if "
"``validate_max`` were set, and additionally only the first 1000 forms above "
"``max_num`` will be validated.  The remainder will be truncated entirely.  "
"This is to protect against memory exhaustion attacks using forged POST "
"requests."
msgstr "如果数据集中表单的数量超过了 ``max_num`` 定义的且大于1000，那么即使你设置了 ``validate_max`` ，这个验证也会无效，另外只有在 ``max_num`` 内的前1000张表单会被验证。其余部分将被完全截断。这是为了抵御使用伪造POST请求的内存耗尽攻击。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:358
msgid "``validate_min``"
msgstr "``validate_min``"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:360
msgid ""
"If ``validate_min=True`` is passed to "
":func:`~django.forms.formsets.formset_factory`, validation will also check "
"that the number of forms in the data set, minus those marked for deletion, "
"is greater than or equal to ``min_num``."
msgstr "如果方法 :func:`~django.forms.formsets.formset_factory` 有传参数 ``validate_min=True`` ，还会验证数据集中的表单的数量减去那些被标记为删除的表单数量是否大于或等于 ``min_num`` 定义的数量。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:387
msgid "Dealing with ordering and deletion of forms"
msgstr "处理表单的排序和删除"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:389
msgid ""
"The :func:`~django.forms.formsets.formset_factory` provides two optional "
"parameters ``can_order`` and ``can_delete`` to help with ordering of forms "
"in formsets and deletion of forms from a formset."
msgstr "方法 :func:`~django.forms.formsets.formset_factory` 提供了两个可选参数 ``can_order`` 和 ``can_delete`` 来协助处理formset中表单的排序和删除。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:394
msgid "``can_order``"
msgstr "``can_order``"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:398
#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:458
msgid "Default: ``False``"
msgstr "默认值： ``False``"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:400
msgid "Lets you create a formset with the ability to order::"
msgstr "让你创建能排序的formset::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:421
msgid ""
"This adds an additional field to each form. This new field is named "
"``ORDER`` and is an ``forms.IntegerField``. For the forms that came from the"
" initial data it automatically assigned them a numeric value. Let's look at "
"what will happen when the user changes these values::"
msgstr "它给每个表单添加了一个额外的字段。这是一个名称是 ``ORDER`` 且类型为 ``forms.IntegerField`` 的字段。对于初始数据中的表单，它会自动为它们分配一个数值。我们来看看当用户更改这些值时会发生什么情况::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:454
msgid "``can_delete``"
msgstr "``can_delete``"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:460
msgid ""
"Lets you create a formset with the ability to select forms for deletion::"
msgstr "让你创建能删除指定表单的formset::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:481
msgid ""
"Similar to ``can_order`` this adds a new field to each form named ``DELETE``"
" and is a ``forms.BooleanField``. When data comes through marking any of the"
" delete fields you can access them with ``deleted_forms``::"
msgstr "和参数 ``can_order`` 类似，它创建了一个名为 ``DELETE`` 且类型是 ``forms.BooleanField`` 的字段。您可以使用 ``deleted_forms`` 访问那些被标记为删除的数据。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:507
msgid ""
"If you are using a "
":class:`ModelFormSet<django.forms.models.BaseModelFormSet>`, model instances"
" for deleted forms will be deleted when you call ``formset.save()``."
msgstr "如果你使用 :class:`ModelFormSet<django.forms.models.BaseModelFormSet>` ，那些标记为删除的表单模型实例会在调用 ``formset.save()`` 时被删除。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:511
msgid ""
"If you call ``formset.save(commit=False)``, objects will not be deleted "
"automatically.  You'll need to call ``delete()`` on each of the "
":attr:`formset.deleted_objects "
"<django.forms.models.BaseModelFormSet.deleted_objects>` to actually delete "
"them::"
msgstr "如果您调用调用 ``formset.save(commit=False)`` ，对象将不会被自动删除。您需要在每个 :attr:`formset.deleted_objects <django.forms.models.BaseModelFormSet.deleted_objects>`  上调用 ``delete()`` 来真正删除他们::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:521
msgid ""
"On the other hand, if you are using a plain ``FormSet``, it's up to you to "
"handle ``formset.deleted_forms``, perhaps in your formset's ``save()`` "
"method, as there's no general notion of what it means to delete a form."
msgstr "另一方面，如果您使用的是普通的 ``FormSet`` ，那需要您自己去处理 ``formset.deleted_forms`` ，可能写在formset的 ``save()`` 方法中，因为对于阐述删除一张表单还没有一个通用的概念。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:526
msgid "Adding additional fields to a formset"
msgstr "给一个formset添加额外字段"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:528
msgid ""
"If you need to add additional fields to the formset this can be easily "
"accomplished. The formset base class provides an ``add_fields`` method. You "
"can simply override this method to add your own fields or even redefine the "
"default fields/attributes of the order and deletion fields::"
msgstr "如果你想往formset中添加额外的字段，这相当简单。formset的基类提供了一个 ``add_fields`` 的方法。您可以简单的通过覆盖这个方法来添加您自己的字段，甚至可以重新定义默认字段或者那些排序的和被标记为删除的字段的属性。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:552
msgid "Passing custom parameters to formset forms"
msgstr "传递自定义参数到formset表单"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:554
msgid ""
"Sometimes your form class takes custom parameters, like ``MyArticleForm``. "
"You can pass this parameter when instantiating the formset::"
msgstr "有时候您的表单类需要自定义参数，比如 ``MyArticleForm`` 。您可以在formset实例化的时候传递这个参数::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:569
msgid ""
"The ``form_kwargs`` may also depend on the specific form instance. The "
"formset base class provides a ``get_form_kwargs`` method. The method takes a"
" single argument - the index of the form in the formset. The index is "
"``None`` for the :ref:`empty_form`::"
msgstr "``form_kwargs`` 也可能依赖于特定的表单实例。formset基类提供了一个 ``get_form_kwargs`` 方法。该方法只接收一个参数——formset中表单的序列。对于 :ref:`empty_form` ，它的序列是 ``None`` ::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:586
msgid "Customizing a formset's prefix"
msgstr "自定义formset的前缀"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:588
msgid ""
"In the rendered HTML, formsets include a prefix on each field's name. By "
"default, the prefix is ``'form'``, but it can be customized using the "
"formset's ``prefix`` argument."
msgstr "在已渲染的HTML页面中，表单集中的每个字段都包含一个前缀。这个前缀默认是 ``'form'`` ，但可以使用formset的 ``prefix`` 参数来自定义。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:592
msgid "For example, in the default case, you might see:"
msgstr "例如，在默认情况下，您可能会看到::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:599
msgid "But with ``ArticleFormset(prefix='article')`` that becomes:"
msgstr "但使用 ``ArticleFormset(prefix='article')`` 的话就会变为："

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:606
msgid ""
"This is useful if you want to :ref:`use more than one formset in a view "
"<multiple-formsets-in-view>`."
msgstr "如果您想 :ref:`在视图中使用多个formset <multiple-formsets-in-view> ` ，这个参数会很有用。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:610
msgid "Using a formset in views and templates"
msgstr "在视图和模板中使用formset"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:612
msgid ""
"Using a formset inside a view is as easy as using a regular ``Form`` class. "
"The only thing you will want to be aware of is making sure to use the "
"management form inside the template. Let's look at a sample view::"
msgstr "在视图中使用formset与使用常规的 ``Form`` 类一样简单。您唯一需要注意的是确保要在模板中使用管理表单。我们来看一个示例视图::"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:631
msgid "The ``manage_articles.html`` template might look like this:"
msgstr "模板 ``manage_articles.html`` 可能如下所示："

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:644
msgid ""
"However there's a slight shortcut for the above by letting the formset "
"itself deal with the management form:"
msgstr "但是对于上面让formset自己处理管理表单，还有个小小的捷径："

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:655
msgid ""
"The above ends up calling the ``as_table`` method on the formset class."
msgstr "上面代码最后在formset类中调用了 ``as_table`` 方法。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:660
msgid "Manually rendered ``can_delete`` and ``can_order``"
msgstr "手动渲染 ``can_delete`` 和 ``can_order`` "

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:662
msgid ""
"If you manually render fields in the template, you can render ``can_delete``"
" parameter with ``{{ form.DELETE }}``:"
msgstr "如果您在模板中手动渲染字段，您可以用 ``{{ form.DELETE }}`` 来渲染参数 ``can_delete`` 。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:681
msgid ""
"Similarly, if the formset has the ability to order (``can_order=True``), it "
"is possible to render it with ``{{ form.ORDER }}``."
msgstr "同样，如果formset能排序( ``can_order=True`` )，可以用 ``{{ form.ORDER }}`` 来渲染它。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:687
msgid "Using more than one formset in a view"
msgstr "在视图中使用多个formset"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:689
msgid ""
"You are able to use more than one formset in a view if you like. Formsets "
"borrow much of its behavior from forms. With that said you are able to use "
"``prefix`` to prefix formset form field names with a given value to allow "
"more than one formset to be sent to a view without name clashing. Let's take"
" a look at how this might be accomplished::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:716
msgid ""
"You would then render the formsets as normal. It is important to point out "
"that you need to pass ``prefix`` on both the POST and non-POST cases so that"
" it is rendered and processed correctly."
msgstr "然后您就可以像平时那样渲染表单集。需要指出的是，您需要同时在POST和非POST情况下传递 ``prefix`` ，以便它能被正确渲染和处理。"

#: ../../../../sources/2.2/docs/topics/forms/formsets.txt:720
msgid ""
"Each formset's :ref:`prefix <formset-prefix>` replaces the default ``form`` "
"prefix that's added to each field's ``name`` and ``id`` HTML attributes."
msgstr "每个formset的 :ref:`prefix <formset-prefix>` 会替换添加到每个字段的 ``name`` 和 ``id`` HTML属性的默认 ``form`` 前缀。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:3
msgid "Working with forms"
msgstr "使用表单"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:7
msgid "About this document"
msgstr "关于本页文档"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:9
msgid ""
"This document provides an introduction to the basics of web forms and how "
"they are handled in Django. For a more detailed look at specific areas of "
"the forms API, see :doc:`/ref/forms/api`, :doc:`/ref/forms/fields`, and "
":doc:`/ref/forms/validation`."
msgstr "本页文档介绍了Web表单的基本内容以及它们在Django中是如何处理的。想更详细的了解表单的API，参见 :doc:`/ref/forms/api` ， :doc:`/ref/forms/fields` ，以及 :doc:`/ref/forms/validation` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:14
msgid ""
"Unless you're planning to build websites and applications that do nothing "
"but publish content, and don't accept input from your visitors, you're going"
" to need to understand and use forms."
msgstr "除非您计划搭建的网站和应用只发布内容且不接收访问者的输入，否则您就需要理解和使用表单。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:18
msgid ""
"Django provides a range of tools and libraries to help you build forms to "
"accept input from site visitors, and then process and respond to the input."
msgstr "Django提供了一系列的工具和库来帮助您构建表单来接收网站访客的输入，然后处理以及响应这些输入。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:22
msgid "HTML forms"
msgstr "HTML表单"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:24
msgid ""
"In HTML, a form is a collection of elements inside ``<form>...</form>`` that"
" allow a visitor to do things like enter text, select options, manipulate "
"objects or controls, and so on, and then send that information back to the "
"server."
msgstr "在HTML中，表单是在 ``<form>...</form>`` 中的一些元素，它允许访客做一些类似输入文本、选择选项、操作对象或空间等动作，然后发送这些信息到服务端。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:29
msgid ""
"Some of these form interface elements - text input or checkboxes - are "
"fairly simple and are built into HTML itself. Others are much more complex; "
"an interface that pops up a date picker or allows you to move a slider or "
"manipulate controls will typically use JavaScript and CSS as well as HTML "
"form ``<input>`` elements to achieve these effects."
msgstr "一些表单界面元素（文本框或复选框）非常简单并内置在HTML中。其他会复杂些；像弹出日期选择或者允许您移动滑块或者操作控件，一般通过使用JavaScript，CSS以及HTML表单中的 ``<input>`` 元素来实现这些效果。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:35
msgid "As well as its ``<input>`` elements, a form must specify two things:"
msgstr "和它的元素 ``<input>`` 一样，表单必须指定两样东西："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:37
msgid ""
"*where*: the URL to which the data corresponding to the user's input should "
"be returned"
msgstr "*何地*：负责响应用户输入数据的URL地址"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:40
msgid "*how*: the HTTP method the data should be returned by"
msgstr "*如何*：数据请求使用的HTTP方法。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:42
msgid ""
"As an example, the login form for the Django admin contains several "
"``<input>`` elements: one of ``type=\"text\"`` for the username, one of "
"``type=\"password\"`` for the password, and one of ``type=\"submit\"`` for "
"the \"Log in\" button. It also contains some hidden text fields that the "
"user doesn't see, which Django uses to determine what to do next."
msgstr "例如，Django admin的登录表单包含了一些 ``<input>`` 元素：用户名用 ``type=\"text\"`` ，密码用 ``type=\"password\"`` ，登录按钮用 ``type=\"submit\"`` 。它还包含一些用户看不到的隐藏文本字段，Django用它们来决定下一步行为。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:48
msgid ""
"It also tells the browser that the form data should be sent to the URL "
"specified in the ``<form>``’s ``action`` attribute - ``/admin/`` - and that "
"it should be sent using the HTTP mechanism specified by the ``method`` "
"attribute - ``post``."
msgstr "它还告诉浏览器表单数据应该发往 ``<form>`` 的 ``action`` 属性指定的URL—— ``/admin/`` ，并且应该使用它的 ``method`` 属性指定的HTTP方法—— ``post`` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:53
msgid ""
"When the ``<input type=\"submit\" value=\"Log in\">`` element is triggered, "
"the data is returned to ``/admin/``."
msgstr "当 ``<input type=\"submit\" value=\"Log in\">`` 元素被触发的时候，数据会发送到 ``/admin/`` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:57
msgid "``GET`` and ``POST``"
msgstr "``GET`` 和 ``POST``"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:59
msgid ""
"``GET`` and ``POST`` are the only HTTP methods to use when dealing with "
"forms."
msgstr "处理表单时只会用到 ``GET`` 和 ``POST`` 两种HTTP方法。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:61
msgid ""
"Django's login form is returned using the ``POST`` method, in which the "
"browser bundles up the form data, encodes it for transmission, sends it to "
"the server, and then receives back its response."
msgstr "Django的登录表单使用 ``POST`` 方法传输数据，在这个方法中浏览器会封装表单数据，为了传输会进行编码，然后发送到服务端并接收它的响应。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:65
msgid ""
"``GET``, by contrast, bundles the submitted data into a string, and uses "
"this to compose a URL. The URL contains the address where the data must be "
"sent, as well as the data keys and values. You can see this in action if you"
" do a search in the Django documentation, which will produce a URL of the "
"form ``https://docs.djangoproject.com/search/?q=forms&release=1``."
msgstr "相比之下，``GET`` 方法将提交的数据捆绑到一个字符串中，并用它来组成一个URL。该URL包含了数据要发送的地址以及一些键值对应的数据。如果您在Django文档中进行一次搜索，就会看到这点，它会生成一个形似 ``https://docs.djangoproject.com/search/?q=forms&release=1`` 的URL。 "

#: ../../../../sources/2.2/docs/topics/forms/index.txt:71
msgid "``GET`` and ``POST`` are typically used for different purposes."
msgstr "``GET`` 和 ``POST`` 通常用于不同的目的。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:73
msgid ""
"Any request that could be used to change the state of the system - for "
"example, a request that makes changes in the database - should use ``POST``."
" ``GET`` should be used only for requests that do not affect the state of "
"the system."
msgstr "任何可能用于更改系统状态的请求应该使用 ``POST`` —— 比如一个更改数据库的请求。``GET`` 应该只被用于不会影响系统状态的请求。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:77
msgid ""
"``GET`` would also be unsuitable for a password form, because the password "
"would appear in the URL, and thus, also in browser history and server logs, "
"all in plain text. Neither would it be suitable for large quantities of "
"data, or for binary data, such as an image. A Web application that uses "
"``GET`` requests for admin forms is a security risk: it can be easy for an "
"attacker to mimic a form's request to gain access to sensitive parts of the "
"system. ``POST``, coupled with other protections like Django's :doc:`CSRF "
"protection </ref/csrf/>` offers more control over access."
msgstr "``GET`` 方法也不适合密码表单，因为密码会出现在URL中，于是也会出现在浏览器的历史记录以及服务器的日志中，而且都是以纯文本的形式。它也不适合处理大量的数据或者二进制数据，比如一张图片。在WEB应用的管理表单中使用 ``GET`` 请求具有安全隐患：攻击者很容易通过模拟请求来访问系统的敏感数据。 ``POST`` 方法通过与其他像Django的 :doc:`CSRF protection </ref/csrf/>` 这样的保护措施配合使用，能对访问提供更多的控制。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:86
msgid ""
"On the other hand, ``GET`` is suitable for things like a web search form, "
"because the URLs that represent a ``GET`` request can easily be bookmarked, "
"shared, or resubmitted."
msgstr "另一方面， ``GET`` 方法适用于诸如网页搜索表单这样的内容，因为这类呈现为一个 ``GET`` 请求的URL很容易被存为书签、分享或重新提交。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:91
msgid "Django's role in forms"
msgstr "Django在表单中的角色"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:93
msgid ""
"Handling forms is a complex business. Consider Django's admin, where "
"numerous items of data of several different types may need to be prepared "
"for display in a form, rendered as HTML, edited using a convenient "
"interface, returned to the server, validated and cleaned up, and then saved "
"or passed on for further processing."
msgstr "处理表单是一件挺复杂的事情。想想看Django的admin，许多不同类型的数据可能需要在一张表单中准备显示，渲染成HTML，使用方便的界面进行编辑，传到服务器，验证和清理数据，然后保存或跳过进行下一步处理。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:99
msgid ""
"Django's form functionality can simplify and automate vast portions of this "
"work, and can also do it more securely than most programmers would be able "
"to do in code they wrote themselves."
msgstr "Django的表单功能可以简化和自动化上述工作的大部分内容，并且也能比大多数程序员自己编写代码去实现来的更安全些。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:103
msgid "Django handles three distinct parts of the work involved in forms:"
msgstr "Django会处理涉及表单的三个不同部分："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:105
msgid "preparing and restructuring data to make it ready for rendering"
msgstr "准备并重组数据，以便下一步的渲染"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:106
msgid "creating HTML forms for the data"
msgstr "为数据创建HTML 表单"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:107
msgid "receiving and processing submitted forms and data from the client"
msgstr "接收并处理客户端提交的表单及数据"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:109
msgid ""
"It is *possible* to write code that does all of this manually, but Django "
"can take care of it all for you."
msgstr "您 *可以* 手动编写代码来实现，但Django 可以帮你完成所有这些工作。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:113
msgid "Forms in Django"
msgstr "Django 中的表单"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:115
msgid ""
"We've described HTML forms briefly, but an HTML ``<form>`` is just one part "
"of the machinery required."
msgstr "我们已经简单的描述过了HTML 表单，但是一个HTML ``<form>`` 只是其所需的一部分。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:118
msgid ""
"In the context of a Web application, 'form' might refer to that HTML "
"``<form>``, or to the Django :class:`Form` that produces it, or to the "
"structured data returned when it is submitted, or to the end-to-end working "
"collection of these parts."
msgstr "Web应用中所说的'表单'，可能指的是HTML ``<form>`` ，或者是生成了它的Django :class:`Form` ，再或者是提交时返回的结构化数据，亦或是这些端到端作业的合集。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:124
msgid "The Django :class:`Form` class"
msgstr "Django的 :class:`Form` 类"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:126
msgid ""
"At the heart of this system of components is Django's :class:`Form` class. "
"In much the same way that a Django model describes the logical structure of "
"an object, its behavior, and the way its parts are represented to us, a "
":class:`Form` class describes a form and determines how it works and "
"appears."
msgstr "Django表单系统的核心组件是 :class:`Form` 类。它与Django模型描述对象的逻辑结构、行为以及它呈现给我们内容的形式的方式大致相同， :class:`Form` 类描述一张表单并决定它如何工作及呈现。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:131
msgid ""
"In a similar way that a model class's fields map to database fields, a form "
"class's fields map to HTML form ``<input>`` elements. (A :class:`ModelForm` "
"maps a model class's fields to HTML form ``<input>`` elements via a "
":class:`Form`; this is what the Django admin is based upon.)"
msgstr "类似于模型类的字段映射到数据库字段的方式，表单类的字段会映射到HTML表单的 ``<input>`` 元素。 :class:`ModelForm` 通过 :class:`Form` 映射模型类的字段到HTML表单的 ``<input>`` 元素，Django admin就基于此。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:136
msgid ""
"A form's fields are themselves classes; they manage form data and perform "
"validation when a form is submitted. A :class:`DateField` and a "
":class:`FileField` handle very different kinds of data and have to do "
"different things with it."
msgstr "表单字段本身也是类；他们管理表单数据并在提交表单时执行验证。 :class:`DateField` 和 :class:`FileField` 处理的数据类型差别很大，所以必须用来处理不同的字段。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:141
msgid ""
"A form field is represented to a user in the browser as an HTML \"widget\" -"
" a piece of user interface machinery. Each field type has an appropriate "
"default :doc:`Widget class </ref/forms/widgets/>`, but these can be "
"overridden as required."
msgstr "在浏览器中，表单字段以HTML“控件”（用户界面的一个片段）的形式展现给我们。每个字段类型都有与之相匹配的 :doc:`控件类 </ref/forms/widgets/>` ，但必要时可以覆盖。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:147
msgid "Instantiating, processing, and rendering forms"
msgstr "实例化、处理和渲染表单"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:149
msgid "When rendering an object in Django, we generally:"
msgstr "在Django中渲染一个对象的时候，我们通常："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:151
msgid "get hold of it in the view (fetch it from the database, for example)"
msgstr "在视图中获取它（例如从数据库中取出）"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:152
msgid "pass it to the template context"
msgstr "将它传递给模板上下文"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:153
msgid "expand it to HTML markup using template variables"
msgstr "使用模板变量将它扩展为HTML标记"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:155
msgid ""
"Rendering a form in a template involves nearly the same work as rendering "
"any other kind of object, but there are some key differences."
msgstr "在模板中渲染表单几乎与渲染任何其他类型的对象的一样，但是存在一些关键性的差异。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:158
msgid ""
"In the case of a model instance that contained no data, it would rarely if "
"ever be useful to do anything with it in a template. On the other hand, it "
"makes perfect sense to render an unpopulated form - that's what we do when "
"we want the user to populate it."
msgstr "如果模型实例不包含数据，在模板中对它做任何处理几乎没什么用。但完全有理由用来渲染一张空表单——当我们希望用户来填充的时候就会这么做。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:163
msgid ""
"So when we handle a model instance in a view, we typically retrieve it from "
"the database. When we're dealing with a form we typically instantiate it in "
"the view."
msgstr "所以当我们在视图中处理模型实例时，我们一般从数据库中获取它。当我们处理表单时，我们一般在视图中实例化它。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:167
msgid ""
"When we instantiate a form, we can opt to leave it empty or pre-populate it,"
" for example with:"
msgstr "当我们实例化表单时，我们可以选择让它为空或者对它预先填充，例如使用："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:170
msgid ""
"data from a saved model instance (as in the case of admin forms for editing)"
msgstr "来自已保存的模型实例的数据（例如在管理编辑表单的情况下）"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:171
msgid "data that we have collated from other sources"
msgstr "我们从其他来源获取的数据"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:172
msgid "data received from a previous HTML form submission"
msgstr "从前面一个HTML 表单提交过来的数据"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:174
msgid ""
"The last of these cases is the most interesting, because it's what makes it "
"possible for users not just to read a website, but to send information back "
"to it too."
msgstr "最后一种情况最有趣，因为这使得用户不仅可以阅读网站，而且还可以将信息发回给它。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:179
msgid "Building a form"
msgstr "构建一张表单"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:182
msgid "The work that needs to be done"
msgstr "需要完成的工作"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:184
msgid ""
"Suppose you want to create a simple form on your website, in order to obtain"
" the user's name. You'd need something like this in your template:"
msgstr "假设您希望在您的网站上创建一张简易的表单，用来获取用户的名字。您需要在模板中使用类似代码："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:195
msgid ""
"This tells the browser to return the form data to the URL ``/your-name/``, "
"using the ``POST`` method. It will display a text field, labeled \"Your "
"name:\", and a button marked \"OK\". If the template context contains a "
"``current_name`` variable, that will be used to pre-fill the ``your_name`` "
"field."
msgstr "这告诉浏览器将表单数据返回给URL ``/your-name/`` ，并使用 ``POST`` 方法。它将显示一个标签为 \"Your name:\" 的文本字段，以及一个 \"OK\" 按钮。如果模板上下文包含一个 ``current_name`` 变量，它会被预填充到 ``your_name`` 字段。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:200
msgid ""
"You'll need a view that renders the template containing the HTML form, and "
"that can supply the ``current_name`` field as appropriate."
msgstr "您需要一个视图来渲染这个包含HTML表单的模板，并能适当提供 ``current_name`` 字段。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:203
msgid ""
"When the form is submitted, the ``POST`` request which is sent to the server"
" will contain the form data."
msgstr "提交表单时，发送给服务器的 ``POST`` 请求将包含表单数据。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:206
msgid ""
"Now you'll also need a view corresponding to that ``/your-name/`` URL which "
"will find the appropriate key/value pairs in the request, and then process "
"them."
msgstr "现在，您还需要一个与该 ``/your-name/`` URL相对应的视图，该视图将在请求中找到相应的键/值对，然后对其进行处理。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:209
msgid ""
"This is a very simple form. In practice, a form might contain dozens or "
"hundreds of fields, many of which might need to be pre-populated, and we "
"might expect the user to work through the edit-submit cycle several times "
"before concluding the operation."
msgstr "这是一张非常简单的表单。实际应用中，一张表单可能包含数十上百的字段，其中许多可能需要预填充，并且我们可能希望用户在结束操作前需要多次来回编辑-提交。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:214
msgid ""
"We might require some validation to occur in the browser, even before the "
"form is submitted; we might want to use much more complex fields, that allow"
" the user to do things like pick dates from a calendar and so on."
msgstr "我们可能需要在浏览器中进行一些验证，甚至在表单提交之前；我们可能希望使用更复杂的字段 ，以允许用户做类似日期选择等操作。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:218
msgid ""
"At this point it's much easier to get Django to do most of this work for us."
msgstr "此刻，我们很容易通过使用Django来完成以上大部分工作。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:221
msgid "Building a form in Django"
msgstr "在Django 中构建一张表单"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:224
msgid "The :class:`Form` class"
msgstr " :class:`Form` 类"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:226
msgid ""
"We already know what we want our HTML form to look like. Our starting point "
"for it in Django is this:"
msgstr "我们已经很清楚想要的HTML表单看起来会是什么样子。首先，在Django中这样做："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:237
msgid ""
"This defines a :class:`Form` class with a single field (``your_name``). "
"We've applied a human-friendly label to the field, which will appear in the "
"``<label>`` when it's rendered (although in this case, the "
":attr:`~Field.label` we specified is actually the same one that would be "
"generated automatically if we had omitted it)."
msgstr "它定义了一个只包含一个字段（ ``your_name`` ）的  :class:`Form` 类。我们已经为这个字段提供了友好的标签，当它渲染后会显示在 ``<label>`` 中（在这种情况下，如果我们省略之前指定的  :attr:`~Field.label` ，它还是会自动生成一个一样的标签）。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:243
msgid ""
"The field's maximum allowable length is defined by "
":attr:`~CharField.max_length`. This does two things. It puts a "
"``maxlength=\"100\"`` on the HTML ``<input>`` (so the browser should prevent"
" the user from entering more than that number of characters in the first "
"place). It also means that when Django receives the form back from the "
"browser, it will validate the length of the data."
msgstr "字段的最大长度由 :attr:`~CharField.max_length` 来定义。它做了两件事情。首先它在HTML的 ``<input>`` 上增加了 ``maxlength=\"100\"`` （这样浏览器会在第一时间阻止用户输入超过这个数量的字符串）。其次它还会在Django收到浏览器传过来的表单时，对数据长度进行验证（也就是服务器端验证）。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:250
msgid ""
"A :class:`Form` instance has an :meth:`~Form.is_valid()` method, which runs "
"validation routines for all its fields. When this method is called, if all "
"fields contain valid data, it will:"
msgstr " :class:`Form` 实例有一个 :meth:`~Form.is_valid()` 方法，它会对所有它的字段进行验证。当这个方法被调用时且所有字段都包含有效的数据，将："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:254
msgid "return ``True``"
msgstr "返回 ``True`` "

#: ../../../../sources/2.2/docs/topics/forms/index.txt:255
msgid "place the form's data in its :attr:`~Form.cleaned_data` attribute."
msgstr "将表单的数据放到它的属性 :attr:`~Form.cleaned_data` 中。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:257
msgid "The whole form, when rendered for the first time, will look like:"
msgstr "这样整个表单在第一次渲染时，会显示如下："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:264
msgid ""
"Note that it **does not** include the ``<form>`` tags, or a submit button. "
"We'll have to provide those ourselves in the template."
msgstr "注意它 **没有** 包含 ``<form>`` 标签和提交按钮。我们必须自己在模板中提供。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:270
msgid "The view"
msgstr "视图"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:272
msgid ""
"Form data sent back to a Django website is processed by a view, generally "
"the same view which published the form. This allows us to reuse some of the "
"same logic."
msgstr "发回Django网站的表单数据由视图来处理，一般和发布这个表单用的是同一个视图。这允许我们重用一些相同的逻辑。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:276
msgid ""
"To handle the form we need to instantiate it in the view for the URL where "
"we want it to be published:"
msgstr "为了处理表单，我们需要将它实例化到我们希望发布的URL的对应的视图中："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:305
msgid ""
"If we arrive at this view with a ``GET`` request, it will create an empty "
"form instance and place it in the template context to be rendered. This is "
"what we can expect to happen the first time we visit the URL."
msgstr "如果我们访问这个视图用的是 ``GET`` 请求，它会创建一个空的表单实例并将其放置在模板上下文中进行渲染。这是我们在首次访问这个URL时能预料到会发生的情况。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:309
msgid ""
"If the form is submitted using a ``POST`` request, the view will once again "
"create a form instance and populate it with data from the request: ``form = "
"NameForm(request.POST)`` This is called \"binding data to the form\" (it is "
"now a *bound* form)."
msgstr "如果表单提交用的是 ``POST`` 请求，那么该视图将再次创建一个表单实例并使用请求中的数据填充它： ``form = NameForm(request.POST)`` 这叫“绑定数据到表单” （现在它是一张 *绑定的* 表单）。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:314
msgid ""
"We call the form's ``is_valid()`` method; if it's not ``True``, we go back "
"to the template with the form. This time the form is no longer empty "
"(*unbound*) so the HTML form will be populated with the data previously "
"submitted, where it can be edited and corrected as required."
msgstr "我们调用表单的 ``is_valid()`` 方法；如果不为 ``True`` ，我们带着表单返回到模板。这次表单不再为空（ *未绑定* ），所以HTML表单将用之前提交的数据进行填充，放到可以根据需要进行编辑和修正的位置。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:319
msgid ""
"If ``is_valid()`` is ``True``, we'll now be able to find all the validated "
"form data in its ``cleaned_data`` attribute. We can use this data to update "
"the database or do other processing before sending an HTTP redirect to the "
"browser telling it where to go next."
msgstr "如果 ``is_valid()`` 为 ``True`` ，我们就能在其 ``cleaned_data`` 属性中找到所有通过验证的表单数据。我们可以在发送一个HTTP重定向告诉浏览器下一步去向之前用这些数据更新数据库或者做其他处理。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:327
msgid "The template"
msgstr "模板"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:329
msgid ""
"We don't need to do much in our ``name.html`` template. The simplest example"
" is:"
msgstr "我们没有必要在模板 ``name.html`` 中做过多的操作。举个最简单的例子："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:340
msgid ""
"All the form's fields and their attributes will be unpacked into HTML markup"
" from that ``{{ form }}`` by Django's template language."
msgstr "所有的表单字段及其属性都将通过Django模板语言从 ``{{ form }}`` 中被解包成HTML标记。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:343
msgid "Forms and Cross Site Request Forgery protection"
msgstr "表格和跨站请求伪造保护"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:345
msgid ""
"Django ships with an easy-to-use :doc:`protection against Cross Site Request"
" Forgeries </ref/csrf>`. When submitting a form via ``POST`` with CSRF "
"protection enabled you must use the :ttag:`csrf_token` template tag as in "
"the preceding example. However, since CSRF protection is not directly tied "
"to forms in templates, this tag is omitted from the following examples in "
"this document."
msgstr "Django自带一个简单易用的 :doc:`跨站请求伪造防护 </ref/csrf>` 。当通过 ``POST`` 方法提交一张启用了CSRF防护的表单时，您必须使用上例中这样的模板标签 :ttag:`csrf_token` 。但是，由于CSRF防护在模板中没有与表单直接绑定，因此这个标签在本页文档之后的示例中都将被忽略。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:352
msgid "HTML5 input types and browser validation"
msgstr "HTML5输入类型和浏览器验证"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:354
msgid ""
"If your form includes a :class:`~django.forms.URLField`, an "
":class:`~django.forms.EmailField` or any integer field type, Django will use"
" the ``url``, ``email`` and ``number`` HTML5 input types. By default, "
"browsers may apply their own validation on these fields, which may be "
"stricter than Django's validation. If you would like to disable this "
"behavior, set the `novalidate` attribute on the ``form`` tag, or specify a "
"different widget on the field, like :class:`TextInput`."
msgstr "如果您的表单包含 :class:`~django.forms.URLField` ， :class:`~django.forms.EmailField` 或者其他整数字段类型，Django将使用  ``url`` ， ``email`` 和 ``number`` HTML5输入类型。默认情况下，浏览器可能会在这些字段上应用他们自己的验证，这也许比Django的验证更加严格。如果您想禁用这个行为，请在 ``form`` 标签上设置 `novalidate` 属性，或者在字段上指定一个不同的控件，比如 :class:`TextInput` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:362
msgid ""
"We now have a working web form, described by a Django :class:`Form`, "
"processed by a view, and rendered as an HTML ``<form>``."
msgstr "现在我们有了一个可以工作的web表单，它通过一张Django :class:`Form` 描述，由一个视图来处理并渲染成一个HTML ``<form>`` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:365
msgid ""
"That's all you need to get started, but the forms framework puts a lot more "
"at your fingertips. Once you understand the basics of the process described "
"above, you should be prepared to understand other features of the forms "
"system and ready to learn a bit more about the underlying machinery."
msgstr "以上是您入门需要了解的所有内容，但是表单框架提供了更多垂手可得的内容。一旦您理解了上述过程的基础知识，您应该再了解下表单系统的其他功能，然后学习更多的底层机制。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:371
msgid "More about Django :class:`Form` classes"
msgstr "详解Django :class:`Form` 类"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:373
msgid ""
"All form classes are created as subclasses of either "
":class:`django.forms.Form` or :class:`django.forms.ModelForm`. You can think"
" of ``ModelForm`` as a subclass of ``Form``. ``Form`` and ``ModelForm`` "
"actually inherit common functionality from a (private) ``BaseForm`` class, "
"but this implementation detail is rarely important."
msgstr "所有表单类都作为 :class:`django.forms.Form` 或者 :class:`django.forms.ModelForm` 的子类来创建。您可以把 ``ModelForm`` 想象成 ``Form`` 的子类。实际上 ``Form`` 和 ``ModelForm`` 从（私有） ``BaseForm`` 类继承了通用功能，但是这个实现细节不怎么重要。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:379
msgid "Models and Forms"
msgstr "模型和表单"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:381
msgid ""
"In fact if your form is going to be used to directly add or edit a Django "
"model, a :doc:`ModelForm </topics/forms/modelforms>` can save you a great "
"deal of time, effort, and code, because it will build a form, along with the"
" appropriate fields and their attributes, from a ``Model`` class."
msgstr "实际上，如果您的表单是要直接用来添加或编辑Django模型，用 :doc:`ModelForm </topics/forms/modelforms>` ，可以省时、省力、省代码，因为它会根据 ``Model`` 类构建一张对应字段及其属性的表单。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:387
msgid "Bound and unbound form instances"
msgstr "绑定的和未绑定的表单实例"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:389
msgid ""
"The distinction between :ref:`ref-forms-api-bound-unbound` is important:"
msgstr " :ref:`ref-forms-api-bound-unbound` 之间的区别非常重要："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:391
msgid ""
"An unbound form has no data associated with it. When rendered to the user, "
"it will be empty or will contain default values."
msgstr "未绑定的表单没有与其关联的数据。当渲染给用户的时候，它会是空的或者包含默认值。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:394
msgid ""
"A bound form has submitted data, and hence can be used to tell if that data "
"is valid. If an invalid bound form is rendered, it can include inline error "
"messages telling the user what data to correct."
msgstr "绑定的表单拥有已提交的数据，因此可以用来判断数据是否合法。如果渲染了一张非法的绑定的表单，它将包含内联的错误信息，告知用户要纠正哪些数据。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:398
msgid ""
"The form's :attr:`~Form.is_bound` attribute will tell you whether a form has"
" data bound to it or not."
msgstr "表单的 :attr:`~Form.is_bound` 属性将告诉您一张表单是否具有绑定的数据。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:402
msgid "More on fields"
msgstr "字段详解"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:404
msgid ""
"Consider a more useful form than our minimal example above, which we could "
"use to implement \"contact me\" functionality on a personal website:"
msgstr "考虑一下比我们上面的小示例更有用的一张表单，我们可以用它在个人网站上实现“联系我”的功能："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:418
msgid ""
"Our earlier form used a single field, ``your_name``, a :class:`CharField`. "
"In this case, our form has four fields: ``subject``, ``message``, ``sender``"
" and ``cc_myself``. :class:`CharField`, :class:`EmailField` and "
":class:`BooleanField` are just three of the available field types; a full "
"list can be found in :doc:`/ref/forms/fields`."
msgstr "我们之前的表单只用了一个 :class:`CharField` 类型的字段 ``your_name`` 。在这个例子中，我们的表单有四个字段： ``subject`` 、 ``message`` 、 ``sender`` 和 ``cc_myself`` 。只用到三种可用的字段类型：  :class:`CharField` 、 :class:`EmailField` 和 :class:`BooleanField` ；完整的字段类型清单请参看  :doc:`/ref/forms/fields` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:425
msgid "Widgets"
msgstr "控件"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:427
msgid ""
"Each form field has a corresponding :doc:`Widget class "
"</ref/forms/widgets/>`, which in turn corresponds to an HTML form widget "
"such as ``<input type=\"text\">``."
msgstr "每个表单字段都有一个相对应的  :doc:`控件类 </ref/forms/widgets/>` ，这个控件类又有对应的HTML表单控件，比如 ``<input type=\"text\">`` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:431
msgid ""
"In most cases, the field will have a sensible default widget. For example, "
"by default, a :class:`CharField` will have a :class:`TextInput` widget, that"
" produces an ``<input type=\"text\">`` in the HTML. If you needed "
"``<textarea>`` instead, you'd specify the appropriate widget when defining "
"your form field, as we have done for the ``message`` field."
msgstr "多数情况下，字段都有合适的默认控件。比如，默认情况下， :class:`CharField` 有个  :class:`TextInput` 控件，它会在HTML中生成一个 ``<input type=\"text\">`` 。如果您想要的是 ``<textarea> `` ，您要在定义表单字段的时候指定控件，就像我们对 ``message`` 字段那样处理。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:438
msgid "Field data"
msgstr "字段数据"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:440
msgid ""
"Whatever the data submitted with a form, once it has been successfully "
"validated by calling ``is_valid()`` (and ``is_valid()`` has returned "
"``True``), the validated form data will be in the ``form.cleaned_data`` "
"dictionary. This data will have been nicely converted into Python types for "
"you."
msgstr "无论用表单提交了什么数据，一旦通过调用 ``is_valid()`` 验证成功（  ``is_valid()`` 返回 ``True`` ），已验证的表单数据将被放到 ``form.cleaned_data`` 字典中。这里的数据已经很好的为你转化为Python类型。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:447
msgid ""
"You can still access the unvalidated data directly from ``request.POST`` at "
"this point, but the validated data is better."
msgstr "此时您依然能够直接从 ``request.POST`` 中访问到未验证的数据，但最好还是使用经验证的数据。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:450
msgid ""
"In the contact form example above, ``cc_myself`` will be a boolean value. "
"Likewise, fields such as :class:`IntegerField` and :class:`FloatField` "
"convert values to a Python ``int`` and ``float`` respectively."
msgstr "在上面的联系表单示例中， ``cc_myself`` 会被转化成一个布尔值。同样的，字段 :class:`IntegerField` 和 :class:`FloatField` 的值分别会被转化为Python的 ``int`` 和 ``float`` 类型。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:454
msgid ""
"Here's how the form data could be processed in the view that handles this "
"form:"
msgstr "下面例举了如何在视图中处理表单数据："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:476
msgid "For more on sending email from Django, see :doc:`/topics/email`."
msgstr "更多关于从Django中发送电子邮件的内容，请参见  :doc:`/topics/email` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:478
msgid ""
"Some field types need some extra handling. For example, files that are "
"uploaded using a form need to be handled differently (they can be retrieved "
"from ``request.FILES``, rather than ``request.POST``). For details of how to"
" handle file uploads with your form, see :ref:`binding-uploaded-files`."
msgstr "有些字段类型需要一些额外的处理。例如，使用表单上传文件就要以不同的方式处理（它们可以从 ``request.FILES`` 获取，而不是 ``request.POST`` 中）。有关如何使用表单处理文件上传的详细信息，请参见 :ref:`binding-uploaded-files` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:484
msgid "Working with form templates"
msgstr "使用表单模板"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:486
msgid ""
"All you need to do to get your form into a template is to place the form "
"instance into the template context. So if your form is called ``form`` in "
"the context, ``{{ form }}`` will render its ``<label>`` and ``<input>`` "
"elements appropriately."
msgstr "您只需将表单实例放到模板的上下文中即可。因此，如果您的表单在上下文中叫 ``form`` ，那么  ``{{ form }}`` 将渲染它相应的 ``<label>`` 和 ``<input>`` 元素。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:492
msgid "Form rendering options"
msgstr "表单渲染选项"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:494
msgid "Additional form template furniture"
msgstr "额外表单模板标签"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:496
msgid ""
"Don't forget that a form's output does *not* include the surrounding "
"``<form>`` tags, or the form's ``submit`` control. You will have to provide "
"these yourself."
msgstr "不要忘记，一张表单的输出 *不* 包含外层 ``<form>`` 标签以及 ``submit`` 控件。这些必须由你自己提供。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:500
msgid ""
"There are other output options though for the ``<label>``/``<input>`` pairs:"
msgstr "对于 ``<label>`` / ``<input>`` 对，还有其他输出选项："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:502
msgid ""
"``{{ form.as_table }}`` will render them as table cells wrapped in ``<tr>`` "
"tags"
msgstr " ``{{ form.as_table }}`` 会把它们渲染成表格单元格封装到标签 ``<tr>`` 中。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:505
msgid "``{{ form.as_p }}`` will render them wrapped in ``<p>`` tags"
msgstr " ``{{ form.as_p }}`` 会把它们渲染封装到标签 ``<p>`` 中。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:507
msgid "``{{ form.as_ul }}`` will render them wrapped in ``<li>`` tags"
msgstr " ``{{ form.as_ul }}`` 会把它们渲染封装到标签 ``<li>`` 中。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:509
msgid ""
"Note that you'll have to provide the surrounding ``<table>`` or ``<ul>`` "
"elements yourself."
msgstr "注意，您必须自己提供外层的 ``<table>`` 或 ``<ul>`` 元素。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:512
msgid ""
"Here's the output of ``{{ form.as_p }}`` for our ``ContactForm`` instance:"
msgstr "下面是我们 ``ContactForm`` 实例用 ``{{ form.as_p }}`` 的输出："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:525
msgid ""
"Note that each form field has an ID attribute set to ``id_<field-name>``, "
"which is referenced by the accompanying label tag. This is important in "
"ensuring that forms are accessible to assistive technology such as screen "
"reader software. You can also :ref:`customize the way in which labels and "
"ids are generated <ref-forms-api-configuring-label>`."
msgstr "请注意，每个表单字段都有一个 ``id_<field-name>`` 这样的ID属性，它被附带的label标签引用。这对于确保表单可供屏幕阅读软件这样的辅助技术访问非常重要。您还可以 :ref:`自定义Label和ID的生成方式 <ref-forms-api-configuring-label>` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:531
msgid "See :ref:`ref-forms-api-outputting-html` for more on this."
msgstr "更多相关信息，请参阅 :ref:`ref-forms-api-outputting-html` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:534
msgid "Rendering fields manually"
msgstr "手动渲染字段"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:536
msgid ""
"We don't have to let Django unpack the form's fields; we can do it manually "
"if we like (allowing us to reorder the fields, for example). Each field is "
"available as an attribute of the form using ``{{ form.name_of_field }}``, "
"and in a Django template, will be rendered appropriately. For example:"
msgstr "我们没有必要非要让Django来解包表单字段；如果我们喜欢，可以手动来处理（比如，让我们对字段重新排序）。每个字段都可以用 ``{{ form.name_of_field }}`` 作为表单的一个属性，并被相应的渲染在Django模板中。例如："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:565
msgid ""
"Complete ``<label>`` elements can also be generated using the "
":meth:`~django.forms.BoundField.label_tag`. For example:"
msgstr "完整的 ``<label>`` 元素还可以使用 :meth:`~django.forms.BoundField.label_tag` 来生成。例如："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:578
msgid "Rendering form error messages"
msgstr "渲染表单错误信息"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:580
msgid ""
"Of course, the price of this flexibility is more work. Until now we haven't "
"had to worry about how to display form errors, because that's taken care of "
"for us. In this example we have had to make sure we take care of any errors "
"for each field and any errors for the form as a whole. Note ``{{ "
"form.non_field_errors }}`` at the top of the form and the template lookup "
"for errors on each field."
msgstr "当然，这种灵活性的代价是要做更多的工作。到目前为止，我们不必担心如何显示表单的错误信息，因为它们已经帮我们处理好了。下面的例子中，我们需要自己处理每个字段的错误信息以及表单整体的所有错误信息。注意表单顶部的 ``{{ form.non_field_errors }}`` 以及模板中对每个字段查找错误信息。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:586
msgid ""
"Using ``{{ form.name_of_field.errors }}`` displays a list of form errors, "
"rendered as an unordered list. This might look like:"
msgstr "使用 ``{{ form.name_of_field.errors }}`` 显示该字段的错误信息列表，它被渲染成无序列表。看起来如下："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:595
msgid ""
"The list has a CSS class of ``errorlist`` to allow you to style its "
"appearance. If you wish to further customize the display of errors you can "
"do so by looping over them:"
msgstr "该列表有一个CSS class ``errorlist`` ，允许您自定义其样式。如果你想进一步自定义错误信息的显示，您可以通过遍历它们来实现："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:609
msgid ""
"Non-field errors (and/or hidden field errors that are rendered at the top of"
" the form when using helpers like ``form.as_p()``) will be rendered with an "
"additional class of ``nonfield`` to help distinguish them from field-"
"specific errors. For example, ``{{ form.non_field_errors }}`` would look "
"like:"
msgstr "非字段验证错误信息（或者通过使用像 ``form.as_p()`` 这样的辅助方法渲染产生在表单顶部的隐藏错误信息）渲染后会额外带上一个class  ``nonfield`` 以便与字段验证错误信息区分。例如， ``{{ form.non_field_errors }}`` 渲染后会像这样："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:620
msgid ""
"See :doc:`/ref/forms/api` for more on errors, styling, and working with form"
" attributes in templates."
msgstr "更多错误、样式以及在模板中使用表单属性的内容，请参阅 :doc:`/ref/forms/api` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:624
msgid "Looping over the form's fields"
msgstr "遍历表单字段"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:626
msgid ""
"If you're using the same HTML for each of your form fields, you can reduce "
"duplicate code by looping through each field in turn using a ``{% for %}`` "
"loop:"
msgstr "如果您要给每个表单字段使用相同的HTML，您可以用 ``{% for %}`` 依次循环遍历每个字段来减少重复代码："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:642
msgid "Useful attributes on ``{{ field }}`` include:"
msgstr " ``{{ field }}`` 中有用的属性包括："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:645
msgid "``{{ field.label }}``"
msgstr " ``{{ field.label }}`` "

#: ../../../../sources/2.2/docs/topics/forms/index.txt:645
msgid "The label of the field, e.g. ``Email address``."
msgstr "字段的label，比如 ``Email address``。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:652
msgid "``{{ field.label_tag }}``"
msgstr " ``{{ field.label_tag }}`` "

#: ../../../../sources/2.2/docs/topics/forms/index.txt:648
msgid ""
"The field's label wrapped in the appropriate HTML ``<label>`` tag. This "
"includes the form's :attr:`~django.forms.Form.label_suffix`. For example, "
"the default ``label_suffix`` is a colon::"
msgstr "该字段的label封装在相应的HTML ``<label>`` 标签中。它包含表单的 :attr:`~django.forms.Form.label_suffix` 。例如，默认的 ``label_suffix`` 是一个冒号："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:658
msgid "``{{ field.id_for_label }}``"
msgstr " ``{{ field.id_for_label }}`` "

#: ../../../../sources/2.2/docs/topics/forms/index.txt:655
msgid ""
"The ID that will be used for this field (``id_email`` in the example above)."
" If you are constructing the label manually, you may want to use this in "
"lieu of ``label_tag``. It's also useful, for example, if you have some "
"inline JavaScript and want to avoid hardcoding the field's ID."
msgstr "用于该字段的 ID（像上面的例子中的 ``id_email`` ）。如果您要手动构建label，您可能要用这个来替换 ``label_tag`` 。例如，如果你有一些内嵌的JavaScript并且想要避免硬编码字段的ID，这也很有用。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:661
msgid "``{{ field.value }}``"
msgstr " ``{{ field.value }}`` "

#: ../../../../sources/2.2/docs/topics/forms/index.txt:661
msgid "The value of the field. e.g ``someone@example.com``."
msgstr "字段的值。例如 ``someone@example.com`` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:665
msgid "``{{ field.html_name }}``"
msgstr " ``{{ field.html_name }}`` "

#: ../../../../sources/2.2/docs/topics/forms/index.txt:664
msgid ""
"The name of the field that will be used in the input element's name field. "
"This takes the form prefix into account, if it has been set."
msgstr "字段名称：用于其输入元素的name属性中。如果设置了表单前缀，它也会被加进去。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:668
msgid "``{{ field.help_text }}``"
msgstr " ``{{ field.help_text }}`` "

#: ../../../../sources/2.2/docs/topics/forms/index.txt:668
msgid "Any help text that has been associated with the field."
msgstr "与该字段关联的帮助文本。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:675
msgid "``{{ field.errors }}``"
msgstr " ``{{ field.errors }}`` "

#: ../../../../sources/2.2/docs/topics/forms/index.txt:671
msgid ""
"Outputs a ``<ul class=\"errorlist\">`` containing any validation errors "
"corresponding to this field. You can customize the presentation of the "
"errors with a ``{% for error in field.errors %}`` loop. In this case, each "
"object in the loop is a simple string containing the error message."
msgstr "输出一个包含对应该字段所有验证错误信息的 ``<ul class=\"errorlist\">`` 。您可以用 ``{% for error in field.errors %}`` 循环来自定义错误信息的显示。这种情况下，循环中的每个对象只是一个包含错误信息的简单字符串。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:680
msgid "``{{ field.is_hidden }}``"
msgstr " ``{{ field.is_hidden }}`` "

#: ../../../../sources/2.2/docs/topics/forms/index.txt:678
msgid ""
"This attribute is ``True`` if the form field is a hidden field and ``False``"
" otherwise. It's not particularly useful as a template variable, but could "
"be useful in conditional tests such as:"
msgstr "如果是隐藏字段，这个属性为 ``True`` ，否则为 ``False`` 。它作为模板变量没多大作用，但可用于条件测试，例如："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:692
msgid "``{{ field.field }}``"
msgstr " ``{{ field.field }}`` "

#: ../../../../sources/2.2/docs/topics/forms/index.txt:689
msgid ""
"The :class:`~django.forms.Field` instance from the form class that this "
":class:`~django.forms.BoundField` wraps. You can use it to access "
":class:`~django.forms.Field` attributes, e.g. ``{{ "
"char_field.field.max_length }}``."
msgstr "表单类中的 :class:`~django.forms.Field` 实例由 :class:`~django.forms.BoundField` 封装。您可以用它来访问 :class:`~django.forms.Field` 的属性，比如 ``{{ char_field.field.max_length }}`` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:696
msgid ""
"For a complete list of attributes and methods, see "
":class:`~django.forms.BoundField`."
msgstr "有关字段属性及方法的完整清单，请参阅 :class:`~django.forms.BoundField` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:700
msgid "Looping over hidden and visible fields"
msgstr "遍历隐藏字段和可见字段"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:702
msgid ""
"If you're manually laying out a form in a template, as opposed to relying on"
" Django's default form layout, you might want to treat ``<input "
"type=\"hidden\">`` fields differently from non-hidden fields. For example, "
"because hidden fields don't display anything, putting error messages \"next "
"to\" the field could cause confusion for your users -- so errors for those "
"fields should be handled differently."
msgstr "如果您在手动布置模板中的表单，而不是依靠Django的默认表单布局，您可能希望将 ``<input type=\"hidden\">`` 字段与非隐藏字段区别开来。例如，因为隐藏字段不显示任何内容，将错误消息“放到”该字段旁边可能会导致用户混淆——所以这些字段的错误应该以不同的方式处理。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:709
msgid ""
"Django provides two methods on a form that allow you to loop over the hidden"
" and visible fields independently: ``hidden_fields()`` and "
"``visible_fields()``. Here's a modification of an earlier example that uses "
"these two methods:"
msgstr "Django在表单上提供了两种方法，允许您独立地遍历隐藏和可见的字段： ``hidden_fields()`` 和 ``visible_fields()`` 。以下是使用这两种方法对之前示例的修改："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:728
msgid ""
"This example does not handle any errors in the hidden fields. Usually, an "
"error in a hidden field is a sign of form tampering, since normal form "
"interaction won't alter them. However, you could easily insert some error "
"displays for those form errors, as well."
msgstr "这个示例没有处理隐藏字段中的任何错误信息。通常，隐藏字段中的错误象征着表单被篡改，因为正常的表单交互不会去改变它们。但是，您也可以轻松地为这些表单错误插入一些错误信息显示出来。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:734
msgid "Reusable form templates"
msgstr "可复用的表单模板"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:736
msgid ""
"If your site uses the same rendering logic for forms in multiple places, you"
" can reduce duplication by saving the form's loop in a standalone template "
"and using the :ttag:`include` tag to reuse it in other templates:"
msgstr "如果您的网站在多个位置对表单使用相同的渲染逻辑，您可以通过将表单的循环保存到独立的模板中，然后在其他模板中使用 :ttag:`include` 标签来减少代码重复："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:753
msgid ""
"If the form object passed to a template has a different name within the "
"context, you can alias it using the ``with`` argument of the :ttag:`include`"
" tag:"
msgstr "如果传递给模板的表单对象在上下文中具有不同的名称，您可以使用 :ttag:`include` 标签的 ``with`` 属性来给它取别名。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:761
msgid ""
"If you find yourself doing this often, you might consider creating a custom "
":ref:`inclusion tag<howto-custom-template-tags-inclusion-tags>`."
msgstr "如果您发现自己经常这样做，您可能需要考虑创建一个自定义的 :ref:`包含标签<howto-custom-template-tags-inclusion-tags>` 。"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:765
msgid "Further topics"
msgstr "更多相关主题"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:767
msgid "This covers the basics, but forms can do a whole lot more:"
msgstr "以上只涵盖了表单的基础知识，但它还可以做更多的事情："

#: ../../../../sources/2.2/docs/topics/forms/index.txt:779
msgid ":doc:`The Forms Reference </ref/forms/index>`"
msgstr " :doc:`表单参考 </ref/forms/index>`"

#: ../../../../sources/2.2/docs/topics/forms/index.txt:779
msgid ""
"Covers the full API reference, including form fields, form widgets, and form"
" and field validation."
msgstr "覆盖完整的API 参考，包括表单字段、表单控件以及表单和字段的验证。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:3
msgid "Form Assets (the ``Media`` class)"
msgstr "表单资源（ ``Media`` 类）"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:5
msgid ""
"Rendering an attractive and easy-to-use Web form requires more than just "
"HTML - it also requires CSS stylesheets, and if you want to use fancy "
"\"Web2.0\" widgets, you may also need to include some JavaScript on each "
"page. The exact combination of CSS and JavaScript that is required for any "
"given page will depend upon the widgets that are in use on that page."
msgstr "要渲染一个有吸引力且易于使用的Web表单不仅仅需要HTML，还需要CSS样式表，如果您想使用多样的 \"Web2.0\" 组件，您还需要在每个页面上包含一些JavaScript。要在任何给定模板上准确组合CSS和JavaScript取决于此页面上使用的组件。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:11
msgid ""
"This is where asset definitions come in. Django allows you to associate "
"different files -- like stylesheets and scripts -- with the forms and "
"widgets that require those assets. For example, if you want to use a "
"calendar to render DateFields, you can define a custom Calendar widget. This"
" widget can then be associated with the CSS and JavaScript that is required "
"to render the calendar. When the Calendar widget is used on a form, Django "
"is able to identify the CSS and JavaScript files that are required, and "
"provide the list of file names in a form suitable for easy inclusion on your"
" Web page."
msgstr "这是资源定义的来源。Django允许您关联不同的文件——像样式表和脚本——以及需要这些资源的表单和组件。例如，如果您想用日历来渲染DateFields，您可以自定义一个日历组件。然后这个组件可以与渲染日历所需的CSS和JavaScript相关联。在表单上使用日历组件时，Django能够识别所需的CSS和JavaScript文件，并提供表单中的文件名列表，简便适合地包含到您的网页中。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:21
msgid "Assets and Django Admin"
msgstr "资源及Django Admin"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:23
msgid ""
"The Django Admin application defines a number of customized widgets for "
"calendars, filtered selections, and so on. These widgets define asset "
"requirements, and the Django Admin uses the custom widgets in place of the "
"Django defaults. The Admin templates will only include those files that are "
"required to render the widgets on any given page."
msgstr "Django Admin应用程序为日历、选择过滤及其他功能定义了一些定制的组件。这些组件定义资源的需求，Django Admin使用自定义组件来代替Django的默认组件。Admin模板将只会包含在页面上呈现组件所需的文件。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:30
msgid ""
"If you like the widgets that the Django Admin application uses, feel free to"
" use them in your own application! They're all stored in "
"``django.contrib.admin.widgets``."
msgstr "如果您喜欢Django Admin应用程序使用的组件，您可以在应用中随意使用它们。它们都位于 ``django.contrib.admin.widgets`` 。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:34
msgid "Which JavaScript toolkit?"
msgstr "哪个JavaScript工具包？"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:36
msgid ""
"Many JavaScript toolkits exist, and many of them include widgets (such as "
"calendar widgets) that can be used to enhance your application. Django has "
"deliberately avoided blessing any one JavaScript toolkit. Each toolkit has "
"its own relative strengths and weaknesses - use whichever toolkit suits your"
" requirements. Django is able to integrate with any JavaScript toolkit."
msgstr "现在有很多JavaScript工具包，它们中许多都包含组件（比如日历组件），可以用来改善您的应用程序。Django刻意避免去推荐任何一个JavaScript工具包。每个工具包都有自己的优点和缺点，使用适合您需求的工具包。Django能够与任何JavaScript工具包集成。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:46
msgid "Assets as a static definition"
msgstr "资源作为静态定义"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:48
msgid ""
"The easiest way to define assets is as a static definition. Using this "
"method, the declaration is an inner ``Media`` class. The properties of the "
"inner class define the requirements."
msgstr "定义资源最简单方法是静态定义。要使用这种方法，声明是一个内部的 ``Media`` 类。此内部类的属性定义了这个需求。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:52
msgid "Here's a simple example::"
msgstr "以下是一个简单的例子："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:63
msgid ""
"This code defines a ``CalendarWidget``, which will be based on "
"``TextInput``. Every time the CalendarWidget is used on a form, that form "
"will be directed to include the CSS file ``pretty.css``, and the JavaScript "
"files ``animations.js`` and ``actions.js``."
msgstr "这段代码定义了一个 ``CalendarWidget`` ，它继承自 ``TextInput`` 。每次CalendarWidget在表单上使用时，该表单都会包含CSS文件 ``pretty.css`` ，以及JavaScript文件 ``animations.js`` 和 ``actions.js`` 。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:68
msgid ""
"This static definition is converted at runtime into a widget property named "
"``media``. The list of assets for a ``CalendarWidget`` instance can be "
"retrieved through this property::"
msgstr "这个静态定义在运行时被转换成名为 ``media`` 的组件属性。 ``CalendarWidget`` 实例的资源列表可以通过这个属性获得："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:78
msgid ""
"Here's a list of all possible ``Media`` options. There are no required "
"options."
msgstr "以下是所有可能的 ``Media`` 选项列表。没有一个是必需项。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:81
msgid "``css``"
msgstr " ``css`` "

#: ../../../../sources/2.2/docs/topics/forms/media.txt:83
msgid ""
"A dictionary describing the CSS files required for various forms of output "
"media."
msgstr "描述各种表单输出媒体所需的CSS文件的字典。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:86
msgid ""
"The values in the dictionary should be a tuple/list of file names. See "
":ref:`the section on paths <form-asset-paths>` for details of how to specify"
" paths to these files."
msgstr "字典中的值应该是一个文件名元组/列表。有关如何指定这些文件的路径的详细内容，请参阅 :ref:`路径章节<form-asset-paths>` 。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:90
msgid ""
"The keys in the dictionary are the output media types. These are the same "
"types accepted by CSS files in media declarations: 'all', 'aural', "
"'braille', 'embossed', 'handheld', 'print', 'projection', 'screen', 'tty' "
"and 'tv'. If you need to have different stylesheets for different media "
"types, provide a list of CSS files for each output medium. The following "
"example would provide two CSS options -- one for the screen, and one for "
"print::"
msgstr "字典中的键是输出媒体类型。它们和媒体声明中CSS文件接受的类型相同：'all'、'aural'、'braille'、'embossed'、'handheld'、'print'、'projection'、'screen'、'tty' 和 'tv'。如果您需要针对不同媒体类型使用不同的样式表，就要给每个输出媒体提供一个CSS文件列表。下面的示例提供了两个CSS选项——一个用于屏幕，一个用于打印："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:103
msgid ""
"If a group of CSS files are appropriate for multiple output media types, the"
" dictionary key can be a comma separated list of output media types. In the "
"following example, TV's and projectors will have the same media "
"requirements::"
msgstr "如果一组CSS文件适用于多种输出媒体类型，字典的键可以是以逗号分隔的输出媒体类型列表。在下面的例子中，电视和投影机将具有相同的媒体需求："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:115
msgid ""
"If this last CSS definition were to be rendered, it would become the "
"following HTML::"
msgstr "如果最后的这个CSS定义被渲染，它将成为下面的HTML："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:122
msgid "``js``"
msgstr " ``js`` "

#: ../../../../sources/2.2/docs/topics/forms/media.txt:124
msgid ""
"A tuple describing the required JavaScript files. See :ref:`the section on "
"paths <form-asset-paths>` for details of how to specify paths to these "
"files."
msgstr "描述所需JavaScript文件的一个元组。有关如何指定这些文件的路径的详细内容，请参阅 :ref:`路径章节 <form-asset-paths>` 。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:129
msgid "``extend``"
msgstr " ``extend`` "

#: ../../../../sources/2.2/docs/topics/forms/media.txt:131
msgid "A boolean defining inheritance behavior for ``Media`` declarations."
msgstr "定义了 ``Media`` 声明继承行为的一个布尔值。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:133
msgid ""
"By default, any object using a static ``Media`` definition will inherit all "
"the assets associated with the parent widget. This occurs regardless of how "
"the parent defines its own requirements. For example, if we were to extend "
"our basic Calendar widget from the example above::"
msgstr "默认情况下，使用静态 ``Media`` 定义的对象都将继承与父组件关联的所有资源。无论父级如何定义自己的需求，都会发生这种情况。例如，如果我们要从上面的例子中扩展我们的基础日历组件："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:154
msgid ""
"The FancyCalendar widget inherits all the assets from its parent widget. If "
"you don't want ``Media`` to be inherited in this way, add an "
"``extend=False`` declaration to the ``Media`` declaration::"
msgstr "FancyCalendar组件从其父组件继承所有资源。如果您不想用这种方式继承 ``Media`` ，要在 ``Media`` 声明中添加一个 ``extend=False`` 声明："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:171
msgid ""
"If you require even more control over inheritance, define your assets using "
"a :ref:`dynamic property <dynamic-property>`. Dynamic properties give you "
"complete control over which files are inherited, and which are not."
msgstr "如果您需要更多的继承控制，用一个 :ref:`动态属性 <dynamic-property>` 定义你的 。动态属性使您可以完全控制哪些文件是否继承。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:178
msgid "``Media`` as a dynamic property"
msgstr "把 ``Media`` 作为动态属性"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:180
msgid ""
"If you need to perform some more sophisticated manipulation of asset "
"requirements, you can define the ``media`` property directly. This is done "
"by defining a widget property that returns an instance of ``forms.Media``.  "
"The constructor for ``forms.Media`` accepts ``css`` and ``js`` keyword "
"arguments in the same format as that used in a static media definition."
msgstr "如果您需要执行一些更复杂的资源需求操作，你可以直接定义 ``media`` 属性。这是通过定义一个返回 ``forms.Media`` 实例的组件属性来实现的。这个 ``forms.Media`` 的构造函数接受 ``css`` 和 ``js`` 关键字参数，与静态媒体定义中使用的格式相同。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:187
msgid ""
"For example, the static definition for our Calendar Widget could also be "
"defined in a dynamic fashion::"
msgstr "例如，我们也可以以动态的方式定义日历组件的静态定义："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:196
msgid ""
"See the section on `Media objects`_ for more details on how to construct "
"return values for dynamic ``media`` properties."
msgstr "更多有关如何为动态 ``media`` 属性构建返回值的内容，请参阅 `媒体对象` 章节。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:202
msgid "Paths in asset definitions"
msgstr "资源定义中的路径"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:204
msgid ""
"Paths used to specify assets can be either relative or absolute. If a path "
"starts with ``/``, ``http://`` or ``https://``, it will be interpreted as an"
" absolute path, and left as-is. All other paths will be prepended with the "
"value of the appropriate prefix. If the :mod:`django.contrib.staticfiles` "
"app is installed, it will be used to serve assets."
msgstr "用于指定资源的路径可以是相对路径的也可以是绝对路径的。如果路径以 ``/`` 、 ``http://`` 或 ``https://`` 开头，则它将被解释为绝对路径，并保持原样。所有其他路径都会以相应值作为前缀。如果在settings中设置了 :mod:`django.contrib.staticfiles` ，就可以用来服务于资源。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:211
msgid ""
"Whether or not you use :mod:`django.contrib.staticfiles`,  the "
":setting:`STATIC_URL` and :setting:`STATIC_ROOT` settings are required to "
"render a complete web page."
msgstr "无论您是否使用 :mod:`django.contrib.staticfiles` ，都需要设置 :setting:`STATIC_URL` 和 :setting:`STATIC_ROOT` 来渲染一张完整的网页。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:215
msgid ""
"To find the appropriate prefix to use, Django will check if the "
":setting:`STATIC_URL` setting is not ``None`` and automatically fall back to"
" using :setting:`MEDIA_URL`. For example, if the :setting:`MEDIA_URL` for "
"your site was ``'http://uploads.example.com/'`` and :setting:`STATIC_URL` "
"was ``None``::"
msgstr "为了找到相应的前缀来使用，Django会去检查 :setting:`STATIC_URL` 是否不为 ``None`` ，并自动回退使用 :setting:`MEDIA_URL` 。例如，您的网站的 :setting:`MEDIA_URL` 设置为 ``'http://uploads.example.com/'`` 且 :setting:`STATIC_URL` 设置是 ``None`` ："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:235
msgid "But if :setting:`STATIC_URL` is ``'http://static.example.com/'``::"
msgstr "但如果 :setting:`STATIC_URL` 设置是 ``'http://static.example.com/'`` ："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:243
msgid ""
"Or if :mod:`~django.contrib.staticfiles` is configured using the "
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage`::"
msgstr "或者如果 :mod:`~django.contrib.staticfiles` 配置使用 :class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` ："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:253
msgid "``Media`` objects"
msgstr "``Media`` 对象"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:255
msgid ""
"When you interrogate the ``media`` attribute of a widget or form, the value "
"that is returned is a ``forms.Media`` object. As we have already seen, the "
"string representation of a ``Media`` object is the HTML required to include "
"the relevant files in the ``<head>`` block of your HTML page."
msgstr "当您访问表单或者组件的 ``media`` 属性时，返回值是一个 ``forms.Media`` 对象。正如我们已经看到的， ``Media`` 对象的字符串表示是一段需要在您HTML页面的 ``<head>`` 块中包含相关文件的HTML代码。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:261
msgid "However, ``Media`` objects have some other interesting properties."
msgstr "然而， ``Media`` 对象还有其他一些有趣的属性。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:264
msgid "Subsets of assets"
msgstr "资源的子集"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:266
msgid ""
"If you only want files of a particular type, you can use the subscript "
"operator to filter out a medium of interest. For example::"
msgstr "如果您只需要特定类型的文件，则可以使用下标运算符过滤出感兴趣的媒体文件。例如："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:278
msgid ""
"When you use the subscript operator, the value that is returned is a new "
"``Media`` object -- but one that only contains the media of interest."
msgstr "当您使用下标运算符时，返回值是一个新的 ``Media`` 对象——但只包含感兴趣的媒体。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:282
msgid "Combining ``Media`` objects"
msgstr "合并 ``Media`` 对象"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:284
msgid ""
"``Media`` objects can also be added together. When two ``Media`` objects are"
" added, the resulting ``Media`` object contains the union of the assets "
"specified by both::"
msgstr "``Media`` 对象也可以添加到一起。当添加两个 ``Media`` 对象时，生成的 ``Media`` 对象包含两者指定的资源的并集："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:311
msgid "Order of assets"
msgstr "资源的排序"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:313
msgid ""
"The order in which assets are inserted into the DOM is often important. For "
"example, you may have a script that depends on jQuery. Therefore, combining "
"``Media`` objects attempts to preserve the relative order in which assets "
"are defined in each ``Media`` class."
msgstr "资源插入DOM的顺序一般来说很重要。例如，您可能有一个依赖于jQuery的脚本。因此，合并 ``Media`` 对象会尝试保持资源在每个 ``Media`` 类中定义的相对顺序。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:335
msgid ""
"Combining ``Media`` objects with assets in a conflicting order results in a "
"``MediaOrderConflictWarning``."
msgstr "合并 ``Media`` 对象时，如果资源排序冲突，会导致警告提示： ``MediaOrderConflictWarning`` 。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:339
msgid "``Media`` on Forms"
msgstr "表单上的 ``Media`` "

#: ../../../../sources/2.2/docs/topics/forms/media.txt:341
msgid ""
"Widgets aren't the only objects that can have ``media`` definitions -- forms"
" can also define ``media``. The rules for ``media`` definitions on forms are"
" the same as the rules for widgets: declarations can be static or dynamic; "
"path and inheritance rules for those declarations are exactly the same."
msgstr "组件不是唯一可以具有 ``media`` 定义的对象——表单也可以。表单上 ``media`` 定义的规则与组件的规则相同：声明可以是静态的或动态的；声明的路径和继承规则也一模一样。"

#: ../../../../sources/2.2/docs/topics/forms/media.txt:347
msgid ""
"Regardless of whether you define a ``media`` declaration, *all* Form objects"
" have a ``media`` property. The default value for this property is the "
"result of adding the ``media`` definitions for all widgets that are part of "
"the form::"
msgstr "无论您是否定义了 ``media`` 声明，*所有*表单对象都有一个 ``media`` 属性。该属性的默认值是这个表单的所有组件添加 ``media`` 定义的结果："

#: ../../../../sources/2.2/docs/topics/forms/media.txt:364
msgid ""
"If you want to associate additional assets with a form -- for example, CSS "
"for form layout -- simply add a ``Media`` declaration to the form::"
msgstr "如果您想将其他资源与表单关联起来——例如，表单布局的CSS——只要向表单添加 ``Media`` 声明："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:3
msgid "Creating forms from models"
msgstr "从模型创建表单"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:11
msgid "``ModelForm``"
msgstr "``ModelForm``"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:14
msgid ""
"If you're building a database-driven app, chances are you'll have forms that"
" map closely to Django models. For instance, you might have a "
"``BlogComment`` model, and you want to create a form that lets people submit"
" comments. In this case, it would be redundant to define the field types in "
"your form, because you've already defined the fields in your model."
msgstr "如果您正在构建一个数据库驱动的应用程序，那么您很有可能会用到与Django模型密切相关的表单。例如，您可能有一个 ``BlogComment`` 模型，并且您想创建一个让用户提交评论的表单。在这种情况下，在表单中定义字段类型是多余的，因为您已经在模型中定义了字段。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:20
msgid ""
"For this reason, Django provides a helper class that lets you create a "
"``Form`` class from a Django model."
msgstr "因此，Django 提供了一个辅助类让你可以从一个 Django 模型创建一个 ``Form`` 类。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:44
msgid ""
"The generated ``Form`` class will have a form field for every model field "
"specified, in the order specified in the ``fields`` attribute."
msgstr "生成的 ``Form`` 类将按照 ``fields`` 属性中指定的顺序为每个指定的模型字段设置一个表单字段。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:47
msgid ""
"Each model field has a corresponding default form field. For example, a "
"``CharField`` on a model is represented as a ``CharField`` on a form. A "
"model ``ManyToManyField`` is represented as a ``MultipleChoiceField``. Here "
"is the full list of conversions:"
msgstr "每个模型字段都有一个对应的默认表单字段。例如，模型中的 ``CharField`` 在表单中被表现为 ``CharField`` 。 ``ManyToManyField`` 则表现为 ``MultipleChoiceField`` 。以下是完整的转化清单："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:55
msgid "Model field"
msgstr "模型字段"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:55
msgid "Form field"
msgstr "表单字段"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:57
msgid ":class:`AutoField`"
msgstr ":class:`AutoField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:57
#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:59
msgid "Not represented in the form"
msgstr "不呈现在表单中"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:59
msgid ":class:`BigAutoField`"
msgstr ":class:`BigAutoField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:61
msgid ":class:`BigIntegerField`"
msgstr ":class:`BigIntegerField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:61
msgid ""
":class:`~django.forms.IntegerField` with ``min_value`` set to "
"-9223372036854775808 and ``max_value`` set to 9223372036854775807."
msgstr ":class:`~django.forms.IntegerField` 将 ``min_value`` 设置为-9223372036854775808，将 ``max_value`` 设置为9223372036854775807。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:65
msgid ":class:`BinaryField`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:65
msgid ""
":class:`~django.forms.CharField`, if :attr:`~.Field.editable` is set to "
"``True`` on the model field, otherwise not represented in the form."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:70
msgid ":class:`BooleanField`"
msgstr ":class:`BooleanField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:70
msgid ""
":class:`~django.forms.BooleanField`, or "
":class:`~django.forms.NullBooleanField` if ``null=True``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:74
msgid ":class:`CharField`"
msgstr ":class:`CharField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:74
msgid ""
":class:`~django.forms.CharField` with ``max_length`` set to the model "
"field's ``max_length`` and :attr:`~django.forms.CharField.empty_value` set "
"to ``None`` if ``null=True``."
msgstr ":class:`~django.forms.CharField` 将 ``max_length`` 设置为模型字段的 ``max_length`` ，如果模型中设置了 ``null=True`` ，会将 :attr:`~django.forms.CharField.empty_value` 设置为 ``None`` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:80
msgid ":class:`DateField`"
msgstr ":class:`DateField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:80
msgid ":class:`~django.forms.DateField`"
msgstr ":class:`~django.forms.DateField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:82
msgid ":class:`DateTimeField`"
msgstr ":class:`DateTimeField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:82
msgid ":class:`~django.forms.DateTimeField`"
msgstr ":class:`~django.forms.DateTimeField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:84
msgid ":class:`DecimalField`"
msgstr ":class:`DecimalField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:84
msgid ":class:`~django.forms.DecimalField`"
msgstr ":class:`~django.forms.DecimalField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:86
msgid ":class:`EmailField`"
msgstr ":class:`EmailField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:86
msgid ":class:`~django.forms.EmailField`"
msgstr ":class:`~django.forms.EmailField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:88
msgid ":class:`FileField`"
msgstr ":class:`FileField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:88
msgid ":class:`~django.forms.FileField`"
msgstr ":class:`~django.forms.FileField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:90
msgid ":class:`FilePathField`"
msgstr ":class:`FilePathField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:90
msgid ":class:`~django.forms.FilePathField`"
msgstr ":class:`~django.forms.FilePathField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:92
msgid ":class:`FloatField`"
msgstr ":class:`FloatField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:92
msgid ":class:`~django.forms.FloatField`"
msgstr ":class:`~django.forms.FloatField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:94
msgid ":class:`ForeignKey`"
msgstr ":class:`ForeignKey`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:94
msgid ":class:`~django.forms.ModelChoiceField` (see below)"
msgstr ":class:`~django.forms.ModelChoiceField` （见下文）"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:97
msgid "``ImageField``"
msgstr "``ImageField``"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:97
msgid ":class:`~django.forms.ImageField`"
msgstr ":class:`~django.forms.ImageField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:99
msgid ":class:`IntegerField`"
msgstr ":class:`IntegerField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:99
#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:110
#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:112
#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:116
msgid ":class:`~django.forms.IntegerField`"
msgstr ":class:`~django.forms.IntegerField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:101
#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:101
msgid "``IPAddressField``"
msgstr "``IPAddressField``"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:103
msgid ":class:`GenericIPAddressField`"
msgstr ":class:`GenericIPAddressField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:103
msgid ":class:`~django.forms.GenericIPAddressField`"
msgstr ":class:`~django.forms.GenericIPAddressField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:105
msgid ":class:`ManyToManyField`"
msgstr ":class:`ManyToManyField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:105
msgid ":class:`~django.forms.ModelMultipleChoiceField` (see below)"
msgstr ":class:`~django.forms.ModelMultipleChoiceField` （见下文）"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:108
msgid ":class:`NullBooleanField`"
msgstr ":class:`NullBooleanField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:108
msgid ":class:`~django.forms.NullBooleanField`"
msgstr ":class:`~django.forms.NullBooleanField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:110
msgid ":class:`PositiveIntegerField`"
msgstr ":class:`PositiveIntegerField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:112
msgid ":class:`PositiveSmallIntegerField`"
msgstr ":class:`PositiveSmallIntegerField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:114
msgid ":class:`SlugField`"
msgstr ":class:`SlugField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:114
msgid ":class:`~django.forms.SlugField`"
msgstr ":class:`~django.forms.SlugField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:116
msgid ":class:`SmallIntegerField`"
msgstr ":class:`SmallIntegerField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:118
msgid ":class:`TextField`"
msgstr ":class:`TextField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:118
msgid ":class:`~django.forms.CharField` with ``widget=forms.Textarea``"
msgstr ":class:`~django.forms.CharField` 设置中 ``widget=forms.Textarea``"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:121
msgid ":class:`TimeField`"
msgstr ":class:`TimeField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:121
msgid ":class:`~django.forms.TimeField`"
msgstr ":class:`~django.forms.TimeField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:123
msgid ":class:`URLField`"
msgstr ":class:`URLField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:123
msgid ":class:`~django.forms.URLField`"
msgstr ":class:`~django.forms.URLField`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:128
msgid ""
"As you might expect, the ``ForeignKey`` and ``ManyToManyField`` model field "
"types are special cases:"
msgstr "如您所料， ``ForeignKey`` 和 ``ManyToManyField`` 模型字段类型是特殊情况："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:131
msgid ""
"``ForeignKey`` is represented by ``django.forms.ModelChoiceField``, which is"
" a ``ChoiceField`` whose choices are a model ``QuerySet``."
msgstr "``ForeignKey`` 由 ``django.forms.ModelChoiceField`` 表示， 它是一个 ``ChoiceField`` ，其选项是一个模型的 ``QuerySet`` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:134
msgid ""
"``ManyToManyField`` is represented by "
"``django.forms.ModelMultipleChoiceField``, which is a "
"``MultipleChoiceField`` whose choices are a model ``QuerySet``."
msgstr "``ManyToManyField`` 由 ``django.forms.ModelMultipleChoiceField`` 表示，它是一个 ``MultipleChoiceField`` ，其选项为一个模型 ``QuerySet`` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:138
msgid "In addition, each generated form field has attributes set as follows:"
msgstr "另外，每个生成的表单字段的属性设置如下："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:140
msgid ""
"If the model field has ``blank=True``, then ``required`` is set to ``False``"
" on the form field. Otherwise, ``required=True``."
msgstr "如果模型字段设置了 ``blank=True`` ，那么表单字段的 ``required`` 属性被设置为 ``False`` ，否则 ``required=True`` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:143
msgid ""
"The form field's ``label`` is set to the ``verbose_name`` of the model "
"field, with the first character capitalized."
msgstr "表单字段的 ``label`` 设置为模型字段的 ``verbose_name`` ，并且首字母大写。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:146
msgid ""
"The form field's ``help_text`` is set to the ``help_text`` of the model "
"field."
msgstr "表单字段的 ``help_text`` 设置为模型字段的 ``help_text`` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:149
msgid ""
"If the model field has ``choices`` set, then the form field's ``widget`` "
"will be set to ``Select``, with choices coming from the model field's "
"``choices``. The choices will normally include the blank choice which is "
"selected by default. If the field is required, this forces the user to make "
"a selection. The blank choice will not be included if the model field has "
"``blank=False`` and an explicit ``default`` value (the ``default`` value "
"will be initially selected instead)."
msgstr "如果模型字段设置了 ``choices`` ，那么表单字段的 ``widget`` 会被设置为 ``Select`` ，其选项来自模型字段的 ``choices`` 。这些选项通常包含一个默认选中的空选项。如果字段设置了必填，则会强制用户进行选择。如果模型字段设置了 ``blank=False`` 以及一个明确的 ``default`` 值，则表单字段中不会包含空选项（默认会选中 ``default`` 值）。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:157
msgid ""
"Finally, note that you can override the form field used for a given model "
"field. See `Overriding the default fields`_ below."
msgstr "最后，请注意，您可以覆盖给定模型字段对应的表单字段。参见下文  `覆盖默认字段`_ 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:163
msgid "Consider this set of models::"
msgstr "思考下下面这组模型："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:197
msgid ""
"With these models, the ``ModelForm`` subclasses above would be roughly "
"equivalent to this (the only difference being the ``save()`` method, which "
"we'll discuss in a moment.)::"
msgstr "通过这些模型，上面的 ``ModelForm`` 子类将大致等同于（唯一的区别是 ``save()`` 方法，这我们稍后会讨论）："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:218
msgid "Validation on a ``ModelForm``"
msgstr "验证 ``ModelForm``"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:220
msgid "There are two main steps involved in validating a ``ModelForm``:"
msgstr "验证 ``ModelForm`` 主要涉及两个步骤："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:222
msgid ":doc:`Validating the form </ref/forms/validation>`"
msgstr ":doc:`验证表单</ref/forms/validation>`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:223
msgid ":ref:`Validating the model instance <validating-objects>`"
msgstr ":ref:`验证模型实例<validating-objects>`"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:225
msgid ""
"Just like normal form validation, model form validation is triggered "
"implicitly when calling :meth:`~django.forms.Form.is_valid()` or accessing "
"the :attr:`~django.forms.Form.errors` attribute and explicitly when calling "
"``full_clean()``, although you will typically not use the latter method in "
"practice."
msgstr "和普通的表单验证一样，模型表单验证在调用 :meth:`~django.forms.Form.is_valid()` 或访问 :attr:`~django.forms.Form.errors` 属性时隐式触发，在调用 ``full_clean()`` 时显式触发，尽管在实际应用中你不大会用到后一种方法。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:231
msgid ""
"``Model`` validation (:meth:`Model.full_clean() "
"<django.db.models.Model.full_clean()>`) is triggered from within the form "
"validation step, right after the form's ``clean()`` method is called."
msgstr "``模型`` 验证（ :meth:`Model.full_clean() <django.db.models.Model.full_clean()>` ）在表单验证步骤中紧随表单的 ``clean()`` 方法被调用后触发。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:237
msgid ""
"The cleaning process modifies the model instance passed to the ``ModelForm``"
" constructor in various ways. For instance, any date fields on the model are"
" converted into actual date objects. Failed validation may leave the "
"underlying model instance in an inconsistent state and therefore it's not "
"recommended to reuse it."
msgstr "Clean 过程会以各种方式去修改传递给 ``ModelForm`` 构造方法的模型实例。例如，模型上的所有日期字段都将转换为实际的日期对象。验证失败可能会使底层模型实例处于不一致状态，因此不推荐对其重用。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:246
msgid "Overriding the clean() method"
msgstr "覆盖clean()方法 "

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:248
msgid ""
"You can override the ``clean()`` method on a model form to provide "
"additional validation in the same way you can on a normal form."
msgstr "您可以重写模型表单上的 ``clean()`` 方法来提供额外的验证，方式和普通的表单一样。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:251
msgid ""
"A model form instance attached to a model object will contain an "
"``instance`` attribute that gives its methods access to that specific model "
"instance."
msgstr "访问模型对象对应的表单实例包含一个 ``instance`` 属性，让它可以访问对应的模型实例。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:256
msgid ""
"The ``ModelForm.clean()`` method sets a flag that makes the :ref:`model "
"validation <validating-objects>` step validate the uniqueness of model "
"fields that are marked as ``unique``, ``unique_together`` or "
"``unique_for_date|month|year``."
msgstr "``ModelForm.clean()`` 方法设置了一个标识符，使程序在 :ref:`模型验证 <validating-objects>`  这步去验证标记为 ``unique`` 、 ``unique_together`` 或 ``unique_for_date|month|year`` 的模型字段的唯一性。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:261
msgid ""
"If you would like to override the ``clean()`` method and maintain this "
"validation, you must call the parent class's ``clean()`` method."
msgstr "如果您想覆盖 ``clean()`` 方法并保持当前的验证，您必须调用父类的 ``clean()`` 方法。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:265
msgid "Interaction with model validation"
msgstr "与模型验证交互"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:267
msgid ""
"As part of the validation process, ``ModelForm`` will call the ``clean()`` "
"method of each field on your model that has a corresponding field on your "
"form. If you have excluded any model fields, validation will not be run on "
"those fields. See the :doc:`form validation </ref/forms/validation>` "
"documentation for more on how field cleaning and validation work."
msgstr "作为验证过程的一部分， ``ModelForm`` 将调用模型上与表单字段对应的每个字段的 ``clean()`` 方法。如果您排除了一些模型字段，则验证将不会在这些字段上运行。更多有关字段clean及验证是如何工作的内容，请参阅 :doc:`表单验证 </ref/forms/validation>` 文档。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:273
msgid ""
"The model's ``clean()`` method will be called before any uniqueness checks "
"are made. See :ref:`Validating objects <validating-objects>` for more "
"information on the model's ``clean()`` hook."
msgstr "模型的 ``clean()`` 方法会在所有唯一性检查之前被调用。有关模型 ``clean()`` 钩子的更多信息，请参阅 :ref:`验证对象 <validating-objects>` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:280
msgid "Considerations regarding model's ``error_messages``"
msgstr "有关模型的 ``error_messages`` 的注意事项"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:282
msgid ""
"Error messages defined at the :attr:`form field "
"<django.forms.Field.error_messages>` level or at the :ref:`form Meta "
"<modelforms-overriding-default-fields>` level always take precedence over "
"the error messages defined at the :attr:`model field "
"<django.db.models.Field.error_messages>` level."
msgstr "在 :attr:`表单字段 <django.forms.Field.error_messages>` 级别或者 :ref:`表单 Meta <modelforms-overriding-default-fields>` 级别定义的错误信息优先级总是高于在 :attr:`模型字段 <django.db.models.Field.error_messages>` 级别定义的。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:288
msgid ""
"Error messages  defined on :attr:`model fields "
"<django.db.models.Field.error_messages>` are only used when the "
"``ValidationError`` is raised during the :ref:`model validation <validating-"
"objects>` step and no corresponding error messages are defined at the form "
"level."
msgstr "在 :attr:`模型字段 <django.db.models.Field.error_messages>` 上定义的错误信息只有在 :ref:`模型验证 <validating-objects>` 步骤引发 ``ValidationError`` 时才会使用，并且没有在表单级定义相应的错误信息。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:294
msgid ""
"You can override the error messages from ``NON_FIELD_ERRORS`` raised by "
"model validation by adding the "
":data:`~django.core.exceptions.NON_FIELD_ERRORS` key to the "
"``error_messages`` dictionary of the ``ModelForm``’s inner ``Meta`` class::"
msgstr "您可以通过添加 :data:`~django.core.exceptions.NON_FIELD_ERRORS` 键到 ``ModelForm`` 内部的 ``Meta`` 类的 ``error_messages`` 中来覆盖模型验证引发的 ``NON_FIELD_ERRORS`` 错误信息。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:312
msgid "The ``save()`` method"
msgstr "``save()`` 方法"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:314
msgid ""
"Every ``ModelForm`` also has a ``save()`` method. This method creates and "
"saves a database object from the data bound to the form. A subclass of "
"``ModelForm`` can accept an existing model instance as the keyword argument "
"``instance``; if this is supplied, ``save()`` will update that instance. If "
"it's not supplied, ``save()`` will create a new instance of the specified "
"model:"
msgstr "每个 ``ModelForm`` 还有一个 ``save()`` 方法。此方法根据绑定到表单的数据创建并保存数据库对象。 ``ModelForm`` 的子类可接受一个现有的模型实例作为关键字参数 ``instance`` ；如果提供了，则 ``save()`` 会更新这个实例。如果没有，则 ``save()`` 会创建一个对应模型的新实例。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:337
msgid ""
"Note that if the form :ref:`hasn't been validated <validation-on-"
"modelform>`, calling ``save()`` will do so by checking ``form.errors``. A "
"``ValueError`` will be raised if the data in the form doesn't validate -- "
"i.e., if ``form.errors`` evaluates to ``True``."
msgstr "请注意，如果表单 :ref:`尚未验证 <validation-on-modelform>` ，调用 ``save()`` 将通过检查 ``form.errors`` 来实现验证。如果表单验证不过，则会引发 ``ValueError`` —— 比如，如果 ``form.errors`` 返回 ``True`` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:342
msgid ""
"If an optional field doesn't appear in the form's data, the resulting model "
"instance uses the model field :attr:`~django.db.models.Field.default`, if "
"there is one, for that field. This behavior doesn't apply to fields that use"
" :class:`~django.forms.CheckboxInput`, "
":class:`~django.forms.CheckboxSelectMultiple`, or "
":class:`~django.forms.SelectMultiple` (or any custom widget whose "
":meth:`~django.forms.Widget.value_omitted_from_data` method always returns "
"``False``) since an unchecked checkbox and unselected ``<select multiple>`` "
"don't appear in the data of an HTML form submission. Use a custom form field"
" or widget if you're designing an API and want the default fallback behavior"
" for a field that uses one of these widgets."
msgstr "如果一个可选字段没有出现在表单的数据中，并且您给这个模型字段设置了 :attr:`~django.db.models.Field.default` ，那么对应的模型实例会使用这个值作为结果。此行为不适用于使用以下组件的字段： :class:`~django.forms.CheckboxInput` 、 :class:`~django.forms.CheckboxSelectMultiple` 或者 :class:`~django.forms.SelectMultiple` （或者所有其 :meth:`~django.forms.Widget.value_omitted_from_data` 方法总是返回 ``False`` 的组件），因为未勾选的复选框和未选中的 ``<select multiple>`` 不会出现在HTML表单提交的数据中。如果您正在设计API并且希望使用这些组件之一的字段有默认回退行为，请使用自定义表单字段或组件。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:354
msgid ""
"This ``save()`` method accepts an optional ``commit`` keyword argument, "
"which accepts either ``True`` or ``False``. If you call ``save()`` with "
"``commit=False``, then it will return an object that hasn't yet been saved "
"to the database. In this case, it's up to you to call ``save()`` on the "
"resulting model instance. This is useful if you want to do custom processing"
" on the object before saving it, or if you want to use one of the "
"specialized :ref:`model saving options <ref-models-force-insert>`. "
"``commit`` is ``True`` by default."
msgstr "``save()`` 方法接受一个可选参数 ``commit`` ，它的值是 ``True`` 或者 ``False`` 。如果调用 ``save()`` 的时候使用 ``commit=False`` ，那么它会返回一个尚未保存到数据库的对象。在这种情况下，需要您自己在生成的模型实例上调用 ``save()`` 。如果要在保存对象之前对对象执行自定义操作，或者要使用其中一个专用的 :ref:`模型保存选项 <ref-models-force-insert>` ，这很有用。 ``commit`` 的值默认为 ``True`` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:363
msgid ""
"Another side effect of using ``commit=False`` is seen when your model has a "
"many-to-many relation with another model. If your model has a many-to-many "
"relation and you specify ``commit=False`` when you save a form, Django "
"cannot immediately save the form data for the many-to-many relation. This is"
" because it isn't possible to save many-to-many data for an instance until "
"the instance exists in the database."
msgstr "另一个使用 ``commit=False`` 的作用，您可以在模型与另一个模型有多对多关系的时候看到。如果您的模型具有多对多关系，并且在保存表单时指定了 ``commit=False`` ，Django无法立即保存多对多关系的表单数据。这是因为实例的多对多数据只有实例在数据库中存在时才能保存。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:370
msgid ""
"To work around this problem, every time you save a form using "
"``commit=False``, Django adds a ``save_m2m()`` method to your ``ModelForm`` "
"subclass. After you've manually saved the instance produced by the form, you"
" can invoke ``save_m2m()`` to save the many-to-many form data. For example:"
msgstr "要解决这个问题，Django会在您每次使用 ``commit=False`` 保存表单时，向 ``ModelForm`` 子类添加一个 ``save_m2m()`` 方法。在您手动保存表单生成的实例后，可以调用 ``save_m2m()`` 来保存多对多的表单数据。例如："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:392
msgid ""
"Calling ``save_m2m()`` is only required if you use ``save(commit=False)``. "
"When you use a simple ``save()`` on a form, all data -- including many-to-"
"many data -- is saved without the need for any additional method calls. For "
"example:"
msgstr "只有在您使用 ``save(commit=False)`` 的时候才需要调用 ``save_m2m()`` 。当您在表单上使用普通的 ``save()`` 时，无需调用其他方法，所有数据（包括多对多数据）都会被保存。例如："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:406
msgid ""
"Other than the ``save()`` and ``save_m2m()`` methods, a ``ModelForm`` works "
"exactly the same way as any other ``forms`` form. For example, the "
"``is_valid()`` method is used to check for validity, the ``is_multipart()`` "
"method is used to determine whether a form requires multipart file upload "
"(and hence whether ``request.FILES`` must be passed to the form), etc. See "
":ref:`binding-uploaded-files` for more information."
msgstr "除了  ``save()`` 和 ``save_m2m()`` 方法之外，``ModelForm`` 与普通的表单工作方式一样。例如，用 ``is_valid()`` 方法来检查合法性，用 ``is_multipart()`` 方法来确定表单是否需要multipart文件上传（之后是否必须将 ``request.FILES`` 传递给表单），等等。更多相关信息，请参阅 :ref:`binding-uploaded-files` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:416
msgid "Selecting the fields to use"
msgstr "选择要使用的字段"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:418
msgid ""
"It is strongly recommended that you explicitly set all fields that should be"
" edited in the form using the ``fields`` attribute. Failure to do so can "
"easily lead to security problems when a form unexpectedly allows a user to "
"set certain fields, especially when new fields are added to a model. "
"Depending on how the form is rendered, the problem may not even be visible "
"on the web page."
msgstr "强烈建议您使用 ``fields`` 属性来显式设置所有应在表单中编辑的字段。如果不这样做，当一张表单不慎允许用户设置某些字段，尤其是在将新字段添加到模型中时，很容易导致安全问题。根据表单渲染方式的不同，甚至可能不会在网页上显示问题。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:424
msgid ""
"The alternative approach would be to include all fields automatically, or "
"blacklist only some. This fundamental approach is known to be much less "
"secure and has led to serious exploits on major websites (e.g. `GitHub "
"<https://github.com/blog/1068-public-key-security-vulnerability-and-"
"mitigation>`_)."
msgstr "另一种方法是自动包含所有字段，其他放入黑名单。据了解，这种基本方法不太安全，并已导致大型网站上出现严重漏洞（例如， `GitHub <https://github.com/blog/1068-public-key-security-vulnerability-and-mitigation>`_ ）。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:429
msgid ""
"There are, however, two shortcuts available for cases where you can "
"guarantee these security concerns do not apply to you:"
msgstr "但是，有两种简单的方法保证你不会出现这些安全问题："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:432
msgid ""
"Set the ``fields`` attribute to the special value ``'__all__'`` to indicate "
"that all fields in the model should be used. For example::"
msgstr "将 ``fields`` 属性设置为特殊值 ``'__all__'`` 以表明需要使用模型中的所有字段。例如："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:442
msgid ""
"Set the ``exclude`` attribute of the ``ModelForm``’s inner ``Meta`` class to"
" a list of fields to be excluded from the form."
msgstr "将 ``ModelForm`` 中Meta类的 ``exclude`` 属性设置为表单中需要排除的字段列表。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:452
msgid ""
"Since the ``Author`` model has the 3 fields ``name``, ``title`` and "
"``birth_date``, this will result in the fields ``name`` and ``birth_date`` "
"being present on the form."
msgstr "由于 ``Author`` 模型有三个字段 ``name``、 ``title`` 和 ``birth_date`` ，上例的结果是字段 ``name`` 和 ``birth_date`` 会呈现在表单中。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:456
msgid ""
"If either of these are used, the order the fields appear in the form will be"
" the order the fields are defined in the model, with ``ManyToManyField`` "
"instances appearing last."
msgstr "不管使用哪一种，字段会按模型中定义的顺序在表单中出现， ``ManyToManyField`` 会排在最后。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:460
msgid ""
"In addition, Django applies the following rule: if you set "
"``editable=False`` on the model field, *any* form created from the model via"
" ``ModelForm`` will not include that field."
msgstr "另外，Django有个规则：如果您在模型字段中定义了 ``editable=False`` ， *任何*使用 ``ModelForm`` 给该模型创建的表单都不会包含这个字段。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:466
msgid ""
"Any fields not included in a form by the above logic will not be set by the "
"form's ``save()`` method. Also, if you manually add the excluded fields back"
" to the form, they will not be initialized from the model instance."
msgstr "任何没在上面逻辑中包含的表单字段都会不被表单的 ``save()`` 方法处理。另外，如果手动将排除的字段添加回表单，它们也不会被模型实例初始化。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:471
msgid ""
"Django will prevent any attempt to save an incomplete model, so if the model"
" does not allow the missing fields to be empty, and does not provide a "
"default value for the missing fields, any attempt to ``save()`` a "
"``ModelForm`` with missing fields will fail.  To avoid this failure, you "
"must instantiate your model with initial values for the missing, but "
"required fields::"
msgstr "Django会阻止任何尝试保存不完整模型的行为，所以如果模型不允许缺省的字段为空，并且没有为该字段提供缺省值，那么任何尝试用这种字段的 ``ModelForm`` 的 ``save()`` 方法都会失败。为了避免这种情况，您必须使用初始值实例化您模型中缺省但又必填的字段："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:482
msgid ""
"Alternatively, you can use ``save(commit=False)`` and manually set any extra"
" required fields::"
msgstr "或者，您可以使用 ``save(commit=False)`` 然后手动设置其他必填字段："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:490
msgid ""
"See the `section on saving forms`_ for more details on using "
"``save(commit=False)``."
msgstr "更多关于使用 ``save(commit=False)`` 的详细内容，请参阅 `保存表单章节`_ 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:498
msgid "Overriding the default fields"
msgstr "覆盖默认字段"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:500
msgid ""
"The default field types, as described in the `Field types`_ table above, are"
" sensible defaults. If you have a ``DateField`` in your model, chances are "
"you'd want that to be represented as a ``DateField`` in your form. But "
"``ModelForm`` gives you the flexibility of changing the form field for a "
"given model."
msgstr "之前在 `字段类型`_ 表格中介绍的默认字段类型都是相对合适的。如果您的模型中有一个 ``DateField`` ，您可能希望在表单中将它展示为 ``DateField`` 。但 ``ModelForm`` 可以让您灵活地改变给定模型的表单字段。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:505
msgid ""
"To specify a custom widget for a field, use the ``widgets`` attribute of the"
" inner ``Meta`` class. This should be a dictionary mapping field names to "
"widget classes or instances."
msgstr "要为字段指定自定义组件，请使用内部 ``Meta`` 类的 ``widgets`` 属性。它应该是一个映射字段名到组建类或组件实例的字典。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:509
msgid ""
"For example, if you want the ``CharField`` for the ``name`` attribute of "
"``Author`` to be represented by a ``<textarea>`` instead of its default "
"``<input type=\"text\">``, you can override the field's widget::"
msgstr "例如，如果您希望 ``Author`` 的 ``name`` 属性的 ``CharField`` 由 ``<textarea>`` 代替默认的 ``<input type=\"text\">`` 来表示，您可以重写字段的部件："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:524
msgid ""
"The ``widgets`` dictionary accepts either widget instances (e.g., "
"``Textarea(...)``) or classes (e.g., ``Textarea``)."
msgstr "``widgets`` 字典接受组件实例（例如， ``Textarea(...)`` ）或者类（例如， ``Textarea`` ）。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:527
msgid ""
"Similarly, you can specify the ``labels``, ``help_texts`` and "
"``error_messages`` attributes of the inner ``Meta`` class if you want to "
"further customize a field."
msgstr "同样的，如果您想进一步自定义一个字段，还可以指定内部Meta类的 ``labels`` 、 ``help_texts`` 和 ``error_messages`` 属性。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:530
msgid ""
"For example if you wanted to customize the wording of all user facing "
"strings for the ``name`` field::"
msgstr "例如您想自定义 ``name`` 字段中所有面向用户的字符文本："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:551
msgid ""
"You can also specify ``field_classes`` to customize the type of fields "
"instantiated by the form."
msgstr "您还可以指定  ``field_classes`` 来自定义表单实例化的字段类型："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:554
msgid ""
"For example, if you wanted to use ``MySlugFormField`` for the ``slug`` "
"field, you could do the following::"
msgstr "例如，如果您想对 ``slug`` 字段使用 ``MySlugFormField`` ，您可以这样做："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:569
msgid ""
"Finally, if you want complete control over of a field -- including its type,"
" validators, required, etc. -- you can do this by declaratively specifying "
"fields like you would in a regular ``Form``."
msgstr "最后，如果您想完全控制一个字段（包括它的类型，验证，必填等等），您可以通过声明指定字段来做到这一点，就像在一个普通的 ``Form`` 中那样声明。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:573
msgid ""
"If you want to specify a field's validators, you can do so by defining the "
"field declaratively and setting its ``validators`` parameter::"
msgstr "如果您想指定一个字段的验证器，可以通过声明定义该字段并设置其 ``validators`` 参数来实现："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:588
msgid ""
"When you explicitly instantiate a form field like this, it is important to "
"understand how ``ModelForm`` and regular ``Form`` are related."
msgstr "当您像这样显式地实例化了一个表单字段，理解 ``ModelForm`` 和普通  ``Form`` 的关系很重要。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:591
msgid ""
"``ModelForm`` is a regular ``Form`` which can automatically generate certain"
" fields. The fields that are automatically generated depend on the content "
"of the ``Meta`` class and on which fields have already been defined "
"declaratively. Basically, ``ModelForm`` will **only** generate fields that "
"are **missing** from the form, or in other words, fields that weren't "
"defined declaratively."
msgstr "``ModelForm`` 是一个可以自动生成特定字段的 ``Form`` 。哪些字段可以自动生成取决于 ``Meta`` 类的内容，以及是否已经被明确定义过。总的来说 ``ModelForm``  **仅会** 自动生成表单中 **缺失** 的字段，或者说，没被明确定义的字段。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:598
msgid ""
"Fields defined declaratively are left as-is, therefore any customizations "
"made to ``Meta`` attributes such as ``widgets``, ``labels``, ``help_texts``,"
" or ``error_messages`` are ignored; these only apply to fields that are "
"generated automatically."
msgstr "声明定义的字段会保持原样，因此，任何对 ``Meta`` 属性（例如 ``widgets`` 、 ``labels`` 、 ``help_texts`` 或者 ``error_messages``）的自定义设置都会被忽略；它们仅适用于自动生成的字段。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:603
msgid ""
"Similarly, fields defined declaratively do not draw their attributes like "
"``max_length`` or ``required`` from the corresponding model. If you want to "
"maintain the behavior specified in the model, you must set the relevant "
"arguments explicitly when declaring the form field."
msgstr "同样，显式定义的字段不会从对应的模型中获取他们的属性（比如 ``max_length`` 或者 ``required``）。如果要保持模型中指定的行为，则必须在声明表单字段时显式设置相关参数。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:608
msgid "For example, if the ``Article`` model looks like this::"
msgstr "例如，假设 ``Article`` 模型像下面这样："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:619
msgid ""
"and you want to do some custom validation for ``headline``, while keeping "
"the ``blank`` and ``help_text`` values as specified, you might define "
"``ArticleForm`` like this::"
msgstr "且您希望对 ``headline`` 进行自定义验证，在保留指定的 ``blank`` 和 ``help_text`` 值同时，您可以像这样定义 ``ArticleForm`` ："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:634
msgid ""
"You must ensure that the type of the form field can be used to set the "
"contents of the corresponding model field. When they are not compatible, you"
" will get a ``ValueError`` as no implicit conversion takes place."
msgstr "您必须确保表单字段的类型可用于设置对应模型字段的内容。如果它们不兼容，您会因为没有发生隐式转换而得到一个 ``ValueError`` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:638
msgid ""
"See the :doc:`form field documentation </ref/forms/fields>` for more "
"information on fields and their arguments."
msgstr "更多有关字段及其参数的内容，请参阅 :doc:`表单字段文档</ref/forms/fields>` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:643
msgid "Enabling localization of fields"
msgstr "启用对字段的本地化"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:645
msgid ""
"By default, the fields in a ``ModelForm`` will not localize their data. To "
"enable localization for fields, you can use the ``localized_fields`` "
"attribute on the ``Meta`` class."
msgstr "默认情况下， ``ModelForm`` 中的字段不会本地化他们的数据。要为字段启用本地化，您可以在 ``Meta`` 类中使用 ``localized_fields`` 属性。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:656
#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:869
msgid ""
"If ``localized_fields`` is set to the special value ``'__all__'``, all "
"fields will be localized."
msgstr "如果 ``localized_fields`` 设置为特殊值 ``'__all__'`` ，则所有字段都将被本地化。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:660
msgid "Form inheritance"
msgstr "表单继承"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:662
msgid ""
"As with basic forms, you can extend and reuse ``ModelForms`` by inheriting "
"them. This is useful if you need to declare extra fields or extra methods on"
" a parent class for use in a number of forms derived from models. For "
"example, using the previous ``ArticleForm`` class::"
msgstr "与普通表单一样，您可以通过继承它们来扩展和重用 ``ModelForms`` 。如果您需要在父类中声明额外字段或额外方法以用于从模型派生的多个表单中，则此方法非常有用。例如，使用之前的 ``ArticleForm`` 类。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:671
msgid ""
"This creates a form that behaves identically to ``ArticleForm``, except "
"there's some extra validation and cleaning for the ``pub_date`` field."
msgstr "这会创建一个与 ``ArticleForm`` 行为相同的表单，除了 ``pub_date`` 字段会有一些额外的验证和cleaning。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:674
msgid ""
"You can also subclass the parent's ``Meta`` inner class if you want to "
"change the ``Meta.fields`` or ``Meta.exclude`` lists::"
msgstr "如果要更改 ``Meta.fields`` 或 ``Meta.exclude`` 列表，您也可以继承父类的内部 ``Meta`` 类："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:681
msgid ""
"This adds the extra method from the ``EnhancedArticleForm`` and modifies the"
" original ``ArticleForm.Meta`` to remove one field."
msgstr "这相比 ``EnhancedArticleForm`` 增加了额外方法，并修改了原始的 ``ArticleForm.Meta`` 以删除一个字段。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:684
msgid "There are a couple of things to note, however."
msgstr "然而，有几项需要注意。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:686
msgid ""
"Normal Python name resolution rules apply. If you have multiple base classes"
" that declare a ``Meta`` inner class, only the first one will be used. This "
"means the child's ``Meta``, if it exists, otherwise the ``Meta`` of the "
"first parent, etc."
msgstr "适用于普通的Python名称解析规则。如果您有多个声明 ``Meta`` 内部类的基类，就是说如果声明了子类的 ``Meta`` 就会使用它，否则就用第一个父类的 ``Meta`` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:691
msgid ""
"It's possible to inherit from both ``Form`` and ``ModelForm`` "
"simultaneously, however, you must ensure that ``ModelForm`` appears first in"
" the MRO. This is because these classes rely on different metaclasses and a "
"class can only have one metaclass."
msgstr "可以同时继承 ``Form`` 和 ``ModelForm`` ，但是，您必须确保 ``ModelForm`` 在MRO中出现在首位。这是因为这些类依赖于不同的元类，而一个类只能有一个元类。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:696
msgid ""
"It's possible to declaratively remove a ``Field`` inherited from a parent "
"class by setting the name to be ``None`` on the subclass."
msgstr "通过在子类上将名称设置为 ``None`` ，可以声明性地移除从父类继承的 ``Field`` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:699
msgid ""
"You can only use this technique to opt out from a field defined "
"declaratively by a parent class; it won't prevent the ``ModelForm`` "
"metaclass from generating a default field. To opt-out from default fields, "
"see :ref:`modelforms-selecting-fields`."
msgstr "您只能使用这种技术排除父类中声明定义的字段；它不会阻止 ``ModelForm`` 元类生成默认字段。要排除默认字段，请参阅 :ref:`modelforms-selecting-fields` 。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:705
#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:873
msgid "Providing initial values"
msgstr "提供初始值"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:707
msgid ""
"As with regular forms, it's possible to specify initial data for forms by "
"specifying an ``initial`` parameter when instantiating the form. Initial "
"values provided this way will override both initial values from the form "
"field and values from an attached model instance. For example::"
msgstr "与普通表单一样，可以在实例化表单时通过指定 ``initial`` 参数来指定表单的初始值。以这种方式提供的初始值会覆盖表单字段的初始值以及对应模型实例的初始值。例如："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:722
msgid "ModelForm factory function"
msgstr "ModelForm的工厂函数"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:724
msgid ""
"You can create forms from a given model using the standalone function "
":func:`~django.forms.models.modelform_factory`, instead of using a class "
"definition. This may be more convenient if you do not have many "
"customizations to make::"
msgstr "您可以不使用类定义，而是使用独立函数 :func:`~django.forms.models.modelform_factory` 来创建给定模型的表单。如果您没有很多自定义设置，这可能会更方便："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:733
msgid ""
"This can also be used to make simple modifications to existing forms, for "
"example by specifying the widgets to be used for a given field::"
msgstr "这也可以用来对已有表单进行简单的修改，例如给某个字段指定使用组件："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:740
msgid ""
"The fields to include can be specified using the ``fields`` and ``exclude`` "
"keyword arguments, or the corresponding attributes on the ``ModelForm`` "
"inner ``Meta`` class. Please see the ``ModelForm`` :ref:`modelforms-"
"selecting-fields` documentation."
msgstr "要包含的字段可以使用 ``fields`` 和 ``exclude`` 关键字参数或 ``ModelForm`` 内部的 ``Meta`` 类中相应的属性来指定。请参阅 ``ModelForm`` :ref:`modelforms-selecting-fields` 文档。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:745
msgid "... or enable localization for specific fields::"
msgstr "... 或者为个别字段启用本地化功能："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:752
msgid "Model formsets"
msgstr "模型表单集"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:756
msgid ""
"Like :doc:`regular formsets </topics/forms/formsets>`, Django provides a "
"couple of enhanced formset classes that make it easy to work with Django "
"models. Let's reuse the ``Author`` model from above::"
msgstr "和 :doc:`普通表单集</topics/forms/formsets>` 一样，Django提供了几个增强的formset类，可以很方便地配合Django模型使用。让我们重用下上面的 ``Author`` 模型："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:764
msgid ""
"Using ``fields`` restricts the formset to use only the given fields. "
"Alternatively, you can take an \"opt-out\" approach, specifying which fields"
" to exclude::"
msgstr "使用 ``fields`` 参数限制formset仅使用给定的字段。或者，您可以使用排除法，指定排除哪些字段："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:770
msgid ""
"This will create a formset that is capable of working with the data "
"associated with the ``Author`` model. It works just like a regular formset::"
msgstr "这将创建一个能够处理与 ``Author`` 模型相关数据的formset。它运行起来就像一个普通的formset："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:786
msgid ""
":func:`~django.forms.models.modelformset_factory` uses "
":func:`~django.forms.formsets.formset_factory` to generate formsets. This "
"means that a model formset is just an extension of a basic formset that "
"knows how to interact with a particular model."
msgstr ":func:`~django.forms.models.modelformset_factory` 使用 :func:`~django.forms.formsets.formset_factory` 来生成表单集。这意味着模型formset只是一个知道如何与指定模型交互的普通formset的扩展。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:792
msgid "Changing the queryset"
msgstr "更改查询集"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:794
msgid ""
"By default, when you create a formset from a model, the formset will use a "
"queryset that includes all objects in the model (e.g., "
"``Author.objects.all()``). You can override this behavior by using the "
"``queryset`` argument::"
msgstr "默认情况下，当您创建一个模型ormset时，formset将使用一个包含模型中所有对象（例如 ``Author.objects.all()`` ）的查询集。你可以通过使用 ``queryset`` 参数来覆盖这一行为："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:801
msgid ""
"Alternatively, you can create a subclass that sets ``self.queryset`` in "
"``__init__``::"
msgstr "或者，您可以创建一个子类，然后在 ``__init__`` 中设置 ``self.queryset`` ："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:812
msgid "Then, pass your ``BaseAuthorFormSet`` class to the factory function::"
msgstr "然后，将你的 ``BaseAuthorFormSet`` 类传递给工厂函数："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:817
msgid ""
"If you want to return a formset that doesn't include *any* pre-existing "
"instances of the model, you can specify an empty QuerySet::"
msgstr "如果您想返回一个不包含 *任何* 已存在模型实例的formset，您可以指定一个空的QuerySet："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:823
msgid "Changing the form"
msgstr "更改表单"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:825
msgid ""
"By default, when you use ``modelformset_factory``, a model form will be "
"created using :func:`~django.forms.models.modelform_factory`. Often, it can "
"be useful to specify a custom model form. For example, you can create a "
"custom model form that has custom validation::"
msgstr "默认情况下，当您使用 ``modelformset_factory`` 时，程序会用 :func:`~django.forms.models.modelform_factory` 创建一个模型表单。这通常在指定自定义模型表单时很有用。例如，您可以创建一个具有自定义验证的自定义模型表单："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:839
msgid "Then, pass your model form to the factory function::"
msgstr "然后，将您的模型表单传递给工厂函数："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:843
msgid ""
"It is not always necessary to define a custom model form. The "
"``modelformset_factory`` function has several arguments which are passed "
"through to ``modelform_factory``, which are described below."
msgstr "并不是总需要自定义模型表单。 ``modelformset_factory`` 函数有几个参数传递给 ``modelform_factory`` ，如下所述。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:848
msgid "Specifying widgets to use in the form with ``widgets``"
msgstr "在表单中使用 ``widgets`` 指定部件。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:850
msgid ""
"Using the ``widgets`` parameter, you can specify a dictionary of values to "
"customize the ``ModelForm``’s widget class for a particular field. This "
"works the same way as the ``widgets`` dictionary on the inner ``Meta`` class"
" of a ``ModelForm`` works::"
msgstr "使用 ``widgets`` 参数，您可以设置一个字典值来为 ``ModelForm`` 指定字段自定义部件。这与 ``ModelForm`` 内部 ``Meta`` 类中 ``widgets`` 字典的工作方式一样："

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:860
msgid "Enabling localization for fields with ``localized_fields``"
msgstr "使用 ``localized_fields`` 来启用字段本地化"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:862
msgid ""
"Using the ``localized_fields`` parameter, you can enable localization for "
"fields in the form."
msgstr "您可以使用 ``localized_fields`` 参数为表单中的字段启用本地化。"

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:875
msgid ""
"As with regular formsets, it's possible to :ref:`specify initial data "
"<formsets-initial-data>` for forms in the formset by specifying an "
"``initial`` parameter when instantiating the model formset class returned by"
" :func:`~django.forms.models.modelformset_factory`. However, with model "
"formsets, the initial values only apply to extra forms, those that aren't "
"attached to an existing model instance. If the length of ``initial`` exceeds"
" the number of extra forms, the excess initial data is ignored. If the extra"
" forms with initial data aren't changed by the user, they won't be validated"
" or saved."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:888
msgid "Saving objects in the formset"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:890
msgid ""
"As with a ``ModelForm``, you can save the data as a model object. This is "
"done with the formset's ``save()`` method:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:901
msgid ""
"The ``save()`` method returns the instances that have been saved to the "
"database. If a given instance's data didn't change in the bound data, the "
"instance won't be saved to the database and won't be included in the return "
"value (``instances``, in the above example)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:906
msgid ""
"When fields are missing from the form (for example because they have been "
"excluded), these fields will not be set by the ``save()`` method. You can "
"find more information about this restriction, which also holds for regular "
"``ModelForms``, in `Selecting the fields to use`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:911
msgid "Pass ``commit=False`` to return the unsaved model instances:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:921
msgid ""
"This gives you the ability to attach data to the instances before saving "
"them to the database. If your formset contains a ``ManyToManyField``, you'll"
" also need to call ``formset.save_m2m()`` to ensure the many-to-many "
"relationships are saved properly."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:926
msgid ""
"After calling ``save()``, your model formset will have three new attributes "
"containing the formset's changes:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:936
msgid "Limiting the number of editable objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:938
msgid ""
"As with regular formsets, you can use the ``max_num`` and ``extra`` "
"parameters to :func:`~django.forms.models.modelformset_factory` to limit the"
" number of extra forms displayed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:942
msgid "``max_num`` does not prevent existing objects from being displayed::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:952
msgid ""
"Also, ``extra=0`` doesn't prevent creation of new model instances as you can"
" :ref:`add additional forms with JavaScript <understanding-the-"
"managementform>` or just send additional POST data. Formsets `don't yet "
"provide functionality <https://code.djangoproject.com/ticket/26142>`_ for an"
" \"edit only\" view that prevents creation of new instances."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:958
msgid ""
"If the value of ``max_num`` is greater than the number of existing related "
"objects, up to ``extra`` additional blank forms will be added to the "
"formset, so long as the total number of forms does not exceed ``max_num``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:975
msgid "Using a model formset in a view"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:977
msgid ""
"Model formsets are very similar to formsets. Let's say we want to present a "
"formset to edit ``Author`` model instances::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:995
msgid ""
"As you can see, the view logic of a model formset isn't drastically "
"different than that of a \"normal\" formset. The only difference is that we "
"call ``formset.save()`` to save the data into the database. (This was "
"described above, in :ref:`saving-objects-in-the-formset`.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1003
msgid "Overriding ``clean()`` on a ``ModelFormSet``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1005
msgid ""
"Just like with ``ModelForms``, by default the ``clean()`` method of a "
"``ModelFormSet`` will validate that none of the items in the formset violate"
" the unique constraints on your model (either ``unique``, "
"``unique_together`` or ``unique_for_date|month|year``).  If you want to "
"override the ``clean()`` method on a ``ModelFormSet`` and maintain this "
"validation, you must call the parent class's ``clean`` method::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1022
msgid ""
"Also note that by the time you reach this step, individual model instances "
"have already been created for each ``Form``. Modifying a value in "
"``form.cleaned_data`` is not sufficient to affect the saved value. If you "
"wish to modify a value in ``ModelFormSet.clean()`` you must modify "
"``form.instance``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1041
msgid "Using a custom queryset"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1043
msgid ""
"As stated earlier, you can override the default queryset used by the model "
"formset::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1064
msgid ""
"Note that we pass the ``queryset`` argument in both the ``POST`` and ``GET``"
" cases in this example."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1068
msgid "Using the formset in the template"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1072
msgid "There are three ways to render a formset in a Django template."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1074
msgid "First, you can let the formset do most of the work::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1080
msgid ""
"Second, you can manually render the formset, but let the form deal with "
"itself::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1090
msgid ""
"When you manually render the forms yourself, be sure to render the "
"management form as shown above. See the :ref:`management form documentation "
"<understanding-the-managementform>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1094
msgid "Third, you can manually render each field::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1105
msgid ""
"If you opt to use this third method and you don't iterate over the fields "
"with a ``{% for %}`` loop, you'll need to render the primary key field. For "
"example, if you were rendering the ``name`` and ``age`` fields of a model::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1120
msgid ""
"Notice how we need to explicitly render ``{{ form.id }}``. This ensures that"
" the model formset, in the ``POST`` case, will work correctly. (This example"
" assumes a primary key named ``id``. If you've explicitly defined your own "
"primary key that isn't called ``id``, make sure it gets rendered.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1130
msgid "Inline formsets"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1134
msgid ""
"Inline formsets is a small abstraction layer on top of model formsets. These"
" simplify the case of working with related objects via a foreign key. "
"Suppose you have these two models::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1147
msgid ""
"If you want to create a formset that allows you to edit books belonging to a"
" particular author, you could do this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1155
msgid ""
"``BookFormSet``'s :ref:`prefix <formset-prefix>` is ``'book_set'`` (``<model"
" name>_set`` ). If ``Book``'s ``ForeignKey`` to ``Author`` has a "
":attr:`~django.db.models.ForeignKey.related_name`, that's used instead."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1161
msgid ""
":func:`~django.forms.models.inlineformset_factory` uses "
":func:`~django.forms.models.modelformset_factory` and marks "
"``can_delete=True``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1167
msgid ""
":ref:`Manually rendered can_delete and can_order <manually-rendered-can-"
"delete-and-can-order>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1170
msgid "Overriding methods on an ``InlineFormSet``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1172
msgid ""
"When overriding methods on ``InlineFormSet``, you should subclass "
":class:`~models.BaseInlineFormSet` rather than "
":class:`~models.BaseModelFormSet`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1176
msgid "For example, if you want to override ``clean()``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1188
msgid "See also :ref:`model-formsets-overriding-clean`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1190
msgid ""
"Then when you create your inline formset, pass in the optional argument "
"``formset``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1200
msgid "More than one foreign key to the same model"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1202
msgid ""
"If your model contains more than one foreign key to the same model, you'll "
"need to resolve the ambiguity manually using ``fk_name``. For example, "
"consider the following model::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1219
msgid ""
"To resolve this, you can use ``fk_name`` to "
":func:`~django.forms.models.inlineformset_factory`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1226
msgid "Using an inline formset in a view"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1228
msgid ""
"You may want to provide a view that allows a user to edit the related "
"objects of a model. Here's how you can do that::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1244
msgid ""
"Notice how we pass ``instance`` in both the ``POST`` and ``GET`` cases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1247
msgid "Specifying widgets to use in the inline form"
msgstr ""

#: ../../../../sources/2.2/docs/topics/forms/modelforms.txt:1250
msgid ""
"``inlineformset_factory`` uses ``modelformset_factory`` and passes most of "
"its arguments to ``modelformset_factory``. This means you can use the "
"``widgets`` parameter in much the same way as passing it to "
"``modelformset_factory``. See `Specifying widgets to use in the form with "
"widgets`_ above."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:3
msgid "View decorators"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:7
msgid ""
"Django provides several decorators that can be applied to views to support "
"various HTTP features."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:10
msgid ""
"See :ref:`decorating-class-based-views` for how to use these decorators with"
" class-based views."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:14
msgid "Allowed HTTP methods"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:16
msgid ""
"The decorators in :mod:`django.views.decorators.http` can be used to "
"restrict access to views based on the request method. These decorators will "
"return a :class:`django.http.HttpResponseNotAllowed` if the conditions are "
"not met."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:22
msgid ""
"Decorator to require that a view only accepts particular request methods. "
"Usage::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:33
msgid "Note that request methods should be in uppercase."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:37
msgid "Decorator to require that a view only accepts the GET method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:41
msgid "Decorator to require that a view only accepts the POST method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:45
msgid ""
"Decorator to require that a view only accepts the GET and HEAD methods. "
"These methods are commonly considered \"safe\" because they should not have "
"the significance of taking an action other than retrieving the requested "
"resource."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:51
msgid ""
"Web servers should automatically strip the content of responses to HEAD "
"requests while leaving the headers unchanged, so you may handle HEAD "
"requests exactly like GET requests in your views. Since some software, such "
"as link checkers, rely on HEAD requests, you might prefer using "
"``require_safe`` instead of ``require_GET``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:58
msgid "Conditional view processing"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:60
msgid ""
"The following decorators in :mod:`django.views.decorators.http` can be used "
"to control caching behavior on particular views."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:69
msgid ""
"These decorators can be used to generate ``ETag`` and ``Last-Modified`` "
"headers; see :doc:`conditional view processing </topics/conditional-view-"
"processing>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:76
msgid "GZip compression"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:78
msgid ""
"The decorators in :mod:`django.views.decorators.gzip` control content "
"compression on a per-view basis."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:83
msgid ""
"This decorator compresses content if the browser allows gzip compression. It"
" sets the ``Vary`` header accordingly, so that caches will base their "
"storage on the ``Accept-Encoding`` header."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:90
msgid "Vary headers"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:92
msgid ""
"The decorators in :mod:`django.views.decorators.vary` can be used to control"
" caching based on specific request headers."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:99
msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:102
msgid "See :ref:`using vary headers <using-vary-headers>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:107
#: ../../../../sources/2.2/docs/topics/performance.txt:146
msgid "Caching"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:109
msgid ""
"The decorators in :mod:`django.views.decorators.cache` control server and "
"client-side caching."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:114
msgid ""
"This decorator patches the response's ``Cache-Control`` header by adding all"
" of the keyword arguments to it. See "
":func:`~django.utils.cache.patch_cache_control` for the details of the "
"transformation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/decorators.txt:121
msgid ""
"This decorator adds a ``Cache-Control: max-age=0, no-cache, no-store, must-"
"revalidate`` header to a response to indicate that a page should never be "
"cached."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:3
msgid "File Uploads"
msgstr "文件上传"

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:7
msgid ""
"When Django handles a file upload, the file data ends up placed in "
":attr:`request.FILES <django.http.HttpRequest.FILES>` (for more on the "
"``request`` object see the documentation for :doc:`request and response "
"objects </ref/request-response>`). This document explains how files are "
"stored on disk and in memory, and how to customize the default behavior."
msgstr "Django处理文件上传时, 文件最终会位于:attr:`request.FILES <django.http.HttpRequest.FILES>` (想了解更多关于``request`` 对象的信息请阅读  :doc:`request and response objects 1`) 。本文档主要介绍文件是如何存储在硬盘和内存中的，以及如何定制默认行为。"

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:15
msgid ""
"There are security risks if you are accepting uploaded content from "
"untrusted users! See the security guide's topic on :ref:`user-uploaded-"
"content-security` for mitigation details."
msgstr "如果接收不受信任的用户的上传会有安全隐患， 请阅读 :ref:`user-uploaded-content-security`获取详情."

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:20
msgid "Basic file uploads"
msgstr "简单文件上传"

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:22
msgid "Consider a simple form containing a :class:`~django.forms.FileField`:"
msgstr "考虑使用一个简单的表单，表单中包含一个:class:`~django.forms.FileField`字段:"

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:33
msgid ""
"A view handling this form will receive the file data in :attr:`request.FILES"
" <django.http.HttpRequest.FILES>`, which is a dictionary containing a key "
"for each :class:`~django.forms.FileField` (or "
":class:`~django.forms.ImageField`, or other :class:`~django.forms.FileField`"
" subclass) in the form. So the data from the above form would be accessible "
"as ``request.FILES['file']``."
msgstr "处理这个表单的视图将通过:attr:`request.FILES <django.http.HttpRequest.FILES>`获取到文件数据, attr:`request.FILES <django.http.HttpRequest.FILES>`是包含了表单中每个 :class:`~django.forms.FileField` (还有 :class:`~django.forms.ImageField`, 以及其他:class:`~django.forms.FileField` 的子类)键值的字典 。所以 `数据可以通过`request.FILES['file']``获取到。"

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:40
msgid ""
"Note that :attr:`request.FILES <django.http.HttpRequest.FILES>` will only "
"contain data if the request method was ``POST`` and the ``<form>`` that "
"posted the request has the attribute ``enctype=\"multipart/form-data\"``. "
"Otherwise, ``request.FILES`` will be empty."
msgstr "请注意只有在请求是通过 ``POST`` 提交且提交的  ``<form>`` 表单有 ``enctype=\"multipart/form-data\"`` 属性的时候，:attr:`request.FILES <django.http.HttpRequest.FILES>`  才会包含文件数据，否则的话， ``request.FILES`` 是空的。"

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:45
msgid ""
"Most of the time, you'll simply pass the file data from ``request`` into the"
" form as described in :ref:`binding-uploaded-files`. This would look "
"something like:"
msgstr "绝大多数的情况下，你只需要像 :ref:`binding-uploaded-files`中所述将文件数据从``request`` 传入给 表单，示例如下："

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:69
msgid ""
"Notice that we have to pass :attr:`request.FILES "
"<django.http.HttpRequest.FILES>` into the form's constructor; this is how "
"file data gets bound into a form."
msgstr "注意我们必须将 :attr:`request.FILES <django.http.HttpRequest.FILES>` 传入到表单的\n构造方法中，只有这样文件数据才能绑定到表单中。"

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:72
msgid "Here's a common way you might handle an uploaded file::"
msgstr "我们通常可能像这样处理上传文件："

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:79
msgid ""
"Looping over ``UploadedFile.chunks()`` instead of using ``read()`` ensures "
"that large files don't overwhelm your system's memory."
msgstr "使用 ``UploadedFile.chunks()`` 而不是 ``read()`` 是为了确保即使是大文件又不会将我们系统的内存占满。"

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:82
msgid ""
"There are a few other methods and attributes available on ``UploadedFile`` "
"objects; see :class:`UploadedFile` for a complete reference."
msgstr " ``UploadedFile`` 对象还有一些其他可用的方法和属性，完整参考请阅读 :class:`UploadedFile`  。"

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:86
msgid "Handling uploaded files with a model"
msgstr "通过模型来处理上传的文件"

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:88
msgid ""
"If you're saving a file on a :class:`~django.db.models.Model` with a "
":class:`~django.db.models.FileField`, using a "
":class:`~django.forms.ModelForm` makes this process much easier. The file "
"object will be saved to the location specified by the "
":attr:`~django.db.models.FileField.upload_to` argument of the corresponding "
":class:`~django.db.models.FileField` when calling ``form.save()``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:110
msgid ""
"If you are constructing an object manually, you can simply assign the file "
"object from :attr:`request.FILES <django.http.HttpRequest.FILES>` to the "
"file field in the model::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:131
msgid "Uploading multiple files"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:133
msgid ""
"If you want to upload multiple files using one form field, set the "
"``multiple`` HTML attribute of field's widget:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:144
msgid ""
"Then override the ``post`` method of your "
":class:`~django.views.generic.edit.FormView` subclass to handle multiple "
"file uploads:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:171
msgid "Upload Handlers"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:175
msgid ""
"When a user uploads a file, Django passes off the file data to an *upload "
"handler* -- a small class that handles file data as it gets uploaded. Upload"
" handlers are initially defined in the :setting:`FILE_UPLOAD_HANDLERS` "
"setting, which defaults to::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:183
msgid ""
"Together :class:`MemoryFileUploadHandler` and "
":class:`TemporaryFileUploadHandler` provide Django's default file upload "
"behavior of reading small files into memory and large ones onto disk."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:187
msgid ""
"You can write custom handlers that customize how Django handles files. You "
"could, for example, use custom handlers to enforce user-level quotas, "
"compress data on the fly, render progress bars, and even send data to "
"another storage location directly without storing it locally. See "
":ref:`custom_upload_handlers` for details on how you can customize or "
"completely replace upload behavior."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:194
msgid "Where uploaded data is stored"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:196
msgid "Before you save uploaded files, the data needs to be stored somewhere."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:198
msgid ""
"By default, if an uploaded file is smaller than 2.5 megabytes, Django will "
"hold the entire contents of the upload in memory. This means that saving the"
" file involves only a read from memory and a write to disk and thus is very "
"fast."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:202
msgid ""
"However, if an uploaded file is too large, Django will write the uploaded "
"file to a temporary file stored in your system's temporary directory. On a "
"Unix-like platform this means you can expect Django to generate a file "
"called something like ``/tmp/tmpzfp6I6.upload``. If an upload is large "
"enough, you can watch this file grow in size as Django streams the data onto"
" disk."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:208
msgid ""
"These specifics -- 2.5 megabytes; ``/tmp``; etc. -- are simply \"reasonable "
"defaults\" which can be customized as described in the next section."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:212
msgid "Changing upload handler behavior"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:214
msgid ""
"There are a few settings which control Django's file upload behavior. See "
":ref:`File Upload Settings <file-upload-settings>` for details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:220
msgid "Modifying upload handlers on the fly"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:222
msgid ""
"Sometimes particular views require different upload behavior. In these "
"cases, you can override upload handlers on a per-request basis by modifying "
"``request.upload_handlers``. By default, this list will contain the upload "
"handlers given by :setting:`FILE_UPLOAD_HANDLERS`, but you can modify the "
"list as you would any other list."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:228
msgid ""
"For instance, suppose you've written a ``ProgressBarUploadHandler`` that "
"provides feedback on upload progress to some sort of AJAX widget. You'd add "
"this handler to your upload handlers like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:234
msgid ""
"You'd probably want to use ``list.insert()`` in this case (instead of "
"``append()``) because a progress bar handler would need to run *before* any "
"other handlers. Remember, the upload handlers are processed in order."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:238
msgid ""
"If you want to replace the upload handlers completely, you can just assign a"
" new list::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:245
msgid ""
"You can only modify upload handlers *before* accessing ``request.POST`` or "
"``request.FILES`` -- it doesn't make sense to change upload handlers after "
"upload handling has already started. If you try to modify "
"``request.upload_handlers`` after reading from ``request.POST`` or "
"``request.FILES`` Django will throw an error."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:252
msgid ""
"Thus, you should always modify uploading handlers as early in your view as "
"possible."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/file-uploads.txt:255
msgid ""
"Also, ``request.POST`` is accessed by "
":class:`~django.middleware.csrf.CsrfViewMiddleware` which is enabled by "
"default. This means you will need to use "
":func:`~django.views.decorators.csrf.csrf_exempt` on your view to allow you "
"to change the upload handlers.  You will then need to use "
":func:`~django.views.decorators.csrf.csrf_protect` on the function that "
"actually processes the request.  Note that this means that the handlers may "
"start receiving the file upload before the CSRF checks have been done. "
"Example code::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/generic-views.txt:3
msgid "Generic views"
msgstr "通用视图"

#: ../../../../sources/2.2/docs/topics/http/generic-views.txt:5
msgid "See :doc:`/ref/class-based-views/index`."
msgstr "参考 :doc:`/ref/class-based-views/index`。"

#: ../../../../sources/2.2/docs/topics/http/index.txt:3
msgid "Handling HTTP requests"
msgstr "处理 HTTP 请求"

#: ../../../../sources/2.2/docs/topics/http/index.txt:5
msgid "Information on handling HTTP requests in Django:"
msgstr "Django 中处理 HTTP 请求的信息："

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:3
#: ../../../../sources/2.2/docs/topics/performance.txt:256
msgid "Middleware"
msgstr "中间件"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:5
msgid ""
"Middleware is a framework of hooks into Django's request/response "
"processing. It's a light, low-level \"plugin\" system for globally altering "
"Django's input or output."
msgstr "中间件是 Django 请求/响应处理的钩子框架。它是一个轻量级的、低级的“插件”系统，用于全局改变 Django 的输入或输出。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:9
msgid ""
"Each middleware component is responsible for doing some specific function. "
"For example, Django includes a middleware component, "
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware`, that "
"associates users with requests using sessions."
msgstr "每个中间件组件负责做一些特定的功能。例如，Django 包含一个中间件组件 :class:`~django.contrib.auth.middleware.AuthenticationMiddleware`，它使用会话将用户与请求关联起来。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:14
msgid ""
"This document explains how middleware works, how you activate middleware, "
"and how to write your own middleware. Django ships with some built-in "
"middleware you can use right out of the box. They're documented in the :doc"
":`built-in middleware reference </ref/middleware>`."
msgstr "他的文档解释了中间件是如何工作的，如何激活中间件，以及如何编写自己的中间件。Django 具有一些内置的中间件，你可以直接使用。它们被记录在 :doc:`built-in middleware reference </ref/middleware>` 中。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:20
msgid "Writing your own middleware"
msgstr "编写自己的中间件"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:22
msgid ""
"A middleware factory is a callable that takes a ``get_response`` callable "
"and returns a middleware. A middleware is a callable that takes a request "
"and returns a response, just like a view."
msgstr "中间件工厂是一个可调用的程序，它接受 ``get_response`` 可调用并返回中间件。中间件是可调用的，它接受请求并返回响应，就像视图一样。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:26
msgid "A middleware can be written as a function that looks like this::"
msgstr "中间件可以被写成这样的函数："

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:44
msgid ""
"Or it can be written as a class whose instances are callable, like this::"
msgstr "或者它可以写成一个类，它的实例是可调用的，如下："

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:62
msgid ""
"The ``get_response`` callable provided by Django might be the actual view "
"(if this is the last listed middleware) or it might be the next middleware "
"in the chain. The current middleware doesn't need to know or care what "
"exactly it is, just that it represents whatever comes next."
msgstr "Django 提供的 ``get_response`` 响应可能是实际视图（如果这是最后列出的中间件），或者它可能是链中的下一个中间件。不需要知道或关心当前的中间件到底是什么，它只是代表了下一步的内容。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:67
msgid ""
"The above is a slight simplification -- the ``get_response`` callable for "
"the last middleware in the chain won't be the actual view but rather a "
"wrapper method from the handler which takes care of applying :ref:`view "
"middleware <view-middleware>`, calling the view with appropriate URL "
"arguments, and applying :ref:`template-response <template-response-"
"middleware>` and :ref:`exception <exception-middleware>` middleware."
msgstr "以上是一个轻微的简化——链中最后一个中间件调用的 ``get_response`` 可不是实际视图，而是处理程序的包装方法，它负责应用 :ref:`view middleware <view-middleware>`，调用具有适当URL参数的视图，并应用 :ref:`template-response <template-response-middleware>` 和 :ref:`exception <exception-middleware>` 中间件。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:74
msgid "Middleware can live anywhere on your Python path."
msgstr "中间件可以放在 Python 路径上的任何地方。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:77
msgid "``__init__(get_response)``"
msgstr "``__init__(get_response)``"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:79
msgid ""
"Middleware factories must accept a ``get_response`` argument. You can also "
"initialize some global state for the middleware. Keep in mind a couple of "
"caveats:"
msgstr "中间件工厂必须接受 ``get_response`` 参数。还可以初始化中间件的一些全局状态。记住两个注意事项："

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:83
msgid ""
"Django initializes your middleware with only the ``get_response`` argument, "
"so you can't define ``__init__()`` as requiring any other arguments."
msgstr "Django仅用 ``get_response`` 参数初始化您的中间件，因此不能定义 ``__init__()`` ，因为需要其他参数。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:86
msgid ""
"Unlike the ``__call__()`` method which is called once per request, "
"``__init__()`` is called only *once*, when the Web server starts."
msgstr "与每次请求调用 ``__call__()`` 方法不同，当 Web 服务器启动时，``__init__()`` 只被称为*一次*。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:90
msgid "Marking middleware as unused"
msgstr "标记未使用的中间件"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:92
msgid ""
"It's sometimes useful to determine at startup time whether a piece of "
"middleware should be used. In these cases, your middleware's ``__init__()`` "
"method may raise :exc:`~django.core.exceptions.MiddlewareNotUsed`. Django "
"will then remove that middleware from the middleware process and log a debug"
" message to the :ref:`django-request-logger` logger when :setting:`DEBUG` is"
" ``True``."
msgstr "在启动时确定是否应该使用一个中间件有时是有用的。在这些情况下，您的中间件的 ``__init__()`` 方法可能会引发 :exc:`~django.core.exceptions.MiddlewareNotUsed`。Django 将从中间件进程中删除该中间件，并将调试消息记录到 :ref:`django-request-logger` 日志：设置 :setting:`DEBUG` 为 ``True``。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:99
msgid "Activating middleware"
msgstr "激活中间件"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:101
msgid ""
"To activate a middleware component, add it to the :setting:`MIDDLEWARE` list"
" in your Django settings."
msgstr "若要激活中间件组件，请将其添加到 Django 设置中的 :setting:`MIDDLEWARE` 列表中。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:104
msgid ""
"In :setting:`MIDDLEWARE`, each middleware component is represented by a "
"string: the full Python path to the middleware factory's class or function "
"name. For example, here's the default value created by :djadmin:`django-"
"admin startproject <startproject>`::"
msgstr "在 :setting:`MIDDLEWARE` 中，每个中间件组件由字符串表示：指向中间件工厂的类或函数名的完整 Python 路径。例如，这里创建的默认值是 :djadmin:`django-admin startproject <startproject>`："

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:119
msgid ""
"A Django installation doesn't require any middleware — :setting:`MIDDLEWARE`"
" can be empty, if you'd like — but it's strongly suggested that you at least"
" use :class:`~django.middleware.common.CommonMiddleware`."
msgstr "Django 安装不需要任何中间件——如果您愿意的话，:setting:`MIDDLEWARE` 可以为空——但是强烈建议您至少使用 :class:`~django.middleware.common.CommonMiddleware`。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:123
msgid ""
"The order in :setting:`MIDDLEWARE` matters because a middleware can depend "
"on other middleware. For instance, "
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` stores the"
" authenticated user in the session; therefore, it must run after "
":class:`~django.contrib.sessions.middleware.SessionMiddleware`. See :ref"
":`middleware-ordering` for some common hints about ordering of Django "
"middleware classes."
msgstr ":setting:`MIDDLEWARE` 的顺序很重要，因为中间件会依赖其他中间件。例如：类 :class:`~django.contrib.auth.middleware.AuthenticationMiddleware` 在会话中存储经过身份验证的用户；因此，它必须在 :class:`~django.contrib.sessions.middleware.SessionMiddleware` 后面运行 。中间件。Session中间件。请参阅 :ref:`middleware-ordering` ，用于一些关于 Django 中间件类排序的常见提示。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:132
msgid "Middleware order and layering"
msgstr "中间件顺序与分层"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:134
msgid ""
"During the request phase, before calling the view, Django applies middleware"
" in the order it's defined in :setting:`MIDDLEWARE`, top-down."
msgstr "在请求阶段，在调用视图之前，Django 按照定义的顺序应用中间件 :setting:`MIDDLEWARE`，自顶向下。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:137
msgid ""
"You can think of it like an onion: each middleware class is a \"layer\" that"
" wraps the view, which is in the core of the onion. If the request passes "
"through all the layers of the onion (each one calls ``get_response`` to pass"
" the request in to the next layer), all the way to the view at the core, the"
" response will then pass through every layer (in reverse order) on the way "
"back out."
msgstr "你可以把它想象成一个洋葱：每个中间件类都是一个“层”，它覆盖了洋葱的核心。如果请求通过洋葱的所有层（每一个调用 ``get_response`` ）以将请求传递到下一层，一直到内核的视图，那么响应将在返回的过程中通过每个层（以相反的顺序）。"

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:144
msgid ""
"If one of the layers decides to short-circuit and return a response without "
"ever calling its ``get_response``, none of the layers of the onion inside "
"that layer (including the view) will see the request or the response. The "
"response will only return through the same layers that the request passed in"
" through."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:150
msgid "Other middleware hooks"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:152
msgid ""
"Besides the basic request/response middleware pattern described earlier, you"
" can add three other special methods to class-based middleware:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:158
msgid "``process_view()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:162
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is"
" the Python function that Django is about to use. (It's the actual function "
"object, not the name of the function as a string.) ``view_args`` is a list "
"of positional arguments that will be passed to the view, and ``view_kwargs``"
" is a dictionary of keyword arguments that will be passed to the view. "
"Neither ``view_args`` nor ``view_kwargs`` include the first view argument "
"(``request``)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:170
msgid "``process_view()`` is called just before Django calls the view."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:172
msgid ""
"It should return either ``None`` or an :class:`~django.http.HttpResponse` "
"object. If it returns ``None``, Django will continue processing this "
"request, executing any other ``process_view()`` middleware and, then, the "
"appropriate view. If it returns an :class:`~django.http.HttpResponse` "
"object, Django won't bother calling the appropriate view; it'll apply "
"response middleware to that :class:`~django.http.HttpResponse` and return "
"the result."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:181
msgid ""
"Accessing :attr:`request.POST <django.http.HttpRequest.POST>` inside "
"middleware before the view runs or in ``process_view()`` will prevent any "
"view running after the middleware from being able to :ref:`modify the upload"
" handlers for the request <modifying_upload_handlers_on_the_fly>`, and "
"should normally be avoided."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:187
msgid ""
"The :class:`~django.middleware.csrf.CsrfViewMiddleware` class can be "
"considered an exception, as it provides the "
":func:`~django.views.decorators.csrf.csrf_exempt` and "
":func:`~django.views.decorators.csrf.csrf_protect` decorators which allow "
"views to explicitly control at what point the CSRF validation should occur."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:196
msgid "``process_exception()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:200
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``exception`` is"
" an ``Exception`` object raised by the view function."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:203
msgid ""
"Django calls ``process_exception()`` when a view raises an exception. "
"``process_exception()`` should return either ``None`` or an "
":class:`~django.http.HttpResponse` object. If it returns an "
":class:`~django.http.HttpResponse` object, the template response and "
"response middleware will be applied and the resulting response returned to "
"the browser. Otherwise, :ref:`default exception handling <error-views>` "
"kicks in."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:210
msgid ""
"Again, middleware are run in reverse order during the response phase, which "
"includes ``process_exception``. If an exception middleware returns a "
"response, the ``process_exception`` methods of the middleware classes above "
"that middleware won't be called at all."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:218
msgid "``process_template_response()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:222
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"the :class:`~django.template.response.TemplateResponse` object (or "
"equivalent) returned by a Django view or by a middleware."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:226
msgid ""
"``process_template_response()`` is called just after the view has finished "
"executing, if the response instance has a ``render()`` method, indicating "
"that it is a :class:`~django.template.response.TemplateResponse` or "
"equivalent."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:230
msgid ""
"It must return a response object that implements a ``render`` method. It "
"could alter the given ``response`` by changing ``response.template_name`` "
"and ``response.context_data``, or it could create and return a brand-new "
":class:`~django.template.response.TemplateResponse` or equivalent."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:235
msgid ""
"You don't need to explicitly render responses -- responses will be "
"automatically rendered once all template response middleware has been "
"called."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:239
msgid ""
"Middleware are run in reverse order during the response phase, which "
"includes ``process_template_response()``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:243
msgid "Dealing with streaming responses"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:245
msgid ""
"Unlike :class:`~django.http.HttpResponse`, "
":class:`~django.http.StreamingHttpResponse` does not have a ``content`` "
"attribute. As a result, middleware can no longer assume that all responses "
"will have a ``content`` attribute. If they need access to the content, they "
"must test for streaming responses and adjust their behavior accordingly::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:258
msgid ""
"``streaming_content`` should be assumed to be too large to hold in memory. "
"Response middleware may wrap it in a new generator, but must not consume it."
" Wrapping is typically implemented as follows::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:269
msgid ""
"Django automatically converts exceptions raised by the view or by middleware"
" into an appropriate HTTP response with an error status code. :ref:`Certain "
"exceptions <error-views>` are converted to 4xx status codes, while an "
"unknown exception is converted to a 500 status code."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:274
msgid ""
"This conversion takes place before and after each middleware (you can think "
"of it as the thin film in between each layer of the onion), so that every "
"middleware can always rely on getting some kind of HTTP response back from "
"calling its ``get_response`` callable. Middleware don't need to worry about "
"wrapping their call to ``get_response`` in a ``try/except`` and handling an "
"exception that might have been raised by a later middleware or the view. "
"Even if the very next middleware in the chain raises an "
":class:`~django.http.Http404` exception, for example, your middleware won't "
"see that exception; instead it will get an "
":class:`~django.http.HttpResponse` object with a "
":attr:`~django.http.HttpResponse.status_code` of 404."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:288
msgid "Upgrading pre-Django 1.10-style middleware"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:293
msgid ""
"Django provides ``django.utils.deprecation.MiddlewareMixin`` to ease "
"creating middleware classes that are compatible with both "
":setting:`MIDDLEWARE` and the old ``MIDDLEWARE_CLASSES``. All middleware "
"classes included with Django are compatible with both settings."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:298
msgid ""
"The mixin provides an ``__init__()`` method that accepts an optional "
"``get_response`` argument and stores it in ``self.get_response``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:301
msgid "The ``__call__()`` method:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:303
msgid "Calls ``self.process_request(request)`` (if defined)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:304
msgid ""
"Calls ``self.get_response(request)`` to get the response from later "
"middleware and the view."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:306
msgid "Calls ``self.process_response(request, response)`` (if defined)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:307
msgid "Returns the response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:309
msgid ""
"If used with ``MIDDLEWARE_CLASSES``, the ``__call__()`` method will never be"
" used; Django calls ``process_request()`` and ``process_response()`` "
"directly."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:313
msgid ""
"In most cases, inheriting from this mixin will be sufficient to make an old-"
"style middleware compatible with the new system with sufficient backwards-"
"compatibility. The new short-circuiting semantics will be harmless or even "
"beneficial to the existing middleware. In a few cases, a middleware class "
"may need some changes to adjust to the new semantics."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:319
msgid ""
"These are the behavioral differences between using :setting:`MIDDLEWARE` and"
" ``MIDDLEWARE_CLASSES``:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:322
msgid ""
"Under ``MIDDLEWARE_CLASSES``, every middleware will always have its "
"``process_response`` method called, even if an earlier middleware short-"
"circuited by returning a response from its ``process_request`` method. Under"
" :setting:`MIDDLEWARE`, middleware behaves more like an onion: the layers "
"that a response goes through on the way out are the same layers that saw the"
" request on the way in. If a middleware short-circuits, only that middleware"
" and the ones before it in :setting:`MIDDLEWARE` will see the response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:331
msgid ""
"Under ``MIDDLEWARE_CLASSES``, ``process_exception`` is applied to exceptions"
" raised from a middleware ``process_request`` method. Under "
":setting:`MIDDLEWARE`, ``process_exception`` applies only to exceptions "
"raised from the view (or from the ``render`` method of a "
":class:`~django.template.response.TemplateResponse`). Exceptions raised from"
" a middleware are converted to the appropriate HTTP response and then passed"
" to the next middleware."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/middleware.txt:339
msgid ""
"Under ``MIDDLEWARE_CLASSES``, if a ``process_response`` method raises an "
"exception, the ``process_response`` methods of all earlier middleware are "
"skipped and a ``500 Internal Server Error`` HTTP response is always returned"
" (even if the exception raised was e.g. an :class:`~django.http.Http404`). "
"Under :setting:`MIDDLEWARE`, an exception raised from a middleware will "
"immediately be converted to the appropriate HTTP response, and then the next"
" middleware in line will see that response. Middleware are never skipped due"
" to a middleware raising an exception."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:3
msgid "How to use sessions"
msgstr "如何使用会话"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:8
msgid ""
"Django provides full support for anonymous sessions. The session framework "
"lets you store and retrieve arbitrary data on a per-site-visitor basis. It "
"stores data on the server side and abstracts the sending and receiving of "
"cookies. Cookies contain a session ID -- not the data itself (unless you're "
"using the :ref:`cookie based backend<cookie-session-backend>`)."
msgstr "Django 是支持匿名会话的。会话框架允许您基于每个站点访问者存储和检索任意数据。它在服务器端存储数据并提供cookie的发送和接收。Cookie包含会话ID - 而不是数据本身（除非您使用基于cookie的后端）。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:15
msgid "Enabling sessions"
msgstr "打开会话"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:17
msgid ""
"Sessions are implemented via a piece of :doc:`middleware </ref/middleware>`."
msgstr "会话通过配置一个中间件实现的"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:19
msgid "To enable session functionality, do the following:"
msgstr "为了打开会话，需要做下面的操作"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:21
msgid ""
"Edit the :setting:`MIDDLEWARE` setting and make sure it contains "
"``'django.contrib.sessions.middleware.SessionMiddleware'``. The default "
"``settings.py`` created by ``django-admin startproject`` has "
"``SessionMiddleware`` activated."
msgstr "编辑设置中的 `MIDDLEWARE`，并确保他包含了 `'django.contrib.sessions.middleware.SessionMiddleware'`。通过 `django-admin startproject` 创建的默认 `settings.py` 文件是已经打开了 `SessionMiddleware` 这项设置的。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:26
msgid ""
"If you don't want to use sessions, you might as well remove the "
"``SessionMiddleware`` line from :setting:`MIDDLEWARE` and "
"``'django.contrib.sessions'`` from your :setting:`INSTALLED_APPS`. It'll "
"save you a small bit of overhead."
msgstr "如果你不想使用会话功能，你可以从配置的 `MIDDLEWARE 中删除 `SessionMiddleware`，并且从 `INSTALLED_APPS` 中删除 `'django.contrib.sessions'`。它将会为您节省一点开销。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:34
msgid "Configuring the session engine"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:36
msgid ""
"By default, Django stores sessions in your database (using the model "
"``django.contrib.sessions.models.Session``). Though this is convenient, in "
"some setups it's faster to store session data elsewhere, so Django can be "
"configured to store session data on your filesystem or in your cache."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:42
msgid "Using database-backed sessions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:44
msgid ""
"If you want to use a database-backed session, you need to add "
"``'django.contrib.sessions'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:47
msgid ""
"Once you have configured your installation, run ``manage.py migrate`` to "
"install the single database table that stores session data."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:53
#: ../../../../sources/2.2/docs/topics/performance.txt:280
msgid "Using cached sessions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:55
msgid ""
"For better performance, you may want to use a cache-based session backend."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:57
msgid ""
"To store session data using Django's cache system, you'll first need to make"
" sure you've configured your cache; see the :doc:`cache documentation "
"</topics/cache>` for details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:63
msgid ""
"You should only use cache-based sessions if you're using the Memcached cache"
" backend. The local-memory cache backend doesn't retain data long enough to "
"be a good choice, and it'll be faster to use file or database sessions "
"directly instead of sending everything through the file or database cache "
"backends. Additionally, the local-memory cache backend is NOT multi-process "
"safe, therefore probably not a good choice for production environments."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:71
msgid ""
"If you have multiple caches defined in :setting:`CACHES`, Django will use "
"the default cache. To use another cache, set :setting:`SESSION_CACHE_ALIAS` "
"to the name of that cache."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:75
msgid ""
"Once your cache is configured, you've got two choices for how to store data "
"in the cache:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:78
msgid ""
"Set :setting:`SESSION_ENGINE` to "
"``\"django.contrib.sessions.backends.cache\"`` for a simple caching session "
"store. Session data will be stored directly in your cache. However, session "
"data may not be persistent: cached data can be evicted if the cache fills up"
" or if the cache server is restarted."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:84
msgid ""
"For persistent, cached data, set :setting:`SESSION_ENGINE` to "
"``\"django.contrib.sessions.backends.cached_db\"``. This uses a write-"
"through cache -- every write to the cache will also be written to the "
"database. Session reads only use the database if the data is not already in "
"the cache."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:90
msgid ""
"Both session stores are quite fast, but the simple cache is faster because "
"it disregards persistence. In most cases, the ``cached_db`` backend will be "
"fast enough, but if you need that last bit of performance, and are willing "
"to let session data be expunged from time to time, the ``cache`` backend is "
"for you."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:95
msgid ""
"If you use the ``cached_db`` session backend, you also need to follow the "
"configuration instructions for the `using database-backed sessions`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:99
msgid "Using file-based sessions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:101
msgid ""
"To use file-based sessions, set the :setting:`SESSION_ENGINE` setting to "
"``\"django.contrib.sessions.backends.file\"``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:104
msgid ""
"You might also want to set the :setting:`SESSION_FILE_PATH` setting (which "
"defaults to output from ``tempfile.gettempdir()``, most likely ``/tmp``) to "
"control where Django stores session files. Be sure to check that your Web "
"server has permissions to read and write to this location."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:112
msgid "Using cookie-based sessions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:114
msgid ""
"To use cookies-based sessions, set the :setting:`SESSION_ENGINE` setting to "
"``\"django.contrib.sessions.backends.signed_cookies\"``. The session data "
"will be stored using Django's tools for :doc:`cryptographic signing "
"</topics/signing>` and the :setting:`SECRET_KEY` setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:121
msgid ""
"It's recommended to leave the :setting:`SESSION_COOKIE_HTTPONLY` setting on "
"``True`` to prevent access to the stored data from JavaScript."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:126
msgid ""
"**If the SECRET_KEY is not kept secret and you are using the** "
":class:`~django.contrib.sessions.serializers.PickleSerializer`, **this can "
"lead to arbitrary remote code execution.**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:130
msgid ""
"An attacker in possession of the :setting:`SECRET_KEY` can not only generate"
" falsified session data, which your site will trust, but also remotely "
"execute arbitrary code, as the data is serialized using pickle."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:134
msgid ""
"If you use cookie-based sessions, pay extra care that your secret key is "
"always kept completely secret, for any system which might be remotely "
"accessible."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:138
msgid "**The session data is signed but not encrypted**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:140
msgid ""
"When using the cookies backend the session data can be read by the client."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:142
msgid ""
"A MAC (Message Authentication Code) is used to protect the data against "
"changes by the client, so that the session data will be invalidated when "
"being tampered with. The same invalidation happens if the client storing the"
" cookie (e.g. your user's browser) can't store all of the session cookie and"
" drops data. Even though Django compresses the data, it's still entirely "
"possible to exceed the `common limit of 4096 bytes`_ per cookie."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:149
msgid "**No freshness guarantee**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:151
msgid ""
"Note also that while the MAC can guarantee the authenticity of the data "
"(that it was generated by your site, and not someone else), and the "
"integrity of the data (that it is all there and correct), it cannot "
"guarantee freshness i.e. that you are being sent back the last thing you "
"sent to the client. This means that for some uses of session data, the "
"cookie backend might open you up to `replay attacks`_. Unlike other session "
"backends which keep a server-side record of each session and invalidate it "
"when a user logs out, cookie-based sessions are not invalidated when a user "
"logs out. Thus if an attacker steals a user's cookie, they can use that "
"cookie to login as that user even if the user logs out. Cookies will only be"
" detected as 'stale' if they are older than your "
":setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:164
msgid "**Performance**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:166
msgid ""
"Finally, the size of a cookie can have an impact on the `speed of your "
"site`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:173
msgid "Using sessions in views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:175
msgid ""
"When ``SessionMiddleware`` is activated, each "
":class:`~django.http.HttpRequest` object -- the first argument to any Django"
" view function -- will have a ``session`` attribute, which is a dictionary-"
"like object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:179
msgid ""
"You can read it and write to ``request.session`` at any point in your view. "
"You can edit it multiple times."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:184
msgid ""
"This is the base class for all session objects. It has the following "
"standard dictionary methods:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:189
msgid "Example: ``fav_color = request.session['fav_color']``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:193
msgid "Example: ``request.session['fav_color'] = 'blue'``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:197
msgid ""
"Example: ``del request.session['fav_color']``. This raises ``KeyError`` if "
"the given ``key`` isn't already in the session."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:202
msgid "Example: ``'fav_color' in request.session``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:206
msgid "Example: ``fav_color = request.session.get('fav_color', 'red')``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:210
msgid "Example: ``fav_color = request.session.pop('fav_color', 'blue')``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:220
msgid "It also has these methods:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:224
msgid ""
"Deletes the current session data from the session and deletes the session "
"cookie. This is used if you want to ensure that the previous session data "
"can't be accessed again from the user's browser (for example, the "
":func:`django.contrib.auth.logout()` function calls it)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:231
msgid ""
"Sets a test cookie to determine whether the user's browser supports cookies."
" Due to the way cookies work, you won't be able to test this until the "
"user's next page request. See `Setting test cookies`_ below for more "
"information."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:238
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"browser accepted the test cookie. Due to the way cookies work, you'll have "
"to call ``set_test_cookie()`` on a previous, separate page request. See "
"`Setting test cookies`_ below for more information."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:245
msgid "Deletes the test cookie. Use this to clean up after yourself."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:249
msgid ""
"Sets the expiration time for the session. You can pass a number of different"
" values:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:252
msgid ""
"If ``value`` is an integer, the session will expire after that many seconds "
"of inactivity. For example, calling ``request.session.set_expiry(300)`` "
"would make the session expire in 5 minutes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:257
msgid ""
"If ``value`` is a ``datetime`` or ``timedelta`` object, the session will "
"expire at that specific date/time. Note that ``datetime`` and ``timedelta`` "
"values are only serializable if you are using the "
":class:`~django.contrib.sessions.serializers.PickleSerializer`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:262
msgid ""
"If ``value`` is ``0``, the user's session cookie will expire when the user's"
" Web browser is closed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:265
msgid ""
"If ``value`` is ``None``, the session reverts to using the global session "
"expiry policy."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:268
msgid ""
"Reading a session is not considered activity for expiration purposes. "
"Session expiration is computed from the last time the session was "
"*modified*."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:274
msgid ""
"Returns the number of seconds until this session expires. For sessions with "
"no custom expiration (or those set to expire at browser close), this will "
"equal :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:278
msgid "This function accepts two optional keyword arguments:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:280
msgid ""
"``modification``: last modification of the session, as a "
":class:`~datetime.datetime` object. Defaults to the current time."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:282
msgid ""
"``expiry``: expiry information for the session, as a "
":class:`~datetime.datetime` object, an :class:`int` (in seconds), or "
"``None``. Defaults to the value stored in the session by :meth:`set_expiry`,"
" if there is one, or ``None``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:289
msgid ""
"Returns the date this session will expire. For sessions with no custom "
"expiration (or those set to expire at browser close), this will equal the "
"date :setting:`SESSION_COOKIE_AGE` seconds from now."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:293
msgid ""
"This function accepts the same keyword arguments as :meth:`get_expiry_age`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:297
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"session cookie will expire when the user's Web browser is closed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:302
msgid ""
"Removes expired sessions from the session store. This class method is called"
" by :djadmin:`clearsessions`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:307
msgid ""
"Creates a new session key while retaining the current session data. "
":func:`django.contrib.auth.login()` calls this method to mitigate against "
"session fixation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:314
msgid "Session serialization"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:316
msgid ""
"By default, Django serializes session data using JSON. You can use the "
":setting:`SESSION_SERIALIZER` setting to customize the session serialization"
" format. Even with the caveats described in :ref:`custom-serializers`, we "
"highly recommend sticking with JSON serialization *especially if you are "
"using the cookie backend*."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:322
msgid ""
"For example, here's an attack scenario if you use :mod:`pickle` to serialize"
" session data. If you're using the :ref:`signed cookie session backend "
"<cookie-session-backend>` and :setting:`SECRET_KEY` is known by an attacker "
"(there isn't an inherent vulnerability in Django that would cause it to "
"leak), the attacker could insert a string into their session which, when "
"unpickled, executes arbitrary code on the server. The technique for doing so"
" is simple and easily available on the internet. Although the cookie session"
" storage signs the cookie-stored data to prevent tampering, a "
":setting:`SECRET_KEY` leak immediately escalates to a remote code execution "
"vulnerability."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:333
msgid "Bundled serializers"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:337
msgid ""
"A wrapper around the JSON serializer from :mod:`django.core.signing`. Can "
"only serialize basic data types."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:340
msgid ""
"In addition, as JSON supports only string keys, note that using non-string "
"keys in ``request.session`` won't work as expected::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:351
msgid ""
"Similarly, data that can't be encoded in JSON, such as non-UTF8 bytes like "
"``'\\xd9'`` (which raises :exc:`UnicodeDecodeError`), can't be stored."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:354
msgid ""
"See the :ref:`custom-serializers` section for more details on limitations of"
" JSON serialization."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:359
msgid ""
"Supports arbitrary Python objects, but, as described above, can lead to a "
"remote code execution vulnerability if :setting:`SECRET_KEY` becomes known "
"by an attacker."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:366
msgid "Write your own serializer"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:368
msgid ""
"Note that unlike "
":class:`~django.contrib.sessions.serializers.PickleSerializer`, the "
":class:`~django.contrib.sessions.serializers.JSONSerializer` cannot handle "
"arbitrary Python data types. As is often the case, there is a trade-off "
"between convenience and security. If you wish to store more advanced data "
"types including ``datetime`` and ``Decimal`` in JSON backed sessions, you "
"will need to write a custom serializer (or convert such values to a JSON "
"serializable object before storing them in ``request.session``). While "
"serializing these values is fairly straightforward "
"(:class:`~django.core.serializers.json.DjangoJSONEncoder` may be helpful), "
"writing a decoder that can reliably get back the same thing that you put in "
"is more fragile. For example, you run the risk of returning a ``datetime`` "
"that was actually a string that just happened to be in the same format "
"chosen for ``datetime``\\s)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:382
msgid ""
"Your serializer class must implement two methods, ``dumps(self, obj)`` and "
"``loads(self, data)``, to serialize and deserialize the dictionary of "
"session data, respectively."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:387
msgid "Session object guidelines"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:389
msgid ""
"Use normal Python strings as dictionary keys on ``request.session``. This is"
" more of a convention than a hard-and-fast rule."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:392
msgid ""
"Session dictionary keys that begin with an underscore are reserved for "
"internal use by Django."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:395
msgid ""
"Don't override ``request.session`` with a new object, and don't access or "
"set its attributes. Use it like a Python dictionary."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:401
msgid ""
"This simplistic view sets a ``has_commented`` variable to ``True`` after a "
"user posts a comment. It doesn't let a user post a comment more than once::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:412
msgid "This simplistic view logs in a \"member\" of the site::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:422
msgid "...And this one logs a member out, according to ``login()`` above::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:431
msgid ""
"The standard :meth:`django.contrib.auth.logout` function actually does a bit"
" more than this to prevent inadvertent data leakage. It calls the "
":meth:`~backends.base.SessionBase.flush` method of ``request.session``. We "
"are using this example as a demonstration of how to work with session "
"objects, not as a full ``logout()`` implementation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:438
msgid "Setting test cookies"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:440
msgid ""
"As a convenience, Django provides an easy way to test whether the user's "
"browser accepts cookies. Just call the "
":meth:`~backends.base.SessionBase.set_test_cookie` method of "
"``request.session`` in a view, and call "
":meth:`~backends.base.SessionBase.test_cookie_worked` in a subsequent view "
"-- not in the same view call."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:447
msgid ""
"This awkward split between ``set_test_cookie()`` and "
"``test_cookie_worked()`` is necessary due to the way cookies work. When you "
"set a cookie, you can't actually tell whether a browser accepted it until "
"the browser's next request."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:451
msgid ""
"It's good practice to use "
":meth:`~backends.base.SessionBase.delete_test_cookie()` to clean up after "
"yourself. Do this after you've verified that the test cookie worked."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:455
msgid "Here's a typical usage example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:471
msgid "Using sessions out of views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:475
msgid ""
"The examples in this section import the ``SessionStore`` object directly "
"from the ``django.contrib.sessions.backends.db`` backend. In your own code, "
"you should consider importing ``SessionStore`` from the session engine "
"designated by :setting:`SESSION_ENGINE`, as below:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:484
msgid "An API is available to manipulate session data outside of a view::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:497
msgid ""
"``SessionStore.create()`` is designed to create a new session (i.e. one not "
"loaded from the session store and with ``session_key=None``). ``save()`` is "
"designed to save an existing session (i.e. one loaded from the session "
"store). Calling ``save()`` on a new session may also work but has a small "
"chance of generating a ``session_key`` that collides with an existing one. "
"``create()`` calls ``save()`` and loops until an unused ``session_key`` is "
"generated."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:504
msgid ""
"If you're using the ``django.contrib.sessions.backends.db`` backend, each "
"session is just a normal Django model. The ``Session`` model is defined in "
"``django/contrib/sessions/models.py``. Because it's a normal model, you can "
"access sessions using the normal Django database API::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:514
msgid ""
"Note that you'll need to call "
":meth:`~base_session.AbstractBaseSession.get_decoded()` to get the session "
"dictionary. This is necessary because the dictionary is stored in an encoded"
" format::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:525
msgid "When sessions are saved"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:527
msgid ""
"By default, Django only saves to the session database when the session has "
"been modified -- that is if any of its dictionary values have been assigned "
"or deleted::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:544
msgid ""
"In the last case of the above example, we can tell the session object "
"explicitly that it has been modified by setting the ``modified`` attribute "
"on the session object::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:550
msgid ""
"To change this default behavior, set the "
":setting:`SESSION_SAVE_EVERY_REQUEST` setting to ``True``. When set to "
"``True``, Django will save the session to the database on every single "
"request."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:554
msgid ""
"Note that the session cookie is only sent when a session has been created or"
" modified. If :setting:`SESSION_SAVE_EVERY_REQUEST` is ``True``, the session"
" cookie will be sent on every request."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:558
msgid ""
"Similarly, the ``expires`` part of a session cookie is updated each time the"
" session cookie is sent."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:561
msgid "The session is not saved if the response's status code is 500."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:566
msgid "Browser-length sessions vs. persistent sessions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:568
msgid ""
"You can control whether the session framework uses browser-length sessions "
"vs. persistent sessions with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` "
"setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:572
msgid ""
"By default, :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``False``, "
"which means session cookies will be stored in users' browsers for as long as"
" :setting:`SESSION_COOKIE_AGE`. Use this if you don't want people to have to"
" log in every time they open a browser."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:577
msgid ""
"If :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``True``, Django "
"will use browser-length cookies -- cookies that expire as soon as the user "
"closes their browser. Use this if you want people to have to log in every "
"time they open a browser."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:582
msgid ""
"This setting is a global default and can be overwritten at a per-session "
"level by explicitly calling the "
":meth:`~backends.base.SessionBase.set_expiry` method of ``request.session`` "
"as described above in `using sessions in views`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:588
msgid ""
"Some browsers (Chrome, for example) provide settings that allow users to "
"continue browsing sessions after closing and re-opening the browser. In some"
" cases, this can interfere with the "
":setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting and prevent sessions from"
" expiring on browser close. Please be aware of this while testing Django "
"applications which have the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` "
"setting enabled."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:597
msgid "Clearing the session store"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:599
msgid ""
"As users create new sessions on your website, session data can accumulate in"
" your session store. If you're using the database backend, the "
"``django_session`` database table will grow. If you're using the file "
"backend, your temporary directory will contain an increasing number of "
"files."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:604
msgid ""
"To understand this problem, consider what happens with the database backend."
" When a user logs in, Django adds a row to the ``django_session`` database "
"table. Django updates this row each time the session data changes. If the "
"user logs out manually, Django deletes the row. But if the user does *not* "
"log out, the row never gets deleted. A similar process happens with the file"
" backend."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:610
msgid ""
"Django does *not* provide automatic purging of expired sessions. Therefore, "
"it's your job to purge expired sessions on a regular basis. Django provides "
"a clean-up management command for this purpose: :djadmin:`clearsessions`. "
"It's recommended to call this command on a regular basis, for example as a "
"daily cron job."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:616
msgid ""
"Note that the cache backend isn't vulnerable to this problem, because caches"
" automatically delete stale data. Neither is the cookie backend, because the"
" session data is stored by the users' browsers."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:621
msgid "Settings"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:623
msgid ""
"A few :ref:`Django settings <settings-sessions>` give you control over "
"session behavior:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:626
msgid ":setting:`SESSION_CACHE_ALIAS`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:627
msgid ":setting:`SESSION_COOKIE_AGE`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:628
msgid ":setting:`SESSION_COOKIE_DOMAIN`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:629
msgid ":setting:`SESSION_COOKIE_HTTPONLY`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:630
msgid ":setting:`SESSION_COOKIE_NAME`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:631
msgid ":setting:`SESSION_COOKIE_PATH`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:632
msgid ":setting:`SESSION_COOKIE_SAMESITE`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:633
msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:634
msgid ":setting:`SESSION_ENGINE`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:635
msgid ":setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:636
msgid ":setting:`SESSION_FILE_PATH`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:637
msgid ":setting:`SESSION_SAVE_EVERY_REQUEST`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:638
msgid ":setting:`SESSION_SERIALIZER`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:643
#: ../../../../sources/2.2/docs/topics/security.txt:208
msgid "Session security"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:645
msgid ""
"Subdomains within a site are able to set cookies on the client for the whole"
" domain. This makes session fixation possible if cookies are permitted from "
"subdomains not controlled by trusted users."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:649
msgid ""
"For example, an attacker could log into ``good.example.com`` and get a valid"
" session for their account. If the attacker has control over "
"``bad.example.com``, they can use it to send their session key to you since "
"a subdomain is permitted to set cookies on ``*.example.com``. When you visit"
" ``good.example.com``, you'll be logged in as the attacker and might "
"inadvertently enter your sensitive personal data (e.g. credit card info) "
"into the attackers account."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:656
msgid ""
"Another possible attack would be if ``good.example.com`` sets its "
":setting:`SESSION_COOKIE_DOMAIN` to ``\"example.com\"`` which would cause "
"session cookies from that site to be sent to ``bad.example.com``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:661
msgid "Technical details"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:663
msgid ""
"The session dictionary accepts any :mod:`json` serializable value when using"
" :class:`~django.contrib.sessions.serializers.JSONSerializer` or any "
"picklable Python object when using "
":class:`~django.contrib.sessions.serializers.PickleSerializer`. See the "
":mod:`pickle` module for more information."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:669
msgid "Session data is stored in a database table named ``django_session`` ."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:671
msgid ""
"Django only sends a cookie if it needs to. If you don't set any session "
"data, it won't send a session cookie."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:675
msgid "The ``SessionStore`` object"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:677
msgid ""
"When working with sessions internally, Django uses a session store object "
"from the corresponding session engine. By convention, the session store "
"object class is named ``SessionStore`` and is located in the module "
"designated by :setting:`SESSION_ENGINE`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:682
msgid ""
"All ``SessionStore`` classes available in Django inherit from "
":class:`~backends.base.SessionBase` and implement data manipulation methods,"
" namely:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:686
msgid "``exists()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:687
msgid "``create()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:688
msgid "``save()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:689
msgid "``delete()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:690
msgid "``load()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:691
msgid ":meth:`~backends.base.SessionBase.clear_expired`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:693
msgid ""
"In order to build a custom session engine or to customize an existing one, "
"you may create a new class inheriting from "
":class:`~backends.base.SessionBase` or any other existing ``SessionStore`` "
"class."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:697
msgid ""
"Extending most of the session engines is quite straightforward, but doing so"
" with database-backed session engines generally requires some extra effort "
"(see the next section for details)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:704
msgid "Extending database-backed session engines"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:706
msgid ""
"Creating a custom database-backed session engine built upon those included "
"in Django (namely ``db`` and ``cached_db``) may be done by inheriting "
":class:`~base_session.AbstractBaseSession` and either ``SessionStore`` "
"class."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:710
msgid ""
"``AbstractBaseSession`` and ``BaseSessionManager`` are importable from "
"``django.contrib.sessions.base_session`` so that they can be imported "
"without including ``django.contrib.sessions`` in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:717
msgid "The abstract base session model."
msgstr "抽象基本会话模型。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:721
msgid ""
"Primary key. The field itself may contain up to 40 characters. The current "
"implementation generates a 32-character string (a random sequence of digits "
"and lowercase ASCII letters)."
msgstr "主键。字段本身可能包含多达40个字符。当前实现生成一个32个字符的字符串（一个随机的数字序列和小写的ascii字母）。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:727
msgid "A string containing an encoded and serialized session dictionary."
msgstr "包含编码和序列化会话字典的字符串。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:731
msgid "A datetime designating when the session expires."
msgstr "指定会话何时到期的日期时间。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:733
msgid ""
"Expired sessions are not available to a user, however, they may still be "
"stored in the database until the :djadmin:`clearsessions` management command"
" is run."
msgstr "但是，过期的会话对用户不可用，但在运行 :djadmin:`clearsessions` 管理命令之前，它们仍可能存储在数据库中。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:739
msgid "Returns a session store class to be used with this session model."
msgstr "返回要与此会话模型一起使用的会话存储类。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:743
msgid "Returns decoded session data."
msgstr "返回解码的会话数据。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:745
msgid "Decoding is performed by the session store class."
msgstr "解码由会话存储类执行。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:747
msgid ""
"You can also customize the model manager by subclassing "
":class:`~django.contrib.sessions.base_session.BaseSessionManager`:"
msgstr "还可以通过子类 :class:`~django.contrib.sessions.base_session.BaseSessionManager` 自定义模型管理器。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:754
msgid ""
"Returns the given session dictionary serialized and encoded as a string."
msgstr "返回序列化并编码为字符串的给定会话字典。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:756
msgid ""
"Encoding is performed by the session store class tied to a model class."
msgstr "编码由绑定到模型类的会话存储类执行。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:760
msgid ""
"Saves session data for a provided session key, or deletes the session in "
"case the data is empty."
msgstr "为提供的会话密钥保存会话数据，或在数据为空时删除会话。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:763
msgid ""
"Customization of ``SessionStore`` classes is achieved by overriding methods "
"and properties described below:"
msgstr "通过重写以下描述的方法和属性，实现了 ``SessionStore`` 类的定制："

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:768
msgid "Implements database-backed session store."
msgstr "实现数据库支持的会话存储。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:772
msgid "Override this method to return a custom session model if you need one."
msgstr "如果需要的话，重写此方法以返回自定义会话模型。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:776
msgid ""
"Returns a new instance of the session model object, which represents the "
"current session state."
msgstr "返回会话模型对象的新实例，该实例表示当前会话状态。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:779
msgid ""
"Overriding this method provides the ability to modify session model data "
"before it's saved to database."
msgstr "重写此方法提供了在将会话模型数据保存到数据库之前修改它的能力。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:784
msgid "Implements cached database-backed session store."
msgstr "实现缓存数据库支持的会话存储。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:788
msgid "A prefix added to a session key to build a cache key string."
msgstr "添加到会话键中以生成缓存键字符串的前缀。"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:791
#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:60
#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:185
#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:257
#: ../../../../sources/2.2/docs/topics/http/urls.txt:68
#: ../../../../sources/2.2/docs/topics/http/urls.txt:753
#: ../../../../sources/2.2/docs/topics/pagination.txt:13
#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:36
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:641
msgid "Example"
msgstr "例如"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:793
msgid ""
"The example below shows a custom database-backed session engine that "
"includes an additional database column to store an account ID (thus "
"providing an option to query the database for all active sessions for an "
"account)::"
msgstr "下面的示例显示了一个自定义数据库支持的会话引擎，它包括一个用于存储帐户id的附加数据库列（从而提供了一个选项，用于查询数据库中帐户的所有活动会话）："

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:822
msgid ""
"If you are migrating from the Django's built-in ``cached_db`` session store "
"to a custom one based on ``cached_db``, you should override the cache key "
"prefix in order to prevent a namespace clash::"
msgstr "如果要从Django的内置` `cached_db`` 会话存储迁移到基于``cached_db`` 的自定义存储，则应重写缓存键前缀，以防止名称空间冲突："

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:832
msgid "Session IDs in URLs"
msgstr "URL中的会话ID"

#: ../../../../sources/2.2/docs/topics/http/sessions.txt:834
msgid ""
"The Django sessions framework is entirely, and solely, cookie-based. It does"
" not fall back to putting session IDs in URLs as a last resort, as PHP does."
" This is an intentional design decision. Not only does that behavior make "
"URLs ugly, it makes your site vulnerable to session-ID theft via the "
"\"Referer\" header."
msgstr "Django会话框架完全是基于cookie的。 正如PHP所做的那样，它不会回退到将会话ID放置在URL中作为最后的手段。 这是一个有意设计的决定。 这种行为不仅使URL变得很难看，而且使您的站点容易受到会话ID的盗用。"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:3
msgid "Django shortcut functions"
msgstr "Django快捷函数"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:11
msgid ""
"The package ``django.shortcuts`` collects helper functions and classes that "
"\"span\" multiple levels of MVC. In other words, these functions/classes "
"introduce controlled coupling for convenience's sake."
msgstr "包 ``django.shortcuts`` 收集助手函数和“跨”多级mvc的类，换句话说，为了方便起见，这些函数/类引入受控耦合。"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:16
msgid "``render()``"
msgstr "``render()``"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:20
msgid ""
"Combines a given template with a given context dictionary and returns an "
":class:`~django.http.HttpResponse` object with that rendered text."
msgstr "将给定的模板与给定的上下文字典组合在一起，并以渲染的文本返回一个 :class:`~django.http.HttpResponse` 对象。"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:23
msgid ""
"Django does not provide a shortcut function which returns a "
":class:`~django.template.response.TemplateResponse` because the constructor "
"of :class:`~django.template.response.TemplateResponse` offers the same level"
" of convenience as :func:`render()`."
msgstr "Django没有提供返回:class:`~django.template.response.TemplateResponse` 的快捷函数，因为:class:`~django.template.response.TemplateResponse` 的构造函数提供了与:func:`render()`相同的方便程度。"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:29
#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:172
#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:245
#: ../../../../sources/2.2/docs/topics/pagination.txt:137
msgid "Required arguments"
msgstr "必选参数"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:32
#: ../../../../sources/2.2/docs/topics/templates.txt:260
msgid "``request``"
msgstr "``request``"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:32
msgid "The request object used to generate this response."
msgstr "用于生成此响应的请求对象。"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:38
#: ../../../../sources/2.2/docs/topics/templates.txt:253
msgid "``template_name``"
msgstr "``template_name``"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:35
msgid ""
"The full name of a template to use or sequence of template names. If a "
"sequence is given, the first template that exists will be used. See the "
":ref:`template loading documentation <template-loading>` for more "
"information on how templates are found."
msgstr "要使用的模板的全名或模板名称的序列。如果给定一个序列，则将使用存在的第一个模板。有关如何查找模板的更多信息，请参见 :ref:`template loading documentation <template-loading>` 。"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:41
#: ../../../../sources/2.2/docs/topics/pagination.txt:158
msgid "Optional arguments"
msgstr "可选参数"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:46
#: ../../../../sources/2.2/docs/topics/templates.txt:256
msgid "``context``"
msgstr "``context``"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:44
msgid ""
"A dictionary of values to add to the template context. By default, this is "
"an empty dictionary. If a value in the dictionary is callable, the view will"
" call it just before rendering the template."
msgstr "要添加到模板上下文的值的字典。 默认情况下，这是一个空的字典。 如果字典中的值是可调用的，则视图将在渲染模板之前调用它。"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:50
msgid "``content_type``"
msgstr "``content_type``"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:49
msgid ""
"The MIME type to use for the resulting document. Defaults to the value of "
"the :setting:`DEFAULT_CONTENT_TYPE` setting."
msgstr "用于结果文档的MIME类型默认为：设置:setting:`DEFAULT_CONTENT_TYPE` 设置的值。"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:53
msgid "``status``"
msgstr "``status``"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:53
msgid "The status code for the response. Defaults to ``200``."
msgstr "响应的状态代码默认为“200”。"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:57
#: ../../../../sources/2.2/docs/topics/templates.txt:264
msgid "``using``"
msgstr "``using``"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:56
msgid ""
"The :setting:`NAME <TEMPLATES-NAME>` of a template engine to use for loading"
" the template."
msgstr "用于加载模板的模板引擎的 :setting:`NAME ` 。"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:62
msgid ""
"The following example renders the template ``myapp/index.html`` with the "
"MIME type :mimetype:`application/xhtml+xml`::"
msgstr "下面的示例使用MIME类型呈现模板``myapp/index.html`` :mimetype:`application/xhtml+xml`："

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:73
#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:195
#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:266
msgid "This example is equivalent to::"
msgstr "此示例相当于："

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:85
msgid "``render_to_response()``"
msgstr "``render_to_response()``"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:91
msgid ""
"This function preceded the introduction of :func:`render` and works "
"similarly except that it doesn't make the ``request`` available in the "
"response."
msgstr "该函数之前引入了:func:`render` ，并类似地工作，只是它不使响应中的 ``request`` 可用。"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:96
msgid "``redirect()``"
msgstr "``redirect()``"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:100
msgid ""
"Returns an :class:`~django.http.HttpResponseRedirect` to the appropriate URL"
" for the arguments passed."
msgstr "将一个 :class:`~django.http.HttpResponseRedirect` 返回到传递的参数的适当URL。"

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:103
msgid "The arguments could be:"
msgstr "论点可以是："

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:105
msgid ""
"A model: the model's :meth:`~django.db.models.Model.get_absolute_url()` "
"function will be called."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:108
msgid ""
"A view name, possibly with arguments: :func:`~django.urls.reverse` will be "
"used to reverse-resolve the name."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:111
msgid ""
"An absolute or relative URL, which will be used as-is for the redirect "
"location."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:114
msgid ""
"By default issues a temporary redirect; pass ``permanent=True`` to issue a "
"permanent redirect."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:120
msgid "You can use the :func:`redirect` function in a number of ways."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:122
msgid ""
"By passing some object; that object's "
":meth:`~django.db.models.Model.get_absolute_url` method will be called to "
"figure out the redirect URL::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:133
msgid ""
"By passing the name of a view and optionally some positional or keyword "
"arguments; the URL will be reverse resolved using the "
":func:`~django.urls.reverse` method::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:141
msgid "By passing a hardcoded URL to redirect to::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:147
msgid "This also works with full URLs::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:153
msgid ""
"By default, :func:`redirect` returns a temporary redirect. All of the above "
"forms accept a ``permanent`` argument; if set to ``True`` a permanent "
"redirect will be returned::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:163
msgid "``get_object_or_404()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:167
msgid ""
"Calls :meth:`~django.db.models.query.QuerySet.get()` on a given model "
"manager, but it raises :class:`~django.http.Http404` instead of the model's "
":class:`~django.db.models.Model.DoesNotExist` exception."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:178
#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:250
msgid "``klass``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:175
msgid ""
"A :class:`~django.db.models.Model` class, a "
":class:`~django.db.models.Manager`, or a "
":class:`~django.db.models.query.QuerySet` instance from which to get the "
"object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:182
#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:254
msgid "``**kwargs``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:181
#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:253
msgid ""
"Lookup parameters, which should be in the format accepted by ``get()`` and "
"``filter()``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:187
msgid ""
"The following example gets the object with the primary key of 1 from "
"``MyModel``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:205
msgid ""
"The most common use case is to pass a :class:`~django.db.models.Model`, as "
"shown above. However, you can also pass a "
":class:`~django.db.models.query.QuerySet` instance::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:212
msgid "The above example is a bit contrived since it's equivalent to doing::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:216
msgid ""
"but it can be useful if you are passed the ``queryset`` variable from "
"somewhere else."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:219
msgid ""
"Finally, you can also use a :class:`~django.db.models.Manager`. This is "
"useful for example if you have a :ref:`custom manager<custom-managers>`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:225
msgid ""
"You can also use :class:`related "
"managers<django.db.models.fields.related.RelatedManager>`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:231
msgid ""
"Note: As with ``get()``, a "
":class:`~django.core.exceptions.MultipleObjectsReturned` exception will be "
"raised if more than one object is found."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:236
msgid "``get_list_or_404()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:240
msgid ""
"Returns the result of :meth:`~django.db.models.query.QuerySet.filter()` on a"
" given model manager cast to a list, raising :class:`~django.http.Http404` "
"if the resulting list is empty."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:248
msgid ""
"A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or "
":class:`~django.db.models.query.QuerySet` instance from which to get the "
"list."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/shortcuts.txt:259
msgid "The following example gets all published objects from ``MyModel``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:3
msgid "URL dispatcher"
msgstr "URL调度器"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:5
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django lets you design URLs however you want, with no framework"
" limitations."
msgstr "对于高质量的Web 应用来说，使用简洁、优雅的URL 模式是一个非常值得重视的细节。Django 允许你自由地设计你的URL，不受框架束缚。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:9
msgid ""
"See `Cool URIs don't change`_, by World Wide Web creator Tim Berners-Lee, "
"for excellent arguments on why URLs should be clean and usable."
msgstr "参见万维网的发明者Berners-Lee 的 `Cool URIs don't change`_，里面有关于为什么URL 应该保持整洁和有意义的卓越论证。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:17
msgid ""
"To design URLs for an app, you create a Python module informally called a "
"**URLconf** (URL configuration). This module is pure Python code and is a "
"mapping between URL path expressions to Python functions (your views)."
msgstr "为了给一个应用设计URL，你需要创建一个Python 模块，通常被称为**URLconf**(URL configuration)。这个模块是纯粹的Python 代码，包含URL 模式(简单的正则表达式)到Python 函数(你的视图)的简单映射。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:21
msgid ""
"This mapping can be as short or as long as needed. It can reference other "
"mappings. And, because it's pure Python code, it can be constructed "
"dynamically."
msgstr "映射可短可长，随便你。它可以引用其它的映射。而且，因为它是纯粹的Python 代码，它可以动态构造。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:25
msgid ""
"Django also provides a way to translate URLs according to the active "
"language. See the :ref:`internationalization documentation <url-"
"internationalization>` for more information."
msgstr "Django 还提供根据当前语言翻译URL 的一种方法。更多信息参见 :ref:`国际化文档 <url-internationalization>`。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:32
msgid "How Django processes a request"
msgstr "Django 如何处理一个请求"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:34
msgid ""
"When a user requests a page from your Django-powered site, this is the "
"algorithm the system follows to determine which Python code to execute:"
msgstr "当一个用户请求Django 站点的一个页面，下面是Django 系统决定执行哪个Python 代码使用的算法："

#: ../../../../sources/2.2/docs/topics/http/urls.txt:37
msgid ""
"Django determines the root URLconf module to use. Ordinarily, this is the "
"value of the :setting:`ROOT_URLCONF` setting, but if the incoming "
"``HttpRequest`` object has a :attr:`~django.http.HttpRequest.urlconf` "
"attribute (set by middleware), its value will be used in place of the "
":setting:`ROOT_URLCONF` setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:43
msgid ""
"Django loads that Python module and looks for the variable ``urlpatterns``. "
"This should be a Python list of :func:`django.urls.path` and/or "
":func:`django.urls.re_path` instances."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:47
msgid ""
"Django runs through each URL pattern, in order, and stops at the first one "
"that matches the requested URL."
msgstr "Django 依次匹配每个URL 模式，在与请求的URL 匹配的第一个模式停下来。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:50
msgid ""
"Once one of the URL patterns matches, Django imports and calls the given "
"view, which is a simple Python function (or a :doc:`class-based view "
"</topics/class-based-views/index>`). The view gets passed the following "
"arguments:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:55
msgid "An instance of :class:`~django.http.HttpRequest`."
msgstr "一个 :class:`~django.http.HttpRequest` 实例。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:56
msgid ""
"If the matched URL pattern returned no named groups, then the matches from "
"the regular expression are provided as positional arguments."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:58
msgid ""
"The keyword arguments are made up of any named parts matched by the path "
"expression, overridden by any arguments specified in the optional ``kwargs``"
" argument to :func:`django.urls.path` or :func:`django.urls.re_path`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:63
msgid ""
"If no URL pattern matches, or if an exception is raised during any point in "
"this process, Django invokes an appropriate error-handling view. See `Error "
"handling`_ below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:70
msgid "Here's a sample URLconf::"
msgstr "下面是一个简单的 URLconf:: "

#: ../../../../sources/2.2/docs/topics/http/urls.txt:85
msgid "To capture a value from the URL, use angle brackets."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:87
msgid ""
"Captured values can optionally include a converter type. For example, use "
"``<int:name>`` to capture an integer parameter. If a converter isn't "
"included, any string, excluding a ``/`` character, is matched."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:91
msgid ""
"There's no need to add a leading slash, because every URL has that. For "
"example, it's ``articles``, not ``/articles``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:94
msgid "Example requests:"
msgstr "一些请求的例子："

#: ../../../../sources/2.2/docs/topics/http/urls.txt:96
msgid ""
"A request to ``/articles/2005/03/`` would match the third entry in the list."
" Django would call the function ``views.month_archive(request, year=2005, "
"month=3)``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:100
msgid ""
"``/articles/2003/`` would match the first pattern in the list, not the "
"second one, because the patterns are tested in order, and the first one is "
"the first test to pass. Feel free to exploit the ordering to insert special "
"cases like this. Here, Django would call the function "
"``views.special_case_2003(request)``"
msgstr " ``/articles/2003/`` 将匹配列表中的第一个模式不是第二个，因为模式按顺序匹配，第一个会首先测试是否匹配。请像这样自由插入一些特殊的情况来探测匹配的次序。在这里Django会调用函数 ``views.special_case_2003(request)`` "

#: ../../../../sources/2.2/docs/topics/http/urls.txt:106
msgid ""
"``/articles/2003`` would not match any of these patterns, because each "
"pattern requires that the URL end with a slash."
msgstr " ``/articles/2003``  不匹配任何一个模式，因为每个模式要求URL 以一个斜线结尾。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:109
msgid ""
"``/articles/2003/03/building-a-django-site/`` would match the final pattern."
" Django would call the function ``views.article_detail(request, year=2003, "
"month=3, slug=\"building-a-django-site\")``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:114
msgid "Path converters"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:116
msgid "The following path converters are available by default:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:118
msgid ""
"``str`` - Matches any non-empty string, excluding the path separator, "
"``'/'``. This is the default if a converter isn't included in the "
"expression."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:121
msgid "``int`` - Matches zero or any positive integer. Returns an `int`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:123
msgid ""
"``slug`` - Matches any slug string consisting of ASCII letters or numbers, "
"plus the hyphen and underscore characters. For example, ``building-your-1st-"
"django-site``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:127
msgid ""
"``uuid`` - Matches a formatted UUID. To prevent multiple URLs from mapping "
"to the same page, dashes must be included and letters must be lowercase. For"
" example, ``075194d3-6885-417e-a8a8-6c931e272f00``. Returns a "
":class:`~uuid.UUID` instance."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:132
msgid ""
"``path`` - Matches any non-empty string, including the path separator, "
"``'/'``. This allows you to match against a complete URL path rather than "
"just a segment of a URL path as with ``str``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:139
msgid "Registering custom path converters"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:141
msgid ""
"For more complex matching requirements, you can define your own path "
"converters."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:143
msgid "A converter is a class that includes the following:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:145
msgid "A ``regex`` class attribute, as a string."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:147
msgid ""
"A ``to_python(self, value)`` method, which handles converting the matched "
"string into the type that should be passed to the view function. It should "
"raise ``ValueError`` if it can't convert the given value."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:151
msgid ""
"A ``to_url(self, value)`` method, which handles converting the Python type "
"into a string to be used in the URL."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:165
msgid ""
"Register custom converter classes in your URLconf using "
":func:`~django.urls.register_converter`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:181
msgid "Using regular expressions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:183
msgid ""
"If the paths and converters syntax isn't sufficient for defining your URL "
"patterns, you can also use regular expressions. To do so, use "
":func:`~django.urls.re_path` instead of :func:`~django.urls.path`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:187
msgid ""
"In Python regular expressions, the syntax for named regular expression "
"groups is ``(?P<name>pattern)``, where ``name`` is the name of the group and"
" ``pattern`` is some pattern to match."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:191
msgid ""
"Here's the example URLconf from earlier, rewritten using regular "
"expressions::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:204
msgid ""
"This accomplishes roughly the same thing as the previous example, except:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:206
msgid ""
"The exact URLs that will match are slightly more constrained. For example, "
"the year 10000 will no longer match since the year integers are constrained "
"to be exactly four digits long."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:210
msgid ""
"Each captured argument is sent to the view as a string, regardless of what "
"sort of match the regular expression makes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:213
msgid ""
"When switching from using :func:`~django.urls.path` to "
":func:`~django.urls.re_path` or vice versa, it's particularly important to "
"be aware that the type of the view arguments may change, and so you may need"
" to adapt your views."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:219
msgid "Using unnamed regular expression groups"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:221
msgid ""
"As well as the named group syntax, e.g. ``(?P<year>[0-9]{4})``, you can also"
" use the shorter unnamed group, e.g. ``([0-9]{4})``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:224
msgid ""
"This usage isn't particularly recommended as it makes it easier to "
"accidentally introduce errors between the intended meaning of a match and "
"the arguments of the view."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:228
msgid ""
"In either case, using only one style within a given regex is recommended. "
"When both styles are mixed, any unnamed groups are ignored and only named "
"groups are passed to the view function."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:233
msgid "Nested arguments"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:235
msgid ""
"Regular expressions allow nested arguments, and Django will resolve them and"
" pass them to the view. When reversing, Django will try to fill in all outer"
" captured arguments, ignoring any nested captured arguments. Consider the "
"following URL patterns which optionally take a page argument::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:247
msgid ""
"Both patterns use nested arguments and will resolve: for example, "
"``blog/page-2/`` will result in a match to ``blog_articles`` with two "
"positional arguments: ``page-2/`` and ``2``. The second pattern for "
"``comments`` will match ``comments/page-2/`` with keyword argument "
"``page_number`` set to 2. The outer argument in this case is a non-capturing"
" argument ``(?:...)``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:254
msgid ""
"The ``blog_articles`` view needs the outermost captured argument to be "
"reversed, ``page-2/`` or no arguments in this case, while ``comments`` can "
"be reversed with either no arguments or a value for ``page_number``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:258
msgid ""
"Nested captured arguments create a strong coupling between the view "
"arguments and the URL as illustrated by ``blog_articles``: the view receives"
" part of the URL (``page-2/``) instead of only the value the view is "
"interested in. This coupling is even more pronounced when reversing, since "
"to reverse the view we need to pass the piece of URL instead of the page "
"number."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:264
msgid ""
"As a rule of thumb, only capture the values the view needs to work with and "
"use non-capturing arguments when the regular expression needs an argument "
"but the view ignores it."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:269
msgid "What the URLconf searches against"
msgstr "URLconf 在什么上查找"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:271
msgid ""
"The URLconf searches against the requested URL, as a normal Python string. "
"This does not include GET or POST parameters, or the domain name."
msgstr "请求的URL被看做是一个普通的Python 字符串， URLconf在其上查找并匹配。进行匹配时将不包括GET或POST请求方式的参数以及域名。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:274
msgid ""
"For example, in a request to ``https://www.example.com/myapp/``, the URLconf"
" will look for ``myapp/``."
msgstr "例如，  ``https://www.example.com/myapp/`` 请求中，URLconf 将查找 ``myapp/`` "

#: ../../../../sources/2.2/docs/topics/http/urls.txt:277
msgid ""
"In a request to ``https://www.example.com/myapp/?page=3``, the URLconf will "
"look for ``myapp/``."
msgstr "在 ``https://www.example.com/myapp/?page=3`` 请求中，URLconf 仍将查找 ``myapp/`` 。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:280
msgid ""
"The URLconf doesn't look at the request method. In other words, all request "
"methods -- ``POST``, ``GET``, ``HEAD``, etc. -- will be routed to the same "
"function for the same URL."
msgstr "URLconf 不检查使用了哪种请求方法。换句话讲，所有的请求方法 —— 即，对同一个URL的无论是 ``POST请求`` 、 ``GET请求`` 、或 ``HEAD`` 请求方法等等 —— 都将路由到相同的函数。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:285
msgid "Specifying defaults for view arguments"
msgstr "指定视图参数的默认值"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:287
msgid ""
"A convenient trick is to specify default parameters for your views' "
"arguments. Here's an example URLconf and view::"
msgstr "有一个方便的小技巧是指定视图参数的默认值。 下面是一个URLconf 和视图的示例："

#: ../../../../sources/2.2/docs/topics/http/urls.txt:305
msgid ""
"In the above example, both URL patterns point to the same view -- "
"``views.page`` -- but the first pattern doesn't capture anything from the "
"URL. If the first pattern matches, the ``page()`` function will use its "
"default argument for ``num``, ``1``. If the second pattern matches, "
"``page()`` will use whatever ``num`` value was captured."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:312
msgid "Performance"
msgstr "性能"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:314
msgid ""
"Each regular expression in a ``urlpatterns`` is compiled the first time it's"
" accessed. This makes the system blazingly fast."
msgstr " ``urlpatterns`` 中的每个正则表达式在第一次访问它们时被编译。这使得系统相当快。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:318
msgid "Syntax of the ``urlpatterns`` variable"
msgstr " ``urlpatterns`` 变量的语法"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:320
msgid ""
"``urlpatterns`` should be a Python list of :func:`~django.urls.path` and/or "
":func:`~django.urls.re_path` instances."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:324
msgid "Error handling"
msgstr "错误处理"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:326
msgid ""
"When Django can't find a match for the requested URL, or when an exception "
"is raised, Django invokes an error-handling view."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:329
msgid ""
"The views to use for these cases are specified by four variables. Their "
"default values should suffice for most projects, but further customization "
"is possible by overriding their default values."
msgstr "这些情况发生时使用的视图通过4个变量指定。它们的默认值应该满足大部分项目，但是通过赋值给它们以进一步的自定义也是可以的。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:333
msgid ""
"See the documentation on :ref:`customizing error views <customizing-error-"
"views>` for the full details."
msgstr "完整的细节请参见 :ref:`自定义错误视图 <customizing-error-views>`  。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:336
msgid ""
"Such values can be set in your root URLconf. Setting these variables in any "
"other URLconf will have no effect."
msgstr "这些值得在你的根URLconf 中设置。在其它URLconf 中设置这些变量将不会生效果。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:339
msgid ""
"Values must be callables, or strings representing the full Python import "
"path to the view that should be called to handle the error condition at "
"hand."
msgstr "它们的值必须是可调用的或者是表示视图的Python 完整导入路径的字符串，可以方便地调用它们来处理错误情况。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:342
msgid "The variables are:"
msgstr "这些值是："

#: ../../../../sources/2.2/docs/topics/http/urls.txt:344
msgid "``handler400`` -- See :data:`django.conf.urls.handler400`."
msgstr "``handler400`` -- 查看 :data:`django.conf.urls.handler400`."

#: ../../../../sources/2.2/docs/topics/http/urls.txt:345
msgid "``handler403`` -- See :data:`django.conf.urls.handler403`."
msgstr "``handler403`` -- 查看 :data:`django.conf.urls.handler403`."

#: ../../../../sources/2.2/docs/topics/http/urls.txt:346
msgid "``handler404`` -- See :data:`django.conf.urls.handler404`."
msgstr "``handler404`` -- 查看 :data:`django.conf.urls.handler404`."

#: ../../../../sources/2.2/docs/topics/http/urls.txt:347
msgid "``handler500`` -- See :data:`django.conf.urls.handler500`."
msgstr "``handler500`` -- 查看 :data:`django.conf.urls.handler500`."

#: ../../../../sources/2.2/docs/topics/http/urls.txt:352
msgid "Including other URLconfs"
msgstr "包含其它的URLconfs"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:354
msgid ""
"At any point, your ``urlpatterns`` can \"include\" other URLconf modules. "
"This essentially \"roots\" a set of URLs below other ones."
msgstr "在任何时候，你的 ``urlpatterns`` 都可以 \"include\" 其它URLconf 模块。这实际上将一部分URL 放置于其它URL 下面。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:357
msgid ""
"For example, here's an excerpt of the URLconf for the `Django website`_ "
"itself. It includes a number of other URLconfs::"
msgstr "例如，下面是URLconf  `Django website`_ 自己的URLconf 中一个片段。它包含许多其它URLconf："

#: ../../../../sources/2.2/docs/topics/http/urls.txt:369
msgid ""
"Whenever Django encounters :func:`~django.urls.include()`, it chops off "
"whatever part of the URL matched up to that point and sends the remaining "
"string to the included URLconf for further processing."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:373
msgid ""
"Another possibility is to include additional URL patterns by using a list of"
" :func:`~django.urls.path` instances. For example, consider this URLconf::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:393
msgid ""
"In this example, the ``/credit/reports/`` URL will be handled by the "
"``credit_views.report()`` Django view."
msgstr "在这个例子中， ``/credit/reports/``  URL将被 ``credit.views.report()`` 这个Django 视图处理。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:396
msgid ""
"This can be used to remove redundancy from URLconfs where a single pattern "
"prefix is used repeatedly. For example, consider this URLconf::"
msgstr "这种方法可以用来去除URLconf 中的冗余，其中某个模式前缀被重复使用。例如，考虑这个URLconf::"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:409
msgid ""
"We can improve this by stating the common path prefix only once and grouping"
" the suffixes that differ::"
msgstr "我们可以改进它，通过只声明共同的路径前缀一次并将后面的部分分组::"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:427
msgid "Captured parameters"
msgstr "捕获的参数"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:429
msgid ""
"An included URLconf receives any captured parameters from parent URLconfs, "
"so the following example is valid::"
msgstr "被包含的URLconf 会收到来自父URLconf 捕获的任何参数，所以下面的例子是合法的::"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:448
msgid ""
"In the above example, the captured ``\"username\"`` variable is passed to "
"the included URLconf, as expected."
msgstr "在上面的例子中，捕获的 ``\"username\"`` 变量将被如期传递给include()指向的URLconf。"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:454
msgid "Passing extra options to view functions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:456
msgid ""
"URLconfs have a hook that lets you pass extra arguments to your view "
"functions, as a Python dictionary."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:459
msgid ""
"The :func:`~django.urls.path` function can take an optional third argument "
"which should be a dictionary of extra keyword arguments to pass to the view "
"function."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:472
msgid ""
"In this example, for a request to ``/blog/2005/``, Django will call "
"``views.year_archive(request, year=2005, foo='bar')``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:475
msgid ""
"This technique is used in the :doc:`syndication framework "
"</ref/contrib/syndication>` to pass metadata and options to views."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:479
msgid "Dealing with conflicts"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:481
msgid ""
"It's possible to have a URL pattern which captures named keyword arguments, "
"and also passes arguments with the same names in its dictionary of extra "
"arguments. When this happens, the arguments in the dictionary will be used "
"instead of the arguments captured in the URL."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:487
msgid "Passing extra options to ``include()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:489
msgid ""
"Similarly, you can pass extra options to :func:`~django.urls.include` and "
"each line in the included URLconf will be passed the extra options."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:492
msgid "For example, these two URLconf sets are functionally identical:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:494
msgid "Set one::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:512
msgid "Set two::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:530
msgid ""
"Note that extra options will *always* be passed to *every* line in the "
"included URLconf, regardless of whether the line's view actually accepts "
"those options as valid. For this reason, this technique is only useful if "
"you're certain that every view in the included URLconf accepts the extra "
"options you're passing."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:536
msgid "Reverse resolution of URLs"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:538
msgid ""
"A common need when working on a Django project is the possibility to obtain "
"URLs in their final forms either for embedding in generated content (views "
"and assets URLs, URLs shown to the user, etc.) or for handling of the "
"navigation flow on the server side (redirections, etc.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:543
msgid ""
"It is strongly desirable to avoid hard-coding these URLs (a laborious, non-"
"scalable and error-prone strategy). Equally dangerous is devising ad-hoc "
"mechanisms to generate URLs that are parallel to the design described by the"
" URLconf, which can result in the production of URLs that become stale over "
"time."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:548
msgid ""
"In other words, what's needed is a DRY mechanism. Among other advantages it "
"would allow evolution of the URL design without having to go over all the "
"project source code to search and replace outdated URLs."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:552
msgid ""
"The primary piece of information we have available to get a URL is an "
"identification (e.g. the name) of the view in charge of handling it. Other "
"pieces of information that necessarily must participate in the lookup of the"
" right URL are the types (positional, keyword) and values of the view "
"arguments."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:557
msgid ""
"Django provides a solution such that the URL mapper is the only repository "
"of the URL design. You feed it with your URLconf and then it can be used in "
"both directions:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:561
msgid ""
"Starting with a URL requested by the user/browser, it calls the right Django"
" view providing any arguments it might need with their values as extracted "
"from the URL."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:565
msgid ""
"Starting with the identification of the corresponding Django view plus the "
"values of arguments that would be passed to it, obtain the associated URL."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:568
msgid ""
"The first one is the usage we've been discussing in the previous sections. "
"The second one is what is known as *reverse resolution of URLs*, *reverse "
"URL matching*, *reverse URL lookup*, or simply *URL reversing*."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:572
msgid ""
"Django provides tools for performing URL reversing that match the different "
"layers where URLs are needed:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:575
msgid "In templates: Using the :ttag:`url` template tag."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:577
msgid "In Python code: Using the :func:`~django.urls.reverse` function."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:579
msgid ""
"In higher level code related to handling of URLs of Django model instances: "
"The :meth:`~django.db.models.Model.get_absolute_url` method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:585
msgid "Consider again this URLconf entry::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:597
msgid ""
"According to this design, the URL for the archive corresponding to year "
"*nnnn* is ``/articles/<nnnn>/``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:600
msgid "You can obtain these in template code by using:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:612
msgid "Or in Python code::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:623
msgid ""
"If, for some reason, it was decided that the URLs where content for yearly "
"article archives are published at should be changed then you would only need"
" to change the entry in the URLconf."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:627
msgid ""
"In some scenarios where views are of a generic nature, a many-to-one "
"relationship might exist between URLs and views. For these cases the view "
"name isn't a good enough identifier for it when comes the time of reversing "
"URLs. Read the next section to know about the solution Django provides for "
"this."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:635
msgid "Naming URL patterns"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:637
msgid ""
"In order to perform URL reversing, you'll need to use **named URL patterns**"
" as done in the examples above. The string used for the URL name can contain"
" any characters you like. You are not restricted to valid Python names."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:641
msgid ""
"When naming URL patterns, choose names that are unlikely to clash with other"
" applications' choice of names. If you call your URL pattern ``comment`` and"
" another application does the same thing, the URL that "
":func:`~django.urls.reverse()` finds depends on whichever pattern is last in"
" your project's ``urlpatterns`` list."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:647
msgid ""
"Putting a prefix on your URL names, perhaps derived from the application "
"name (such as ``myapp-comment`` instead of ``comment``), decreases the "
"chance of collision."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:651
msgid ""
"You can deliberately choose the *same URL name* as another application if "
"you want to override a view. For example, a common use case is to override "
"the :class:`~django.contrib.auth.views.LoginView`. Parts of Django and most "
"third-party apps assume that this view has a URL pattern with the name "
"``login``. If you have a custom login view and give its URL the name "
"``login``, :func:`~django.urls.reverse()` will find your custom view as long"
" as it's in ``urlpatterns`` after ``django.contrib.auth.urls`` is included "
"(if that's included at all)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:660
msgid ""
"You may also use the same name for multiple URL patterns if they differ in "
"their arguments. In addition to the URL name, :func:`~django.urls.reverse()`"
" matches the number of arguments and the names of the keyword arguments."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:667
msgid "URL namespaces"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:670
#: ../../../../sources/2.2/docs/topics/performance.txt:10
msgid "Introduction"
msgstr "介绍"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:672
msgid ""
"URL namespaces allow you to uniquely reverse :ref:`named URL patterns "
"<naming-url-patterns>` even if different applications use the same URL "
"names. It's a good practice for third-party apps to always use namespaced "
"URLs (as we did in the tutorial). Similarly, it also allows you to reverse "
"URLs if multiple instances of an application are deployed. In other words, "
"since multiple instances of a single application will share named URLs, "
"namespaces provide a way to tell these named URLs apart."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:680
msgid ""
"Django applications that make proper use of URL namespacing can be deployed "
"more than once for a particular site. For example "
":mod:`django.contrib.admin` has an :class:`~django.contrib.admin.AdminSite` "
"class which allows you to easily :ref:`deploy more than one instance of the "
"admin <multiple-admin-sites>`. In a later example, we'll discuss the idea of"
" deploying the polls application from the tutorial in two different "
"locations so we can serve the same functionality to two different audiences "
"(authors and publishers)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:688
msgid "A URL namespace comes in two parts, both of which are strings:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:691
msgid "application namespace"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:693
msgid ""
"This describes the name of the application that is being deployed. Every "
"instance of a single application will have the same application namespace. "
"For example, Django's admin application has the somewhat predictable "
"application namespace of ``'admin'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:697
msgid "instance namespace"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:699
msgid ""
"This identifies a specific instance of an application. Instance namespaces "
"should be unique across your entire project. However, an instance namespace "
"can be the same as the application namespace. This is used to specify a "
"default instance of an application. For example, the default Django admin "
"instance has an instance namespace of ``'admin'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:705
msgid ""
"Namespaced URLs are specified using the ``':'`` operator. For example, the "
"main index page of the admin application is referenced using "
"``'admin:index'``. This indicates a namespace of ``'admin'``, and a named "
"URL of ``'index'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:709
msgid ""
"Namespaces can also be nested. The named URL ``'sports:polls:index'`` would "
"look for a pattern named ``'index'`` in the namespace ``'polls'`` that is "
"itself defined within the top-level namespace ``'sports'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:716
msgid "Reversing namespaced URLs"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:718
msgid ""
"When given a namespaced URL (e.g. ``'polls:index'``) to resolve, Django "
"splits the fully qualified name into parts and then tries the following "
"lookup:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:721
msgid ""
"First, Django looks for a matching :term:`application namespace` (in this "
"example, ``'polls'``). This will yield a list of instances of that "
"application."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:725
msgid ""
"If there is a current application defined, Django finds and returns the URL "
"resolver for that instance. The current application can be specified with "
"the ``current_app`` argument to the :func:`~django.urls.reverse()` function."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:730
msgid ""
"The :ttag:`url` template tag uses the namespace of the currently resolved "
"view as the current application in a "
":class:`~django.template.RequestContext`. You can override this default by "
"setting the current application on the :attr:`request.current_app "
"<django.http.HttpRequest.current_app>` attribute."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:736
msgid ""
"If there is no current application, Django looks for a default application "
"instance. The default application instance is the instance that has an "
":term:`instance namespace` matching the :term:`application namespace` (in "
"this example, an instance of ``polls`` called ``'polls'``)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:741
msgid ""
"If there is no default application instance, Django will pick the last "
"deployed instance of the application, whatever its instance name may be."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:744
msgid ""
"If the provided namespace doesn't match an :term:`application namespace` in "
"step 1, Django will attempt a direct lookup of the namespace as an "
":term:`instance namespace`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:748
msgid ""
"If there are nested namespaces, these steps are repeated for each part of "
"the namespace until only the view name is unresolved. The view name will "
"then be resolved into a URL in the namespace that has been found."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:755
msgid ""
"To show this resolution strategy in action, consider an example of two "
"instances of the ``polls`` application from the tutorial: one called "
"``'author-polls'`` and one called ``'publisher-polls'``. Assume we have "
"enhanced that application so that it takes the instance namespace into "
"consideration when creating and displaying polls."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:771
#: ../../../../sources/2.2/docs/topics/http/urls.txt:830
msgid "polls/urls.py"
msgstr "polls/urls.py"

#: ../../../../sources/2.2/docs/topics/http/urls.txt:785
msgid "Using this setup, the following lookups are possible:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:787
msgid ""
"If one of the instances is current - say, if we were rendering the detail "
"page in the instance ``'author-polls'`` - ``'polls:index'`` will resolve to "
"the index page of the ``'author-polls'`` instance; i.e. both of the "
"following will result in ``\"/author-polls/\"``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:792
msgid "In the method of a class-based view::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:796
msgid "and in the template:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:802
msgid ""
"If there is no current instance - say, if we were rendering a page somewhere"
" else on the site - ``'polls:index'`` will resolve to the last registered "
"instance of ``polls``. Since there is no default instance (instance "
"namespace of ``'polls'``), the last instance of ``polls`` that is registered"
" will be used. This would be ``'publisher-polls'`` since it's declared last "
"in the ``urlpatterns``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:809
msgid ""
"``'author-polls:index'`` will always resolve to the index page of the "
"instance ``'author-polls'`` (and likewise for ``'publisher-polls'``) ."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:812
msgid ""
"If there were also a default instance - i.e., an instance named ``'polls'`` "
"- the only change from above would be in the case where there is no current "
"instance (the second item in the list above). In this case ``'polls:index'``"
" would resolve to the index page of the default instance instead of the "
"instance declared last in ``urlpatterns``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:821
msgid "URL namespaces and included URLconfs"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:823
msgid ""
"Application namespaces of included URLconfs can be specified in two ways."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:825
msgid ""
"Firstly, you can set an ``app_name`` attribute in the included URLconf "
"module, at the same level as the ``urlpatterns`` attribute. You have to pass"
" the actual module, or a string reference to the module, to "
":func:`~django.urls.include`, not the list of ``urlpatterns`` itself."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:853
msgid ""
"The URLs defined in ``polls.urls`` will have an application namespace "
"``polls``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:855
msgid ""
"Secondly, you can include an object that contains embedded namespace data. "
"If you ``include()`` a list of :func:`~django.urls.path` or "
":func:`~django.urls.re_path` instances, the URLs contained in that object "
"will be added to the global namespace. However, you can also ``include()`` a"
" 2-tuple containing::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:878
msgid ""
"This will include the nominated URL patterns into the given application "
"namespace."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/urls.txt:881
msgid ""
"The instance namespace can be specified using the ``namespace`` argument to "
":func:`~django.urls.include`. If the instance namespace is not specified, it"
" will default to the included URLconf's application namespace. This means it"
" will also be the default instance for that namespace."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:3
msgid "Writing views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:5
msgid ""
"A view function, or *view* for short, is simply a Python function that takes"
" a Web request and returns a Web response. This response can be the HTML "
"contents of a Web page, or a redirect, or a 404 error, or an XML document, "
"or an image . . . or anything, really. The view itself contains whatever "
"arbitrary logic is necessary to return that response. This code can live "
"anywhere you want, as long as it's on your Python path. There's no other "
"requirement--no \"magic,\" so to speak. For the sake of putting the code "
"*somewhere*, the convention is to put views in a file called ``views.py``, "
"placed in your project or application directory."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:16
msgid "A simple view"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:18
msgid ""
"Here's a view that returns the current date and time, as an HTML document::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:28
msgid "Let's step through this code one line at a time:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:30
msgid ""
"First, we import the class :class:`~django.http.HttpResponse` from the "
":mod:`django.http` module, along with Python's ``datetime`` library."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:33
msgid ""
"Next, we define a function called ``current_datetime``. This is the view "
"function. Each view function takes an :class:`~django.http.HttpRequest` "
"object as its first parameter, which is typically named ``request``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:37
msgid ""
"Note that the name of the view function doesn't matter; it doesn't have to "
"be named in a certain way in order for Django to recognize it. We're calling"
" it ``current_datetime`` here, because that name clearly indicates what it "
"does."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:42
msgid ""
"The view returns an :class:`~django.http.HttpResponse` object that contains "
"the generated response. Each view function is responsible for returning an "
":class:`~django.http.HttpResponse` object. (There are exceptions, but we'll "
"get to those later.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:47
msgid "Django's Time Zone"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:49
msgid ""
"Django includes a :setting:`TIME_ZONE` setting that defaults to "
"``America/Chicago``. This probably isn't where you live, so you might want "
"to change it in your settings file."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:54
msgid "Mapping URLs to views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:56
msgid ""
"So, to recap, this view function returns an HTML page that includes the "
"current date and time. To display this view at a particular URL, you'll need"
" to create a *URLconf*; see :doc:`/topics/http/urls` for instructions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:61
msgid "Returning errors"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:63
msgid ""
"Returning HTTP error codes in Django is easy. There are subclasses of "
":class:`~django.http.HttpResponse` for a number of common HTTP status codes "
"other than 200 (which means *\"OK\"*). You can find the full list of "
"available subclasses in the :ref:`request/response <ref-httpresponse-"
"subclasses>` documentation.  Just return an instance of one of those "
"subclasses instead of a normal :class:`~django.http.HttpResponse` in order "
"to signify an error. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:80
msgid ""
"There isn't a specialized subclass for every possible HTTP response code, "
"since many of them aren't going to be that common. However, as documented in"
" the :class:`~django.http.HttpResponse` documentation, you can also pass the"
" HTTP status code into the constructor for "
":class:`~django.http.HttpResponse` to create a return class for any status "
"code you like. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:94
msgid ""
"Because 404 errors are by far the most common HTTP error, there's an easier "
"way to handle those errors."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:98
msgid "The ``Http404`` exception"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:102
msgid ""
"When you return an error such as :class:`~django.http.HttpResponseNotFound`,"
" you're responsible for defining the HTML of the resulting error page::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:107
msgid ""
"For convenience, and because it's a good idea to have a consistent 404 error"
" page across your site, Django provides an ``Http404`` exception. If you "
"raise ``Http404`` at any point in a view function, Django will catch it and "
"return the standard error page for your application, along with an HTTP "
"error code 404."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:125
msgid ""
"In order to show customized HTML when Django returns a 404, you can create "
"an HTML template named ``404.html`` and place it in the top level of your "
"template tree. This template will then be served when :setting:`DEBUG` is "
"set to ``False``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:130
msgid ""
"When :setting:`DEBUG` is ``True``, you can provide a message to ``Http404`` "
"and it will appear in the standard 404 debug template. Use these messages "
"for debugging purposes; they generally aren't suitable for use in a "
"production 404 template."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:138
msgid "Customizing error views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:140
msgid ""
"The default error views in Django should suffice for most Web applications, "
"but can easily be overridden if you need any custom behavior. Simply specify"
" the handlers as seen below in your URLconf (setting them anywhere else will"
" have no effect)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:145
msgid ""
"The :func:`~django.views.defaults.page_not_found` view is overridden by "
":data:`~django.conf.urls.handler404`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:150
msgid ""
"The :func:`~django.views.defaults.server_error` view is overridden by "
":data:`~django.conf.urls.handler500`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:155
msgid ""
"The :func:`~django.views.defaults.permission_denied` view is overridden by "
":data:`~django.conf.urls.handler403`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:160
msgid ""
"The :func:`~django.views.defaults.bad_request` view is overridden by "
":data:`~django.conf.urls.handler400`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:167
msgid ""
"Use the :setting:`CSRF_FAILURE_VIEW` setting to override the CSRF error "
"view."
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:171
msgid "Testing custom error views"
msgstr ""

#: ../../../../sources/2.2/docs/topics/http/views.txt:173
msgid ""
"To test the response of a custom error handler, raise the appropriate "
"exception in a test view. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:3
msgid "Format localization"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:8
msgid ""
"Django's formatting system is capable of displaying dates, times and numbers"
" in templates using the format specified for the current :term:`locale "
"<locale name>`. It also handles localized input in forms."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:12
msgid ""
"When it's enabled, two users accessing the same content may see dates, times"
" and numbers formatted in different ways, depending on the formats for their"
" current locale."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:16
msgid ""
"The formatting system is disabled by default. To enable it, it's necessary "
"to set :setting:`USE_L10N = True <USE_L10N>` in your settings file."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:21
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` includes :setting:`USE_L10N = True <USE_L10N>` "
"for convenience.  Note, however, that to enable number formatting with "
"thousand separators it is necessary to set :setting:`USE_THOUSAND_SEPARATOR "
"= True <USE_THOUSAND_SEPARATOR>` in your settings file. Alternatively, you "
"could use :tfilter:`intcomma` to format numbers in your template."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:30
msgid ""
"There is also an independent but related :setting:`USE_I18N` setting that "
"controls if Django should activate translation. See "
":doc:`/topics/i18n/translation` for more details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:35
msgid "Locale aware input in forms"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:37
msgid ""
"When formatting is enabled, Django can use localized formats when parsing "
"dates, times and numbers in forms. That means it tries different formats for"
" different locales when guessing the format used by the user when inputting "
"data on forms."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:42
msgid ""
"Django uses different formats for displaying data to those it uses for "
"parsing data. Most notably, the formats for parsing dates can't use the "
"``%a`` (abbreviated weekday name), ``%A`` (full weekday name), ``%b`` "
"(abbreviated month name), ``%B`` (full month name), or ``%p`` (AM/PM)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:48
msgid ""
"To enable a form field to localize input and output data simply use its "
"``localize`` argument::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:58
msgid "Controlling localization in templates"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:60
msgid ""
"When you have enabled formatting with :setting:`USE_L10N`, Django will try "
"to use a locale specific format whenever it outputs a value in a template."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:64
msgid ""
"However, it may not always be appropriate to use localized values -- for "
"example, if you're outputting JavaScript or XML that is designed to be "
"machine-readable, you will always want unlocalized values. You may also want"
" to use localization in selected templates, rather than using localization "
"everywhere."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:70
msgid ""
"To allow for fine control over the use of localization, Django provides the "
"``l10n`` template library that contains the following tags and filters."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:75
#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:248
msgid "Template tags"
msgstr "模板标签"

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:80
#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:114
msgid "``localize``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:82
msgid ""
"Enables or disables localization of template variables in the contained "
"block."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:85
msgid ""
"This tag allows a more fine grained control of localization than "
":setting:`USE_L10N`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:88
msgid "To activate or deactivate localization for a template block, use::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:102
msgid ""
"The value of :setting:`USE_L10N` isn't respected inside of a ``{% localize "
"%}`` block."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:105
msgid ""
"See :tfilter:`localize` and :tfilter:`unlocalize` for template filters that "
"will do the same job on a per-variable basis."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:109
#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:314
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:950
msgid "Template filters"
msgstr "模板过滤器"

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:116
msgid "Forces localization of a single value."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:124
msgid ""
"To disable localization on a single value, use :tfilter:`unlocalize`. To "
"control localization over a large section of a template, use the "
":ttag:`localize` template tag."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:131
msgid "``unlocalize``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:133
msgid "Forces a single value to be printed without localization."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:141
msgid ""
"To force localization of a single value, use :tfilter:`localize`. To control"
" localization over a large section of a template, use the :ttag:`localize` "
"template tag."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:148
msgid "Creating custom format files"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:150
msgid ""
"Django provides format definitions for many locales, but sometimes you might"
" want to create your own, because a format files doesn't exist for your "
"locale, or because you want to overwrite some of the values."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:154
msgid ""
"To use custom formats, specify the path where you'll place format files "
"first. To do that, just set your :setting:`FORMAT_MODULE_PATH` setting to "
"the package where format files will exist, for instance::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:163
msgid ""
"Files are not placed directly in this directory, but in a directory named as"
" the locale, and must be named ``formats.py``. Be careful not to put "
"sensitive information in these files as values inside can be exposed if you "
"pass the string to ``django.utils.formats.get_format()`` (used by the "
":tfilter:`date` template filter)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:169
msgid ""
"To customize the English formats, a structure like this would be needed::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:178
msgid ""
"where :file:`formats.py` contains custom format definitions. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:182
msgid ""
"to use a non-breaking space (Unicode ``00A0``) as a thousand separator, "
"instead of the default for English, a comma."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:186
msgid "Limitations of the provided locale formats"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:188
msgid ""
"Some locales use context-sensitive formats for numbers, which Django's "
"localization system cannot handle automatically."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:192
msgid "Switzerland (German)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/formatting.txt:194
msgid ""
"The Swiss number formatting depends on the type of number that is being "
"formatted. For monetary values, a comma is used as the thousand separator "
"and a decimal point for the decimal separator. For all other numbers, a "
"comma is used as decimal separator and a space as thousand separator. The "
"locale format provided by Django uses the generic separators, a comma for "
"decimal and a space for thousand separators."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:3
msgid "Internationalization and localization"
msgstr "国际化和本地化"

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:16
msgid ""
"The goal of internationalization and localization is to allow a single Web "
"application to offer its content in languages and formats tailored to the "
"audience."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:20
msgid ""
"Django has full support for :doc:`translation of text "
"</topics/i18n/translation>`, :doc:`formatting of dates, times and numbers "
"</topics/i18n/formatting>`, and :doc:`time zones </topics/i18n/timezones>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:24
msgid "Essentially, Django does two things:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:26
msgid ""
"It allows developers and template authors to specify which parts of their "
"apps should be translated or formatted for local languages and cultures."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:28
msgid ""
"It uses these hooks to localize Web apps for particular users according to "
"their preferences."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:31
msgid ""
"Obviously, translation depends on the target language, and formatting "
"usually depends on the target country. This information is provided by "
"browsers in the ``Accept-Language`` header. However, the time zone isn't "
"readily available."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:36
msgid "Definitions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:38
msgid ""
"The words \"internationalization\" and \"localization\" often cause "
"confusion; here's a simplified definition:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:42
msgid "internationalization"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:44
msgid "Preparing the software for localization. Usually done by developers."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:45
msgid "localization"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:47
msgid ""
"Writing the translations and local formats. Usually done by translators."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:49
msgid ""
"More details can be found in the `W3C Web Internationalization FAQ`_, the "
"`Wikipedia article`_ or the `GNU gettext documentation`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:57
msgid ""
"Translation and formatting are controlled by :setting:`USE_I18N` and "
":setting:`USE_L10N` settings respectively. However, both features involve "
"internationalization and localization. The names of the settings are an "
"unfortunate result of Django's history."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:62
msgid ""
"Here are some other terms that will help us to handle a common language:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:65
msgid "locale name"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:67
msgid ""
"A locale name, either a language specification of the form ``ll`` or a "
"combined language and country specification of the form ``ll_CC``. Examples:"
" ``it``, ``de_AT``, ``es``, ``pt_BR``. The language part is always in "
"lowercase and the country part in upper case. The separator is an "
"underscore."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:72
msgid "language code"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:74
msgid ""
"Represents the name of a language. Browsers send the names of the languages "
"they accept in the ``Accept-Language`` HTTP header using this format. "
"Examples: ``it``, ``de-at``, ``es``, ``pt-br``. Language codes are generally"
" represented in lowercase, but the HTTP ``Accept-Language`` header is case-"
"insensitive. The separator is a dash."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:79
msgid "message file"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:81
msgid ""
"A message file is a plain-text file, representing a single language, that "
"contains all available :term:`translation strings <translation string>` and "
"how they should be represented in the given language. Message files have a "
"``.po`` file extension."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:85
msgid "translation string"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:87
msgid "A literal that can be translated."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:88
msgid "format file"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/index.txt:90
msgid ""
"A format file is a Python module that defines the data formats for a given "
"locale."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:3
msgid "Time zones"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:10
msgid ""
"When support for time zones is enabled, Django stores datetime information "
"in UTC in the database, uses time-zone-aware datetime objects internally, "
"and translates them to the end user's time zone in templates and forms."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:14
msgid ""
"This is handy if your users live in more than one time zone and you want to "
"display datetime information according to each user's wall clock."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:17
msgid ""
"Even if your website is available in only one time zone, it's still good "
"practice to store data in UTC in your database. The main reason is Daylight "
"Saving Time (DST). Many countries have a system of DST, where clocks are "
"moved forward in spring and backward in autumn. If you're working in local "
"time, you're likely to encounter errors twice a year, when the transitions "
"happen. (The pytz_ documentation discusses `these issues`_ in greater "
"detail.) This probably doesn't matter for your blog, but it's a problem if "
"you over-bill or under-bill your customers by one hour, twice a year, every "
"year. The solution to this problem is to use UTC in the code and use local "
"time only when interacting with end users."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:28
msgid ""
"Time zone support is disabled by default. To enable it, set :setting:`USE_TZ"
" = True <USE_TZ>` in your settings file. Time zone support uses pytz_, which"
" is installed when you install Django."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:34
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` includes :setting:`USE_TZ = True <USE_TZ>` for "
"convenience."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:40
msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls whether Django should activate format localization. See "
":doc:`/topics/i18n/formatting` for more details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:44
msgid ""
"If you're wrestling with a particular problem, start with the :ref:`time "
"zone FAQ <time-zones-faq>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:48
msgid "Concepts"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:53
msgid "Naive and aware datetime objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:55
msgid ""
"Python's :class:`datetime.datetime` objects have a ``tzinfo`` attribute that"
" can be used to store time zone information, represented as an instance of a"
" subclass of :class:`datetime.tzinfo`. When this attribute is set and "
"describes an offset, a datetime object is **aware**. Otherwise, it's "
"**naive**."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:60
msgid ""
"You can use :func:`~django.utils.timezone.is_aware` and "
":func:`~django.utils.timezone.is_naive` to determine whether datetimes are "
"aware or naive."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:64
msgid ""
"When time zone support is disabled, Django uses naive datetime objects in "
"local time. This is simple and sufficient for many use cases. In this mode, "
"to obtain the current time, you would write::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:72
msgid ""
"When time zone support is enabled (:setting:`USE_TZ=True <USE_TZ>`), Django "
"uses time-zone-aware datetime objects. If your code creates datetime "
"objects, they should be aware too. In this mode, the example above becomes::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:82
msgid ""
"Dealing with aware datetime objects isn't always intuitive. For instance, "
"the ``tzinfo`` argument of the standard datetime constructor doesn't work "
"reliably for time zones with DST. Using UTC is generally safe; if you're "
"using other time zones, you should review the `pytz`_ documentation "
"carefully."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:90
msgid ""
"Python's :class:`datetime.time` objects also feature a ``tzinfo`` attribute,"
" and PostgreSQL has a matching ``time with time zone`` type. However, as "
"PostgreSQL's docs put it, this type \"exhibits properties which lead to "
"questionable usefulness\"."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:95
msgid ""
"Django only supports naive time objects and will raise an exception if you "
"attempt to save an aware time object, as a timezone for a time with no "
"associated date does not make sense."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:102
msgid "Interpretation of naive datetime objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:104
msgid ""
"When :setting:`USE_TZ` is ``True``, Django still accepts naive datetime "
"objects, in order to preserve backwards-compatibility. When the database "
"layer receives one, it attempts to make it aware by interpreting it in the "
":ref:`default time zone <default-current-time-zone>` and raises a warning."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:109
msgid ""
"Unfortunately, during DST transitions, some datetimes don't exist or are "
"ambiguous. In such situations, pytz_ raises an exception. That's why you "
"should always create aware datetime objects when time zone support is "
"enabled."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:113
msgid ""
"In practice, this is rarely an issue. Django gives you aware datetime "
"objects in the models and forms, and most often, new datetime objects are "
"created from existing ones through :class:`~datetime.timedelta` arithmetic. "
"The only datetime that's often created in application code is the current "
"time, and :func:`timezone.now() <django.utils.timezone.now>` automatically "
"does the right thing."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:123
msgid "Default time zone and current time zone"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:125
msgid ""
"The **default time zone** is the time zone defined by the "
":setting:`TIME_ZONE` setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:128
msgid "The **current time zone** is the time zone that's used for rendering."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:130
msgid ""
"You should set the current time zone to the end user's actual time zone with"
" :func:`~django.utils.timezone.activate`. Otherwise, the default time zone "
"is used."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:136
msgid ""
"As explained in the documentation of :setting:`TIME_ZONE`, Django sets "
"environment variables so that its process runs in the default time zone. "
"This happens regardless of the value of :setting:`USE_TZ` and of the current"
" time zone."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:141
msgid ""
"When :setting:`USE_TZ` is ``True``, this is useful to preserve backwards-"
"compatibility with applications that still rely on local time. However, "
":ref:`as explained above <naive-datetime-objects>`, this isn't entirely "
"reliable, and you should always work with aware datetimes in UTC in your own"
" code. For instance, use :meth:`~datetime.datetime.fromtimestamp` and set "
"the ``tz`` parameter to :data:`~django.utils.timezone.utc`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:149
msgid "Selecting the current time zone"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:151
msgid ""
"The current time zone is the equivalent of the current :term:`locale <locale"
" name>` for translations. However, there's no equivalent of the ``Accept-"
"Language`` HTTP header that Django could use to determine the user's time "
"zone automatically. Instead, Django provides :ref:`time zone selection "
"functions <time-zone-selection-functions>`. Use them to build the time zone "
"selection logic that makes sense for you."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:158
msgid ""
"Most websites that care about time zones just ask users in which time zone "
"they live and store this information in the user's profile. For anonymous "
"users, they use the time zone of their primary audience or UTC. pytz_ "
"provides helpers_, like a list of time zones per country, that you can use "
"to pre-select the most likely choices."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:164
msgid ""
"Here's an example that stores the current timezone in the session. (It skips"
" error handling entirely for the sake of simplicity.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:167
msgid "Add the following middleware to :setting:`MIDDLEWARE`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:182
msgid "Create a view that can set the current timezone::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:193
msgid "Include a form in ``template.html`` that will ``POST`` to this view:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:213
msgid "Time zone aware input in forms"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:215
msgid ""
"When you enable time zone support, Django interprets datetimes entered in "
"forms in the :ref:`current time zone <default-current-time-zone>` and "
"returns aware datetime objects in ``cleaned_data``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:219
msgid ""
"If the current time zone raises an exception for datetimes that don't exist "
"or are ambiguous because they fall in a DST transition (the timezones "
"provided by pytz_ do this), such datetimes will be reported as invalid "
"values."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:226
msgid "Time zone aware output in templates"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:228
msgid ""
"When you enable time zone support, Django converts aware datetime objects to"
" the :ref:`current time zone <default-current-time-zone>` when they're "
"rendered in templates. This behaves very much like :doc:`format localization"
" </topics/i18n/formatting>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:235
msgid ""
"Django doesn't convert naive datetime objects, because they could be "
"ambiguous, and because your code should never produce naive datetimes when "
"time zone support is enabled. However, you can force conversion with the "
"template filters described below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:240
msgid ""
"Conversion to local time isn't always appropriate -- you may be generating "
"output for computers rather than for humans. The following filters and tags,"
" provided by the ``tz`` template tag library, allow you to control the time "
"zone conversions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:253
#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:323
msgid "``localtime``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:255
msgid ""
"Enables or disables conversion of aware datetime objects to the current time"
" zone in the contained block."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:258
msgid ""
"This tag has exactly the same effects as the :setting:`USE_TZ` setting as "
"far as the template engine is concerned. It allows a more fine grained "
"control of conversion."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:262
msgid "To activate or deactivate conversion for a template block, use::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:276
msgid ""
"The value of :setting:`USE_TZ` isn't respected inside of a ``{% localtime "
"%}`` block."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:282
#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:349
msgid "``timezone``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:284
msgid ""
"Sets or unsets the current time zone in the contained block. When the "
"current time zone is unset, the default time zone applies."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:302
msgid "``get_current_timezone``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:304
msgid ""
"You can get the name of the current time zone using the "
"``get_current_timezone`` tag::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:309
msgid ""
"Alternatively, you can activate the "
":func:`~django.template.context_processors.tz` context processor and use the"
" ``TIME_ZONE`` context variable."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:316
msgid ""
"These filters accept both aware and naive datetimes. For conversion "
"purposes, they assume that naive datetimes are in the default time zone. "
"They always return aware datetimes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:325
msgid "Forces conversion of a single value to the current time zone."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:336
msgid "``utc``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:338
msgid "Forces conversion of a single value to UTC."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:351
msgid "Forces conversion of a single value to an arbitrary timezone."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:353
msgid ""
"The argument must be an instance of a :class:`~datetime.tzinfo` subclass or "
"a time zone name."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:367
msgid "Migration guide"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:369
msgid ""
"Here's how to migrate a project that was started before Django supported "
"time zones."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:373
msgid "Database"
msgstr "数据库"

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:376
#: ../../../../sources/2.2/docs/topics/migrations.txt:67
msgid "PostgreSQL"
msgstr "PostgreSQL"

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:378
msgid ""
"The PostgreSQL backend stores datetimes as ``timestamp with time zone``. In "
"practice, this means it converts datetimes from the connection's time zone "
"to UTC on storage, and from UTC to the connection's time zone on retrieval."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:382
msgid ""
"As a consequence, if you're using PostgreSQL, you can switch between "
"``USE_TZ = False`` and ``USE_TZ = True`` freely. The database connection's "
"time zone will be set to :setting:`TIME_ZONE` or ``UTC`` respectively, so "
"that Django obtains correct datetimes in all cases. You don't need to "
"perform any data conversions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:389
msgid "Other databases"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:391
msgid ""
"Other backends store datetimes without time zone information. If you switch "
"from ``USE_TZ = False`` to ``USE_TZ = True``, you must convert your data "
"from local time to UTC -- which isn't deterministic if your local time has "
"DST."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:396
msgid "Code"
msgstr "邮政编码"

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:398
msgid ""
"The first step is to add :setting:`USE_TZ = True <USE_TZ>` to your settings "
"file. At this point, things should mostly work. If you create naive datetime"
" objects in your code, Django makes them aware when necessary."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:402
msgid ""
"However, these conversions may fail around DST transitions, which means you "
"aren't getting the full benefits of time zone support yet. Also, you're "
"likely to run into a few problems because it's impossible to compare a naive"
" datetime with an aware datetime. Since Django now gives you aware "
"datetimes, you'll get exceptions wherever you compare a datetime that comes "
"from a model or a form with a naive datetime that you've created in your "
"code."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:409
msgid ""
"So the second step is to refactor your code wherever you instantiate "
"datetime objects to make them aware. This can be done incrementally. "
":mod:`django.utils.timezone` defines some handy helpers for compatibility "
"code: :func:`~django.utils.timezone.now`, "
":func:`~django.utils.timezone.is_aware`, "
":func:`~django.utils.timezone.is_naive`, "
":func:`~django.utils.timezone.make_aware`, and "
":func:`~django.utils.timezone.make_naive`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:418
msgid ""
"Finally, in order to help you locate code that needs upgrading, Django "
"raises a warning when you attempt to save a naive datetime to the database::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:424
msgid ""
"During development, you can turn such warnings into exceptions and get a "
"traceback by adding the following to your settings file::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:434
msgid "Fixtures"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:436
msgid ""
"When serializing an aware datetime, the UTC offset is included, like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:440
msgid "For a naive datetime, it obviously isn't::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:444
msgid ""
"For models with :class:`~django.db.models.DateTimeField`\\ s, this "
"difference makes it impossible to write a fixture that works both with and "
"without time zone support."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:448
msgid ""
"Fixtures generated with ``USE_TZ = False``, or before Django 1.4, use the "
"\"naive\" format. If your project contains such fixtures, after you enable "
"time zone support, you'll see :exc:`RuntimeWarning`\\ s when you load them. "
"To get rid of the warnings, you must convert your fixtures to the \"aware\" "
"format."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:453
msgid ""
"You can regenerate fixtures with :djadmin:`loaddata` then "
":djadmin:`dumpdata`. Or, if they're small enough, you can simply edit them "
"to add the UTC offset that matches your :setting:`TIME_ZONE` to each "
"serialized datetime."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:460
msgid "FAQ"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:463
msgid "Setup"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:465
msgid ""
"**I don't need multiple time zones. Should I enable time zone support?**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:467
msgid ""
"Yes. When time zone support is enabled, Django uses a more accurate model of"
" local time. This shields you from subtle and unreproducible bugs around "
"Daylight Saving Time (DST) transitions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:471
msgid ""
"When you enable time zone support, you'll encounter some errors because "
"you're using naive datetimes where Django expects aware datetimes. Such "
"errors show up when running tests and they're easy to fix. You'll quickly "
"learn how to avoid invalid operations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:476
msgid ""
"On the other hand, bugs caused by the lack of time zone support are much "
"harder to prevent, diagnose and fix. Anything that involves scheduled tasks "
"or datetime arithmetic is a candidate for subtle bugs that will bite you "
"only once or twice a year."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:481
msgid ""
"For these reasons, time zone support is enabled by default in new projects, "
"and you should keep it unless you have a very good reason not to."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:484
msgid "**I've enabled time zone support. Am I safe?**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:486
msgid ""
"Maybe. You're better protected from DST-related bugs, but you can still "
"shoot yourself in the foot by carelessly turning naive datetimes into aware "
"datetimes, and vice-versa."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:490
msgid ""
"If your application connects to other systems -- for instance, if it queries"
" a Web service -- make sure datetimes are properly specified. To transmit "
"datetimes safely, their representation should include the UTC offset, or "
"their values should be in UTC (or both!)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:495
msgid ""
"Finally, our calendar system contains interesting traps for computers::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:507
msgid ""
"(To implement this function, you must decide whether 2012-02-29 minus one "
"year is 2011-02-28 or 2011-03-01, which depends on your business "
"requirements.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:511
msgid ""
"**How do I interact with a database that stores datetimes in local time?**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:513
msgid ""
"Set the :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` option to the appropriate "
"time zone for this database in the :setting:`DATABASES` setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:516
msgid ""
"This is useful for connecting to a database that doesn't support time zones "
"and that isn't managed by Django when :setting:`USE_TZ` is ``True``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:520
msgid "Troubleshooting"
msgstr "错误调试"

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:522
msgid ""
"**My application crashes with** ``TypeError: can't compare offset-naive`` "
"``and offset-aware datetimes`` **-- what's wrong?**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:525
msgid ""
"Let's reproduce this error by comparing a naive and an aware datetime::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:536
msgid ""
"If you encounter this error, most likely your code is comparing these two "
"things:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:539
msgid ""
"a datetime provided by Django -- for instance, a value read from a form or a"
" model field. Since you enabled time zone support, it's aware."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:541
msgid ""
"a datetime generated by your code, which is naive (or you wouldn't be "
"reading this)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:544
msgid ""
"Generally, the correct solution is to change your code to use an aware "
"datetime instead."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:547
msgid ""
"If you're writing a pluggable application that's expected to work "
"independently of the value of :setting:`USE_TZ`, you may find "
":func:`django.utils.timezone.now` useful. This function returns the current "
"date and time as a naive datetime when ``USE_TZ = False`` and as an aware "
"datetime when ``USE_TZ = True``. You can add or subtract "
":class:`datetime.timedelta` as needed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:554
msgid ""
"**I see lots of** ``RuntimeWarning: DateTimeField received a naive "
"datetime`` ``(YYYY-MM-DD HH:MM:SS)`` ``while time zone support is active`` "
"**-- is that bad?**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:558
msgid ""
"When time zone support is enabled, the database layer expects to receive "
"only aware datetimes from your code. This warning occurs when it receives a "
"naive datetime. This indicates that you haven't finished porting your code "
"for time zone support. Please refer to the :ref:`migration guide <time-"
"zones-migration-guide>` for tips on this process."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:564
msgid ""
"In the meantime, for backwards compatibility, the datetime is considered to "
"be in the default time zone, which is generally what you expect."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:567
msgid "``now.date()`` **is yesterday! (or tomorrow)**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:569
msgid ""
"If you've always used naive datetimes, you probably believe that you can "
"convert a datetime to a date by calling its :meth:`~datetime.datetime.date` "
"method. You also consider that a :class:`~datetime.date` is a lot like a "
":class:`~datetime.datetime`, except that it's less accurate."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:574
msgid "None of this is true in a time zone aware environment::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:592
msgid ""
"As this example shows, the same datetime has a different date, depending on "
"the time zone in which it is represented. But the real problem is more "
"fundamental."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:596
msgid ""
"A datetime represents a **point in time**. It's absolute: it doesn't depend "
"on anything. On the contrary, a date is a **calendaring concept**. It's a "
"period of time whose bounds depend on the time zone in which the date is "
"considered. As you can see, these two concepts are fundamentally different, "
"and converting a datetime to a date isn't a deterministic operation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:602
msgid "What does this mean in practice?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:604
msgid ""
"Generally, you should avoid converting a :class:`~datetime.datetime` to "
":class:`~datetime.date`. For instance, you can use the :tfilter:`date` "
"template filter to only show the date part of a datetime. This filter will "
"convert the datetime into the current time zone before formatting it, "
"ensuring the results appear correctly."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:610
msgid ""
"If you really need to do the conversion yourself, you must ensure the "
"datetime is converted to the appropriate time zone first. Usually, this will"
" be the current timezone::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:626
msgid ""
"**I get an error** \"``Are time zone definitions for your database "
"installed?``\""
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:629
msgid ""
"If you are using MySQL, see the :ref:`mysql-time-zone-definitions` section "
"of the MySQL notes for instructions on loading time zone definitions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:635
msgid ""
"**I have a string** ``\"2012-02-21 10:28:45\"`` **and I know it's in the** "
"``\"Europe/Helsinki\"`` **time zone. How do I turn that into an aware "
"datetime?**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:639
msgid "This is exactly what pytz_ is for."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:647
msgid ""
"Note that ``localize`` is a pytz extension to the :class:`~datetime.tzinfo` "
"API. Also, you may want to catch ``pytz.InvalidTimeError``. The "
"documentation of pytz contains `more examples`_. You should review it before"
" attempting to manipulate aware datetimes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:652
msgid "**How can I obtain the local time in the current time zone?**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:654
msgid "Well, the first question is, do you really need to?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:656
msgid ""
"You should only use local time when you're interacting with humans, and the "
"template layer provides :ref:`filters and tags <time-zones-in-templates>` to"
" convert datetimes to the time zone of your choice."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:660
msgid ""
"Furthermore, Python knows how to compare aware datetimes, taking into "
"account UTC offsets when necessary. It's much easier (and possibly faster) "
"to write all your model and view code in UTC. So, in most circumstances, the"
" datetime in UTC returned by :func:`django.utils.timezone.now` will be "
"sufficient."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:666
msgid ""
"For the sake of completeness, though, if you really want the local time in "
"the current time zone, here's how you can obtain it::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:673
msgid "In this example, the current time zone is ``\"Europe/Paris\"``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:675
msgid "**How can I see all available time zones?**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/timezones.txt:677
msgid ""
"pytz_ provides helpers_, including a list of current time zones and a list "
"of all available time zones -- some of which are only of historical "
"interest."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:3
msgid "Translation"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:10
msgid ""
"In order to make a Django project translatable, you have to add a minimal "
"number of hooks to your Python code and templates. These hooks are called "
":term:`translation strings <translation string>`. They tell Django: \"This "
"text should be translated into the end user's language, if a translation for"
" this text is available in that language.\" It's your responsibility to mark"
" translatable strings; the system can only translate strings it knows about."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:17
msgid ""
"Django then provides utilities to extract the translation strings into a "
":term:`message file`. This file is a convenient way for translators to "
"provide the equivalent of the translation strings in the target language. "
"Once the translators have filled in the message file, it must be compiled. "
"This process relies on the GNU gettext toolset."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:23
msgid ""
"Once this is done, Django takes care of translating Web apps on the fly in "
"each available language, according to users' language preferences."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:26
msgid ""
"Django's internationalization hooks are on by default, and that means "
"there's a bit of i18n-related overhead in certain places of the framework. "
"If you don't use internationalization, you should take the two seconds to "
"set :setting:`USE_I18N = False <USE_I18N>` in your settings file. Then "
"Django will make some optimizations so as not to load the "
"internationalization machinery."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:34
msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls if Django should implement format localization. See "
":doc:`/topics/i18n/formatting` for more details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:40
msgid ""
"Make sure you've activated translation for your project (the fastest way is "
"to check if :setting:`MIDDLEWARE` includes "
":mod:`django.middleware.locale.LocaleMiddleware`). If you haven't yet, see "
":ref:`how-django-discovers-language-preference`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:46
msgid "Internationalization: in Python code"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:49
msgid "Standard translation"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:51
msgid ""
"Specify a translation string by using the function "
":func:`~django.utils.translation.gettext`. It's convention to import this as"
" a shorter alias, ``_``, to save typing."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:56
msgid ""
"The ``u`` prefixing of ``gettext`` functions was originally to distinguish "
"usage between unicode strings and bytestrings on Python 2. For code that "
"supports only Python 3, they can be used interchangeably. A deprecation for "
"the prefixed functions may happen in a future Django release."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:62
msgid ""
"Python's standard library ``gettext`` module installs ``_()`` into the "
"global namespace, as an alias for ``gettext()``. In Django, we have chosen "
"not to follow this practice, for a couple of reasons:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:66
msgid ""
"Sometimes, you should use :func:`~django.utils.translation.gettext_lazy` as "
"the default translation method for a particular file. Without ``_()`` in the"
" global namespace, the developer has to think about which is the most "
"appropriate translation function."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:71
msgid ""
"The underscore character (``_``) is used to represent \"the previous "
"result\" in Python's interactive shell and doctest tests. Installing a "
"global ``_()`` function causes interference. Explicitly importing "
"``gettext()`` as ``_()`` avoids this problem."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:76
msgid "What functions may be aliased as ``_``?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:78
msgid ""
"Because of how ``xgettext`` (used by :djadmin:`makemessages`) works, only "
"functions that take a single string argument can be imported as ``_``:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:81
msgid ":func:`~django.utils.translation.gettext`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:82
msgid ":func:`~django.utils.translation.gettext_lazy`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:84
msgid ""
"In this example, the text ``\"Welcome to my site.\"`` is marked as a "
"translation string::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:94
msgid ""
"Obviously, you could code this without using the alias. This example is "
"identical to the previous one::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:104
msgid ""
"Translation works on computed values. This example is identical to the "
"previous two::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:112
msgid "Translation works on variables. Again, here's an identical example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:119
msgid ""
"(The caveat with using variables or computed values, as in the previous two "
"examples, is that Django's translation-string-detecting utility, :djadmin"
":`django-admin makemessages <makemessages>`, won't be able to find these "
"strings. More on :djadmin:`makemessages` later.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:124
msgid ""
"The strings you pass to ``_()`` or ``gettext()`` can take placeholders, "
"specified with Python's standard named-string interpolation syntax. "
"Example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:131
msgid ""
"This technique lets language-specific translations reorder the placeholder "
"text. For example, an English translation may be ``\"Today is November "
"26.\"``, while a Spanish translation may be ``\"Hoy es 26 de Noviembre.\"`` "
"-- with the month and the day placeholders swapped."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:136
msgid ""
"For this reason, you should use named-string interpolation (e.g., "
"``%(day)s``) instead of positional interpolation (e.g., ``%s`` or ``%d``) "
"whenever you have more than a single parameter. If you used positional "
"interpolation, translations wouldn't be able to reorder placeholder text."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:141
msgid ""
"Since string extraction is done by the ``xgettext`` command, only syntaxes "
"supported by ``gettext`` are supported by Django. Python :py:ref:`f-strings "
"<f-strings>` and `JavaScript template strings`_ are not yet supported by "
"``xgettext``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:151
msgid "Comments for translators"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:153
msgid ""
"If you would like to give translators hints about a translatable string, you"
" can add a comment prefixed with the ``Translators`` keyword on the line "
"preceding the string, e.g.::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:161
msgid ""
"The comment will then appear in the resulting ``.po`` file associated with "
"the translatable construct located below it and should also be displayed by "
"most translation tools."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:165
msgid ""
"Just for completeness, this is the corresponding fragment of the resulting "
"``.po`` file:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:175
msgid ""
"This also works in templates. See :ref:`translator-comments-in-templates` "
"for more details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:179
msgid "Marking strings as no-op"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:181
msgid ""
"Use the function :func:`django.utils.translation.gettext_noop()` to mark a "
"string as a translation string without translating it. The string is later "
"translated from a variable."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:185
msgid ""
"Use this if you have constant strings that should be stored in the source "
"language because they are exchanged over systems or users -- such as strings"
" in a database -- but should be translated at the last possible point in "
"time, such as when the string is presented to the user."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:191
msgid "Pluralization"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:193
msgid ""
"Use the function :func:`django.utils.translation.ngettext()` to specify "
"pluralized messages."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:196
msgid ""
"``ngettext()`` takes three arguments: the singular translation string, the "
"plural translation string and the number of objects."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:199
msgid ""
"This function is useful when you need your Django application to be "
"localizable to languages where the number and complexity of `plural forms "
"<https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_ is"
" greater than the two forms used in English ('object' for the singular and "
"'objects' for all the cases where ``count`` is different from one, "
"irrespective of its value.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:220
msgid ""
"In this example the number of objects is passed to the translation languages"
" as the ``count`` variable."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:223
msgid ""
"Note that pluralization is complicated and works differently in each "
"language. Comparing ``count`` to 1 isn't always the correct rule. This code "
"looks sophisticated, but will produce incorrect results for some languages::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:245
msgid ""
"Don't try to implement your own singular-or-plural logic; it won't be "
"correct. In a case like this, consider something like the following::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:261
msgid ""
"When using ``ngettext()``, make sure you use a single name for every "
"extrapolated variable included in the literal. In the examples above, note "
"how we used the ``name`` Python variable in both translation strings. This "
"example, besides being incorrect in some languages as noted above, would "
"fail::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:277
msgid ""
"You would get an error when running :djadmin:`django-admin compilemessages "
"<compilemessages>`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:282
msgid "Plural form and po files"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:284
msgid ""
"Django does not support custom plural equations in po files. As all "
"translation catalogs are merged, only the plural form for the main Django po"
" file (in ``django/conf/locale/<lang_code>/LC_MESSAGES/django.po``) is "
"considered. Plural forms in all other po files are ignored. Therefore, you "
"should not use different plural equations in your project or application po "
"files."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:294
msgid "Contextual markers"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:296
msgid ""
"Sometimes words have several meanings, such as ``\"May\"`` in English, which"
" refers to a month name and to a verb. To enable translators to translate "
"these words correctly in different contexts, you can use the "
":func:`django.utils.translation.pgettext()` function, or the "
":func:`django.utils.translation.npgettext()` function if the string needs "
"pluralization. Both take a context string as the first variable."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:303
msgid ""
"In the resulting ``.po`` file, the string will then appear as often as there"
" are different contextual markers for the same string (the context will "
"appear on the ``msgctxt`` line), allowing the translator to give a different"
" translation for each of them."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:314
msgid "or::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:323
msgid "will appear in the ``.po`` file as:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:331
msgid ""
"Contextual markers are also supported by the :ttag:`trans` and "
":ttag:`blocktrans` template tags."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:337
msgid "Lazy translation"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:339
msgid ""
"Use the lazy versions of translation functions in "
":mod:`django.utils.translation` (easily recognizable by the ``lazy`` suffix "
"in their names) to translate strings lazily -- when the value is accessed "
"rather than when they're called."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:344
msgid ""
"These functions store a lazy reference to the string -- not the actual "
"translation. The translation itself will be done when the string is used in "
"a string context, such as in template rendering."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:348
msgid ""
"This is essential when calls to these functions are located in code paths "
"that are executed at module load time."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:351
msgid ""
"This is something that can easily happen when defining models, forms and "
"model forms, because Django implements these such that their fields are "
"actually class-level attributes. For that reason, make sure to use lazy "
"translations in the following cases:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:357
msgid ""
"Model fields and relationships ``verbose_name`` and ``help_text`` option "
"values"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:359
msgid ""
"For example, to translate the help text of the *name* field in the following"
" model, do the following::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:368
msgid ""
"You can mark names of :class:`~django.db.models.ForeignKey`, "
":class:`~django.db.models.ManyToManyField` or "
":class:`~django.db.models.OneToOneField` relationship as translatable by "
"using their :attr:`~django.db.models.Options.verbose_name` options::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:381
msgid ""
"Just like you would do in :attr:`~django.db.models.Options.verbose_name` you"
" should provide a lowercase verbose name text for the relation as Django "
"will automatically titlecase it when required."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:386
msgid "Model verbose names values"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:388
msgid ""
"It is recommended to always provide explicit "
":attr:`~django.db.models.Options.verbose_name` and "
":attr:`~django.db.models.Options.verbose_name_plural` options rather than "
"relying on the fallback English-centric and somewhat naïve determination of "
"verbose names Django performs by looking at the model's class name::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:405
msgid "Model methods ``short_description`` attribute values"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:407
msgid ""
"For model methods, you can provide translations to Django and the admin site"
" with the ``short_description`` attribute::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:426
msgid "Working with lazy translation objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:428
msgid ""
"The result of a ``gettext_lazy()`` call can be used wherever you would use a"
" string (a :class:`str` object) in other Django code, but it may not work "
"with arbitrary Python code. For example, the following won't work because "
"the `requests <https://pypi.org/project/requests/>`_ library doesn't handle "
"``gettext_lazy`` objects::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:437
msgid ""
"You can avoid such problems by casting ``gettext_lazy()`` objects to text "
"strings before passing them to non-Django code::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:442
msgid ""
"If you don't like the long ``gettext_lazy`` name, you can just alias it as "
"``_`` (underscore), like so::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:451
msgid ""
"Using ``gettext_lazy()`` and ``ngettext_lazy()`` to mark strings in models "
"and utility functions is a common operation. When you're working with these "
"objects elsewhere in your code, you should ensure that you don't "
"accidentally convert them to strings, because they should be converted as "
"late as possible (so that the correct locale is in effect). This "
"necessitates the use of the helper function described next."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:461
msgid "Lazy translations and plural"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:463
msgid ""
"When using lazy translation for a plural string (``[u]n[p]gettext_lazy``), "
"you generally don't know the ``number`` argument at the time of the string "
"definition. Therefore, you are authorized to pass a key name instead of an "
"integer as the ``number`` argument. Then ``number`` will be looked up in the"
" dictionary under that key during string interpolation. Here's example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:481
msgid ""
"If the string contains exactly one unnamed placeholder, you can interpolate "
"directly with the ``number`` argument::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:497
msgid "Formatting strings: ``format_lazy()``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:499
msgid ""
"Python's :meth:`str.format()` method will not work when either the "
"``format_string`` or any of the arguments to :meth:`str.format()` contains "
"lazy translation objects. Instead, you can use "
":func:`django.utils.text.format_lazy()`, which creates a lazy object that "
"runs the ``str.format()`` method only when the result is included in a "
"string. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:513
msgid ""
"In this case, the lazy translations in ``result`` will only be converted to "
"strings when ``result`` itself is used in a string (usually at template "
"rendering time)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:518
msgid "Other uses of lazy in delayed translations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:520
msgid ""
"For any other case where you would like to delay the translation, but have "
"to pass the translatable string as argument to another function, you can "
"wrap this function inside a lazy call yourself. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:530
msgid "And then later::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:535
msgid "Localized names of languages"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:539
msgid ""
"The ``get_language_info()`` function provides detailed information about "
"languages::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:548
msgid ""
"The ``name``, ``name_local``, and ``name_translated`` attributes of the "
"dictionary contain the name of the language in English, in the language "
"itself, and in your current active language respectively.  The ``bidi`` "
"attribute is True only for bi-directional languages."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:553
msgid ""
"The source of the language information is the ``django.conf.locale`` module."
" Similar access to this information is available for template code. See "
"below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:559
msgid "Internationalization: in template code"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:563
msgid ""
"Translations in :doc:`Django templates </ref/templates/language>` uses two "
"template tags and a slightly different syntax than in Python code. To give "
"your template access to these tags, put ``{% load i18n %}`` toward the top "
"of your template. As with all template tags, this tag needs to be loaded in "
"all templates which use translations, even those templates that extend from "
"other templates which have already loaded the ``i18n`` tag."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:572
msgid ""
"Translated strings will not be escaped when rendered in a template. This "
"allows you to include HTML in translations, for example for emphasis, but "
"potentially dangerous characters (e.g. ``\"``) will also be rendered "
"unchanged."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:580
msgid "``trans`` template tag"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:582
msgid ""
"The ``{% trans %}`` template tag translates either a constant string "
"(enclosed in single or double quotes) or variable content::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:588
msgid ""
"If the ``noop`` option is present, variable lookup still takes place but the"
" translation is skipped. This is useful when \"stubbing out\" content that "
"will require translation in the future::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:594
msgid ""
"Internally, inline translations use an "
":func:`~django.utils.translation.gettext` call."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:597
msgid ""
"In case a template var (``myvar`` above) is passed to the tag, the tag will "
"first resolve such variable to a string at run-time and then look up that "
"string in the message catalogs."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:601
msgid ""
"It's not possible to mix a template variable inside a string within ``{% "
"trans %}``. If your translations require strings with variables "
"(placeholders), use :ttag:`{% blocktrans %}<blocktrans>` instead."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:606
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:717
msgid ""
"If you'd like to retrieve a translated string without displaying it, you can"
" use the following syntax::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:614
msgid ""
"In practice you'll use this to get a string you can use in multiple places "
"in a template or so you can use the output as an argument for other template"
" tags or filters::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:631
msgid ""
"``{% trans %}`` also supports :ref:`contextual markers<contextual-markers>` "
"using the ``context`` keyword:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:641
msgid "``blocktrans`` template tag"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:643
msgid ""
"Contrarily to the :ttag:`trans` tag, the ``blocktrans`` tag allows you to "
"mark complex sentences consisting of literals and variable content for "
"translation by making use of placeholders::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:649
msgid ""
"To translate a template expression -- say, accessing object attributes or "
"using template filters -- you need to bind the expression to a local "
"variable for use within the translation block. Examples::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:661
msgid "You can use multiple expressions inside a single ``blocktrans`` tag::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:667
msgid ""
"The previous more verbose format is still supported: ``{% blocktrans with "
"book|title as book_t and author|title as author_t %}``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:670
msgid ""
"Other block tags (for example ``{% for %}`` or ``{% if %}``) are not allowed"
" inside a ``blocktrans`` tag."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:673
msgid ""
"If resolving one of the block arguments fails, ``blocktrans`` will fall back"
" to the default language by deactivating the currently active language "
"temporarily with the :func:`~django.utils.translation.deactivate_all` "
"function."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:678
msgid "This tag also provides for pluralization. To use it:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:680
msgid ""
"Designate and bind a counter value with the name ``count``. This value will "
"be the one used to select the right plural form."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:683
msgid ""
"Specify both the singular and plural forms separating them with the ``{% "
"plural %}`` tag within the ``{% blocktrans %}`` and ``{% endblocktrans %}`` "
"tags."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:695
msgid "A more complex example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:703
msgid ""
"When you use both the pluralization feature and bind values to local "
"variables in addition to the counter value, keep in mind that the "
"``blocktrans`` construct is internally converted to an ``ngettext`` call. "
"This means the same :ref:`notes regarding ngettext variables <pluralization-"
"var-notes>` apply."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:709
msgid ""
"Reverse URL lookups cannot be carried out within the ``blocktrans`` and "
"should be retrieved (and stored) beforehand::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:724
msgid ""
"In practice you'll use this to get a string you can use in multiple places "
"in a template or so you can use the output as an argument for other template"
" tags or filters."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:728
msgid ""
"``{% blocktrans %}`` also supports :ref:`contextual markers<contextual-"
"markers>` using the ``context`` keyword:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:735
msgid ""
"Another feature ``{% blocktrans %}`` supports is the ``trimmed`` option. "
"This option will remove newline characters from the beginning and the end of"
" the content of the ``{% blocktrans %}`` tag, replace any whitespace at the "
"beginning and end of a line and merge all lines into one using a space "
"character to separate them. This is quite useful for indenting the content "
"of a ``{% blocktrans %}`` tag without having the indentation characters end "
"up in the corresponding entry in the PO file, which makes the translation "
"process easier."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:743
msgid "For instance, the following ``{% blocktrans %}`` tag::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:750
msgid ""
"will result in the entry ``\"First sentence. Second paragraph.\"`` in the PO"
" file, compared to ``\"\\n  First sentence.\\n  Second sentence.\\n\"``, if "
"the ``trimmed`` option had not been specified."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:755
msgid "String literals passed to tags and filters"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:757
msgid ""
"You can translate string literals passed as arguments to tags and filters by"
" using the familiar ``_()`` syntax::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:762
msgid ""
"In this case, both the tag and the filter will see the translated string, so"
" they don't need to be aware of translations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:766
msgid ""
"In this example, the translation infrastructure will be passed the string "
"``\"yes,no\"``, not the individual strings ``\"yes\"`` and ``\"no\"``. The "
"translated string will need to contain the comma so that the filter parsing "
"code knows how to split up the arguments. For example, a German translator "
"might translate the string ``\"yes,no\"`` as ``\"ja,nein\"`` (keeping the "
"comma intact)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:776
msgid "Comments for translators in templates"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:778
msgid ""
"Just like with :ref:`Python code <translator-comments>`, these notes for "
"translators can be specified using comments, either with the :ttag:`comment`"
" tag:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:791
msgid ""
"or with the ``{#`` ... ``#}`` :ref:`one-line comment constructs <template-"
"comments>`:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:801
msgid ""
"Just for completeness, these are the corresponding fragments of the "
"resulting ``.po`` file:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:833
msgid "Switching language in templates"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:835
msgid ""
"If you want to select a language within a template, you can use the "
"``language`` template tag:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:852
msgid ""
"While the first occurrence of \"Welcome to our page\" uses the current "
"language, the second will always be in English."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:858
msgid "Other tags"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:860
msgid "These tags also require a ``{% load i18n %}``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:865
msgid "``get_available_languages``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:867
msgid ""
"``{% get_available_languages as LANGUAGES %}`` returns a list of tuples in "
"which the first element is the :term:`language code` and the second is the "
"language name (translated into the currently active locale)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:874
msgid "``get_current_language``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:876
msgid ""
"``{% get_current_language as LANGUAGE_CODE %}`` returns the current user's "
"preferred language as a string. Example: ``en-us``. See :ref:`how-django-"
"discovers-language-preference`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:883
msgid "``get_current_language_bidi``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:885
msgid ""
"``{% get_current_language_bidi as LANGUAGE_BIDI %}`` returns the current "
"locale's direction. If ``True``, it's a right-to-left language, e.g. Hebrew,"
" Arabic. If ``False`` it's a left-to-right language, e.g. English, French, "
"German, etc."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:893
msgid "``i18n`` context processor"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:895
msgid ""
"If you enable the :class:`django.template.context_processors.i18n` context "
"processor, then each ``RequestContext`` will have access to ``LANGUAGES``, "
"``LANGUAGE_CODE``, and ``LANGUAGE_BIDI`` as defined above."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:902
msgid "``get_language_info``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:904
msgid ""
"You can also retrieve information about any of the available languages using"
" provided template tags and filters. To get information about a single "
"language, use the ``{% get_language_info %}`` tag::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:911
msgid "You can then access the information::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:922
msgid "``get_language_info_list``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:924
msgid ""
"You can also use the ``{% get_language_info_list %}`` template tag to "
"retrieve information for a list of languages (e.g. active languages as "
"specified in :setting:`LANGUAGES`). See :ref:`the section about the "
"set_language redirect view <set_language-redirect-view>` for an example of "
"how to display a language selector using ``{% get_language_info_list %}``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:930
msgid ""
"In addition to :setting:`LANGUAGES` style list of tuples, ``{% "
"get_language_info_list %}`` supports simple lists of language codes. If you "
"do this in your view:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:939
msgid "you can iterate over those languages in the template::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:952
msgid "There are also simple filters available for convenience:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:954
msgid "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:955
msgid "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:956
msgid "``{{ LANGUAGE_CODE|language_bidi }}`` (False)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:957
msgid ""
"``{{ LANGUAGE_CODE|language_name_translated }}`` (\"německy\", when active "
"language is Czech)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:960
msgid "Internationalization: in JavaScript code"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:964
msgid "Adding translations to JavaScript poses some problems:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:966
msgid "JavaScript code doesn't have access to a ``gettext`` implementation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:968
msgid ""
"JavaScript code doesn't have access to ``.po`` or ``.mo`` files; they need "
"to be delivered by the server."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:971
msgid ""
"The translation catalogs for JavaScript should be kept as small as possible."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:974
msgid ""
"Django provides an integrated solution for these problems: It passes the "
"translations into JavaScript, so you can call ``gettext``, etc., from within"
" JavaScript."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:978
msgid ""
"The main solution to these problems is the following ``JavaScriptCatalog`` "
"view, which generates a JavaScript code library with functions that mimic "
"the ``gettext`` interface, plus an array of translation strings."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:983
msgid "The ``JavaScriptCatalog`` view"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:989
msgid ""
"A view that produces a JavaScript code library with functions that mimic the"
" ``gettext`` interface, plus an array of translation strings."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:992
msgid "**Attributes**"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:996
msgid ""
"Translation domain containing strings to add in the view output. Defaults to"
" ``'djangojs'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1001
msgid ""
"A list of :attr:`application names <django.apps.AppConfig.name>` among "
"installed applications. Those apps should contain a ``locale`` directory. "
"All those catalogs plus all catalogs found in :setting:`LOCALE_PATHS` (which"
" are always included) are merged into one catalog. Defaults to ``None``, "
"which means that all available translations from all "
":setting:`INSTALLED_APPS` are provided in the JavaScript output."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1009
msgid "**Example with default values**::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1017
msgid "**Example with custom packages**::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1025
msgid ""
"If your root URLconf uses :func:`~django.conf.urls.i18n.i18n_patterns`, "
"``JavaScriptCatalog`` must also be wrapped by ``i18n_patterns()`` for the "
"catalog to be correctly generated."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1029
msgid "**Example with** ``i18n_patterns()``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1037
msgid ""
"The precedence of translations is such that the packages appearing later in "
"the ``packages`` argument have higher precedence than the ones appearing at "
"the beginning. This is important in the case of clashing translations for "
"the same literal."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1042
msgid ""
"If you use more than one ``JavaScriptCatalog`` view on a site and some of "
"them define the same strings, the strings in the catalog that was loaded "
"last take precedence."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1047
msgid "Using the JavaScript translation catalog"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1051
msgid ""
"To use the catalog, just pull in the dynamically generated script like this:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1057
msgid ""
"This uses reverse URL lookup to find the URL of the JavaScript catalog view."
" When the catalog is loaded, your JavaScript code can use the following "
"methods:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1060
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1070
msgid "``gettext``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1061
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1078
msgid "``ngettext``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1062
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1088
msgid "``interpolate``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1063
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1124
msgid "``get_format``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1064
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1153
msgid "``gettext_noop``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1065
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1164
msgid "``pgettext``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1066
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1173
msgid "``npgettext``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1067
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1185
msgid "``pluralidx``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1072
msgid ""
"The ``gettext`` function behaves similarly to the standard ``gettext`` "
"interface within your Python code::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1080
msgid ""
"The ``ngettext`` function provides an interface to pluralize words and "
"phrases::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1090
msgid ""
"The ``interpolate`` function supports dynamically populating a format "
"string. The interpolation syntax is borrowed from Python, so the "
"``interpolate`` function supports both positional and named interpolation:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1094
msgid ""
"Positional interpolation: ``obj`` contains a JavaScript Array object whose "
"elements values are then sequentially interpolated in their corresponding "
"``fmt`` placeholders in the same order they appear. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1104
msgid ""
"Named interpolation: This mode is selected by passing the optional boolean "
"``named`` parameter as ``true``. ``obj`` contains a JavaScript object or "
"associative array. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1117
msgid ""
"You shouldn't go over the top with string interpolation, though: this is "
"still JavaScript, so the code has to make repeated regular-expression "
"substitutions. This isn't as fast as string interpolation in Python, so keep"
" it to those cases where you really need it (for example, in conjunction "
"with ``ngettext`` to produce proper pluralizations)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1126
msgid ""
"The ``get_format`` function has access to the configured i18n formatting "
"settings and can retrieve the format string for a given setting name::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1132
msgid "It has access to the following settings:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1134
msgid ":setting:`DATE_FORMAT`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1135
msgid ":setting:`DATE_INPUT_FORMATS`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1136
msgid ":setting:`DATETIME_FORMAT`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1137
msgid ":setting:`DATETIME_INPUT_FORMATS`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1138
msgid ":setting:`DECIMAL_SEPARATOR`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1139
msgid ":setting:`FIRST_DAY_OF_WEEK`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1140
msgid ":setting:`MONTH_DAY_FORMAT`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1141
msgid ":setting:`NUMBER_GROUPING`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1142
msgid ":setting:`SHORT_DATE_FORMAT`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1143
msgid ":setting:`SHORT_DATETIME_FORMAT`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1144
msgid ":setting:`THOUSAND_SEPARATOR`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1145
msgid ":setting:`TIME_FORMAT`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1146
msgid ":setting:`TIME_INPUT_FORMATS`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1147
msgid ":setting:`YEAR_MONTH_FORMAT`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1149
msgid ""
"This is useful for maintaining formatting consistency with the Python-"
"rendered values."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1155
msgid ""
"This emulates the ``gettext`` function but does nothing, returning whatever "
"is passed to it::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1160
msgid ""
"This is useful for stubbing out portions of the code that will need "
"translation in the future."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1166
msgid ""
"The ``pgettext`` function behaves like the Python variant "
"(:func:`~django.utils.translation.pgettext()`), providing a contextually "
"translated word::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1175
msgid ""
"The ``npgettext`` function also behaves like the Python variant "
"(:func:`~django.utils.translation.npgettext()`), providing a **pluralized** "
"contextually translated word::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1187
msgid ""
"The ``pluralidx`` function works in a similar way to the "
":tfilter:`pluralize` template filter, determining if a given ``count`` "
"should use a plural form of a word or not::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1198
msgid ""
"In the simplest case, if no custom pluralization is needed, this returns "
"``false`` for the integer ``1`` and ``true`` for all other numbers."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1201
msgid ""
"However, pluralization is not this simple in all languages. If the language "
"does not support pluralization, an empty value is provided."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1204
msgid ""
"Additionally, if there are complex rules around pluralization, the catalog "
"view will render a conditional expression. This will evaluate to either a "
"``true`` (should pluralize) or ``false`` (should **not** pluralize) value."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1211
msgid "The ``JSONCatalog`` view"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1215
msgid ""
"In order to use another client-side library to handle translations, you may "
"want to take advantage of the ``JSONCatalog`` view. It's similar to "
":class:`~django.views.i18n.JavaScriptCatalog` but returns a JSON response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1219
msgid ""
"See the documentation for :class:`~django.views.i18n.JavaScriptCatalog` to "
"learn about possible values and use of the ``domain`` and ``packages`` "
"attributes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1223
msgid "The response format is as follows:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1240
msgid "Note on performance"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1242
msgid ""
"The various JavaScript/JSON i18n views generate the catalog from ``.mo`` "
"files on every request. Since its output is constant, at least for a given "
"version of a site, it's a good candidate for caching."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1246
msgid ""
"Server-side caching will reduce CPU load. It's easily implemented with the "
":func:`~django.views.decorators.cache.cache_page` decorator. To trigger "
"cache invalidation when your translations change, provide a version-"
"dependent key prefix, as shown in the example below, or map the view at a "
"version-dependent URL::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1262
msgid ""
"Client-side caching will save bandwidth and make your site load faster. If "
"you're using ETags "
"(:class:`~django.middleware.http.ConditionalGetMiddleware`), you're already "
"covered. Otherwise, you can apply :ref:`conditional decorators <conditional-"
"decorators>`. In the following example, the cache is invalidated whenever "
"you restart your application server::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1280
msgid ""
"You can even pre-generate the JavaScript catalog as part of your deployment "
"procedure and serve it as a static file. This radical technique is "
"implemented in django-statici18n_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1289
msgid "Internationalization: in URL patterns"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1293
msgid "Django provides two mechanisms to internationalize URL patterns:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1295
msgid ""
"Adding the language prefix to the root of the URL patterns to make it "
"possible for :class:`~django.middleware.locale.LocaleMiddleware` to detect "
"the language to activate from the requested URL."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1299
msgid ""
"Making URL patterns themselves translatable via the "
":func:`django.utils.translation.gettext_lazy()` function."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1304
msgid ""
"Using either one of these features requires that an active language be set "
"for each request; in other words, you need to have "
":class:`django.middleware.locale.LocaleMiddleware` in your "
":setting:`MIDDLEWARE` setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1310
msgid "Language prefix in URL patterns"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1314
msgid ""
"This function can be used in a root URLconf and Django will automatically "
"prepend the current active language code to all URL patterns defined within "
":func:`~django.conf.urls.i18n.i18n_patterns`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1318
msgid ""
"Setting ``prefix_default_language`` to ``False`` removes the prefix from the"
" default language (:setting:`LANGUAGE_CODE`). This can be useful when adding"
" translations to existing site so that the current URLs won't change."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1322
msgid "Example URL patterns::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1346
msgid ""
"After defining these URL patterns, Django will automatically add the "
"language prefix to the URL patterns that were added by the ``i18n_patterns``"
" function. Example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1363
msgid ""
"With ``prefix_default_language=False`` and  ``LANGUAGE_CODE='en'``, the URLs"
" will be::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1376
msgid ""
":func:`~django.conf.urls.i18n.i18n_patterns` is only allowed in a root "
"URLconf. Using it within an included URLconf will throw an "
":exc:`~django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1382
msgid ""
"Ensure that you don't have non-prefixed URL patterns that might collide with"
" an automatically-added language prefix."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1388
msgid "Translating URL patterns"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1390
msgid ""
"URL patterns can also be marked translatable using the "
":func:`~django.utils.translation.gettext_lazy` function. Example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1416
msgid ""
"After you've created the translations, the :func:`~django.urls.reverse` "
"function will return the URL in the active language. Example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1432
msgid ""
"In most cases, it's best to use translated URLs only within a language code "
"prefixed block of patterns (using "
":func:`~django.conf.urls.i18n.i18n_patterns`), to avoid the possibility that"
" a carelessly translated URL causes a collision with a non-translated URL "
"pattern."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1441
msgid "Reversing in templates"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1443
msgid ""
"If localized URLs get reversed in templates they always use the current "
"language. To link to a URL in another language use the :ttag:`language` "
"template tag. It enables the given language in the enclosed template "
"section:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1460
msgid ""
"The :ttag:`language` tag expects the language code as the only argument."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1465
msgid "Localization: how to create language files"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1467
msgid ""
"Once the string literals of an application have been tagged for later "
"translation, the translation themselves need to be written (or obtained). "
"Here's how that works."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1472
msgid "Message files"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1474
msgid ""
"The first step is to create a :term:`message file` for a new language. A "
"message file is a plain-text file, representing a single language, that "
"contains all available translation strings and how they should be "
"represented in the given language. Message files have a ``.po`` file "
"extension."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1479
msgid ""
"Django comes with a tool, :djadmin:`django-admin makemessages "
"<makemessages>`, that automates the creation and upkeep of these files."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1482
msgid "Gettext utilities"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1484
msgid ""
"The ``makemessages`` command (and ``compilemessages`` discussed later) use "
"commands from the GNU gettext toolset: ``xgettext``, ``msgfmt``, "
"``msgmerge`` and ``msguniq``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1488
msgid "The minimum version of the ``gettext`` utilities supported is 0.15."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1490
msgid "To create or update a message file, run this command::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1494
msgid ""
"...where ``de`` is the :term:`locale name` for the message file you want to "
"create. For example, ``pt_BR`` for Brazilian Portuguese, ``de_AT`` for "
"Austrian German or ``id`` for Indonesian."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1498
msgid "The script should be run from one of two places:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1500
msgid ""
"The root directory of your Django project (the one that contains "
"``manage.py``)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1502
msgid "The root directory of one of your Django apps."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1504
msgid ""
"The script runs over your project source tree or your application source "
"tree and pulls out all strings marked for translation (see :ref:`how-django-"
"discovers-translations` and be sure :setting:`LOCALE_PATHS` is configured "
"correctly). It creates (or updates) a message file in the directory "
"``locale/LANG/LC_MESSAGES``. In the ``de`` example, the file will be "
"``locale/de/LC_MESSAGES/django.po``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1511
msgid ""
"When you run ``makemessages`` from the root directory of your project, the "
"extracted strings will be automatically distributed to the proper message "
"files. That is, a string extracted from a file of an app containing a "
"``locale`` directory will go in a message file under that directory. A "
"string extracted from a file of an app without any ``locale`` directory will"
" either go in a message file under the directory listed first in "
":setting:`LOCALE_PATHS` or will generate an error if :setting:`LOCALE_PATHS`"
" is empty."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1519
msgid ""
"By default :djadmin:`django-admin makemessages <makemessages>` examines "
"every file that has the ``.html``, ``.txt`` or ``.py`` file extension. If "
"you want to override that default, use the :option:`--extension "
"<makemessages --extension>` or ``-e`` option to specify the file extensions "
"to examine::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1526
msgid ""
"Separate multiple extensions with commas and/or use ``-e`` or "
"``--extension`` multiple times::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1533
msgid ""
"When :ref:`creating message files from JavaScript source code <creating-"
"message-files-from-js-code>` you need to use the special ``djangojs`` "
"domain, **not** ``-e js``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1537
msgid "Using Jinja2 templates?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1539
msgid ""
":djadmin:`makemessages` doesn't understand the syntax of Jinja2 templates. "
"To extract strings from a project containing Jinja2 templates, use `Message "
"Extracting`_ from Babel_ instead."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1543
msgid "Here's an example ``babel.cfg`` configuration file::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1552
msgid ""
"Make sure you list all extensions you're using! Otherwise Babel won't "
"recognize the tags defined by these extensions and will ignore Jinja2 "
"templates containing them entirely."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1556
msgid ""
"Babel provides similar features to :djadmin:`makemessages`, can replace it "
"in general, and doesn't depend on ``gettext``. For more information, read "
"its documentation about `working with message catalogs`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1564
msgid "No gettext?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1566
msgid ""
"If you don't have the ``gettext`` utilities installed, "
":djadmin:`makemessages` will create empty files. If that's the case, either "
"install the ``gettext`` utilities or just copy the English message file "
"(``locale/en/LC_MESSAGES/django.po``) if available and use it as a starting "
"point; it's just an empty translation file."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1572
#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1645
msgid "Working on Windows?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1574
msgid ""
"If you're using Windows and need to install the GNU gettext utilities so "
":djadmin:`makemessages` works, see :ref:`gettext_on_windows` for more "
"information."
msgstr "如果你正在使用Windows并且需要安装 GNU gettext 程序以便 :djadmin:`makemessages` 工作，请参阅 :ref:`gettext_on_windows` 了解更多信息。"

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1578
msgid ""
"The format of ``.po`` files is straightforward. Each ``.po`` file contains a"
" small bit of metadata, such as the translation maintainer's contact "
"information, but the bulk of the file is a list of **messages** -- simple "
"mappings between translation strings and the actual translated text for the "
"particular language."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1584
msgid ""
"For example, if your Django app contained a translation string for the text "
"``\"Welcome to my site.\"``, like so::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1589
msgid ""
"...then :djadmin:`django-admin makemessages <makemessages>` will have "
"created a ``.po`` file containing the following snippet -- a message:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1598
msgid "A quick explanation:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1600
msgid ""
"``msgid`` is the translation string, which appears in the source. Don't "
"change it."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1602
msgid ""
"``msgstr`` is where you put the language-specific translation. It starts out"
" empty, so it's your responsibility to change it. Make sure you keep the "
"quotes around your translation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1605
msgid ""
"As a convenience, each message includes, in the form of a comment line "
"prefixed with ``#`` and located above the ``msgid`` line, the filename and "
"line number from which the translation string was gleaned."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1609
msgid ""
"Long messages are a special case. There, the first string directly after the"
" ``msgstr`` (or ``msgid``) is an empty string. Then the content itself will "
"be written over the next few lines as one string per line. Those strings are"
" directly concatenated. Don't forget trailing spaces within the strings; "
"otherwise, they'll be tacked together without whitespace!"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1615
msgid "Mind your charset"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1617
msgid ""
"Due to the way the ``gettext`` tools work internally and because we want to "
"allow non-ASCII source strings in Django's core and your applications, you "
"**must** use UTF-8 as the encoding for your PO files (the default when PO "
"files are created).  This means that everybody will be using the same "
"encoding, which is important when Django processes the PO files."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1623
msgid ""
"To reexamine all source code and templates for new translation strings and "
"update all message files for **all** languages, run this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1629
msgid "Compiling message files"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1631
msgid ""
"After you create your message file -- and each time you make changes to it "
"-- you'll need to compile it into a more efficient form, for use by "
"``gettext``. Do this with the :djadmin:`django-admin compilemessages "
"<compilemessages>` utility."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1636
msgid ""
"This tool runs over all available ``.po`` files and creates ``.mo`` files, "
"which are binary files optimized for use by ``gettext``. In the same "
"directory from which you ran :djadmin:`django-admin makemessages "
"<makemessages>`, run :djadmin:`django-admin compilemessages "
"<compilemessages>` like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1643
msgid "That's it. Your translations are ready for use."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1647
msgid ""
"If you're using Windows and need to install the GNU gettext utilities so "
":djadmin:`django-admin compilemessages <compilemessages>` works see "
":ref:`gettext_on_windows` for more information."
msgstr "如果你正在使用Windows并且需要安装 GNU gettext 程序以便 :djadmin:`django-admin compilemessages <compilemessages>` 工作，请参阅 :ref:`gettext_on_windows` 了解更多信息。"

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1651
msgid ".po files: Encoding and BOM usage."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1653
msgid ""
"Django only supports ``.po`` files encoded in UTF-8 and without any BOM "
"(Byte Order Mark) so if your text editor adds such marks to the beginning of"
" files by default then you will need to reconfigure it."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1658
msgid ""
"Troubleshooting: ``gettext()`` incorrectly detects ``python-format`` in "
"strings with percent signs"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1660
msgid ""
"In some cases, such as strings with a percent sign followed by a space and a"
" :ref:`string conversion type <old-string-formatting>` (e.g. ``_(\"10% "
"interest\")``), :func:`~django.utils.translation.gettext` incorrectly flags "
"strings with ``python-format``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1665
msgid ""
"If you try to compile message files with incorrectly flagged strings, you'll"
" get an error message like ``number of format specifications in 'msgid' and "
"'msgstr' does not match`` or ``'msgstr' is not a valid Python format string,"
" unlike 'msgid'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1670
msgid ""
"To workaround this, you can escape percent signs by adding a second percent "
"sign::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1676
msgid ""
"Or you can use ``no-python-format`` so that all percent signs are treated as"
" literals::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1685
msgid "Creating message files from JavaScript source code"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1687
msgid ""
"You create and update the message files the same way as the other Django "
"message files -- with the :djadmin:`django-admin makemessages "
"<makemessages>` tool. The only difference is you need to explicitly specify "
"what in gettext parlance is known as a domain in this case the ``djangojs`` "
"domain, by providing a ``-d djangojs`` parameter, like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1695
msgid ""
"This would create or update the message file for JavaScript for German. "
"After updating message files, just run :djadmin:`django-admin "
"compilemessages <compilemessages>` the same way as you do with normal Django"
" message files."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1702
msgid "``gettext`` on Windows"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1704
msgid ""
"This is only needed for people who either want to extract message IDs or "
"compile message files (``.po``). Translation work itself just involves "
"editing existing files of this type, but if you want to create your own "
"message files, or want to test or compile a changed message file, download "
"`a precompiled binary installer <https://mlocati.github.io/articles/gettext-"
"iconv-windows.html>`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1710
msgid ""
"You may also use ``gettext`` binaries you have obtained elsewhere, so long "
"as the ``xgettext --version`` command works properly. Do not attempt to use "
"Django translation utilities with a ``gettext`` package if the command "
"``xgettext --version`` entered at a Windows command prompt causes a popup "
"window saying \"xgettext.exe has generated errors and will be closed by "
"Windows\"."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1719
msgid "Customizing the ``makemessages`` command"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1721
msgid ""
"If you want to pass additional parameters to ``xgettext``, you need to "
"create a custom :djadmin:`makemessages` command and override its "
"``xgettext_options`` attribute::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1730
msgid ""
"If you need more flexibility, you could also add a new argument to your "
"custom :djadmin:`makemessages` command::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1755
msgid "Miscellaneous"
msgstr "杂项"

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1760
msgid "The ``set_language`` redirect view"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1766
msgid ""
"As a convenience, Django comes with a view, "
":func:`django.views.i18n.set_language`, that sets a user's language "
"preference and redirects to a given URL or, by default, back to the previous"
" page."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1770
msgid "Activate this view by adding the following line to your URLconf::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1774
msgid ""
"(Note that this example makes the view available at ``/i18n/setlang/``.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1778
msgid ""
"Make sure that you don't include the above URL within "
":func:`~django.conf.urls.i18n.i18n_patterns` - it needs to be language-"
"independent itself to work correctly."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1782
msgid ""
"The view expects to be called via the ``POST`` method, with a ``language`` "
"parameter set in request. If session support is enabled, the view saves the "
"language choice in the user's session. It also saves the language choice in "
"a cookie that is named ``django_language`` by default. (The name can be "
"changed through the :setting:`LANGUAGE_COOKIE_NAME` setting.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1790
msgid ""
"In older versions, the cookie is only set if session support isn't enabled."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1792
msgid ""
"After setting the language choice, Django looks for a ``next`` parameter in "
"the ``POST`` or ``GET`` data. If that is found and Django considers it to be"
" a safe URL (i.e. it doesn't point to a different host and uses a safe "
"scheme), a redirect to that URL will be performed. Otherwise, Django may "
"fall back to redirecting the user to the URL from the ``Referer`` header or,"
" if it is not set, to ``/``, depending on the nature of the request:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1799
msgid ""
"For AJAX requests, the fallback will be performed only if the ``next`` "
"parameter was set. Otherwise a 204 status code (No Content) will be "
"returned."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1801
msgid "For non-AJAX requests, the fallback will always be performed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1803
msgid "Here's example HTML template code:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1824
msgid ""
"In this example, Django looks up the URL of the page to which the user will "
"be redirected in the ``redirect_to`` context variable."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1830
msgid "Explicitly setting the active language"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1834
msgid ""
"You may want to set the active language for the current session explicitly. "
"Perhaps a user's language preference is retrieved from another system, for "
"example. You've already been introduced to "
":func:`django.utils.translation.activate()`. That applies to the current "
"thread only. To persist the language for the entire session, also modify "
":data:`~django.utils.translation.LANGUAGE_SESSION_KEY` in the session::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1846
msgid ""
"You would typically want to use both: "
":func:`django.utils.translation.activate()` will change the language for "
"this thread, and modifying the session makes this preference persist in "
"future requests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1850
msgid ""
"If you are not using sessions, the language will persist in a cookie, whose "
"name is configured in :setting:`LANGUAGE_COOKIE_NAME`. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1862
msgid "Using translations outside views and templates"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1864
msgid ""
"While Django provides a rich set of i18n tools for use in views and "
"templates, it does not restrict the usage to Django-specific code. The "
"Django translation mechanisms can be used to translate arbitrary texts to "
"any language that is supported by Django (as long as an appropriate "
"translation catalog exists, of course). You can load a translation catalog, "
"activate it and translate text to language of your choice, but remember to "
"switch back to original language, as activating a translation catalog is "
"done on per-thread basis and such change will affect code running in the "
"same thread."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1886
msgid ""
"Calling this function with the value ``'de'`` will give you "
"``\"Willkommen\"``, regardless of :setting:`LANGUAGE_CODE` and language set "
"by middleware."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1889
msgid ""
"Functions of particular interest are "
":func:`django.utils.translation.get_language()` which returns the language "
"used in the current thread, :func:`django.utils.translation.activate()` "
"which activates a translation catalog for the current thread, and "
":func:`django.utils.translation.check_for_language()` which checks if the "
"given language is supported by Django."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1896
msgid ""
"To help write more concise code, there is also a context manager "
":func:`django.utils.translation.override()` that stores the current language"
" on enter and restores it on exit. With it, the above example becomes::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1907
msgid "Language cookie"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1909
msgid "A number of settings can be used to adjust language cookie options:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1911
msgid ":setting:`LANGUAGE_COOKIE_NAME`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1912
msgid ":setting:`LANGUAGE_COOKIE_AGE`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1913
msgid ":setting:`LANGUAGE_COOKIE_DOMAIN`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1914
msgid ":setting:`LANGUAGE_COOKIE_PATH`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1917
msgid "Implementation notes"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1922
msgid "Specialties of Django translation"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1924
msgid ""
"Django's translation machinery uses the standard ``gettext`` module that "
"comes with Python. If you know ``gettext``, you might note these specialties"
" in the way Django does translation:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1928
msgid ""
"The string domain is ``django`` or ``djangojs``. This string domain is used "
"to differentiate between different programs that store their data in a "
"common message-file library (usually ``/usr/share/locale/``). The ``django``"
" domain is used for Python and template translation strings and is loaded "
"into the global translation catalogs. The ``djangojs`` domain is only used "
"for JavaScript translation catalogs to make sure that those are as small as "
"possible."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1935
msgid ""
"Django doesn't use ``xgettext`` alone. It uses Python wrappers around "
"``xgettext`` and ``msgfmt``. This is mostly for convenience."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1941
msgid "How Django discovers language preference"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1943
msgid ""
"Once you've prepared your translations -- or, if you just want to use the "
"translations that come with Django -- you'll just need to activate "
"translation for your app."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1947
msgid ""
"Behind the scenes, Django has a very flexible model of deciding which "
"language should be used -- installation-wide, for a particular user, or "
"both."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1950
msgid ""
"To set an installation-wide language preference, set "
":setting:`LANGUAGE_CODE`. Django uses this language as the default "
"translation -- the final attempt if no better matching translation is found "
"through one of the methods employed by the locale middleware (see below)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1955
msgid ""
"If all you want is to run Django with your native language all you need to "
"do is set :setting:`LANGUAGE_CODE` and make sure the corresponding "
":term:`message files <message file>` and their compiled versions (``.mo``) "
"exist."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1959
msgid ""
"If you want to let each individual user specify which language they prefer, "
"then you also need to use the ``LocaleMiddleware``. ``LocaleMiddleware`` "
"enables language selection based on data from the request. It customizes "
"content for each user."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1964
msgid ""
"To use ``LocaleMiddleware``, add "
"``'django.middleware.locale.LocaleMiddleware'`` to your "
":setting:`MIDDLEWARE` setting. Because middleware order matters, follow "
"these guidelines:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1968
msgid "Make sure it's one of the first middleware installed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1969
msgid ""
"It should come after ``SessionMiddleware``, because ``LocaleMiddleware`` "
"makes use of session data. And it should come before ``CommonMiddleware`` "
"because ``CommonMiddleware`` needs an activated language in order to resolve"
" the requested URL."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1973
msgid "If you use ``CacheMiddleware``, put ``LocaleMiddleware`` after it."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1975
msgid "For example, your :setting:`MIDDLEWARE` might look like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1983
msgid ""
"(For more on middleware, see the :doc:`middleware documentation "
"</topics/http/middleware>`.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1986
msgid ""
"``LocaleMiddleware`` tries to determine the user's language preference by "
"following this algorithm:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1989
msgid ""
"First, it looks for the language prefix in the requested URL.  This is only "
"performed when you are using the ``i18n_patterns`` function in your root "
"URLconf. See :ref:`url-internationalization` for more information about the "
"language prefix and how to internationalize URL patterns."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1994
msgid ""
"Failing that, it looks for the "
":data:`~django.utils.translation.LANGUAGE_SESSION_KEY` key in the current "
"user's session."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1997
msgid "Failing that, it looks for a cookie."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:1999
msgid ""
"The name of the cookie used is set by the :setting:`LANGUAGE_COOKIE_NAME` "
"setting. (The default name is ``django_language``.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2002
msgid ""
"Failing that, it looks at the ``Accept-Language`` HTTP header. This header "
"is sent by your browser and tells the server which language(s) you prefer, "
"in order by priority. Django tries each language in the header until it "
"finds one with available translations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2007
msgid "Failing that, it uses the global :setting:`LANGUAGE_CODE` setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2013
msgid ""
"In each of these places, the language preference is expected to be in the "
"standard :term:`language format<language code>`, as a string. For example, "
"Brazilian Portuguese is ``pt-br``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2017
msgid ""
"If a base language is available but the sublanguage specified is not, Django"
" uses the base language. For example, if a user specifies ``de-at`` "
"(Austrian German) but Django only has ``de`` available, Django uses ``de``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2022
msgid ""
"Only languages listed in the :setting:`LANGUAGES` setting can be selected. "
"If you want to restrict the language selection to a subset of provided "
"languages (because your application doesn't provide all those languages), "
"set :setting:`LANGUAGES` to a list of languages. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2032
msgid ""
"This example restricts languages that are available for automatic selection "
"to German and English (and any sublanguage, like ``de-ch`` or ``en-us``)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2036
msgid ""
"If you define a custom :setting:`LANGUAGES` setting, as explained in the "
"previous bullet, you can mark the language names as translation strings -- "
"but use :func:`~django.utils.translation.gettext_lazy` instead of "
":func:`~django.utils.translation.gettext` to avoid a circular import."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2041
msgid "Here's a sample settings file::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2050
msgid ""
"Once ``LocaleMiddleware`` determines the user's preference, it makes this "
"preference available as ``request.LANGUAGE_CODE`` for each "
":class:`~django.http.HttpRequest`. Feel free to read this value in your view"
" code. Here's a simple example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2063
msgid ""
"Note that, with static (middleware-less) translation, the language is in "
"``settings.LANGUAGE_CODE``, while with dynamic (middleware) translation, "
"it's in ``request.LANGUAGE_CODE``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2075
msgid "How Django discovers translations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2077
msgid ""
"At runtime, Django builds an in-memory unified catalog of literals-"
"translations. To achieve this it looks for translations by following this "
"algorithm regarding the order in which it examines the different file paths "
"to load the compiled :term:`message files <message file>` (``.mo``) and the "
"precedence of multiple translations for the same literal:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2083
msgid ""
"The directories listed in :setting:`LOCALE_PATHS` have the highest "
"precedence, with the ones appearing first having higher precedence than the "
"ones appearing later."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2086
msgid ""
"Then, it looks for and uses if it exists a ``locale`` directory in each of "
"the installed apps listed in :setting:`INSTALLED_APPS`.  The ones appearing "
"first have higher precedence than the ones appearing later."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2089
msgid ""
"Finally, the Django-provided base translation in ``django/conf/locale`` is "
"used as a fallback."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2094
msgid ""
"The translations for literals included in JavaScript assets are looked up "
"following a similar but not identical algorithm. See "
":class:`.JavaScriptCatalog` for more details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2098
msgid ""
"You can also put :ref:`custom format files <custom-format-files>` in the "
":setting:`LOCALE_PATHS` directories if you also set "
":setting:`FORMAT_MODULE_PATH`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2102
msgid ""
"In all cases the name of the directory containing the translation is "
"expected to be named using :term:`locale name` notation. E.g. ``de``, "
"``pt_BR``, ``es_AR``, etc. Untranslated strings for territorial language "
"variants use the translations of the generic language. For example, "
"untranslated ``pt_BR`` strings use ``pt`` translations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2110
msgid "Fallback to the generic language as described above was added."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2112
msgid ""
"This way, you can write applications that include their own translations, "
"and you can override base translations in your project. Or, you can just "
"build a big project out of several apps and put all translations into one "
"big common message file specific to the project you are composing. The "
"choice is yours."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2117
msgid "All message file repositories are structured the same way. They are:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2119
msgid ""
"All paths listed in :setting:`LOCALE_PATHS` in your settings file are "
"searched for ``<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2121
msgid "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2122
msgid ""
"``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2124
msgid ""
"To create message files, you use the :djadmin:`django-admin makemessages "
"<makemessages>` tool. And you use :djadmin:`django-admin compilemessages "
"<compilemessages>` to produce the binary ``.mo`` files that are used by "
"``gettext``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2128
msgid ""
"You can also run :djadmin:`django-admin compilemessages "
"--settings=path.to.settings <compilemessages>` to make the compiler process "
"all the directories in your :setting:`LOCALE_PATHS` setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2133
msgid "Using a non-English base language"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2135
msgid ""
"Django makes the general assumption that the original strings in a "
"translatable project are written in English. You can choose another "
"language, but you must be aware of certain limitations:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2139
msgid ""
"``gettext`` only provides two plural forms for the original messages, so you"
" will also need to provide a translation for the base language to include "
"all plural forms if the plural rules for the base language are different "
"from English."
msgstr ""

#: ../../../../sources/2.2/docs/topics/i18n/translation.txt:2144
msgid ""
"When an English variant is activated and English strings are missing, the "
"fallback language will not be the :setting:`LANGUAGE_CODE` of the project, "
"but the original strings. For example, an English user visiting a site with "
":setting:`LANGUAGE_CODE` set to Spanish and original strings written in "
"Russian will see Russian text rather than Spanish."
msgstr ""

#: ../../../../sources/2.2/docs/topics/index.txt:3
msgid "Using Django"
msgstr ""

#: ../../../../sources/2.2/docs/topics/index.txt:5
msgid "Introductions to all the key parts of Django you'll need to know:"
msgstr "你需要知道的所有Django关键部分介绍："

#: ../../../../sources/2.2/docs/topics/install.txt:3
msgid "How to install Django"
msgstr "如何安装Django"

#: ../../../../sources/2.2/docs/topics/install.txt:5
msgid "This document will get you up and running with Django."
msgstr "本文档将帮助您使用Django。"

#: ../../../../sources/2.2/docs/topics/install.txt:8
msgid "Install Python"
msgstr "安装Python"

#: ../../../../sources/2.2/docs/topics/install.txt:10
msgid ""
"Django is a Python Web framework. See :ref:`faq-python-version-support` for "
"details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:13
msgid ""
"Get the latest version of Python at https://www.python.org/downloads/ or "
"with your operating system's package manager."
msgstr "获取最新版本的Python可以通过：访问 https://www.python.org/downloads/ ；或者操作系统的包管理工具。"

#: ../../../../sources/2.2/docs/topics/install.txt:16
msgid "Django on Jython"
msgstr "基于 Jython 的 Django"

#: ../../../../sources/2.2/docs/topics/install.txt:18
msgid ""
"Jython_ (a Python implementation for the Java platform) is not compatible "
"with Python 3, so Django ≥ 2.0 cannot run on Jython."
msgstr "Jython_ （一个针对Java平台的Python实现）和Python 3不兼容，所以Django 2.0及以上的版本无法在Jython上运行。"

#: ../../../../sources/2.2/docs/topics/install.txt:23
msgid "Python on Windows"
msgstr "Windows上的Python"

#: ../../../../sources/2.2/docs/topics/install.txt:25
msgid ""
"If you are just starting with Django and using Windows, you may find "
":doc:`/howto/windows` useful."
msgstr "如果您刚刚开始学习Django并且使用Windows，查看 :doc:`/howto/windows`  可能对你有帮助。"

#: ../../../../sources/2.2/docs/topics/install.txt:29
msgid "Install Apache and ``mod_wsgi``"
msgstr "安装Apache和 ``mod_wsgi``"

#: ../../../../sources/2.2/docs/topics/install.txt:31
msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight web server you can use for testing, so you "
"won't need to set up Apache until you're ready to deploy Django in "
"production."
msgstr "如果您只是想试验Django，请跳到下一部分；Django包含一个可用于测试的轻量级Web服务器，因此在准备好在生产环境中部署Django之前，您不需要设置Apache。"

#: ../../../../sources/2.2/docs/topics/install.txt:36
msgid ""
"If you want to use Django on a production site, use `Apache`_ with "
"`mod_wsgi`_. mod_wsgi operates in one of two modes: embedded mode or daemon "
"mode. In embedded mode, mod_wsgi is similar to mod_perl -- it embeds Python "
"within Apache and loads Python code into memory when the server starts. Code"
" stays in memory throughout the life of an Apache process, which leads to "
"significant performance gains over other server arrangements. In daemon "
"mode, mod_wsgi spawns an independent daemon process that handles requests. "
"The daemon process can run as a different user than the Web server, possibly"
" leading to improved security. The daemon process can be restarted without "
"restarting the entire Apache Web server, possibly making refreshing your "
"codebase more seamless. Consult the mod_wsgi documentation to determine "
"which mode is right for your setup. Make sure you have Apache installed with"
" the mod_wsgi module activated. Django will work with any version of Apache "
"that supports mod_wsgi."
msgstr "如果要在生产站点上使用Django，请将 `Apache`_ 与 `mod_wsgi`_ 一起使用。 mod_wsgi以两种模式中的一种运行：嵌入模式或守护进程模式。在嵌入模式下，mod_wsgi类似于mod_perl —— 它在Apache中嵌入Python，并在服务器启动时将Python代码加载到内存中。代码在Apache进程的整个生命周期中都保留在内存中，与其他服务器相比，这可以显着提高性能。在守护进程模式下，mod_wsgi 会生成一个处理请求的独立守护进程。守护进程可以作为与Web服务器不同的用户运行，可能会提高安全性。可以在不重新启动整个Apache Web服务器的情况下重新启动守护进程，从而可以更加无缝地刷新代码库。请参阅mod_wsgi文档以确定适合您的设置的模式。确保你在安装了Apache并且启用了mod_wsgi模块。 Django将在任何支持mod_wsgi的Apache版本上工作。"

#: ../../../../sources/2.2/docs/topics/install.txt:52
msgid ""
"See :doc:`How to use Django with mod_wsgi </howto/deployment/wsgi/modwsgi>` "
"for information on how to configure mod_wsgi once you have it installed."
msgstr "关于如何在安装后配置mod_wsgi模块，请查看 :doc:`How to use Django with mod_wsgi </howto/deployment/wsgi/modwsgi>` 。"

#: ../../../../sources/2.2/docs/topics/install.txt:56
msgid ""
"If you can't use mod_wsgi for some reason, fear not: Django supports many "
"other deployment options. One is :doc:`uWSGI "
"</howto/deployment/wsgi/uwsgi>`; it works very well with `nginx`_. "
"Additionally, Django follows the WSGI spec (:pep:`3333`), which allows it to"
" run on a variety of server platforms."
msgstr "如果由于某种原因你不能使用mod_wsgi，请不要担心： Django支持许多其他部署选项。一个是 :doc:`uWSGI </howto/deployment/wsgi/uwsgi>` ；它和 `nginx`_ 配合使用很好。此外，Django遵循 WSGI 规范（ :pep:`3333` ），允许它在各种服务器平台上运行。"

#: ../../../../sources/2.2/docs/topics/install.txt:68
msgid "Get your database running"
msgstr "运行你的数据库"

#: ../../../../sources/2.2/docs/topics/install.txt:70
msgid ""
"If you plan to use Django's database API functionality, you'll need to make "
"sure a database server is running. Django supports many different database "
"servers and is officially supported with PostgreSQL_, MySQL_, Oracle_ and "
"SQLite_."
msgstr "如果你打算使用Django的数据库API功能，则需要确保数据库服务器正在运行。Django支持很多不同的数据库服务器，并且正式支持 PostgreSQL_， MySQL_， Oracle_ 和 SQLite_ 。"

#: ../../../../sources/2.2/docs/topics/install.txt:75
msgid ""
"If you are developing a simple project or something you don't plan to deploy"
" in a production environment, SQLite is generally the simplest option as it "
"doesn't require running a separate server. However, SQLite has many "
"differences from other databases, so if you are working on something "
"substantial, it's recommended to develop with the same database that you "
"plan on using in production."
msgstr "如果你正在开发一个简单的项目或者你不打算在生产环境中部署的东西，SQLite通常是最简单的选择，因为它不需要运行一个独立的服务器。但是，SQLite与其他数据库有许多不同之处，因此如果你正在开展大量工作，建议使用你计划在生产中使用的相同数据库进行开发。"

#: ../../../../sources/2.2/docs/topics/install.txt:82
msgid ""
"In addition to the officially supported databases, there are :ref:`backends "
"provided by 3rd parties <third-party-notes>` that allow you to use other "
"databases with Django."
msgstr "除了官方支持的数据库，还有 :ref:`backends provided by 3rd parties <third-party-notes>` 允许你在Django中使用其他数据库。"

#: ../../../../sources/2.2/docs/topics/install.txt:86
msgid ""
"In addition to a database backend, you'll need to make sure your Python "
"database bindings are installed."
msgstr "除了数据库后端，你还要确保安装了Python数据库绑定。"

#: ../../../../sources/2.2/docs/topics/install.txt:89
msgid ""
"If you're using PostgreSQL, you'll need the `psycopg2`_ package. Refer to "
"the :ref:`PostgreSQL notes <postgresql-notes>` for further details."
msgstr "如果你正在使用PostgreSQL，你需要 `psycopg2`_ 包。相关详细信息请参阅 :ref:`PostgreSQL notes <postgresql-notes>` 。"

#: ../../../../sources/2.2/docs/topics/install.txt:92
msgid ""
"If you're using MySQL, you'll need a :ref:`DB API driver <mysql-db-api-"
"drivers>` like ``mysqlclient``. See :ref:`notes for the MySQL backend "
"<mysql-notes>` for details."
msgstr "如果你正在使用MySQL，则需要一个像 ``mysqlclient``这样的 :ref:`DB API driver <mysql-db-api-drivers>` 。相关详细信息请参阅 :ref:`notes for the MySQL backend <mysql-notes>` 。"

#: ../../../../sources/2.2/docs/topics/install.txt:96
msgid ""
"If you're using SQLite you might want to read the :ref:`SQLite backend notes"
" <sqlite-notes>`."
msgstr "如果你正在使用SQLite，则可能需要阅读 :ref:`SQLite backend notes <sqlite-notes>` 。"

#: ../../../../sources/2.2/docs/topics/install.txt:99
msgid ""
"If you're using Oracle, you'll need a copy of cx_Oracle_, but please read "
"the :ref:`notes for the Oracle backend <oracle-notes>` for details regarding"
" supported versions of both Oracle and ``cx_Oracle``."
msgstr "如果你正在使用Oracle，则需要 cx_Oracle_ 的副本，但请阅读 :ref:`notes for the Oracle backend <oracle-notes>` 以获取有关 Oracle 和 ``cx_Oracle`` 的支持的版本的详细信息。"

#: ../../../../sources/2.2/docs/topics/install.txt:103
msgid ""
"If you're using an unofficial 3rd party backend, please consult the "
"documentation provided for any additional requirements."
msgstr "如果你使用的是非官方的第三方后端，请参阅提供的文档以了解任何其他要求。"

#: ../../../../sources/2.2/docs/topics/install.txt:106
msgid ""
"If you plan to use Django's ``manage.py migrate`` command to automatically "
"create database tables for your models (after first installing Django and "
"creating a project), you'll need to ensure that Django has permission to "
"create and alter tables in the database you're using; if you plan to "
"manually create the tables, you can simply grant Django ``SELECT``, "
"``INSERT``, ``UPDATE`` and ``DELETE`` permissions. After creating a database"
" user with these permissions, you'll specify the details in your project's "
"settings file, see :setting:`DATABASES` for details."
msgstr "如果您打算使用Django的 ``manage.py migrate`` 命令为您的模型自动创建数据库表（在首次安装Django并创建项目之后），您需要确保Django有权在您正在使用的数据库中创建和更改表；如果你打算手动创建这些表，你可以只需授予Django ``SELECT``，``INSERT``，``UPDATE`` 和 ``DELETE``权限。创建具有这些权限的数据库用户后，您要在项目的配置文件中指定详细信息，请参阅 :setting:`DATABASES` 以获取详细信息。"

#: ../../../../sources/2.2/docs/topics/install.txt:115
msgid ""
"If you're using Django's :doc:`testing framework</topics/testing/index>` to "
"test database queries, Django will need permission to create a test "
"database."
msgstr "如果你正在使用Django的 :doc:`testing framework</topics/testing/index>` 来测试数据库查询，Django将需要创建测试数据库的权限。"

#: ../../../../sources/2.2/docs/topics/install.txt:128
msgid "Install the Django code"
msgstr "安装Django代码"

#: ../../../../sources/2.2/docs/topics/install.txt:130
msgid ""
"Installation instructions are slightly different depending on whether you're"
" installing a distribution-specific package, downloading the latest official"
" release, or fetching the latest development version."
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:134
msgid "It's easy, no matter which way you choose."
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:139
msgid "Installing an official release with ``pip``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:141
msgid "This is the recommended way to install Django."
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:143
msgid ""
"Install pip_. The easiest is to use the `standalone pip installer`_. If your"
" distribution already has ``pip`` installed, you might need to update it if "
"it's outdated. If it's outdated, you'll know because installation won't "
"work."
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:148
msgid ""
"Take a look at virtualenv_ and virtualenvwrapper_. These tools provide "
"isolated Python environments, which are more practical than installing "
"packages systemwide. They also allow installing packages without "
"administrator privileges. The :doc:`contributing tutorial "
"</intro/contributing>` walks through how to create a virtualenv."
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:154
msgid ""
"After you've created and activated a virtual environment, enter the command:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:168
msgid "Installing a distribution-specific package"
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:170
msgid ""
"Check the :doc:`distribution specific notes </misc/distributions>` to see if"
" your platform/distribution provides official Django packages/installers. "
"Distribution-provided packages will typically allow for automatic "
"installation of dependencies and easy upgrade paths; however, these packages"
" will rarely contain the latest release of Django."
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:179
msgid "Installing the development version"
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:181
msgid "Tracking Django development"
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:183
msgid ""
"If you decide to use the latest development version of Django, you'll want "
"to pay close attention to `the development timeline`_, and you'll want to "
"keep an eye on the :ref:`release notes for the upcoming release "
"<development_release_notes>`. This will help you stay on top of any new "
"features you might want to use, as well as any changes you'll need to make "
"to your code when updating your copy of Django. (For stable releases, any "
"necessary changes are documented in the release notes.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:194
msgid ""
"If you'd like to be able to update your Django code occasionally with the "
"latest bug fixes and improvements, follow these instructions:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:197
msgid ""
"Make sure that you have Git_ installed and that you can run its commands "
"from a shell. (Enter ``git help`` at a shell prompt to test this.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:200
msgid "Check out Django's main development branch like so:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:206
msgid "This will create a directory ``django`` in your current directory."
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:208
msgid ""
"Make sure that the Python interpreter can load Django's code. The most "
"convenient way to do this is to use virtualenv_, virtualenvwrapper_, and "
"pip_. The :doc:`contributing tutorial </intro/contributing>` walks through "
"how to create a virtualenv."
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:213
msgid ""
"After setting up and activating the virtualenv, run the following command:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:219
msgid ""
"This will make Django's code importable, and will also make the ``django-"
"admin`` utility command available. In other words, you're all set!"
msgstr ""

#: ../../../../sources/2.2/docs/topics/install.txt:223
msgid ""
"When you want to update your copy of the Django source code, just run the "
"command ``git pull`` from within the ``django`` directory. When you do this,"
" Git will automatically download any changes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:3
msgid "Logging"
msgstr "日志"

#: ../../../../sources/2.2/docs/topics/logging.txt:9
msgid "A quick logging primer"
msgstr "日志管理快速入门"

#: ../../../../sources/2.2/docs/topics/logging.txt:11
msgid ""
"Django uses Python's builtin :mod:`logging` module to perform system "
"logging. The usage of this module is discussed in detail in Python's own "
"documentation. However, if you've never used Python's logging framework (or "
"even if you have), here's a quick primer."
msgstr "Django 使用 Python 内置的 :mod:`logging` 模块处理系统日志。关于该模块的使用，Python 文档里有更详细的讨论。不过，如果你从未用过 Python 的 logging 框架（或者即便你用过），这里是一篇快速入门。"

#: ../../../../sources/2.2/docs/topics/logging.txt:17
msgid "The cast of players"
msgstr "日志框架的组成元素"

#: ../../../../sources/2.2/docs/topics/logging.txt:19
msgid "A Python logging configuration consists of four parts:"
msgstr "一份 Python logging 配置有下面四个部分组成："

#: ../../../../sources/2.2/docs/topics/logging.txt:21
msgid ":ref:`topic-logging-parts-loggers`"
msgstr ":ref:`topic-logging-parts-loggers`"

#: ../../../../sources/2.2/docs/topics/logging.txt:22
msgid ":ref:`topic-logging-parts-handlers`"
msgstr ":ref:`topic-logging-parts-handlers`"

#: ../../../../sources/2.2/docs/topics/logging.txt:23
msgid ":ref:`topic-logging-parts-filters`"
msgstr ":ref:`topic-logging-parts-filters`"

#: ../../../../sources/2.2/docs/topics/logging.txt:24
msgid ":ref:`topic-logging-parts-formatters`"
msgstr ":ref:`topic-logging-parts-formatters`"

#: ../../../../sources/2.2/docs/topics/logging.txt:29
#: ../../../../sources/2.2/docs/topics/logging.txt:452
msgid "Loggers"
msgstr "Loggers"

#: ../../../../sources/2.2/docs/topics/logging.txt:31
msgid ""
"A logger is the entry point into the logging system. Each logger is a named "
"bucket to which messages can be written for processing."
msgstr "logger 是日志系统的入口。每个 logger 都是命名了的 bucket， 消息写入 bucket 以便进一步处理。"

#: ../../../../sources/2.2/docs/topics/logging.txt:34
msgid ""
"A logger is configured to have a *log level*. This log level describes the "
"severity of the messages that the logger will handle. Python defines the "
"following log levels:"
msgstr "logger 可以配置 *日志级别*。日志级别描述了由该 logger 处理的消息的严重性。Python 定义了下面几种日志级别："

#: ../../../../sources/2.2/docs/topics/logging.txt:38
msgid "``DEBUG``: Low level system information for debugging purposes"
msgstr "``DEBUG``：排查故障时使用的低级别系统信息"

#: ../../../../sources/2.2/docs/topics/logging.txt:40
msgid "``INFO``: General system information"
msgstr "``INFO``：一般的系统信息"

#: ../../../../sources/2.2/docs/topics/logging.txt:42
msgid "``WARNING``: Information describing a minor problem that has occurred."
msgstr "``WARNING``：描述系统发生了一些小问题的信息"

#: ../../../../sources/2.2/docs/topics/logging.txt:45
msgid "``ERROR``: Information describing a major problem that has occurred."
msgstr "``ERROR``：描述系统发生了大问题的信息"

#: ../../../../sources/2.2/docs/topics/logging.txt:48
msgid ""
"``CRITICAL``: Information describing a critical problem that has occurred."
msgstr "``CRITICAL``：描述系统发生严重问题的信息"

#: ../../../../sources/2.2/docs/topics/logging.txt:51
msgid ""
"Each message that is written to the logger is a *Log Record*. Each log "
"record also has a *log level* indicating the severity of that specific "
"message. A log record can also contain useful metadata that describes the "
"event that is being logged. This can include details such as a stack trace "
"or an error code."
msgstr "每一条写入 logger 的消息都是一条 *日志记录*。每一条日志记录也包含 *日志级别*，代表对应消息的严重程度。日志记录还包含有用的元数据，来描述被记录了日志的事件细节，例如堆栈跟踪或者错误码。"

#: ../../../../sources/2.2/docs/topics/logging.txt:57
msgid ""
"When a message is given to the logger, the log level of the message is "
"compared to the log level of the logger. If the log level of the message "
"meets or exceeds the log level of the logger itself, the message will "
"undergo further processing. If it doesn't, the message will be ignored."
msgstr "当 logger 处理一条消息时，会将自己的日志级别和这条消息的日志级别做对比。如果消息的日志级别匹配或者高于 logger 的日志级别，它就会被进一步处理。否则这条消息就会被忽略掉。"

#: ../../../../sources/2.2/docs/topics/logging.txt:63
msgid ""
"Once a logger has determined that a message needs to be processed, it is "
"passed to a *Handler*."
msgstr "当 logger 确定了一条消息需要处理之后，会把它传给 *Handler*。"

#: ../../../../sources/2.2/docs/topics/logging.txt:69
#: ../../../../sources/2.2/docs/topics/logging.txt:584
msgid "Handlers"
msgstr "Handlers"

#: ../../../../sources/2.2/docs/topics/logging.txt:71
msgid ""
"The handler is the engine that determines what happens to each message in a "
"logger. It describes a particular logging behavior, such as writing a "
"message to the screen, to a file, or to a network socket."
msgstr "Handler 是决定如何处理 logger 中每一条消息的引擎。它描述特定的日志行为，比如把消息输出到屏幕、文件或网络 socket。"

#: ../../../../sources/2.2/docs/topics/logging.txt:75
msgid ""
"Like loggers, handlers also have a log level. If the log level of a log "
"record doesn't meet or exceed the level of the handler, the handler will "
"ignore the message."
msgstr "和 logger 一样，handler 也有日志级别的概念。如果一条日志记录的级别不匹配或者低于 handler 的日志级别，对应的消息会被 handler 忽略。"

#: ../../../../sources/2.2/docs/topics/logging.txt:79
msgid ""
"A logger can have multiple handlers, and each handler can have a different "
"log level. In this way, it is possible to provide different forms of "
"notification depending on the importance of a message. For example, you "
"could install one handler that forwards ``ERROR`` and ``CRITICAL`` messages "
"to a paging service, while a second handler logs all messages (including "
"``ERROR`` and ``CRITICAL`` messages) to a file for later analysis."
msgstr "一个 logger 可以有多个 handler，每一个 handler 可以有不同的日志级别。这样就可以根据消息的重要性不同，来提供不同格式的输出。例如，你可以添加一个 handler 把  ``ERROR`` 和 ``CRITICAL`` 消息发到寻呼机，再添加另一个 handler 把所有的消息（包括 ``ERROR`` 和 ``CRITICAL`` 消息）保存到文件里以便日后分析。"

#: ../../../../sources/2.2/docs/topics/logging.txt:90
#: ../../../../sources/2.2/docs/topics/logging.txt:655
#: ../../../../sources/2.2/docs/topics/templates.txt:731
msgid "Filters"
msgstr "过滤器"

#: ../../../../sources/2.2/docs/topics/logging.txt:92
msgid ""
"A filter is used to provide additional control over which log records are "
"passed from logger to handler."
msgstr "在日志记录从 logger 传到 handler 的过程中，使用 Filter 来做额外的控制。"

#: ../../../../sources/2.2/docs/topics/logging.txt:95
msgid ""
"By default, any log message that meets log level requirements will be "
"handled. However, by installing a filter, you can place additional criteria "
"on the logging process. For example, you could install a filter that only "
"allows ``ERROR`` messages from a particular source to be emitted."
msgstr "默认情况下，只要级别匹配，任何日志消息都会被处理。不过，也可以通过添加 filter 来给日志处理的过程增加额外条件。例如，可以添加一个 filter 只允许某个特定来源的 ``ERROR`` 消息输出。"

#: ../../../../sources/2.2/docs/topics/logging.txt:101
msgid ""
"Filters can also be used to modify the logging record prior to being "
"emitted. For example, you could write a filter that downgrades ``ERROR`` log"
" records to ``WARNING`` records if a particular set of criteria are met."
msgstr "Filter 还被用来在日志输出之前对日志记录做修改。例如，可以写一个 filter，当满足一定条件时，把日志记录从 ``ERROR`` 降到 ``WARNING`` 级别。"

#: ../../../../sources/2.2/docs/topics/logging.txt:106
msgid ""
"Filters can be installed on loggers or on handlers; multiple filters can be "
"used in a chain to perform multiple filtering actions."
msgstr "Filter 在 logger 和 handler 中都可以添加；多个 filter 可以链接起来使用，来做多重过滤操作。"

#: ../../../../sources/2.2/docs/topics/logging.txt:112
msgid "Formatters"
msgstr "Formatters"

#: ../../../../sources/2.2/docs/topics/logging.txt:114
msgid ""
"Ultimately, a log record needs to be rendered as text. Formatters describe "
"the exact format of that text. A formatter usually consists of a Python "
"formatting string containing :ref:`LogRecord attributes <python:logrecord-"
"attributes>`; however, you can also write custom formatters to implement "
"specific formatting behavior."
msgstr "日志记录最终是需要以文本来呈现的。Formatter 描述了文本的格式。一个 formatter 通常由包含 :ref:`LogRecord attributes <python:logrecord-attributes>` 的 Python 格式化字符串组成，不过你也可以为特定的格式来配置自定义的 formatter。"

#: ../../../../sources/2.2/docs/topics/logging.txt:121
msgid "Using logging"
msgstr "使用 logging 模块"

#: ../../../../sources/2.2/docs/topics/logging.txt:123
msgid ""
"Once you have configured your loggers, handlers, filters and formatters, you"
" need to place logging calls into your code. Using the logging framework is "
"very simple. Here's an example::"
msgstr "配置好了 logger，handler，filter 和 formatter 之后，需要在代码里发起 logging 的调用。使用 logging 框架非常简单，下面是个例子："

#: ../../../../sources/2.2/docs/topics/logging.txt:139
msgid ""
"And that's it! Every time the ``bad_mojo`` condition is activated, an error "
"log record will be written."
msgstr "就这么简单！``bad_mojo`` 条件每次满足都会写一条 error 日志。"

#: ../../../../sources/2.2/docs/topics/logging.txt:143
msgid "Naming loggers"
msgstr "为 logger 命名"

#: ../../../../sources/2.2/docs/topics/logging.txt:145
msgid ""
"The call to :func:`logging.getLogger()` obtains (creating, if necessary) an "
"instance of a logger. The logger instance is identified by a name. This name"
" is used to identify the logger for configuration purposes."
msgstr "对 :func:`logging.getLogger()` 的调用会获取（必要时会创建）一个 logger 的实例。不同的 logger 实例用名字来区分。这个名字是为了在配置的时候指定 logger。"

#: ../../../../sources/2.2/docs/topics/logging.txt:150
msgid ""
"By convention, the logger name is usually ``__name__``, the name of the "
"Python module that contains the logger. This allows you to filter and handle"
" logging calls on a per-module basis. However, if you have some other way of"
" organizing your logging messages, you can provide any dot-separated name to"
" identify your logger::"
msgstr "按照惯例，logger 的名字通常是包含该 logger 的 Python 模块名，即  ``__name__``。这样可以基于模块来过滤和处理日志请求。不过，如果你有其他的方式来组织你的日志消息，可以为 logger 提供点号分割的名字来标识它："

#: ../../../../sources/2.2/docs/topics/logging.txt:159
msgid ""
"The dotted paths of logger names define a hierarchy. The "
"``project.interesting`` logger is considered to be a parent of the "
"``project.interesting.stuff`` logger; the ``project`` logger is a parent of "
"the ``project.interesting`` logger."
msgstr "这种 logger 的名字，用点号分隔的路径定义了一种层次结构。``project.interesting`` 这个 logger 是 ``project.interesting.stuff`` logger 的上级；而 ``project`` logger 是 ``project.interesting`` logger 的上级。"

#: ../../../../sources/2.2/docs/topics/logging.txt:164
msgid ""
"Why is the hierarchy important? Well, because loggers can be set to "
"*propagate* their logging calls to their parents. In this way, you can "
"define a single set of handlers at the root of a logger tree, and capture "
"all logging calls in the subtree of loggers. A logging handler defined in "
"the ``project`` namespace will catch all logging messages issued on the "
"``project.interesting`` and ``project.interesting.stuff`` loggers."
msgstr "为什么这种层级结构是重要的呢？因为 logger 可以设置为将日志的请求*传播*给上级。这样就可以在 logger 树结构的顶层定义一组单独的 handler，来捕获所有下层的日志请求。在 ``project`` 命名空间中定义的 logger handler 将会捕获 ``project.interesting`` 和 ``project.interesting.stuff`` 这两个 logger 中的所有日志请求。"

#: ../../../../sources/2.2/docs/topics/logging.txt:172
msgid ""
"This propagation can be controlled on a per-logger basis. If you don't want "
"a particular logger to propagate to its parents, you can turn off this "
"behavior."
msgstr "可以基于 logger 来控制传播的行为。 如果你不希望某个 logger 传播给上级，可以关闭它。"

#: ../../../../sources/2.2/docs/topics/logging.txt:177
msgid "Making logging calls"
msgstr "发起 logging 调用"

#: ../../../../sources/2.2/docs/topics/logging.txt:179
msgid ""
"The logger instance contains an entry method for each of the default log "
"levels:"
msgstr "logger 实例包含了每种默认日志级别的入口方法："

#: ../../../../sources/2.2/docs/topics/logging.txt:182
msgid "``logger.debug()``"
msgstr "``logger.debug()``"

#: ../../../../sources/2.2/docs/topics/logging.txt:183
msgid "``logger.info()``"
msgstr "``logger.info()``"

#: ../../../../sources/2.2/docs/topics/logging.txt:184
msgid "``logger.warning()``"
msgstr "``logger.warning()``"

#: ../../../../sources/2.2/docs/topics/logging.txt:185
msgid "``logger.error()``"
msgstr "``logger.error()``"

#: ../../../../sources/2.2/docs/topics/logging.txt:186
msgid "``logger.critical()``"
msgstr "``logger.critical()``"

#: ../../../../sources/2.2/docs/topics/logging.txt:188
msgid "There are two other logging calls available:"
msgstr "还有两种其他的调用方法："

#: ../../../../sources/2.2/docs/topics/logging.txt:190
msgid ""
"``logger.log()``: Manually emits a logging message with a specific log "
"level."
msgstr "``logger.log()``：手动输出一条指定日志级别的日志消息。"

#: ../../../../sources/2.2/docs/topics/logging.txt:193
msgid ""
"``logger.exception()``: Creates an ``ERROR`` level logging message wrapping "
"the current exception stack frame."
msgstr "``logger.exception()``：创建一个包含当前异常堆栈帧的 ``ERROR`` 级别日志消息。"

#: ../../../../sources/2.2/docs/topics/logging.txt:199
msgid "Configuring logging"
msgstr "日志模块的配置"

#: ../../../../sources/2.2/docs/topics/logging.txt:201
msgid ""
"Of course, it isn't enough to just put logging calls into your code. You "
"also need to configure the loggers, handlers, filters and formatters to "
"ensure that logging output is output in a useful way."
msgstr "当然，仅仅在代码里调用 logging 是不够的。还需要配置 logger、handler、filter 和 formatter 来确保日志框架能有效地输出日志。"

#: ../../../../sources/2.2/docs/topics/logging.txt:205
msgid ""
"Python's logging library provides several techniques to configure logging, "
"ranging from a programmatic interface to configuration files. By default, "
"Django uses the :ref:`dictConfig format <logging-config-dictschema>`."
msgstr "Python 的日志库提供了一些配置方法，可以使用编程接口或者配置文件。Django默认使用 :ref:`dictConfig format <logging-config-dictschema>`。"

#: ../../../../sources/2.2/docs/topics/logging.txt:210
msgid ""
"In order to configure logging, you use :setting:`LOGGING` to define a "
"dictionary of logging settings. These settings describes the loggers, "
"handlers, filters and formatters that you want in your logging setup, and "
"the log levels and other properties that you want those components to have."
msgstr "为了配置 logging ，用字典的格式定义一个 :setting:`LOGGING` 配置项，这些配置描述了你想要的 logger、handler、filter 和 formatter，以及它们的日志级别和其他你想要的属性。"

#: ../../../../sources/2.2/docs/topics/logging.txt:216
msgid ""
"By default, the :setting:`LOGGING` setting is merged with :ref:`Django's "
"default logging configuration <default-logging-configuration>` using the "
"following scheme."
msgstr "默认情况下 :setting:`LOGGING` 配置和 :ref:`Django 默认日志配置 <default-logging-configuration>`  按照下面的方式合并在一起："

#: ../../../../sources/2.2/docs/topics/logging.txt:220
msgid ""
"If the ``disable_existing_loggers`` key in the :setting:`LOGGING` dictConfig"
" is set to ``True`` (which is the default) then all loggers from the default"
" configuration will be disabled. Disabled loggers are not the same as "
"removed; the logger will still exist, but will silently discard anything "
"logged to it, not even propagating entries to a parent logger. Thus you "
"should be very careful using ``'disable_existing_loggers': True``; it's "
"probably not what you want. Instead, you can set "
"``disable_existing_loggers`` to ``False`` and redefine some or all of the "
"default loggers; or you can set :setting:`LOGGING_CONFIG` to ``None`` and "
":ref:`handle logging config yourself <disabling-logging-configuration>`."
msgstr "如果 :setting:`LOGGING` 这个配置项中的 ``disable_existing_loggers``  被设置为 ``True`` （默认就是 Ture），那么默认配置中的 logger 全部被禁用。被禁用的 logger 并不是被删除了，它们仍然存在，只是静默地丢弃所有发来的日志请求，甚至不会传播给上级 logger。所以你要谨慎使用 ``'disable_existing_loggers': True``；这很可能不是你想要的。相反你应该把 ``disable_existing_loggers`` 设置为 ``False``，然后再重新定义其中的一些默认 loggers，或者你也可以将  :setting:`LOGGING_CONFIG` 设置为 ``None`` 然后 :ref:`handle logging config yourself <disabling-logging-configuration>`。"

#: ../../../../sources/2.2/docs/topics/logging.txt:231
msgid ""
"Logging is configured as part of the general Django ``setup()`` function. "
"Therefore, you can be certain that loggers are always ready for use in your "
"project code."
msgstr "logging 被配置成了 Django  ``setup()`` 函数的一部分。因此，你可以确定的是，logger 一直都可以在项目代码里使用。"

#: ../../../../sources/2.2/docs/topics/logging.txt:238
msgid ""
"The full documentation for :ref:`dictConfig format <logging-config-"
"dictschema>` is the best source of information about logging configuration "
"dictionaries. However, to give you a taste of what is possible, here are "
"several examples."
msgstr ":ref:`dictConfig format <logging-config-dictschema>` 文档是获取日志配置细节的最好资料。不过，为了让你知道能做什么，下面有几个例子。"

#: ../../../../sources/2.2/docs/topics/logging.txt:242
msgid ""
"First, here's a simple configuration which writes all logging from the :ref"
":`django-logger` logger to a local file::"
msgstr "首先，这是一个简单配置，会将所有来自 :ref:`django-logger` 的日志输出至一个本地文件："

#: ../../../../sources/2.2/docs/topics/logging.txt:264
msgid ""
"If you use this example, be sure to change the ``'filename'`` path to a "
"location that's writable by the user that's running the Django application."
msgstr "若你使用此例子，切记要将 ``'filename'`` 指向的路径改为当前运行 Django 应用的用户可写的路径。"

#: ../../../../sources/2.2/docs/topics/logging.txt:267
msgid ""
"Second, here's an example of how to make the logging system print Django's "
"logging to the console. It may be useful during local development."
msgstr "接着是一个如何使日志系统将 Django 的日志输出至控制台的例子。这在本地调试时会很实用。"

#: ../../../../sources/2.2/docs/topics/logging.txt:270
msgid ""
"By default, this config only sends messages of level ``INFO`` or higher to "
"the console (same as Django's default logging config, except that the "
"default only displays log records when ``DEBUG=True``). Django does not log "
"many such messages. With this config, however, you can also set the "
"environment variable ``DJANGO_LOG_LEVEL=DEBUG`` to see all of Django's debug"
" logging which is very verbose as it includes all database queries::"
msgstr "默认情况下，该配置只会将 ``INFO`` 或以上的信息发送至终端（与 Django 的默认配置相同，除了 Django 仅在 ``DEBUG=True`` 时显示日志）。Django 并未打印太多信息。你也可以设置环境变量 ``DJANGO_LOG_LEVEL=DEBUG`` ，这样可以看到 Django 的所以调试日志，这将会很冗长，因为它包含了所有的数据库查询记录："

#: ../../../../sources/2.2/docs/topics/logging.txt:295
msgid "Finally, here's an example of a fairly complex logging setup::"
msgstr "最后是一个完整的日志配置例子："

#: ../../../../sources/2.2/docs/topics/logging.txt:350
msgid "This logging configuration does the following things:"
msgstr "该日志配置做了以下事情："

#: ../../../../sources/2.2/docs/topics/logging.txt:352
msgid ""
"Identifies the configuration as being in 'dictConfig version 1' format. At "
"present, this is the only dictConfig format version."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:355
msgid "Defines two formatters:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:357
msgid ""
"``simple``, that just outputs the log level name (e.g., ``DEBUG``) and the "
"log message."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:360
msgid ""
"The ``format`` string is a normal Python formatting string describing the "
"details that are to be output on each logging line. The full list of detail "
"that can be output can be found in :ref:`formatter-objects`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:365
msgid ""
"``verbose``, that outputs the log level name, the log message, plus the "
"time, process, thread and module that generate the log message."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:369
msgid "Defines two filters:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:371
msgid ""
"``project.logging.SpecialFilter``, using the alias ``special``. If this "
"filter required additional arguments, they can be provided as additional "
"keys in the filter configuration dictionary. In this case, the argument "
"``foo`` will be given a value of ``bar`` when instantiating "
"``SpecialFilter``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:377
msgid ""
"``django.utils.log.RequireDebugTrue``, which passes on records when "
":setting:`DEBUG` is ``True``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:380
msgid "Defines two handlers:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:382
msgid ""
"``console``, a :class:`~logging.StreamHandler`, which prints any ``INFO`` "
"(or higher) message to ``sys.stderr``. This handler uses the ``simple`` "
"output format."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:386
msgid ""
"``mail_admins``, an :class:`AdminEmailHandler`, which emails any ``ERROR`` "
"(or higher) message to the site :setting:`ADMINS`. This handler uses the "
"``special`` filter."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:390
msgid "Configures three loggers:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:392
msgid "``django``, which passes all messages to the ``console`` handler."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:394
msgid ""
"``django.request``, which passes all ``ERROR`` messages to the "
"``mail_admins`` handler. In addition, this logger is marked to *not* "
"propagate messages. This means that log messages written to "
"``django.request`` will not be handled by the ``django`` logger."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:400
msgid ""
"``myproject.custom``, which passes all messages at ``INFO`` or higher that "
"also pass the ``special`` filter to two handlers -- the ``console``, and "
"``mail_admins``. This means that all ``INFO`` level messages (or higher) "
"will be printed to the console; ``ERROR`` and ``CRITICAL`` messages will "
"also be output via email."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:408
msgid "Custom logging configuration"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:410
msgid ""
"If you don't want to use Python's dictConfig format to configure your "
"logger, you can specify your own configuration scheme."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:413
msgid ""
"The :setting:`LOGGING_CONFIG` setting defines the callable that will be used"
" to configure Django's loggers. By default, it points at Python's "
":func:`logging.config.dictConfig()` function. However, if you want to use a "
"different configuration process, you can use any other callable that takes a"
" single argument. The contents of :setting:`LOGGING` will be provided as the"
" value of that argument when logging is configured."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:423
msgid "Disabling logging configuration"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:425
msgid ""
"If you don't want to configure logging at all (or you want to manually "
"configure logging using your own approach), you can set "
":setting:`LOGGING_CONFIG` to ``None``. This will disable the configuration "
"process for :ref:`Django's default logging <default-logging-configuration>`."
" Here's an example that disables Django's logging configuration and then "
"manually configures logging:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:432
msgid "settings.py"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:440
msgid ""
"Setting :setting:`LOGGING_CONFIG` to ``None`` only means that the automatic "
"configuration process is disabled, not logging itself. If you disable the "
"configuration process, Django will still make logging calls, falling back to"
" whatever default logging behavior is defined."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:446
msgid "Django's logging extensions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:448
msgid ""
"Django provides a number of utilities to handle the unique requirements of "
"logging in Web server environment."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:454
msgid "Django provides several built-in loggers."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:459
msgid "``django``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:461
msgid ""
"The catch-all logger for messages in the  ``django`` hierarchy. No messages "
"are posted using this name but instead using one of the loggers below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:467
msgid "``django.request``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:469
msgid ""
"Log messages related to the handling of requests. 5XX responses are raised "
"as ``ERROR`` messages; 4XX responses are raised as ``WARNING`` messages. "
"Requests that are logged to the ``django.security`` logger aren't logged to "
"``django.request``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:474
#: ../../../../sources/2.2/docs/topics/logging.txt:492
#: ../../../../sources/2.2/docs/topics/logging.txt:516
msgid "Messages to this logger have the following extra context:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:476
#: ../../../../sources/2.2/docs/topics/logging.txt:494
msgid "``status_code``: The HTTP response code associated with the request."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:479
#: ../../../../sources/2.2/docs/topics/logging.txt:496
msgid "``request``: The request object that generated the logging message."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:485
msgid "``django.server``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:487
msgid ""
"Log messages related to the handling of requests received by the server "
"invoked by the :djadmin:`runserver` command. HTTP 5XX responses are logged "
"as ``ERROR`` messages, 4XX responses are logged as ``WARNING`` messages, and"
" everything else is logged as ``INFO``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:501
msgid "``django.template``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:503
msgid "Log messages related to the rendering of templates."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:505
msgid "Missing context variables are logged as ``DEBUG`` messages."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:510
msgid "``django.db.backends``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:512
msgid ""
"Messages relating to the interaction of code with the database. For example,"
" every application-level SQL statement executed by a request is logged at "
"the ``DEBUG`` level to this logger."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:518
msgid "``duration``: The time taken to execute the SQL statement."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:519
msgid "``sql``: The SQL statement that was executed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:520
msgid "``params``: The parameters that were used in the SQL call."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:522
msgid ""
"For performance reasons, SQL logging is only enabled when ``settings.DEBUG``"
" is set to ``True``, regardless of the logging level or handlers that are "
"installed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:526
msgid ""
"This logging does not include framework-level initialization (e.g. ``SET "
"TIMEZONE``) or transaction management queries (e.g. ``BEGIN``, ``COMMIT``, "
"and ``ROLLBACK``). Turn on query logging in your database if you wish to "
"view all database queries."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:534
msgid "``django.security.*``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:536
msgid ""
"The security loggers will receive messages on any occurrence of "
":exc:`~django.core.exceptions.SuspiciousOperation` and other security-"
"related errors. There is a sub-logger for each subtype of security error, "
"including all ``SuspiciousOperation``\\s. The level of the log event depends"
" on where the exception is handled.  Most occurrences are logged as a "
"warning, while any ``SuspiciousOperation`` that reaches the WSGI handler "
"will be logged as an error. For example, when an HTTP ``Host`` header is "
"included in a request from a client that does not match "
":setting:`ALLOWED_HOSTS`, Django will return a 400 response, and an error "
"message will be logged to the ``django.security.DisallowedHost`` logger."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:547
msgid ""
"These log events will reach the ``django`` logger by default, which mails "
"error events to admins when ``DEBUG=False``. Requests resulting in a 400 "
"response due to a ``SuspiciousOperation`` will not be logged to the "
"``django.request`` logger, but only to the ``django.security`` logger."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:552
msgid ""
"To silence a particular type of ``SuspiciousOperation``, you can override "
"that specific logger following this example:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:569
msgid ""
"Other ``django.security`` loggers not based on ``SuspiciousOperation`` are:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:571
msgid ""
"``django.security.csrf``: For :ref:`CSRF failures <csrf-rejected-requests>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:574
msgid "``django.db.backends.schema``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:576
msgid ""
"Logs the SQL queries that are executed during schema changes to the database"
" by the :doc:`migrations framework </topics/migrations>`. Note that it won't"
" log the queries executed by "
":class:`~django.db.migrations.operations.RunPython`. Messages to this logger"
" have ``params`` and ``sql`` in their extra context (but unlike "
"``django.db.backends``, not duration). The values have the same meaning as "
"explained in :ref:`django-db-logger`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:586
msgid ""
"Django provides one log handler in addition to those provided by the Python "
"logging module."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:591
msgid ""
"This handler sends an email to the site :setting:`ADMINS` for each log "
"message it receives."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:594
msgid ""
"If the log record contains a ``request`` attribute, the full details of the "
"request will be included in the email. The email subject will include the "
"phrase \"internal IP\" if the client's IP address is in the "
":setting:`INTERNAL_IPS` setting; if not, it will include \"EXTERNAL IP\"."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:599
msgid ""
"If the log record contains stack trace information, that stack trace will be"
" included in the email."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:602
msgid ""
"The ``include_html`` argument of ``AdminEmailHandler`` is used to control "
"whether the traceback email includes an HTML attachment containing the full "
"content of the debug Web page that would have been produced if "
":setting:`DEBUG` were ``True``. To set this value in your configuration, "
"include it in the handler definition for "
"``django.utils.log.AdminEmailHandler``, like this:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:619
msgid ""
"Note that this HTML version of the email contains a full traceback, with "
"names and values of local variables at each level of the stack, plus the "
"values of your Django settings. This information is potentially very "
"sensitive, and you may not want to send it over email. Consider using "
"something such as `Sentry`_ to get the best of both worlds -- the rich "
"information of full tracebacks plus the security of *not* sending the "
"information over email. You may also explicitly designate certain sensitive "
"information to be filtered out of error reports -- learn more on "
":ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:629
msgid ""
"By setting the ``email_backend`` argument of ``AdminEmailHandler``, the "
":ref:`email backend <topic-email-backends>` that is being used by the "
"handler can be overridden, like this:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:643
msgid ""
"By default, an instance of the email backend specified in "
":setting:`EMAIL_BACKEND` will be used."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:648
msgid ""
"Sends emails to admin users. To customize this behavior, you can subclass "
"the :class:`~django.utils.log.AdminEmailHandler` class and override this "
"method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:657
msgid ""
"Django provides some log filters in addition to those provided by the Python"
" logging module."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:662
msgid ""
"This filter accepts a callback function (which should accept a single "
"argument, the record to be logged), and calls it for each record that passes"
" through the filter. Handling of that record will not proceed if the "
"callback returns False."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:667
msgid ""
"For instance, to filter out :exc:`~django.http.UnreadablePostError` (raised "
"when a user cancels an upload) from the admin emails, you would create a "
"filter function::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:680
msgid "and then add it to your logging config:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:700
msgid "This filter will only pass on records when settings.DEBUG is False."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:702
msgid ""
"This filter is used as follows in the default :setting:`LOGGING` "
"configuration to ensure that the :class:`AdminEmailHandler` only sends error"
" emails to admins when :setting:`DEBUG` is ``False``:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:723
msgid ""
"This filter is similar to :class:`RequireDebugFalse`, except that records "
"are passed only when :setting:`DEBUG` is ``True``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:729
msgid "Django's default logging configuration"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:731
msgid "By default, Django configures the following logging:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:733
msgid "When :setting:`DEBUG` is ``True``:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:735
msgid ""
"The ``django`` logger sends messages in the ``django`` hierarchy (except "
"``django.server``) at the ``INFO`` level or higher to the console."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:738
msgid "When :setting:`DEBUG` is ``False``:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:740
msgid ""
"The ``django`` logger sends messages in the ``django`` hierarchy (except "
"``django.server``)  with ``ERROR`` or ``CRITICAL`` level to "
":class:`AdminEmailHandler`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:744
msgid "Independent of the value of :setting:`DEBUG`:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:746
msgid ""
"The :ref:`django-server-logger` logger sends messages at the ``INFO`` level "
"or higher to the console."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:749
msgid ""
"All loggers except :ref:`django-server-logger` propagate logging to their "
"parents, up to the root ``django`` logger. The ``console`` and "
"``mail_admins`` handlers are attached to the root logger to provide the "
"behavior described above."
msgstr ""

#: ../../../../sources/2.2/docs/topics/logging.txt:754
msgid ""
"See also :ref:`Configuring logging <configuring-logging>` to learn how you "
"can complement or replace this default logging configuration."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:3
msgid "Migrations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:8
msgid ""
"Migrations are Django's way of propagating changes you make to your models "
"(adding a field, deleting a model, etc.) into your database schema. They're "
"designed to be mostly automatic, but you'll need to know when to make "
"migrations, when to run them, and the common problems you might run into."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:14
msgid "The Commands"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:16
msgid ""
"There are several commands which you will use to interact with migrations "
"and Django's handling of database schema:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:19
msgid ""
":djadmin:`migrate`, which is responsible for applying and unapplying "
"migrations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:22
msgid ""
":djadmin:`makemigrations`, which is responsible for creating new migrations "
"based on the changes you have made to your models."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:25
msgid ""
":djadmin:`sqlmigrate`, which displays the SQL statements for a migration."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:27
msgid ""
":djadmin:`showmigrations`, which lists a project's migrations and their "
"status."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:30
msgid ""
"You should think of migrations as a version control system for your database"
" schema. ``makemigrations`` is responsible for packaging up your model "
"changes into individual migration files - analogous to commits - and "
"``migrate`` is responsible for applying those to your database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:35
msgid ""
"The migration files for each app live in a \"migrations\" directory inside "
"of that app, and are designed to be committed to, and distributed as part "
"of, its codebase. You should be making them once on your development machine"
" and then running the same migrations on your colleagues' machines, your "
"staging machines, and eventually your production machines."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:42
msgid ""
"It is possible to override the name of the package which contains the "
"migrations on a per-app basis by modifying the :setting:`MIGRATION_MODULES` "
"setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:46
msgid ""
"Migrations will run the same way on the same dataset and produce consistent "
"results, meaning that what you see in development and staging is, under the "
"same circumstances, exactly what will happen in production."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:50
msgid ""
"Django will make migrations for any change to your models or fields - even "
"options that don't affect the database - as the only way it can reconstruct "
"a field correctly is to have all the changes in the history, and you might "
"need those options in some data migrations later on (for example, if you've "
"set custom validators)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:57
msgid "Backend Support"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:59
msgid ""
"Migrations are supported on all backends that Django ships with, as well as "
"any third-party backends if they have programmed in support for schema "
"alteration (done via the :doc:`SchemaEditor </ref/schema-editor>` class)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:63
msgid ""
"However, some databases are more capable than others when it comes to schema"
" migrations; some of the caveats are covered below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:69
msgid ""
"PostgreSQL is the most capable of all the databases here in terms of schema "
"support."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:72
msgid ""
"The only caveat is that prior to PostgreSQL 11, adding columns with default "
"values causes a full rewrite of the table, for a time proportional to its "
"size. For this reason, it's recommended you always create new columns with "
"``null=True``, as this way they will be added immediately."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:78
msgid "MySQL"
msgstr "MySQL"

#: ../../../../sources/2.2/docs/topics/migrations.txt:80
msgid ""
"MySQL lacks support for transactions around schema alteration operations, "
"meaning that if a migration fails to apply you will have to manually unpick "
"the changes in order to try again (it's impossible to roll back to an "
"earlier point)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:85
msgid ""
"In addition, MySQL will fully rewrite tables for almost every schema "
"operation and generally takes a time proportional to the number of rows in "
"the table to add or remove columns. On slower hardware this can be worse "
"than a minute per million rows - adding a few columns to a table with just a"
" few million rows could lock your site up for over ten minutes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:91
msgid ""
"Finally, MySQL has relatively small limits on name lengths for columns, "
"tables and indexes, as well as a limit on the combined size of all columns "
"an index covers. This means that indexes that are possible on other backends"
" will fail to be created under MySQL."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:97
msgid "SQLite"
msgstr "SQLite"

#: ../../../../sources/2.2/docs/topics/migrations.txt:99
msgid ""
"SQLite has very little built-in schema alteration support, and so Django "
"attempts to emulate it by:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:102
msgid "Creating a new table with the new schema"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:103
msgid "Copying the data across"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:104
msgid "Dropping the old table"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:105
msgid "Renaming the new table to match the original name"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:107
msgid ""
"This process generally works well, but it can be slow and occasionally "
"buggy. It is not recommended that you run and migrate SQLite in a production"
" environment unless you are very aware of the risks and its limitations; the"
" support Django ships with is designed to allow developers to use SQLite on "
"their local machines to develop less complex Django projects without the "
"need for a full database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:115
msgid "Workflow"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:117
msgid ""
"Working with migrations is simple. Make changes to your models - say, add a "
"field and remove a model - and then run :djadmin:`makemigrations`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:125
msgid ""
"Your models will be scanned and compared to the versions currently contained"
" in your migration files, and then a new set of migrations will be written "
"out. Make sure to read the output to see what ``makemigrations`` thinks you "
"have changed - it's not perfect, and for complex changes it might not be "
"detecting what you expect."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:131
msgid ""
"Once you have your new migration files, you should apply them to your "
"database to make sure they work as expected::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:141
msgid ""
"Once the migration is applied, commit the migration and the models change to"
" your version control system as a single commit - that way, when other "
"developers (or your production servers) check out the code, they'll get both"
" the changes to your models and the accompanying migration at the same time."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:147
msgid ""
"If you want to give the migration(s) a meaningful name instead of a "
"generated one, you can use the :option:`makemigrations --name` option::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:153
msgid "Version control"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:155
msgid ""
"Because migrations are stored in version control, you'll occasionally come "
"across situations where you and another developer have both committed a "
"migration to the same app at the same time, resulting in two migrations with"
" the same number."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:160
msgid ""
"Don't worry - the numbers are just there for developers' reference, Django "
"just cares that each migration has a different name. Migrations specify "
"which other migrations they depend on - including earlier migrations in the "
"same app - in the file, so it's possible to detect when there's two new "
"migrations for the same app that aren't ordered."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:166
msgid ""
"When this happens, Django will prompt you and give you some options. If it "
"thinks it's safe enough, it will offer to automatically linearize the two "
"migrations for you. If not, you'll have to go in and modify the migrations "
"yourself - don't worry, this isn't difficult, and is explained more in :ref"
":`migration-files` below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:173
msgid "Dependencies"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:175
msgid ""
"While migrations are per-app, the tables and relationships implied by your "
"models are too complex to be created for just one app at a time. When you "
"make a migration that requires something else to run - for example, you add "
"a ``ForeignKey`` in your ``books`` app to your ``authors`` app - the "
"resulting migration will contain a dependency on a migration in ``authors``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:181
msgid ""
"This means that when you run the migrations, the ``authors`` migration runs "
"first and creates the table the ``ForeignKey`` references, and then the "
"migration that makes the ``ForeignKey`` column runs afterwards and creates "
"the constraint. If this didn't happen, the migration would try to create the"
" ``ForeignKey`` column without the table it's referencing existing and your "
"database would throw an error."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:188
msgid ""
"This dependency behavior affects most migration operations where you "
"restrict to a single app. Restricting to a single app (either in "
"``makemigrations`` or ``migrate``) is a best-efforts promise, and not a "
"guarantee; any other apps that need to be used to get dependencies correct "
"will be."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:194
msgid ""
"Apps without migrations must not have relations (``ForeignKey``, "
"``ManyToManyField``, etc.) to apps with migrations. Sometimes it may work, "
"but it's not supported."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:201
msgid "Migration files"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:203
msgid ""
"Migrations are stored as an on-disk format, referred to here as \"migration "
"files\". These files are actually just normal Python files with an agreed-"
"upon object layout, written in a declarative style."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:207
msgid "A basic migration file looks like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:220
msgid ""
"What Django looks for when it loads a migration file (as a Python module) is"
" a subclass of ``django.db.migrations.Migration`` called ``Migration``. It "
"then inspects this object for four attributes, only two of which are used "
"most of the time:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:225
msgid "``dependencies``, a list of migrations this one depends on."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:226
msgid ""
"``operations``, a list of ``Operation`` classes that define what this "
"migration does."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:229
msgid ""
"The operations are the key; they are a set of declarative instructions which"
" tell Django what schema changes need to be made. Django scans them and "
"builds an in-memory representation of all of the schema changes to all apps,"
" and uses this to generate the SQL which makes the schema changes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:234
msgid ""
"That in-memory structure is also used to work out what the differences are "
"between your models and the current state of your migrations; Django runs "
"through all the changes, in order, on an in-memory set of models to come up "
"with the state of your models last time you ran ``makemigrations``. It then "
"uses these models to compare against the ones in your ``models.py`` files to"
" work out what you have changed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:241
msgid ""
"You should rarely, if ever, need to edit migration files by hand, but it's "
"entirely possible to write them manually if you need to. Some of the more "
"complex operations are not autodetectable and are only available via a hand-"
"written migration, so don't be scared about editing them if you have to."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:247
msgid "Custom fields"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:249
msgid ""
"You can't modify the number of positional arguments in an already migrated "
"custom field without raising a ``TypeError``. The old migration will call "
"the modified ``__init__`` method with the old signature. So if you need a "
"new argument, please create a keyword argument and add something like "
"``assert 'argument_name' in kwargs`` in the constructor."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:258
msgid "Model managers"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:260
msgid ""
"You can optionally serialize managers into migrations and have them "
"available in :class:`~django.db.migrations.operations.RunPython` operations."
" This is done by defining a ``use_in_migrations`` attribute on the manager "
"class::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:270
msgid ""
"If you are using the :meth:`~django.db.models.from_queryset` function to "
"dynamically generate a manager class, you need to inherit from the generated"
" class to make it importable::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:280
msgid ""
"Please refer to the notes about :ref:`historical-models` in migrations to "
"see the implications that come along."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:284
msgid "Initial migrations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:288
msgid ""
"The \"initial migrations\" for an app are the migrations that create the "
"first version of that app's tables. Usually an app will have just one "
"initial migration, but in some cases of complex model interdependencies it "
"may have two or more."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:293
msgid ""
"Initial migrations are marked with an ``initial = True`` class attribute on "
"the migration class. If an ``initial`` class attribute isn't found, a "
"migration will be considered \"initial\" if it is the first migration in the"
" app (i.e. if it has no dependencies on any other migration in the same "
"app)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:298
msgid ""
"When the :option:`migrate --fake-initial` option is used, these initial "
"migrations are treated specially. For an initial migration that creates one "
"or more tables (``CreateModel`` operation), Django checks that all of those "
"tables already exist in the database and fake-applies the migration if so. "
"Similarly, for an initial migration that adds one or more fields "
"(``AddField`` operation), Django checks that all of the respective columns "
"already exist in the database and fake-applies the migration if so. Without "
"``--fake-initial``, initial migrations are treated no differently from any "
"other migration."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:310
msgid "History consistency"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:312
msgid ""
"As previously discussed, you may need to linearize migrations manually when "
"two development branches are joined. While editing migration dependencies, "
"you can inadvertently create an inconsistent history state where a migration"
" has been applied but some of its dependencies haven't. This is a strong "
"indication that the dependencies are incorrect, so Django will refuse to run"
" migrations or make new migrations until it's fixed. When using multiple "
"databases, you can use the :meth:`allow_migrate` method of :ref:`database "
"routers <topics-db-multi-db-routing>` to control which databases "
":djadmin:`makemigrations` checks for consistent history."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:323
msgid "Adding migrations to apps"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:325
msgid ""
"Adding migrations to new apps is straightforward - they come preconfigured "
"to accept migrations, and so just run :djadmin:`makemigrations` once you've "
"made some changes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:329
msgid ""
"If your app already has models and database tables, and doesn't have "
"migrations yet (for example, you created it against a previous Django "
"version), you'll need to convert it to use migrations; this is a simple "
"process::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:335
msgid ""
"This will make a new initial migration for your app. Now, run ``python "
"manage.py migrate --fake-initial``, and Django will detect that you have an "
"initial migration *and* that the tables it wants to create already exist, "
"and will mark the migration as already applied. (Without the "
":option:`migrate --fake-initial` flag, the command would error out because "
"the tables it wants to create already exist.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:342
msgid "Note that this only works given two things:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:344
msgid ""
"You have not changed your models since you made their tables. For migrations"
" to work, you must make the initial migration *first* and then make changes,"
" as Django compares changes against migration files, not the database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:348
msgid ""
"You have not manually edited your database - Django won't be able to detect "
"that your database doesn't match your models, you'll just get errors when "
"migrations try to modify those tables."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:355
msgid "Historical models"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:357
msgid ""
"When you run migrations, Django is working from historical versions of your "
"models stored in the migration files. If you write Python code using the "
":class:`~django.db.migrations.operations.RunPython` operation, or if you "
"have ``allow_migrate`` methods on your database routers, you **need to use**"
" these historical model versions rather than importing them directly."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:365
msgid ""
"If you import models directly rather than using the historical models, your "
"migrations *may work initially* but will fail in the future when you try to "
"re-run old migrations (commonly, when you set up a new installation and run "
"through all the migrations to set up the database)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:370
msgid ""
"This means that historical model problems may not be immediately obvious. If"
" you run into this kind of failure, it's OK to edit the migration to use the"
" historical models rather than direct imports and commit those changes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:374
msgid ""
"Because it's impossible to serialize arbitrary Python code, these historical"
" models will not have any custom methods that you have defined. They will, "
"however, have the same fields, relationships, managers (limited to those "
"with ``use_in_migrations = True``) and ``Meta`` options (also versioned, so "
"they may be different from your current ones)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:382
msgid ""
"This means that you will NOT have custom ``save()`` methods called on "
"objects when you access them in migrations, and you will NOT have any custom"
" constructors or instance methods. Plan appropriately!"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:386
msgid ""
"References to functions in field options such as ``upload_to`` and "
"``limit_choices_to`` and model manager declarations with managers having "
"``use_in_migrations = True`` are serialized in migrations, so the functions "
"and classes will need to be kept around for as long as there is a migration "
"referencing them. Any :doc:`custom model fields </howto/custom-model-"
"fields>` will also need to be kept, since these are imported directly by "
"migrations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:393
msgid ""
"In addition, the base classes of the model are just stored as pointers, so "
"you must always keep base classes around for as long as there is a migration"
" that contains a reference to them. On the plus side, methods and managers "
"from these base classes inherit normally, so if you absolutely need access "
"to these you can opt to move them into a superclass."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:399
msgid ""
"To remove old references, you can :ref:`squash migrations <migration-"
"squashing>` or, if there aren't many references, copy them into the "
"migration files."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:405
msgid "Considerations when removing model fields"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:407
msgid ""
"Similar to the \"references to historical functions\" considerations "
"described in the previous section, removing custom model fields from your "
"project or third-party app will cause a problem if they are referenced in "
"old migrations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:411
msgid ""
"To help with this situation, Django provides some model field attributes to "
"assist with model field deprecation using the :doc:`system checks framework "
"</topics/checks>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:415
msgid ""
"Add the ``system_check_deprecated_details`` attribute to your model field "
"similar to the following::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:428
msgid ""
"After a deprecation period of your choosing (two or three feature releases "
"for fields in Django itself), change the ``system_check_deprecated_details``"
" attribute to ``system_check_removed_details`` and update the dictionary "
"similar to::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:443
msgid ""
"You should keep the field's methods that are required for it to operate in "
"database migrations such as ``__init__()``, ``deconstruct()``, and "
"``get_internal_type()``. Keep this stub field for as long as any migrations "
"which reference the field exist. For example, after squashing migrations and"
" removing the old ones, you should be able to remove the field completely."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:452
msgid "Data Migrations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:454
msgid ""
"As well as changing the database schema, you can also use migrations to "
"change the data in the database itself, in conjunction with the schema if "
"you want."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:457
msgid ""
"Migrations that alter data are usually called \"data migrations\"; they're "
"best written as separate migrations, sitting alongside your schema "
"migrations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:460
msgid ""
"Django can't automatically generate data migrations for you, as it does with"
" schema migrations, but it's not very hard to write them. Migration files in"
" Django are made up of :doc:`Operations </ref/migration-operations>`, and "
"the main operation you use for data migrations is "
":class:`~django.db.migrations.operations.RunPython`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:466
msgid ""
"To start, make an empty migration file you can work from (Django will put "
"the file in the right place, suggest a name, and add dependencies for you)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:471
msgid "Then, open up the file; it should look something like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:485
msgid ""
"Now, all you need to do is create a new function and have "
":class:`~django.db.migrations.operations.RunPython` use it. "
":class:`~django.db.migrations.operations.RunPython` expects a callable as "
"its argument which takes two arguments - the first is an :doc:`app registry "
"</ref/applications/>` that has the historical versions of all your models "
"loaded into it to match where in your history the migration sits, and the "
"second is a :doc:`SchemaEditor </ref/schema-editor>`, which you can use to "
"manually effect database schema changes (but beware, doing this can confuse "
"the migration autodetector!)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:495
msgid ""
"Let's write a simple migration that populates our new ``name`` field with "
"the combined values of ``first_name`` and ``last_name`` (we've come to our "
"senses and realized that not everyone has first and last names). All we need"
" to do is use the historical model and iterate over the rows::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:520
msgid ""
"Once that's done, we can just run ``python manage.py migrate`` as normal and"
" the data migration will run in place alongside other migrations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:523
msgid ""
"You can pass a second callable to "
":class:`~django.db.migrations.operations.RunPython` to run whatever logic "
"you want executed when migrating backwards. If this callable is omitted, "
"migrating backwards will raise an exception."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:529
msgid "Accessing models from other apps"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:531
msgid ""
"When writing a ``RunPython`` function that uses models from apps other than "
"the one in which the migration is located, the migration's ``dependencies`` "
"attribute should include the latest migration of each app that is involved, "
"otherwise you may get an error similar to: ``LookupError: No installed app "
"with label 'myappname'`` when you try to retrieve the model in the "
"``RunPython`` function using ``apps.get_model()``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:538
msgid ""
"In the following example, we have a migration in ``app1`` which needs to use"
" models in ``app2``. We aren't concerned with the details of ``move_m1`` "
"other than the fact it will need to access models from both apps. Therefore "
"we've added a dependency that specifies the last migration of ``app2``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:556
msgid "More advanced migrations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:558
msgid ""
"If you're interested in the more advanced migration operations, or want to "
"be able to write your own, see the :doc:`migration operations reference "
"</ref/migration-operations>` and the \"how-to\" on :doc:`writing migrations "
"</howto/writing-migrations>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:566
msgid "Squashing migrations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:568
msgid ""
"You are encouraged to make migrations freely and not worry about how many "
"you have; the migration code is optimized to deal with hundreds at a time "
"without much slowdown. However, eventually you will want to move back from "
"having several hundred migrations to just a few, and that's where squashing "
"comes in."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:573
msgid ""
"Squashing is the act of reducing an existing set of many migrations down to "
"one (or sometimes a few) migrations which still represent the same changes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:576
msgid ""
"Django does this by taking all of your existing migrations, extracting their"
" ``Operation``\\s and putting them all in sequence, and then running an "
"optimizer over them to try and reduce the length of the list - for example, "
"it knows that :class:`~django.db.migrations.operations.CreateModel` and "
":class:`~django.db.migrations.operations.DeleteModel` cancel each other out,"
" and it knows that :class:`~django.db.migrations.operations.AddField` can be"
" rolled into :class:`~django.db.migrations.operations.CreateModel`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:584
msgid ""
"Once the operation sequence has been reduced as much as possible - the "
"amount possible depends on how closely intertwined your models are and if "
"you have any :class:`~django.db.migrations.operations.RunSQL` or "
":class:`~django.db.migrations.operations.RunPython` operations (which can't "
"be optimized through unless they are marked as ``elidable``) - Django will "
"then write it back out into a new set of migration files."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:591
msgid ""
"These files are marked to say they replace the previously-squashed "
"migrations, so they can coexist with the old migration files, and Django "
"will intelligently switch between them depending where you are in the "
"history. If you're still part-way through the set of migrations that you "
"squashed, it will keep using them until it hits the end and then switch to "
"the squashed history, while new installs will just use the new squashed "
"migration and skip all the old ones."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:598
msgid ""
"This enables you to squash and not mess up systems currently in production "
"that aren't fully up-to-date yet. The recommended process is to squash, "
"keeping the old files, commit and release, wait until all systems are "
"upgraded with the new release (or if you're a third-party project, just "
"ensure your users upgrade releases in order without skipping any), and then "
"remove the old files, commit and do a second release."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:605
msgid ""
"The command that backs all this is :djadmin:`squashmigrations` - just pass "
"it the app label and migration name you want to squash up to, and it'll get "
"to work::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:624
msgid ""
"Use the :option:`squashmigrations --squashed-name` option if you want to set"
" the name of the squashed migration rather than use an autogenerated one."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:627
msgid ""
"Note that model interdependencies in Django can get very complex, and "
"squashing may result in migrations that do not run; either mis-optimized (in"
" which case you can try again with ``--no-optimize``, though you should also"
" report an issue), or with a ``CircularDependencyError``, in which case you "
"can manually resolve it."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:632
msgid ""
"To manually resolve a ``CircularDependencyError``, break out one of the "
"ForeignKeys in the circular dependency loop into a separate migration, and "
"move the dependency on the other app with it. If you're unsure, see how "
":djadmin:`makemigrations` deals with the problem when asked to create brand "
"new migrations from your models. In a future release of Django, "
":djadmin:`squashmigrations` will be updated to attempt to resolve these "
"errors itself."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:640
msgid ""
"Once you've squashed your migration, you should then commit it alongside the"
" migrations it replaces and distribute this change to all running instances "
"of your application, making sure that they run ``migrate`` to store the "
"change in their database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:645
msgid ""
"You must then transition the squashed migration to a normal migration by:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:647
msgid "Deleting all the migration files it replaces."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:648
msgid ""
"Updating all migrations that depend on the deleted migrations to depend on "
"the squashed migration instead."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:650
msgid ""
"Removing the ``replaces`` attribute in the ``Migration`` class of the "
"squashed migration (this is how Django tells that it is a squashed "
"migration)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:654
msgid ""
"Once you've squashed a migration, you should not then re-squash that "
"squashed migration until you have fully transitioned it to a normal "
"migration."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:661
msgid "Serializing values"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:663
msgid ""
"Migrations are just Python files containing the old definitions of your "
"models - thus, to write them, Django must take the current state of your "
"models and serialize them out into a file."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:667
msgid ""
"While Django can serialize most things, there are some things that we just "
"can't serialize out into a valid Python representation - there's no Python "
"standard for how a value can be turned back into code (``repr()`` only works"
" for basic values, and doesn't specify import paths)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:672
msgid "Django can serialize the following:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:674
msgid ""
"``int``, ``float``, ``bool``, ``str``, ``bytes``, ``None``, ``NoneType``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:675
msgid "``list``, ``set``, ``tuple``, ``dict``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:676
msgid ""
"``datetime.date``, ``datetime.time``, and ``datetime.datetime`` instances "
"(include those that are timezone-aware)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:678
msgid "``decimal.Decimal`` instances"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:679
msgid "``enum.Enum`` instances"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:680
msgid "``uuid.UUID`` instances"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:681
msgid ""
":func:`functools.partial` and :class:`functools.partialmethod` instances "
"which have serializable ``func``, ``args``, and ``keywords`` values."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:683
msgid "``LazyObject`` instances which wrap a serializable value."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:684
msgid "Any Django field"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:685
msgid ""
"Any function or method reference (e.g. ``datetime.datetime.today``) (must be"
" in module's top-level scope)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:686
msgid "Unbound methods used from within the class body"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:687
msgid "Any class reference (must be in module's top-level scope)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:688
msgid ""
"Anything with a custom ``deconstruct()`` method (:ref:`see below <custom-"
"deconstruct-method>`)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:692
msgid "Serialization support for :class:`functools.partialmethod` was added."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:696
msgid "Serialization support for ``NoneType`` was added."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:698
msgid "Django cannot serialize:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:700
msgid "Nested classes"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:701
msgid "Arbitrary class instances (e.g. ``MyClass(4.3, 5.7)``)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:702
msgid "Lambdas"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:707
msgid "Custom serializers"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:711
msgid ""
"You can serialize other types by writing a custom serializer. For example, "
"if Django didn't serialize :class:`~decimal.Decimal` by default, you could "
"do this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:726
msgid ""
"The first argument of ``MigrationWriter.register_serializer()`` is a type or"
" iterable of types that should use the serializer."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:729
msgid ""
"The ``serialize()`` method of your serializer must return a string of how "
"the value should appear in migrations and a set of any imports that are "
"needed in the migration."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:736
msgid "Adding a ``deconstruct()`` method"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:738
msgid ""
"You can let Django serialize your own custom class instances by giving the "
"class a ``deconstruct()`` method. It takes no arguments, and should return a"
" tuple of three things ``(path, args, kwargs)``:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:742
msgid ""
"``path`` should be the Python path to the class, with the class name "
"included as the last part (for example, ``myapp.custom_things.MyClass``). If"
" your class is not available at the top level of a module it is not "
"serializable."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:746
msgid ""
"``args`` should be a list of positional arguments to pass to your class' "
"``__init__`` method. Everything in this list should itself be serializable."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:749
msgid ""
"``kwargs`` should be a dict of keyword arguments to pass to your class' "
"``__init__`` method. Every value should itself be serializable."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:754
msgid ""
"This return value is different from the ``deconstruct()`` method :ref:`for "
"custom fields <custom-field-deconstruct-method>` which returns a tuple of "
"four items."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:758
msgid ""
"Django will write out the value as an instantiation of your class with the "
"given arguments, similar to the way it writes out references to Django "
"fields."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:761
msgid ""
"To prevent a new migration from being created each time "
":djadmin:`makemigrations` is run, you should also add a ``__eq__()`` method "
"to the decorated class. This function will be called by Django's migration "
"framework to detect changes between states."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:766
msgid ""
"As long as all of the arguments to your class' constructor are themselves "
"serializable, you can use the ``@deconstructible`` class decorator from "
"``django.utils.deconstruct`` to add the ``deconstruct()`` method::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:783
msgid ""
"The decorator adds logic to capture and preserve the arguments on their way "
"into your constructor, and then returns those arguments exactly when "
"deconstruct() is called."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:788
msgid "Supporting multiple Django versions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:790
msgid ""
"If you are the maintainer of a third-party app with models, you may need to "
"ship migrations that support multiple Django versions. In this case, you "
"should always run :djadmin:`makemigrations` **with the lowest Django version"
" you wish to support**."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:795
msgid ""
"The migrations system will maintain backwards-compatibility according to the"
" same policy as the rest of Django, so migration files generated on Django "
"X.Y should run unchanged on Django X.Y+1. The migrations system does not "
"promise forwards-compatibility, however. New features may be added, and "
"migration files generated with newer versions of Django may not work on "
"older versions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:805
msgid ":doc:`The Migrations Operations Reference </ref/migration-operations>`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:804
msgid ""
"Covers the schema operations API, special operations, and writing your own "
"operations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:808
msgid ":doc:`The Writing Migrations \"how-to\" </howto/writing-migrations>`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/migrations.txt:808
msgid ""
"Explains how to structure and write database migrations for different "
"scenarios you might encounter."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:3
msgid "Pagination"
msgstr "分页"

#: ../../../../sources/2.2/docs/topics/pagination.txt:8
msgid ""
"Django provides a few classes that help you manage paginated data -- that "
"is, data that's split across several pages, with \"Previous/Next\" links. "
"These classes live in :file:`django/core/paginator.py`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:15
msgid ""
"Give :class:`Paginator` a list of objects, plus the number of items you'd "
"like to have on each page, and it gives you methods for accessing the items "
"for each page::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:69
msgid ""
"Note that you can give ``Paginator`` a list/tuple, a Django ``QuerySet``, or"
" any other object with a ``count()`` or ``__len__()`` method. When "
"determining the number of objects contained in the passed object, "
"``Paginator`` will first try calling ``count()``, then fallback to using "
"``len()`` if the passed object has no ``count()`` method. This allows "
"objects such as Django's ``QuerySet`` to use a more efficient ``count()`` "
"method when available."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:80
msgid "Using ``Paginator`` in a view"
msgstr "在视图中使用 ``Paginator`` "

#: ../../../../sources/2.2/docs/topics/pagination.txt:82
msgid ""
"Here's a slightly more complex example using :class:`Paginator` in a view to"
" paginate a queryset. We give both the view and the accompanying template to"
" show how you can display the results. This example assumes you have a "
"``Contacts`` model that has already been imported."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:87
msgid "The view function looks like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:100
msgid ""
"In the template :file:`list.html`, you'll want to include navigation between"
" pages along with any interesting information from the objects themselves:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:130
msgid "``Paginator`` objects"
msgstr "``Paginator`` 对象"

#: ../../../../sources/2.2/docs/topics/pagination.txt:132
msgid "The :class:`Paginator` class has this constructor:"
msgstr ":class:`Paginator` 类的构造方法是:"

#: ../../../../sources/2.2/docs/topics/pagination.txt:151
msgid "``object_list``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:140
msgid ""
"A list, tuple, ``QuerySet``, or other sliceable object with a ``count()`` or"
" ``__len__()`` method. For consistent pagination, ``QuerySet``\\s should be "
"ordered, e.g. with an :meth:`~django.db.models.query.QuerySet.order_by` "
"clause or with a default :attr:`~django.db.models.Options.ordering` on the "
"model."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:146
msgid "Performance issues paginating large ``QuerySet``\\s"
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:148
msgid ""
"If you're using a ``QuerySet`` with a very large number of items, requesting"
" high page numbers might be slow on some databases, because the resulting "
"``LIMIT``/``OFFSET`` query needs to count the number of ``OFFSET`` records "
"which takes longer as the page number gets higher."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:155
msgid "``per_page``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:154
msgid ""
"The maximum number of items to include on a page, not including orphans (see"
" the ``orphans`` optional argument below)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:168
msgid "``orphans``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:161
msgid ""
"Use this when you don't want to have a last page with very few items. If the"
" last page would normally have a number of items less than or equal to "
"``orphans``, then those items will be added to the previous page (which "
"becomes the last page) instead of leaving the items on a page by themselves."
" For example, with 23 items, ``per_page=10``, and ``orphans=3``, there will "
"be two pages; the first page with 10 items and the second (and last) page "
"with 13 items. ``orphans`` defaults to zero, which means pages are never "
"combined and the last page may have one item."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:172
msgid "``allow_empty_first_page``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:171
msgid ""
"Whether or not the first page is allowed to be empty.  If ``False`` and "
"``object_list`` is  empty, then an ``EmptyPage`` error will be raised."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:175
#: ../../../../sources/2.2/docs/topics/pagination.txt:256
#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:502
msgid "Methods"
msgstr "方法"

#: ../../../../sources/2.2/docs/topics/pagination.txt:179
msgid ""
"Returns a :class:`Page` object with the given 1-based index, while also "
"handling out of range and invalid page numbers."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:182
msgid ""
"If the page isn't a number, it returns the first page. If the page number is"
" negative or greater than the number of pages, it returns the last page."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:185
msgid ""
"It raises an exception (:exc:`EmptyPage`) only if you specify "
"``Paginator(..., allow_empty_first_page=False)`` and the ``object_list`` is "
"empty."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:191
msgid ""
"Returns a :class:`Page` object with the given 1-based index. Raises "
":exc:`InvalidPage` if the given page number doesn't exist."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:195
#: ../../../../sources/2.2/docs/topics/pagination.txt:295
#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:477
msgid "Attributes"
msgstr "属性"

#: ../../../../sources/2.2/docs/topics/pagination.txt:199
msgid "The total number of objects, across all pages."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:203
msgid ""
"When determining the number of objects contained in ``object_list``, "
"``Paginator`` will first try calling ``object_list.count()``. If "
"``object_list`` has no ``count()`` method, then ``Paginator`` will fallback "
"to using ``len(object_list)``. This allows objects, such as Django's "
"``QuerySet``, to use a more efficient ``count()`` method when available."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:212
msgid "The total number of pages."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:216
msgid ""
"A 1-based range iterator of page numbers, e.g. yielding ``[1, 2, 3, 4]``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:219
msgid "``InvalidPage`` exceptions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:223
msgid ""
"A base class for exceptions raised when a paginator is passed an invalid "
"page number."
msgstr "当paginator对象试图访问无效页码时引发异常的基类。"

#: ../../../../sources/2.2/docs/topics/pagination.txt:226
msgid ""
"The :meth:`Paginator.page` method raises an exception if the requested page "
"is invalid (i.e., not an integer) or contains no objects. Generally, it's "
"enough to catch the ``InvalidPage`` exception, but if you'd like more "
"granularity, you can catch either of the following exceptions:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:233
msgid "Raised when ``page()`` is given a value that isn't an integer."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:237
msgid ""
"Raised when ``page()`` is given a valid value but no objects exist on that "
"page."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:240
msgid ""
"Both of the exceptions are subclasses of :exc:`InvalidPage`, so you can "
"handle them both with a simple ``except InvalidPage``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:245
msgid "``Page`` objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:247
msgid ""
"You usually won't construct ``Page`` objects by hand -- you'll get them "
"using :meth:`Paginator.page`."
msgstr "你通常不会手动实例化Page对象 - 你会使用方法Paginator.page()。"

#: ../../../../sources/2.2/docs/topics/pagination.txt:252
msgid ""
"A page acts like a sequence of :attr:`Page.object_list` when using ``len()``"
" or iterating it directly."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:260
msgid "Returns ``True`` if there's a next page."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:264
msgid "Returns ``True`` if there's a previous page."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:268
msgid "Returns ``True`` if there's a next *or* previous page."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:272
msgid ""
"Returns the next page number. Raises :exc:`InvalidPage` if next page doesn't"
" exist."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:277
msgid ""
"Returns the previous page number. Raises :exc:`InvalidPage` if previous page"
" doesn't exist."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:282
msgid ""
"Returns the 1-based index of the first object on the page, relative to all "
"of the objects in the paginator's list. For example, when paginating a list "
"of 5 objects with 2 objects per page, the second page's "
":meth:`~Page.start_index` would return ``3``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:289
msgid ""
"Returns the 1-based index of the last object on the page, relative to all of"
" the objects in the paginator's list. For example, when paginating a list of"
" 5 objects with 2 objects per page, the second page's "
":meth:`~Page.end_index` would return ``4``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/pagination.txt:299
msgid "The list of objects on this page."
msgstr "此页上的对象列表。"

#: ../../../../sources/2.2/docs/topics/pagination.txt:303
msgid "The 1-based page number for this page."
msgstr "此页的基于 1 的页码。"

#: ../../../../sources/2.2/docs/topics/pagination.txt:307
msgid "The associated :class:`Paginator` object."
msgstr "关联的 :class:`Paginator` 对象。"

#: ../../../../sources/2.2/docs/topics/performance.txt:3
msgid "Performance and optimization"
msgstr "性能和优化"

#: ../../../../sources/2.2/docs/topics/performance.txt:5
msgid ""
"This document provides an overview of techniques and tools that can help get"
" your Django code running more efficiently - faster, and using fewer system "
"resources."
msgstr "本文档概述了一些技术和工具，这些技术和工具可以帮助您更有效地运行Django代码——更快，并且使用更少的系统资源。"

#: ../../../../sources/2.2/docs/topics/performance.txt:12
msgid ""
"Generally one's first concern is to write code that *works*, whose logic "
"functions as required to produce the expected output. Sometimes, however, "
"this will not be enough to make the code work as *efficiently* as one would "
"like."
msgstr "通常，首先要考虑的是编写*工作的*代码，它的逻辑功能与产生预期输出所需的逻辑功能相同。然而，有时，这并不足以使代码像人们所希望的那样*高效地*工作。"

#: ../../../../sources/2.2/docs/topics/performance.txt:16
msgid ""
"In this case, what's needed is something - and in practice, often a "
"collection of things - to improve the code's performance without, or only "
"minimally, affecting its behavior."
msgstr "在这种情况下，需要的是一些东西——在实践中，通常是一组东西——以提高代码的性能，而不影响或只影响其行为。"

#: ../../../../sources/2.2/docs/topics/performance.txt:21
msgid "General approaches"
msgstr "一般方法"

#: ../../../../sources/2.2/docs/topics/performance.txt:24
msgid "What are you optimizing *for*?"
msgstr "你在*为*什么而优化？"

#: ../../../../sources/2.2/docs/topics/performance.txt:26
msgid ""
"It's important to have a clear idea what you mean by 'performance'. There is"
" not just one metric of it."
msgstr "清楚地理解你所说的“绩效”是什么很重要，因为它不仅仅是一个指标。"

#: ../../../../sources/2.2/docs/topics/performance.txt:29
msgid ""
"Improved speed might be the most obvious aim for a program, but sometimes "
"other performance improvements might be sought, such as lower memory "
"consumption or fewer demands on the database or network."
msgstr "提高速度可能是程序最明显的目标，但有时可能会寻求其他性能改进，例如降低内存消耗或减少对数据库或网络的要求。"

#: ../../../../sources/2.2/docs/topics/performance.txt:33
msgid ""
"Improvements in one area will often bring about improved performance in "
"another, but not always; sometimes one can even be at the expense of "
"another. For example, an improvement in a program's speed might cause it to "
"use more memory. Even worse, it can be self-defeating - if the speed "
"improvement is so memory-hungry that the system starts to run out of memory,"
" you'll have done more harm than good."
msgstr "一个领域的改进通常会提高另一个领域的性能，但并不总是如此；有时甚至会牺牲另一个领域的性能。例如，一个程序速度的提高可能会导致它使用更多的内存。更糟糕的是，如果速度提高太过内存不足，以致于系统开始耗尽内存，那么你所做的弊大于利。"

#: ../../../../sources/2.2/docs/topics/performance.txt:40
msgid ""
"There are other trade-offs to bear in mind. Your own time is a valuable "
"resource, more precious than CPU time. Some improvements might be too "
"difficult to be worth implementing, or might affect the portability or "
"maintainability of the code. Not all performance improvements are worth the "
"effort."
msgstr "还有其他的权衡。你自己的时间是一个宝贵的资源，比CPU时间更宝贵。一些改进可能太难实现，或者可能影响代码的可移植性或可维护性。并非所有的性能改进都值得付出努力。"

#: ../../../../sources/2.2/docs/topics/performance.txt:45
msgid ""
"So, you need to know what performance improvements you are aiming for, and "
"you also need to know that you have a good reason for aiming in that "
"direction - and for that you need:"
msgstr "所以，你需要知道你的目标是什么样的性能改进，你也需要知道你有一个很好的理由去瞄准那个方向——而且你需要："

#: ../../../../sources/2.2/docs/topics/performance.txt:50
msgid "Performance benchmarking"
msgstr "性能标竿"

#: ../../../../sources/2.2/docs/topics/performance.txt:52
msgid ""
"It's no good just guessing or assuming where the inefficiencies lie in your "
"code."
msgstr "仅仅猜测或假设代码中存在效率低下的原因是没有好处的。"

#: ../../../../sources/2.2/docs/topics/performance.txt:56
msgid "Django tools"
msgstr "Django工具"

#: ../../../../sources/2.2/docs/topics/performance.txt:58
msgid ""
"`django-debug-toolbar <https://github.com/jazzband/django-debug-toolbar/>`_ "
"is a very handy tool that provides insights into what your code is doing and"
" how much time it spends doing it. In particular it can show you all the SQL"
" queries your page is generating, and how long each one has taken."
msgstr "`django-debug-toolbar <https://github.com/jazzband/django-debug-toolbar/>`_是一个非常方便的工具，它可以深入了解您的代码正在做什么以及花费了多少时间。特别是它可以显示您的页面生成的所有SQL查询，以及每个查询所用的时间。"

#: ../../../../sources/2.2/docs/topics/performance.txt:64
msgid ""
"Third-party panels are also available for the toolbar, that can (for "
"example) report on cache performance and template rendering times."
msgstr "第三方面板也可用于工具栏，可以（例如）报告缓存性能和模板呈现时间。"

#: ../../../../sources/2.2/docs/topics/performance.txt:68
msgid "Third-party services"
msgstr "第三方服务"

#: ../../../../sources/2.2/docs/topics/performance.txt:70
msgid ""
"There are a number of free services that will analyze and report on the "
"performance of your site's pages from the perspective of a remote HTTP "
"client, in effect simulating the experience of an actual user."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:74
msgid ""
"These can't report on the internals of your code, but can provide a useful "
"insight into your site's overall performance, including aspects that can't "
"be adequately measured from within Django environment. Examples include:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:78
msgid "`Yahoo's Yslow <http://yslow.org/>`_"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:79
msgid "`Google PageSpeed <https://developers.google.com/speed/pagespeed/>`_"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:81
msgid ""
"There are also several paid-for services that perform a similar analysis, "
"including some that are Django-aware and can integrate with your codebase to"
" profile its performance far more comprehensively."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:86
msgid "Get things right from the start"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:88
msgid ""
"Some work in optimization involves tackling performance shortcomings, but "
"some of the work can simply be built in to what you'd do anyway, as part of "
"the good practices you should adopt even before you start thinking about "
"improving performance."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:93
msgid ""
"In this respect Python is an excellent language to work with, because "
"solutions that look elegant and feel right usually are the best performing "
"ones. As with most skills, learning what \"looks right\" takes practice, but"
" one of the most useful guidelines is:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:99
msgid "Work at the appropriate level"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:101
msgid ""
"Django offers many different ways of approaching things, but just because "
"it's possible to do something in a certain way doesn't mean that it's the "
"most appropriate way to do it. For example, you might find that you could "
"calculate the same thing - the number of items in a collection, perhaps - in"
" a ``QuerySet``, in Python, or in a template."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:107
msgid ""
"However, it will almost always be faster to do this work at lower rather "
"than higher levels. At higher levels the system has to deal with objects "
"through multiple levels of abstraction and layers of machinery."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:111
msgid ""
"That is, the database can typically do things faster than Python can, which "
"can do them faster than the template language can::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:128
msgid ""
"Generally speaking, the most appropriate level for the job is the lowest-"
"level one that it is comfortable to code for."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:133
msgid "The example above is merely illustrative."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:135
msgid ""
"Firstly, in a real-life case you need to consider what is happening before "
"and after your count to work out what's an optimal way of doing it *in that "
"particular context*. The database optimization documents describes :ref:`a "
"case where counting in the template would be better "
"<overuse_of_count_and_exists>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:141
msgid ""
"Secondly, there are other options to consider: in a real-life case, ``{{ "
"my_bicycles.count }}``, which invokes the ``QuerySet`` ``count()`` method "
"directly from the template, might be the most appropriate choice."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:148
msgid ""
"Often it is expensive (that is, resource-hungry and slow) to compute a "
"value, so there can be huge benefit in saving the value to a quickly "
"accessible cache, ready for the next time it's required."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:152
msgid ""
"It's a sufficiently significant and powerful technique that Django includes "
"a comprehensive caching framework, as well as other smaller pieces of "
"caching functionality."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:157
msgid ":doc:`The caching framework </topics/cache>`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:159
msgid ""
"Django's :doc:`caching framework </topics/cache>` offers very significant "
"opportunities for performance gains, by saving dynamic content so that it "
"doesn't need to be calculated for each request."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:163
msgid ""
"For convenience, Django offers different levels of cache granularity: you "
"can cache the output of specific views, or only the pieces that are "
"difficult to produce, or even an entire site."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:167
msgid ""
"Implementing caching should not be regarded as an alternative to improving "
"code that's performing poorly because it has been written badly. It's one of"
" the final steps towards producing well-performing code, not a shortcut."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:172
msgid ":class:`~django.utils.functional.cached_property`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:174
msgid ""
"It's common to have to call a class instance's method more than once. If "
"that function is expensive, then doing so can be wasteful."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:177
msgid ""
"Using the :class:`~django.utils.functional.cached_property` decorator saves "
"the value returned by a property; the next time the function is called on "
"that instance, it will return the saved value rather than re-computing it. "
"Note that this only works on methods that take ``self`` as their only "
"argument and that it changes the method to a property."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:183
msgid ""
"Certain Django components also have their own caching functionality; these "
"are discussed below in the sections related to those components."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:187
msgid "Understanding laziness"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:189
msgid ""
"*Laziness* is a strategy complementary to caching. Caching avoids "
"recomputation by saving results; laziness delays computation until it's "
"actually required."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:193
msgid ""
"Laziness allows us to refer to things before they are instantiated, or even "
"before it's possible to instantiate them. This has numerous uses."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:196
msgid ""
"For example, :ref:`lazy translation <lazy-translations>` can be used before "
"the target language is even known, because it doesn't take place until the "
"translated string is actually required, such as in a rendered template."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:200
msgid ""
"Laziness is also a way to save effort by trying to avoid work in the first "
"place. That is, one aspect of laziness is not doing anything until it has to"
" be done, because it may not turn out to be necessary after all. Laziness "
"can therefore have performance implications, and the more expensive the work"
" concerned, the more there is to gain through laziness."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:206
msgid ""
"Python provides a number of tools for lazy evaluation, particularly through "
"the :py:term:`generator` and :py:term:`generator expression` constructs. "
"It's worth reading up on laziness in Python to discover opportunities for "
"making use of lazy patterns in your code."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:212
msgid "Laziness in Django"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:214
msgid ""
"Django is itself quite lazy. A good example of this can be found in the "
"evaluation of ``QuerySets``. :ref:`QuerySets are lazy <querysets-are-lazy>`."
" Thus a ``QuerySet`` can be created, passed around and combined with other "
"``QuerySets``, without actually incurring any trips to the database to fetch"
" the items it describes. What gets passed around is the ``QuerySet`` object,"
" not the collection of items that - eventually - will be required from the "
"database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:221
msgid ""
"On the other hand, :ref:`certain operations will force the evaluation of a "
"QuerySet <when-querysets-are-evaluated>`. Avoiding the premature evaluation "
"of a ``QuerySet`` can save making an expensive and unnecessary trip to the "
"database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:226
msgid ""
"Django also offers a :meth:`~django.utils.functional.keep_lazy` decorator. "
"This allows a function that has been called with a lazy argument to behave "
"lazily itself, only being evaluated when it needs to be. Thus the lazy "
"argument - which could be an expensive one - will not be called upon for "
"evaluation until it's strictly required."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:233
msgid "Databases"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:236
msgid "Database optimization"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:238
msgid ""
"Django's database layer provides various ways to help developers get the "
"best performance from their databases. The :doc:`database optimization "
"documentation </topics/db/optimization>` gathers together links to the "
"relevant documentation and adds various tips that outline the steps to take "
"when attempting to optimize your database usage."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:245
msgid "Other database-related tips"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:247
msgid ""
"Enabling :ref:`persistent-database-connections` can speed up connections to "
"the database accounts for a significant part of the request processing time."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:250
msgid ""
"This helps a lot on virtualized hosts with limited network performance, for "
"example."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:253
msgid "HTTP performance"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:258
msgid ""
"Django comes with a few helpful pieces of :doc:`middleware "
"</ref/middleware>` that can help optimize your site's performance. They "
"include:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:262
msgid ":class:`~django.middleware.http.ConditionalGetMiddleware`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:264
msgid ""
"Adds support for modern browsers to conditionally GET responses based on the"
" ``ETag`` and ``Last-Modified`` headers. It also calculates and sets an ETag"
" if needed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:269
msgid ":class:`~django.middleware.gzip.GZipMiddleware`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:271
msgid ""
"Compresses responses for all modern browsers, saving bandwidth and transfer "
"time. Note that GZipMiddleware is currently considered a security risk, and "
"is vulnerable to attacks that nullify the protection provided by TLS/SSL. "
"See the warning in :class:`~django.middleware.gzip.GZipMiddleware` for more "
"information."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:277
msgid "Sessions"
msgstr "会话"

#: ../../../../sources/2.2/docs/topics/performance.txt:282
msgid ""
":ref:`Using cached sessions <cached-sessions-backend>` may be a way to "
"increase performance by eliminating the need to load session data from a "
"slower storage source like the database and instead storing frequently used "
"session data in memory."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:288
msgid "Static files"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:290
msgid ""
"Static files, which by definition are not dynamic, make an excellent target "
"for optimization gains."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:294
msgid ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:296
msgid ""
"By taking advantage of web browsers' caching abilities, you can eliminate "
"network hits entirely for a given file after the initial download."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:299
msgid ""
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` "
"appends a content-dependent tag to the filenames of :doc:`static files "
"</ref/contrib/staticfiles>` to make it safe for browsers to cache them long-"
"term without missing future changes - when a file changes, so will the tag, "
"so browsers will reload the asset automatically."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:306
msgid "\"Minification\""
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:308
msgid ""
"Several third-party Django tools and packages provide the ability to "
"\"minify\" HTML, CSS, and JavaScript. They remove unnecessary whitespace, "
"newlines, and comments, and shorten variable names, and thus reduce the size"
" of the documents that your site publishes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:314
msgid "Template performance"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:316
msgid "Note that:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:318
msgid "using ``{% block %}`` is faster than using ``{% include %}``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:319
msgid ""
"heavily-fragmented templates, assembled from many small pieces, can affect "
"performance"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:323
msgid "The cached template loader"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:325
msgid ""
"Enabling the :class:`cached template loader "
"<django.template.loaders.cached.Loader>` often improves performance "
"drastically, as it avoids compiling each template every time it needs to be "
"rendered."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:331
msgid "Using different versions of available software"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:333
msgid ""
"It can sometimes be worth checking whether different and better-performing "
"versions of the software that you're using are available."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:336
msgid ""
"These techniques are targeted at more advanced users who want to push the "
"boundaries of performance of an already well-optimized Django site."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:339
msgid ""
"However, they are not magic solutions to performance problems, and they're "
"unlikely to bring better than marginal gains to sites that don't already do "
"the more basic things the right way."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:345
msgid ""
"It's worth repeating: **reaching for alternatives to software you're already"
" using is never the first answer to performance problems**. When you reach "
"this level of optimization, you need a formal benchmarking solution."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:351
msgid "Newer is often - but not always - better"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:353
msgid ""
"It's fairly rare for a new release of well-maintained software to be less "
"efficient, but the maintainers can't anticipate every possible use-case - so"
" while being aware that newer versions are likely to perform better, don't "
"simply assume that they always will."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:358
msgid ""
"This is true of Django itself. Successive releases have offered a number of "
"improvements across the system, but you should still check the real-world "
"performance of your application, because in some cases you may find that "
"changes mean it performs worse rather than better."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:363
msgid ""
"Newer versions of Python, and also of Python packages, will often perform "
"better too - but measure, rather than assume."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:368
msgid ""
"Unless you've encountered an unusual performance problem in a particular "
"version, you'll generally find better features, reliability, and security in"
" a new release and that these benefits are far more significant than any "
"performance you might win or lose."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:374
msgid "Alternatives to Django's template language"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:376
msgid ""
"For nearly all cases, Django's built-in template language is perfectly "
"adequate. However, if the bottlenecks in your Django project seem to lie in "
"the template system and you have exhausted other opportunities to remedy "
"this, a third-party alternative may be the answer."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:381
msgid ""
"`Jinja2 <http://jinja.pocoo.org/docs/>`_ can offer performance improvements,"
" particularly when it comes to speed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:384
msgid ""
"Alternative template systems vary in the extent to which they share Django's"
" templating language."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:389
msgid ""
"*If* you experience performance issues in templates, the first thing to do "
"is to understand exactly why. Using an alternative template system may prove"
" faster, but the same gains may also be available without going to that "
"trouble - for example, expensive processing and logic in your templates "
"could be done more efficiently in your views."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:396
msgid "Alternative software implementations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:398
msgid ""
"It may be worth checking whether Python software you're using has been "
"provided in a different implementation that can execute the same code "
"faster."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:401
msgid ""
"However: most performance problems in well-written Django sites aren't at "
"the Python execution level, but rather in inefficient database querying, "
"caching, and templates. If you're relying on poorly-written Python code, "
"your performance problems are unlikely to be solved by having it execute "
"faster."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:406
msgid ""
"Using an alternative implementation may introduce compatibility, deployment,"
" portability, or maintenance issues. It goes without saying that before "
"adopting a non-standard implementation you should ensure it provides "
"sufficient performance gains for your application to outweigh the potential "
"risks."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:411
msgid "With these caveats in mind, you should be aware of:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:414
msgid "`PyPy <https://pypy.org/>`_"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:416
msgid ""
"`PyPy <https://pypy.org/>`_ is an implementation of Python in Python itself "
"(the 'standard' Python implementation is in C). PyPy can offer substantial "
"performance gains, typically for heavyweight applications."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:420
msgid ""
"A key aim of the PyPy project is `compatibility "
"<https://pypy.org/compat.html>`_ with existing Python APIs and libraries. "
"Django is compatible, but you will need to check the compatibility of other "
"libraries you rely on."
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:426
msgid "C implementations of Python libraries"
msgstr ""

#: ../../../../sources/2.2/docs/topics/performance.txt:428
msgid ""
"Some Python libraries are also implemented in C, and can be much faster. "
"They aim to offer the same APIs. Note that compatibility issues and behavior"
" differences are not unknown (and not always immediately evident)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:3
msgid "Security in Django"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:5
msgid ""
"This document is an overview of Django's security features. It includes "
"advice on securing a Django-powered site."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:11
msgid "Cross site scripting (XSS) protection"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:15
msgid ""
"XSS attacks allow a user to inject client side scripts into the browsers of "
"other users. This is usually achieved by storing the malicious scripts in "
"the database where it will be retrieved and displayed to other users, or by "
"getting users to click a link which will cause the attacker's JavaScript to "
"be executed by the user's browser. However, XSS attacks can originate from "
"any untrusted source of data, such as cookies or Web services, whenever the "
"data is not sufficiently sanitized before including in a page."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:23
msgid ""
"Using Django templates protects you against the majority of XSS attacks. "
"However, it is important to understand what protections it provides and its "
"limitations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:27
msgid ""
"Django templates :ref:`escape specific characters <automatic-html-escaping>`"
" which are particularly dangerous to HTML. While this protects users from "
"most malicious input, it is not entirely foolproof. For example, it will not"
" protect the following:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:38
msgid ""
"If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this can "
"result in unauthorized JavaScript execution, depending on how the browser "
"renders imperfect HTML. (Quoting the attribute value would fix this case.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:42
msgid ""
"It is also important to be particularly careful when using ``is_safe`` with "
"custom template tags, the :tfilter:`safe` template tag, :mod:`mark_safe "
"<django.utils.safestring>`, and when autoescape is turned off."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:46
msgid ""
"In addition, if you are using the template system to output something other "
"than HTML, there may be entirely separate characters and words which require"
" escaping."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:50
msgid ""
"You should also be very careful when storing HTML in the database, "
"especially when that HTML is retrieved and displayed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:55
msgid "Cross site request forgery (CSRF) protection"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:57
msgid ""
"CSRF attacks allow a malicious user to execute actions using the credentials"
" of another user without that user's knowledge or consent."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:60
msgid ""
"Django has built-in protection against most types of CSRF attacks, providing"
" you have :ref:`enabled and used it <using-csrf>` where appropriate. "
"However, as with any mitigation technique, there are limitations. For "
"example, it is possible to disable the CSRF module globally or for "
"particular views. You should only do this if you know what you are doing. "
"There are other :ref:`limitations <csrf-limitations>` if your site has "
"subdomains that are outside of your control."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:68
msgid ""
":ref:`CSRF protection works <how-csrf-works>` by checking for a secret in "
"each POST request. This ensures that a malicious user cannot simply "
"\"replay\" a form POST to your website and have another logged in user "
"unwittingly submit that form. The malicious user would have to know the "
"secret, which is user specific (using a cookie)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:74
msgid ""
"When deployed with :ref:`HTTPS <security-recommendation-ssl>`, "
"``CsrfViewMiddleware`` will check that the HTTP referer header is set to a "
"URL on the same origin (including subdomain and port). Because HTTPS "
"provides additional security, it is imperative to ensure connections use "
"HTTPS where it is available by forwarding insecure connection requests and "
"using HSTS for supported browsers."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:81
msgid ""
"Be very careful with marking views with the ``csrf_exempt`` decorator unless"
" it is absolutely necessary."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:87
msgid "SQL injection protection"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:89
msgid ""
"SQL injection is a type of attack where a malicious user is able to execute "
"arbitrary SQL code on a database. This can result in records being deleted "
"or data leakage."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:93
msgid ""
"Django's querysets are protected from SQL injection since their queries are "
"constructed using query parameterization. A query's SQL code is defined "
"separately from the query's parameters. Since parameters may be user-"
"provided and therefore unsafe, they are escaped by the underlying database "
"driver."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:98
msgid ""
"Django also gives developers power to write :ref:`raw queries <executing-"
"raw-queries>` or execute :ref:`custom sql <executing-custom-sql>`. These "
"capabilities should be used sparingly and you should always be careful to "
"properly escape any parameters that the user can control. In addition, you "
"should exercise caution when using "
":meth:`~django.db.models.query.QuerySet.extra` and "
":class:`~django.db.models.expressions.RawSQL`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:106
msgid "Clickjacking protection"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:108
msgid ""
"Clickjacking is a type of attack where a malicious site wraps another site "
"in a frame. This attack can result in an unsuspecting user being tricked "
"into performing unintended actions on the target site."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:112
msgid ""
"Django contains :ref:`clickjacking protection <clickjacking-prevention>` in "
"the form of the :mod:`X-Frame-Options middleware "
"<django.middleware.clickjacking.XFrameOptionsMiddleware>` which in a "
"supporting browser can prevent a site from being rendered inside a frame. It"
" is possible to disable the protection on a per view basis or to configure "
"the exact header value sent."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:119
msgid ""
"The middleware is strongly recommended for any site that does not need to "
"have its pages wrapped in a frame by third party sites, or only needs to "
"allow that for a small section of the site."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:126
msgid "SSL/HTTPS"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:128
msgid ""
"It is always better for security to deploy your site behind HTTPS. Without "
"this, it is possible for malicious network users to sniff authentication "
"credentials or any other information transferred between client and server, "
"and in some cases -- **active** network attackers -- to alter data that is "
"sent in either direction."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:134
msgid ""
"If you want the protection that HTTPS provides, and have enabled it on your "
"server, there are some additional steps you may need:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:137
msgid ""
"If necessary, set :setting:`SECURE_PROXY_SSL_HEADER`, ensuring that you have"
" understood the warnings there thoroughly. Failure to do this can result in "
"CSRF vulnerabilities, and failure to do it correctly can also be dangerous!"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:142
msgid ""
"Set :setting:`SECURE_SSL_REDIRECT` to ``True``, so that requests over HTTP "
"are redirected to HTTPS."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:145
msgid ""
"Please note the caveats under :setting:`SECURE_PROXY_SSL_HEADER`. For the "
"case of a reverse proxy, it may be easier or more secure to configure the "
"main Web server to do the redirect to HTTPS."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:149
msgid "Use 'secure' cookies."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:151
msgid ""
"If a browser connects initially via HTTP, which is the default for most "
"browsers, it is possible for existing cookies to be leaked. For this reason,"
" you should set your :setting:`SESSION_COOKIE_SECURE` and "
":setting:`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the "
"browser to only send these cookies over HTTPS connections. Note that this "
"will mean that sessions will not work over HTTP, and the CSRF protection "
"will prevent any POST data being accepted over HTTP (which will be fine if "
"you are redirecting all HTTP traffic to HTTPS)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:160
msgid "Use :ref:`http-strict-transport-security` (HSTS)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:162
msgid ""
"HSTS is an HTTP header that informs a browser that all future connections to"
" a particular site should always use HTTPS. Combined with redirecting "
"requests over HTTP to HTTPS, this will ensure that connections always enjoy "
"the added security of SSL provided one successful connection has occurred. "
"HSTS may either be configured with :setting:`SECURE_HSTS_SECONDS`, "
":setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS`, and "
":setting:`SECURE_HSTS_PRELOAD`, or on the Web server."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:173
msgid "Host header validation"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:175
msgid ""
"Django uses the ``Host`` header provided by the client to construct URLs in "
"certain cases. While these values are sanitized to prevent Cross Site "
"Scripting attacks, a fake ``Host`` value can be used for Cross-Site Request "
"Forgery, cache poisoning attacks, and poisoning links in emails."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:180
msgid ""
"Because even seemingly-secure web server configurations are susceptible to "
"fake ``Host`` headers, Django validates ``Host`` headers against the "
":setting:`ALLOWED_HOSTS` setting in the "
":meth:`django.http.HttpRequest.get_host()` method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:185
msgid ""
"This validation only applies via "
":meth:`~django.http.HttpRequest.get_host()`; if your code accesses the "
"``Host`` header directly from ``request.META`` you are bypassing this "
"security protection."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:189
msgid "For more details see the full :setting:`ALLOWED_HOSTS` documentation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:193
msgid ""
"Previous versions of this document recommended configuring your web server "
"to ensure it validates incoming HTTP ``Host`` headers. While this is still "
"recommended, in many common web servers a configuration that seems to "
"validate the ``Host`` header may not in fact do so. For instance, even if "
"Apache is configured such that your Django site is served from a non-default"
" virtual host with the ``ServerName`` set, it is still possible for an HTTP "
"request to match this virtual host and supply a fake ``Host`` header. Thus, "
"Django now requires that you set :setting:`ALLOWED_HOSTS` explicitly rather "
"than relying on web server configuration."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:203
msgid ""
"Additionally, Django requires you to explicitly enable support for the ``X"
"-Forwarded-Host`` header (via the :setting:`USE_X_FORWARDED_HOST` setting) "
"if your configuration requires it."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:210
msgid ""
"Similar to the :ref:`CSRF limitations <csrf-limitations>` requiring a site "
"to be deployed such that untrusted users don't have access to any "
"subdomains, :mod:`django.contrib.sessions` also has limitations. See "
":ref:`the session topic guide section on security <topics-session-security>`"
" for details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:218
msgid "User-uploaded content"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:221
msgid ""
"Consider :ref:`serving static files from a cloud service or CDN "
"<staticfiles-from-cdn>` to avoid some of these issues."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:224
msgid ""
"If your site accepts file uploads, it is strongly advised that you limit "
"these uploads in your Web server configuration to a reasonable size in order"
" to prevent denial of service (DOS) attacks. In Apache, this can be easily "
"set using the LimitRequestBody_ directive."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:229
msgid ""
"If you are serving your own static files, be sure that handlers like "
"Apache's ``mod_php``, which would execute static files as code, are "
"disabled. You don't want users to be able to execute arbitrary code by "
"uploading and requesting a specially crafted file."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:234
msgid ""
"Django's media upload handling poses some vulnerabilities when that media is"
" served in ways that do not follow security best practices. Specifically, an"
" HTML file can be uploaded as an image if that file contains a valid PNG "
"header followed by malicious HTML. This file will pass verification of the "
"library that Django uses for :class:`~django.db.models.ImageField` image "
"processing (Pillow). When this file is subsequently displayed to a user, it "
"may be displayed as HTML depending on the type and configuration of your web"
" server."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:243
msgid ""
"No bulletproof technical solution exists at the framework level to safely "
"validate all user uploaded file content, however, there are some other steps"
" you can take to mitigate these attacks:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:247
msgid ""
"One class of attacks can be prevented by always serving user uploaded "
"content from a distinct top-level or second-level domain. This prevents any "
"exploit blocked by `same-origin policy`_ protections such as cross site "
"scripting. For example, if your site runs on ``example.com``, you would want"
" to serve uploaded content (the :setting:`MEDIA_URL` setting) from something"
" like ``usercontent-example.com``. It's *not* sufficient to serve content "
"from a subdomain like ``usercontent.example.com``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:255
msgid ""
"Beyond this, applications may choose to define a whitelist of allowable file"
" extensions for user uploaded files and configure the web server to only "
"serve such files."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:264
msgid "Additional security topics"
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:266
msgid ""
"While Django provides good security protection out of the box, it is still "
"important to properly deploy your application and take advantage of the "
"security protection of the Web server, operating system and other "
"components."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:270
msgid ""
"Make sure that your Python code is outside of the Web server's root. This "
"will ensure that your Python code is not accidentally served as plain text "
"(or accidentally executed)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:273
msgid "Take care with any :ref:`user uploaded files <file-upload-security>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:274
msgid ""
"Django does not throttle requests to authenticate users. To protect against "
"brute-force attacks against the authentication system, you may consider "
"deploying a Django plugin or Web server module to throttle these requests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:277
msgid "Keep your :setting:`SECRET_KEY` a secret."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:278
msgid ""
"It is a good idea to limit the accessibility of your caching system and "
"database using a firewall."
msgstr ""

#: ../../../../sources/2.2/docs/topics/security.txt:280
msgid ""
"Take a look at the Open Web Application Security Project (OWASP) `Top 10 "
"list`_ which identifies some common vulnerabilities in web applications. "
"While Django has tools to address some of the issues, other issues must be "
"accounted for in the design of your project."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:3
msgid "Serializing Django objects"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:5
msgid ""
"Django's serialization framework provides a mechanism for \"translating\" "
"Django models into other formats. Usually these other formats will be text-"
"based and used for sending Django data over a wire, but it's possible for a "
"serializer to handle any format (text-based or not)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:12
msgid ""
"If you just want to get some data from your tables into a serialized form, "
"you could use the :djadmin:`dumpdata` management command."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:16
msgid "Serializing data"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:18
msgid "At the highest level, serializing data is a very simple operation::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:23
msgid ""
"The arguments to the ``serialize`` function are the format to serialize the "
"data to (see `Serialization formats`_) and a "
":class:`~django.db.models.query.QuerySet` to serialize. (Actually, the "
"second argument can be any iterator that yields Django model instances, but "
"it'll almost always be a QuerySet)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:31
msgid "You can also use a serializer object directly::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:38
msgid ""
"This is useful if you want to serialize data directly to a file-like object "
"(which includes an :class:`~django.http.HttpResponse`)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:46
msgid ""
"Calling :func:`~django.core.serializers.get_serializer` with an unknown "
":ref:`format <serialization-formats>` will raise a "
"``django.core.serializers.SerializerDoesNotExist`` exception."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:53
msgid "Subset of fields"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:55
msgid ""
"If you only want a subset of fields to be serialized, you can specify a "
"``fields`` argument to the serializer::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:61
msgid ""
"In this example, only the ``name`` and ``size`` attributes of each model "
"will be serialized. The primary key is always serialized as the ``pk`` "
"element in the resulting output; it never appears in the ``fields`` part."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:67
msgid ""
"Depending on your model, you may find that it is not possible to deserialize"
" a model that only serializes a subset of its fields. If a serialized object"
" doesn't specify all the fields that are required by a model, the "
"deserializer will not be able to save deserialized instances."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:73
msgid "Inherited models"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:75
msgid ""
"If you have a model that is defined using an :ref:`abstract base class "
"<abstract-base-classes>`, you don't have to do anything special to serialize"
" that model. Just call the serializer on the object (or objects) that you "
"want to serialize, and the output will be a complete representation of the "
"serialized object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:81
msgid ""
"However, if you have a model that uses :ref:`multi-table inheritance <multi-"
"table-inheritance>`, you also need to serialize all of the base classes for "
"the model. This is because only the fields that are locally defined on the "
"model will be serialized. For example, consider the following models::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:92
msgid "If you only serialize the Restaurant model::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:96
msgid ""
"the fields on the serialized output will only contain the "
"``serves_hot_dogs`` attribute. The ``name`` attribute of the base class will"
" be ignored."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:99
msgid ""
"In order to fully serialize your ``Restaurant`` instances, you will need to "
"serialize the ``Place`` models as well::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:106
msgid "Deserializing data"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:108
msgid "Deserializing data is also a fairly simple operation::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:113
msgid ""
"As you can see, the ``deserialize`` function takes the same format argument "
"as ``serialize``, a string or stream of data, and returns an iterator."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:116
msgid ""
"However, here it gets slightly complicated. The objects returned by the "
"``deserialize`` iterator *aren't* simple Django objects. Instead, they are "
"special ``DeserializedObject`` instances that wrap a created -- but unsaved "
"-- object and any associated relationship data."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:121
msgid ""
"Calling ``DeserializedObject.save()`` saves the object to the database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:125
msgid ""
"If the ``pk`` attribute in the serialized data doesn't exist or is null, a "
"new instance will be saved to the database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:128
msgid ""
"This ensures that deserializing is a non-destructive operation even if the "
"data in your serialized representation doesn't match what's currently in the"
" database. Usually, working with these ``DeserializedObject`` instances "
"looks something like::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:137
msgid ""
"In other words, the usual use is to examine the deserialized objects to make"
" sure that they are \"appropriate\" for saving before doing so.  Of course, "
"if you trust your data source you could just save the object and move on."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:141
msgid ""
"The Django object itself can be inspected as ``deserialized_object.object``."
" If fields in the serialized data do not exist on a model, a "
"``DeserializationError`` will be raised unless the ``ignorenonexistent`` "
"argument is passed in as ``True``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:151
msgid "Serialization formats"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:153
msgid ""
"Django supports a number of serialization formats, some of which require you"
" to install third-party Python modules:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:157
msgid "Identifier"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:157
msgid "Information"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:159
msgid "``xml``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:159
msgid "Serializes to and from a simple XML dialect."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:161
msgid "``json``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:161
msgid "Serializes to and from JSON_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:163
msgid "``yaml``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:163
msgid ""
"Serializes to YAML (YAML Ain't a Markup Language). This serializer is only "
"available if PyYAML_ is installed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:171
msgid "XML"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:173
msgid "The basic XML serialization format is quite simple::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:183
msgid ""
"The whole collection of objects that is either serialized or deserialized is"
" represented by a ``<django-objects>``-tag which contains multiple "
"``<object>``-elements. Each such object has two attributes: \"pk\" and "
"\"model\", the latter being represented by the name of the app "
"(\"sessions\") and the lowercase name of the model (\"session\") separated "
"by a dot."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:189
msgid ""
"Each field of the object is serialized as a ``<field>``-element sporting the"
" fields \"type\" and \"name\". The text content of the element represents "
"the value that should be stored."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:193
msgid ""
"Foreign keys and other relational fields are treated a little bit "
"differently::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:201
msgid ""
"In this example we specify that the ``auth.Permission`` object with the PK "
"27 has a foreign key to the ``contenttypes.ContentType`` instance with the "
"PK 9."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:204
msgid ""
"ManyToMany-relations are exported for the model that binds them. For "
"instance, the ``auth.User`` model has such a relation to the "
"``auth.Permission`` model::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:215
msgid ""
"This example links the given user with the permission models with PKs 46 and"
" 47."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:217
msgid "Control characters"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:219
msgid ""
"If the content to be serialized contains control characters that are not "
"accepted in the XML 1.0 standard, the serialization will fail with a "
":exc:`ValueError` exception. Read also the W3C's explanation of `HTML, "
"XHTML, XML and Control Codes <https://www.w3.org/International/questions/qa-"
"controls>`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:228
msgid "JSON"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:230
msgid ""
"When staying with the same example data as before it would be serialized as "
"JSON in the following way::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:244
msgid ""
"The formatting here is a bit simpler than with XML. The whole collection is "
"just represented as an array and the objects are represented by JSON objects"
" with three properties: \"pk\", \"model\" and \"fields\". \"fields\" is "
"again an object containing each field's name and value as property and "
"property-value respectively."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:250
msgid ""
"Foreign keys just have the PK of the linked object as property value. "
"ManyToMany-relations are serialized for the model that defines them and are "
"represented as a list of PKs."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:254
msgid ""
"Be aware that not all Django output can be passed unmodified to :mod:`json`."
" For example, if you have some custom type in an object to be serialized, "
"you'll have to write a custom :mod:`json` encoder for it. Something like "
"this will work::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:267
msgid ""
"You can then pass ``cls=LazyEncoder`` to the ``serializers.serialize()`` "
"function::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:274
msgid ""
"Also note that GeoDjango provides a :doc:`customized GeoJSON serializer "
"</ref/contrib/gis/serializers>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:278
msgid "``DjangoJSONEncoder``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:282
msgid ""
"The JSON serializer uses ``DjangoJSONEncoder`` for encoding. A subclass of "
":class:`~json.JSONEncoder`, it handles these additional types:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:287
msgid ":class:`~datetime.datetime`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:286
msgid ""
"A string of the form ``YYYY-MM-DDTHH:mm:ss.sssZ`` or ``YYYY-MM-"
"DDTHH:mm:ss.sss+HH:MM`` as defined in `ECMA-262`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:290
msgid ":class:`~datetime.date`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:290
msgid "A string of the form ``YYYY-MM-DD`` as defined in `ECMA-262`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:293
msgid ":class:`~datetime.time`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:293
msgid "A string of the form ``HH:MM:ss.sss`` as defined in `ECMA-262`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:298
msgid ":class:`~datetime.timedelta`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:296
msgid ""
"A string representing a duration as defined in ISO-8601. For example, "
"``timedelta(days=1, hours=2, seconds=3.4)`` is represented as "
"``'P1DT02H00M03.400000S'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:301
msgid ""
":class:`~decimal.Decimal`, ``Promise`` (``django.utils.functional.lazy()`` "
"objects), :class:`~uuid.UUID`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:301
msgid "A string representation of the object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:306
msgid "YAML"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:308
msgid ""
"YAML serialization looks quite similar to JSON. The object list is "
"serialized as a sequence mappings with the keys \"pk\", \"model\" and "
"\"fields\". Each field is again a mapping with the key being name of the "
"field and the value the value::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:316
msgid ""
"Referential fields are again just represented by the PK or sequence of PKs."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:321
msgid "Natural keys"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:323
msgid ""
"The default serialization strategy for foreign keys and many-to-many "
"relations is to serialize the value of the primary key(s) of the objects in "
"the relation. This strategy works well for most objects, but it can cause "
"difficulty in some circumstances."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:328
msgid ""
"Consider the case of a list of objects that have a foreign key referencing "
":class:`~django.contrib.contenttypes.models.ContentType`. If you're going to"
" serialize an object that refers to a content type, then you need to have a "
"way to refer to that content type to begin with. Since ``ContentType`` "
"objects are automatically created by Django during the database "
"synchronization process, the primary key of a given content type isn't easy "
"to predict; it will depend on how and when :djadmin:`migrate` was executed. "
"This is true for all models which automatically generate objects, notably "
"including :class:`~django.contrib.auth.models.Permission`, "
":class:`~django.contrib.auth.models.Group`, and "
":class:`~django.contrib.auth.models.User`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:342
msgid ""
"You should never include automatically generated objects in a fixture or "
"other serialized data. By chance, the primary keys in the fixture may match "
"those in the database and loading the fixture will have no effect. In the "
"more likely case that they don't match, the fixture loading will fail with "
"an :class:`~django.db.IntegrityError`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:348
msgid ""
"There is also the matter of convenience. An integer id isn't always the most"
" convenient way to refer to an object; sometimes, a more natural reference "
"would be helpful."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:352
msgid ""
"It is for these reasons that Django provides *natural keys*. A natural key "
"is a tuple of values that can be used to uniquely identify an object "
"instance without using the primary key value."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:357
msgid "Deserialization of natural keys"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:359
msgid "Consider the following two models::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:376
msgid ""
"Ordinarily, serialized data for ``Book`` would use an integer to refer to "
"the author. For example, in JSON, a Book might be serialized as::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:390
msgid ""
"This isn't a particularly natural way to refer to an author. It requires "
"that you know the primary key value for the author; it also requires that "
"this primary key value is stable and predictable."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:394
msgid ""
"However, if we add natural key handling to Person, the fixture becomes much "
"more humane. To add natural key handling, you define a default Manager for "
"Person with a ``get_by_natural_key()`` method. In the case of a Person, a "
"good natural key might be the pair of first and last name::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:416
msgid "Now books can use that natural key to refer to ``Person`` objects::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:429
msgid ""
"When you try to load this serialized data, Django will use the "
"``get_by_natural_key()`` method to resolve ``[\"Douglas\", \"Adams\"]`` into"
" the primary key of an actual ``Person`` object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:435
msgid ""
"Whatever fields you use for a natural key must be able to uniquely identify "
"an object. This will usually mean that your model will have a uniqueness "
"clause (either unique=True on a single field, or ``unique_together`` over "
"multiple fields) for the field or fields in your natural key. However, "
"uniqueness doesn't need to be enforced at the database level. If you are "
"certain that a set of fields will be effectively unique, you can still use "
"those fields as a natural key."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:444
msgid ""
"Deserialization of objects with no primary key will always check whether the"
" model's manager has a ``get_by_natural_key()`` method and if so, use it to "
"populate the deserialized object's primary key."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:449
msgid "Serialization of natural keys"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:451
msgid ""
"So how do you get Django to emit a natural key when serializing an object? "
"Firstly, you need to add another method -- this time to the model itself::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:467
msgid ""
"That method should always return a natural key tuple -- in this example, "
"``(first name, last name)``. Then, when you call "
"``serializers.serialize()``, you provide ``use_natural_foreign_keys=True`` "
"or ``use_natural_primary_keys=True`` arguments::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:475
msgid ""
"When ``use_natural_foreign_keys=True`` is specified, Django will use the "
"``natural_key()`` method to serialize any foreign key reference to objects "
"of the type that defines the method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:479
msgid ""
"When ``use_natural_primary_keys=True`` is specified, Django will not provide"
" the primary key in the serialized data of this object since it can be "
"calculated during deserialization::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:494
msgid ""
"This can be useful when you need to load serialized data into an existing "
"database and you cannot guarantee that the serialized primary key value is "
"not already in use, and do not need to ensure that deserialized objects "
"retain the same primary keys."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:499
msgid ""
"If you are using :djadmin:`dumpdata` to generate serialized data, use the "
":option:`dumpdata --natural-foreign` and :option:`dumpdata --natural-"
"primary` command line flags to generate natural keys."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:505
msgid ""
"You don't need to define both ``natural_key()`` and "
"``get_by_natural_key()``. If you don't want Django to output natural keys "
"during serialization, but you want to retain the ability to load natural "
"keys, then you can opt to not implement the ``natural_key()`` method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:511
msgid ""
"Conversely, if (for some strange reason) you want Django to output natural "
"keys during serialization, but *not* be able to load those key values, just "
"don't define the ``get_by_natural_key()`` method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:518
msgid "Natural keys and forward references"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:522
msgid ""
"Sometimes when you use :ref:`natural foreign keys <topics-serialization-"
"natural-keys>` you'll need to deserialize data where an object has a foreign"
" key referencing another object that hasn't yet been deserialized. This is "
"called a \"forward reference\"."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:527
msgid "For instance, suppose you have the following objects in your fixture::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:547
msgid ""
"In order to handle this situation, you need to pass "
"``handle_forward_references=True`` to ``serializers.deserialize()``. This "
"will set the ``deferred_fields`` attribute on the ``DeserializedObject`` "
"instances. You'll need to keep track of ``DeserializedObject`` instances "
"where this attribute isn't ``None`` and later call "
"``save_deferred_fields()`` on them."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:553
msgid "Typical usage looks like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:565
msgid ""
"For this to work, the ``ForeignKey`` on the referencing model must have "
"``null=True``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:569
msgid "Dependencies during serialization"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:571
msgid ""
"It's often possible to avoid explicitly having to handle forward references "
"by taking care with the ordering of objects within a fixture."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:574
msgid ""
"To help with this, calls to :djadmin:`dumpdata` that use the "
":option:`dumpdata --natural-foreign` option will serialize any model with a "
"``natural_key()`` method before serializing standard primary key objects."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:578
msgid ""
"However, this may not always be enough. If your natural key refers to "
"another object (by using a foreign key or natural key to another object as "
"part of a natural key), then you need to be able to ensure that the objects "
"on which a natural key depends occur in the serialized data before the "
"natural key requires them."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:584
msgid ""
"To control this ordering, you can define dependencies on your "
"``natural_key()`` methods. You do this by setting a ``dependencies`` "
"attribute on the ``natural_key()`` method itself."
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:588
msgid ""
"For example, let's add a natural key to the ``Book`` model from the example "
"above::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:598
msgid ""
"The natural key for a ``Book`` is a combination of its name and its author. "
"This means that ``Person`` must be serialized before ``Book``. To define "
"this dependency, we add one extra line::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/serialization.txt:606
msgid ""
"This definition ensures that all ``Person`` objects are serialized before "
"any ``Book`` objects. In turn, any object referencing ``Book`` will be "
"serialized after both ``Person`` and ``Book`` have been serialized."
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:3
msgid "Django settings"
msgstr "Django settings"

#: ../../../../sources/2.2/docs/topics/settings.txt:5
msgid ""
"A Django settings file contains all the configuration of your Django "
"installation. This document explains how settings work and which settings "
"are available."
msgstr "Django的settings文件包含Django应用的所有配置项。该文档会介绍settings是如何运行，以及有哪些设置项是可用的。"

#: ../../../../sources/2.2/docs/topics/settings.txt:10
msgid "The basics"
msgstr "基础"

#: ../../../../sources/2.2/docs/topics/settings.txt:12
msgid "A settings file is just a Python module with module-level variables."
msgstr "配置文件只是一个使用模块级变量的一个Python模块。"

#: ../../../../sources/2.2/docs/topics/settings.txt:14
msgid "Here are a couple of example settings::"
msgstr "一组配置例子::"

#: ../../../../sources/2.2/docs/topics/settings.txt:22
msgid ""
"If you set :setting:`DEBUG` to ``False``, you also need to properly set the "
":setting:`ALLOWED_HOSTS` setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:25
msgid "Because a settings file is a Python module, the following apply:"
msgstr "因为配置文件是Python模块，所以要注意以下几项:"

#: ../../../../sources/2.2/docs/topics/settings.txt:27
msgid "It doesn't allow for Python syntax errors."
msgstr "不能有Python语法错误"

#: ../../../../sources/2.2/docs/topics/settings.txt:28
msgid ""
"It can assign settings dynamically using normal Python syntax. For example::"
msgstr "可以用Python语法实现动态配置，例如::"

#: ../../../../sources/2.2/docs/topics/settings.txt:33
msgid "It can import values from other settings files."
msgstr "可以从其他配置文件中引入变量"

#: ../../../../sources/2.2/docs/topics/settings.txt:38
msgid "Designating the settings"
msgstr "指定配置文件"

#: ../../../../sources/2.2/docs/topics/settings.txt:42
msgid ""
"When you use Django, you have to tell it which settings you're using. Do "
"this by using an environment variable, ``DJANGO_SETTINGS_MODULE``."
msgstr "使用Django时要通知Django当前使用的是哪个配置文件。可以改变环境变量 ``DJANGO_SETTINGS_MODULE`` 实现这一点。"

#: ../../../../sources/2.2/docs/topics/settings.txt:45
msgid ""
"The value of ``DJANGO_SETTINGS_MODULE`` should be in Python path syntax, "
"e.g. ``mysite.settings``. Note that the settings module should be on the "
"Python `import search path`_."
msgstr "``DJANGO_SETTINGS_MODULE`` 的值是一个符合Python语法的路径，比如 ``mysite.settings`` 。要注意settings模块应该在Python可搜索到的路径中 `import search path`_."

#: ../../../../sources/2.2/docs/topics/settings.txt:52
msgid "The ``django-admin`` utility"
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:54
msgid ""
"When using :doc:`django-admin </ref/django-admin>`, you can either set the "
"environment variable once, or explicitly pass in the settings module each "
"time you run the utility."
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:58
msgid "Example (Unix Bash shell)::"
msgstr "例子（Unix Bash shell）::"

#: ../../../../sources/2.2/docs/topics/settings.txt:63
msgid "Example (Windows shell)::"
msgstr "例子（Windows shell）::"

#: ../../../../sources/2.2/docs/topics/settings.txt:68
msgid ""
"Use the ``--settings`` command-line argument to specify the settings "
"manually::"
msgstr "使用 ``--settings`` 命令行参数指定配置模块路径::"

#: ../../../../sources/2.2/docs/topics/settings.txt:75
msgid "On the server (``mod_wsgi``)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:77
msgid ""
"In your live server environment, you'll need to tell your WSGI application "
"what settings file to use. Do that with ``os.environ``::"
msgstr "在服务器环境下，要通知WSGI应用当前使用的是哪个配置文件，用到 ``os.environ``::"

#: ../../../../sources/2.2/docs/topics/settings.txt:84
msgid ""
"Read the :doc:`Django mod_wsgi documentation "
"</howto/deployment/wsgi/modwsgi>` for more information and other common "
"elements to a Django WSGI application."
msgstr "阅读 :doc:`Django mod_wsgi documentation </howto/deployment/wsgi/modwsgi>` 了解更多关于Django WSGI应用的信息和相关设置。"

#: ../../../../sources/2.2/docs/topics/settings.txt:89
msgid "Default settings"
msgstr "默认配置"

#: ../../../../sources/2.2/docs/topics/settings.txt:91
msgid ""
"A Django settings file doesn't have to define any settings if it doesn't "
"need to. Each setting has a sensible default value. These defaults live in "
"the module :file:`django/conf/global_settings.py`."
msgstr "在无需配置的情况下，Django配置文件没必要定义任何配置项。因为每个配置项都有一个明确的默认值。默认值都保存在模块 :file:`django/conf/global_settings.py` 中。"

#: ../../../../sources/2.2/docs/topics/settings.txt:95
msgid "Here's the algorithm Django uses in compiling settings:"
msgstr "Django按如下算法编译配置模块:"

#: ../../../../sources/2.2/docs/topics/settings.txt:97
msgid "Load settings from ``global_settings.py``."
msgstr "从 ``global_settings.py`` 中加载配置项"

#: ../../../../sources/2.2/docs/topics/settings.txt:98
msgid ""
"Load settings from the specified settings file, overriding the global "
"settings as necessary."
msgstr "从指定的配置文件中加载配置项, 覆盖对应的全局配置项."

#: ../../../../sources/2.2/docs/topics/settings.txt:101
msgid ""
"Note that a settings file should *not* import from ``global_settings``, "
"because that's redundant."
msgstr "注意: 配置文件中不要再重复引用 ``global_settings`` , 因为这样做是多余的."

#: ../../../../sources/2.2/docs/topics/settings.txt:105
msgid "Seeing which settings you've changed"
msgstr "查看你已经更改了哪个配置项"

#: ../../../../sources/2.2/docs/topics/settings.txt:107
msgid ""
"There's an easy way to view which of your settings deviate from the default "
"settings. The command ``python manage.py diffsettings`` displays differences"
" between the current settings file and Django's default settings."
msgstr "查看你修改了哪几个配置项很容易, 在命令行输入 ``python manage.py diffsettings`` 就会显示当前配置与默认配置中的不同."

#: ../../../../sources/2.2/docs/topics/settings.txt:111
msgid "For more, see the :djadmin:`diffsettings` documentation."
msgstr "想了解更多, 可以查看 :djadmin:`diffsettings` 文档."

#: ../../../../sources/2.2/docs/topics/settings.txt:114
msgid "Using settings in Python code"
msgstr "在Python代码中使用settings"

#: ../../../../sources/2.2/docs/topics/settings.txt:116
msgid ""
"In your Django apps, use settings by importing the object "
"``django.conf.settings``. Example::"
msgstr "在具体的Django应用中, 通过引入 ``django.conf.settings`` 使用配置, 例::"

#: ../../../../sources/2.2/docs/topics/settings.txt:124
msgid ""
"Note that ``django.conf.settings`` isn't a module -- it's an object. So "
"importing individual settings is not possible::"
msgstr "注意 ``django.conf.settings`` 并不是一个模块！-- 而是一个对象！所以引入某个单独的设置项是不可能的::"

#: ../../../../sources/2.2/docs/topics/settings.txt:129
msgid ""
"Also note that your code should *not* import from either ``global_settings``"
" or your own settings file. ``django.conf.settings`` abstracts the concepts "
"of default settings and site-specific settings; it presents a single "
"interface. It also decouples the code that uses settings from the location "
"of your settings."
msgstr "还要注意 *不应该* 直接引入 ``global_settings`` 和你自己的配置文件. ``django.conf.settings`` 整合了默认配置和网站指定配置, 从而只提供一个接口读取配置. 它也解耦了使用自定义配置文件的代码."

#: ../../../../sources/2.2/docs/topics/settings.txt:136
msgid "Altering settings at runtime"
msgstr "运行时更改设置"

#: ../../../../sources/2.2/docs/topics/settings.txt:138
msgid ""
"You shouldn't alter settings in your applications at runtime. For example, "
"don't do this in a view::"
msgstr "不建议在运行时更改设置. 比如, 不要在view中这样用::"

#: ../../../../sources/2.2/docs/topics/settings.txt:145
msgid "The only place you should assign to settings is in a settings file."
msgstr "应该只在settings文件中更改设置."

#: ../../../../sources/2.2/docs/topics/settings.txt:148
msgid "Security"
msgstr "安全"

#: ../../../../sources/2.2/docs/topics/settings.txt:150
msgid ""
"Because a settings file contains sensitive information, such as the database"
" password, you should make every attempt to limit access to it. For example,"
" change its file permissions so that only you and your Web server's user can"
" read it. This is especially important in a shared-hosting environment."
msgstr "由于配置文件包含敏感信息, 比如数据库密码, 所以应该限制对配置文件的访问. 比如更改文件权限, 从而只能令你和你的WEB服务器能读取配置文件. 这在共享主机的环境中非常重要!"

#: ../../../../sources/2.2/docs/topics/settings.txt:156
msgid "Available settings"
msgstr "可用的配置项"

#: ../../../../sources/2.2/docs/topics/settings.txt:158
msgid ""
"For a full list of available settings, see the :doc:`settings reference "
"</ref/settings>`."
msgstr "查看 :doc:`settings reference </ref/settings>` 了解完整的配置项列表."

#: ../../../../sources/2.2/docs/topics/settings.txt:161
msgid "Creating your own settings"
msgstr "创建你自己的配置文件"

#: ../../../../sources/2.2/docs/topics/settings.txt:163
msgid ""
"There's nothing stopping you from creating your own settings, for your own "
"Django apps. Just follow these guidelines:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:166
msgid "Setting names must be all uppercase."
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:167
msgid "Don't reinvent an already-existing setting."
msgstr "不要重新设置已存在的配置项."

#: ../../../../sources/2.2/docs/topics/settings.txt:169
msgid ""
"For settings that are sequences, Django itself uses lists, but this is only "
"a convention."
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:175
msgid "Using settings without setting ``DJANGO_SETTINGS_MODULE``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:177
msgid ""
"In some cases, you might want to bypass the ``DJANGO_SETTINGS_MODULE`` "
"environment variable. For example, if you're using the template system by "
"itself, you likely don't want to have to set up an environment variable "
"pointing to a settings module."
msgstr "某些场合中, 你想绕过 ``DJANGO_SETTINGS_MODULE`` 环境变量来进行配置. 比如, 你正在使用django自带的模板系统, 而你并不想使用环境变量指定某个具体的配置文件."

#: ../../../../sources/2.2/docs/topics/settings.txt:182
msgid ""
"In these cases, you can configure Django's settings manually. Do this by "
"calling:"
msgstr "在这种情况下, 可以手动设定Django的配置项. 要用到下面这个方法:"

#: ../../../../sources/2.2/docs/topics/settings.txt:193
msgid ""
"Pass ``configure()`` as many keyword arguments as you'd like, with each "
"keyword argument representing a setting and its value. Each argument name "
"should be all uppercase, with the same name as the settings described above."
" If a particular setting is not passed to ``configure()`` and is needed at "
"some later point, Django will use the default setting value."
msgstr "通过 ``configure()`` 可以设置任何配置项, 每个参数对应一个值. 参数名称必须大写, 而且参数名必须是真实存在. 没有在 ``configure()`` 中出现的设置项在随后用到时, 仍会使用默认值."

#: ../../../../sources/2.2/docs/topics/settings.txt:199
msgid ""
"Configuring Django in this fashion is mostly necessary -- and, indeed, "
"recommended -- when you're using a piece of the framework inside a larger "
"application."
msgstr "如果你并不想使用整个框架, 仅仅是其中一小部分时, 如上述这般配置Django是非常必要的. 事实上, 我们建议您这样做."

#: ../../../../sources/2.2/docs/topics/settings.txt:203
msgid ""
"Consequently, when configured via ``settings.configure()``, Django will not "
"make any modifications to the process environment variables (see the "
"documentation of :setting:`TIME_ZONE` for why this would normally occur). "
"It's assumed that you're already in full control of your environment in "
"these cases."
msgstr "因此, 通过 ``settings.configure()`` 配置django时, 并不会对当前进程的环境变量做任何修改.（可以查看 :setting:`TIME_ZONE` 了解为什么要这么做）. 这意味着在上述情况下你仍然完全掌控着当前环境."

#: ../../../../sources/2.2/docs/topics/settings.txt:210
msgid "Custom default settings"
msgstr "定制默认配置项"

#: ../../../../sources/2.2/docs/topics/settings.txt:212
msgid ""
"If you'd like default values to come from somewhere other than "
"``django.conf.global_settings``, you can pass in a module or class that "
"provides the default settings as the ``default_settings`` argument (or as "
"the first positional argument) in the call to ``configure()``."
msgstr "如果你实在不想使用 ``django.conf.global_settings``, 而想自定义配置默认值, 你可以在调用 ``configure()`` 时使用 ``default_settings`` 参数(或是默认做为第一个参数传入). 该参数是一个提供默认值的模块或是类."

#: ../../../../sources/2.2/docs/topics/settings.txt:217
msgid ""
"In this example, default settings are taken from ``myapp_defaults``, and the"
" :setting:`DEBUG` setting is set to ``True``, regardless of its value in "
"``myapp_defaults``::"
msgstr "在下面这个例子中, 由 ``myapp_defaults`` 提供默认值, 并令 :setting:`DEBUG` 被置为 ``True`` 而不是从 ``myapp_defaults`` 中获取::"

#: ../../../../sources/2.2/docs/topics/settings.txt:226
msgid ""
"The following example, which uses ``myapp_defaults`` as a positional "
"argument, is equivalent::"
msgstr "接下来例子使用 ``myapp_defaults`` 做为一个位置参数, 这和上面的效果是等同的::"

#: ../../../../sources/2.2/docs/topics/settings.txt:231
msgid ""
"Normally, you will not need to override the defaults in this fashion. The "
"Django defaults are sufficiently tame that you can safely use them. Be aware"
" that if you do pass in a new default module, it entirely *replaces* the "
"Django defaults, so you must specify a value for every possible setting that"
" might be used in that code you are importing. Check in "
"``django.conf.settings.global_settings`` for the full list."
msgstr "一般来说, 没必要自行设置默认值. Django的默认设置是比较宽松的, 你可以放心地使用. 要注意的是, 如果你传入了新的默认模块, 那它就会完全 *替换* Django本身的默认设置. 因此, 你必须为接下来可能会用到的所有设置项都重新指定默认值. 查看 ``django.conf.settings.global_settings`` 了解全部默认值."

#: ../../../../sources/2.2/docs/topics/settings.txt:239
msgid "Either ``configure()`` or ``DJANGO_SETTINGS_MODULE`` is required"
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:241
msgid ""
"If you're not setting the ``DJANGO_SETTINGS_MODULE`` environment variable, "
"you *must* call ``configure()`` at some point before using any code that "
"reads settings."
msgstr "在没有设置 ``DJANGO_SETTINGS_MODULE`` 环境的情况下, 就 *必须* 在运行读取配置项的代码之前就调用 ``configure()`` ."

#: ../../../../sources/2.2/docs/topics/settings.txt:245
msgid ""
"If you don't set ``DJANGO_SETTINGS_MODULE`` and don't call ``configure()``, "
"Django will raise an ``ImportError`` exception the first time a setting is "
"accessed."
msgstr "如果你没有设置 ``DJANGO_SETTINGS_MODULE`` 也没有调用 ``configure()`` , 那么Django会在第一次访问配置项时抛出 ``ImportError`` 异常."

#: ../../../../sources/2.2/docs/topics/settings.txt:249
msgid ""
"If you set ``DJANGO_SETTINGS_MODULE``, access settings values somehow, "
"*then* call ``configure()``, Django will raise a ``RuntimeError`` indicating"
" that settings have already been configured. There is a property just for "
"this purpose:"
msgstr "如果已经调了 ``DJANGO_SETTINGS_MODULE`` , 再调用 ``configure()`` 的话, Django也会抛出一个 ``RuntimeError`` 异常, 表明已经配置了settings."

#: ../../../../sources/2.2/docs/topics/settings.txt:262
msgid ""
"Also, it's an error to call ``configure()`` more than once, or to call "
"``configure()`` after any setting has been accessed."
msgstr "重复调用 ``configure()`` 或是在访问任何一个配置项后再调用 ``configure()`` , 也会引起错误."

#: ../../../../sources/2.2/docs/topics/settings.txt:265
msgid ""
"It boils down to this: Use exactly one of either ``configure()`` or "
"``DJANGO_SETTINGS_MODULE``. Not both, and not neither."
msgstr "这意味着: 确保要使用 ``configure()`` 或 ``DJANGO_SETTINGS_MODULE`` 其中一个, 不要多, 也不要少."

#: ../../../../sources/2.2/docs/topics/settings.txt:269
msgid "Calling ``django.setup()`` is required for \"standalone\" Django usage"
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:271
msgid ""
"If you're using components of Django \"standalone\" -- for example, writing "
"a Python script which loads some Django templates and renders them, or uses "
"the ORM to fetch some data -- there's one more step you'll need in addition "
"to configuring settings."
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:276
msgid ""
"After you've either set :envvar:`DJANGO_SETTINGS_MODULE` or called "
"``configure()``, you'll need to call :func:`django.setup()` to load your "
"settings and populate Django's application registry. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:290
msgid ""
"Note that calling ``django.setup()`` is only necessary if your code is truly"
" standalone. When invoked by your Web server, or through :doc:`django-admin "
"</ref/django-admin>`, Django will handle this for you."
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:294
msgid "``django.setup()`` may only be called once."
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:296
msgid ""
"Therefore, avoid putting reusable application logic in standalone scripts so"
" that you have to import from the script elsewhere in your application. If "
"you can't avoid that, put the call to ``django.setup()`` inside an ``if`` "
"block::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:307
msgid ":doc:`The Settings Reference </ref/settings>`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/settings.txt:308
msgid "Contains the complete list of core and contrib app settings."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:3
msgid "Signals"
msgstr "信号"

#: ../../../../sources/2.2/docs/topics/signals.txt:8
msgid ""
"Django includes a \"signal dispatcher\" which helps allow decoupled "
"applications get notified when actions occur elsewhere in the framework. In "
"a nutshell, signals allow certain *senders* to notify a set of *receivers* "
"that some action has taken place. They're especially useful when many pieces"
" of code may be interested in the same events."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:14
msgid ""
"Django provides a :doc:`set of built-in signals </ref/signals>` that let "
"user code get notified by Django itself of certain actions. These include "
"some useful notifications:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:18
msgid ""
":data:`django.db.models.signals.pre_save` & "
":data:`django.db.models.signals.post_save`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:21
msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.save` method "
"is called."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:24
msgid ""
":data:`django.db.models.signals.pre_delete` & "
":data:`django.db.models.signals.post_delete`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:27
msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.delete` method"
" or queryset's :meth:`~django.db.models.query.QuerySet.delete` method is "
"called."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:31
msgid ":data:`django.db.models.signals.m2m_changed`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:33
msgid ""
"Sent when a :class:`~django.db.models.ManyToManyField` on a model is "
"changed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:35
msgid ""
":data:`django.core.signals.request_started` & "
":data:`django.core.signals.request_finished`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:38
msgid "Sent when Django starts or finishes an HTTP request."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:40
msgid ""
"See the :doc:`built-in signal documentation </ref/signals>` for a complete "
"list, and a complete explanation of each signal."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:43
msgid "You can also `define and send your own custom signals`_; see below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:48
msgid "Listening to signals"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:50
msgid ""
"To receive a signal, register a *receiver* function using the "
":meth:`Signal.connect` method. The receiver function is called when the "
"signal is sent."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:56
msgid ""
"The callback function which will be connected to this signal. See :ref"
":`receiver-functions` for more information."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:59
msgid ""
"Specifies a particular sender to receive signals from. See :ref:`connecting-"
"to-specific-signals` for more information."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:62
msgid ""
"Django stores signal handlers as weak references by default. Thus, if your "
"receiver is a local function, it may be garbage collected. To prevent this, "
"pass ``weak=False`` when you call the signal's ``connect()`` method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:67
msgid ""
"A unique identifier for a signal receiver in cases where duplicate signals "
"may be sent. See :ref:`preventing-duplicate-signals` for more information."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:71
msgid ""
"Let's see how this works by registering a signal that gets called after each"
" HTTP request is finished. We'll be connecting to the "
":data:`~django.core.signals.request_finished` signal."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:78
msgid "Receiver functions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:80
msgid ""
"First, we need to define a receiver function. A receiver can be any Python "
"function or method::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:86
msgid ""
"Notice that the function takes a ``sender`` argument, along with wildcard "
"keyword arguments (``**kwargs``); all signal handlers must take these "
"arguments."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:89
msgid ""
"We'll look at senders `a bit later`_, but right now look at the ``**kwargs``"
" argument. All signals send keyword arguments, and may change those keyword "
"arguments at any time. In the case of "
":data:`~django.core.signals.request_finished`, it's documented as sending no"
" arguments, which means we might be tempted to write our signal handling as "
"``my_callback(sender)``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:98
msgid ""
"This would be wrong -- in fact, Django will throw an error if you do so. "
"That's because at any point arguments could get added to the signal and your"
" receiver must be able to handle those new arguments."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:105
msgid "Connecting receiver functions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:107
msgid ""
"There are two ways you can connect a receiver to a signal. You can take the "
"manual connect route::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:114
msgid "Alternatively, you can use a :func:`receiver` decorator:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:118
msgid "A signal or a list of signals to connect a function to."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:120
msgid "Here's how you connect with the decorator::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:129
msgid ""
"Now, our ``my_callback`` function will be called each time a request "
"finishes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:131
msgid "Where should this code live?"
msgstr "我的代码该放在哪？"

#: ../../../../sources/2.2/docs/topics/signals.txt:133
msgid ""
"Strictly speaking, signal handling and registration code can live anywhere "
"you like, although it's recommended to avoid the application's root module "
"and its ``models`` module to minimize side-effects of importing code."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:137
msgid ""
"In practice, signal handlers are usually defined in a ``signals`` submodule "
"of the application they relate to. Signal receivers are connected in the "
":meth:`~django.apps.AppConfig.ready` method of your application "
"configuration class. If you're using the :func:`receiver` decorator, simply "
"import the ``signals`` submodule inside "
":meth:`~django.apps.AppConfig.ready`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:146
msgid ""
"The :meth:`~django.apps.AppConfig.ready` method may be executed more than "
"once during testing, so you may want to :ref:`guard your signals from "
"duplication <preventing-duplicate-signals>`, especially if you're planning "
"to send them within tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:154
msgid "Connecting to signals sent by specific senders"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:156
msgid ""
"Some signals get sent many times, but you'll only be interested in receiving"
" a certain subset of those signals. For example, consider the "
":data:`django.db.models.signals.pre_save` signal sent before a model gets "
"saved. Most of the time, you don't need to know when *any* model gets saved "
"-- just when one *specific* model is saved."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:162
msgid ""
"In these cases, you can register to receive signals sent only by particular "
"senders. In the case of :data:`django.db.models.signals.pre_save`, the "
"sender will be the model class being saved, so you can indicate that you "
"only want signals sent by some model::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:176
msgid ""
"The ``my_handler`` function will only be called when an instance of "
"``MyModel`` is saved."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:179
msgid ""
"Different signals use different objects as their senders; you'll need to "
"consult the :doc:`built-in signal documentation </ref/signals>` for details "
"of each particular signal."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:186
msgid "Preventing duplicate signals"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:188
msgid ""
"In some circumstances, the code connecting receivers to signals may run "
"multiple times. This can cause your receiver function to be registered more "
"than once, and thus called multiple times for a single signal event."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:192
msgid ""
"If this behavior is problematic (such as when using signals to send an email"
" whenever a model is saved), pass a unique identifier as the "
"``dispatch_uid`` argument to identify your receiver function. This "
"identifier will usually be a string, although any hashable object will "
"suffice. The end result is that your receiver function will only be bound to"
" the signal once for each unique ``dispatch_uid`` value::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:204
msgid "Defining and sending signals"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:206
msgid ""
"Your applications can take advantage of the signal infrastructure and "
"provide its own signals."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:210
msgid "Defining signals"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:214
msgid ""
"All signals are :class:`django.dispatch.Signal` instances. The "
"``providing_args`` is a list of the names of arguments the signal will "
"provide to listeners. This is purely documentational, however, as there is "
"nothing that checks that the signal actually provides these arguments to its"
" listeners."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:225
msgid ""
"This declares a ``pizza_done`` signal that will provide receivers with "
"``toppings`` and ``size`` arguments."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:228
msgid ""
"Remember that you're allowed to change this list of arguments at any time, "
"so getting the API right on the first try isn't necessary."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:232
msgid "Sending signals"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:234
msgid "There are two ways to send signals in Django."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:239
msgid ""
"To send a signal, call either :meth:`Signal.send` (all built-in signals use "
"this) or :meth:`Signal.send_robust`. You must provide the ``sender`` "
"argument (which is a class most of the time) and may provide as many other "
"keyword arguments as you like."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:244
msgid "For example, here's how sending our ``pizza_done`` signal might look::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:253
msgid ""
"Both ``send()`` and ``send_robust()`` return a list of tuple pairs "
"``[(receiver, response), ... ]``, representing the list of called receiver "
"functions and their response values."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:257
msgid ""
"``send()`` differs from ``send_robust()`` in how exceptions raised by "
"receiver functions are handled. ``send()`` does *not* catch any exceptions "
"raised by receivers; it simply allows errors to propagate. Thus not all "
"receivers may be notified of a signal in the face of an error."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:262
msgid ""
"``send_robust()`` catches all errors derived from Python's ``Exception`` "
"class, and ensures all receivers are notified of the signal. If an error "
"occurs, the error instance is returned in the tuple pair for the receiver "
"that raised the error."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:266
msgid ""
"The tracebacks are present on the ``__traceback__`` attribute of the errors "
"returned when calling ``send_robust()``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:270
msgid "Disconnecting signals"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:274
msgid ""
"To disconnect a receiver from a signal, call :meth:`Signal.disconnect`. The "
"arguments are as described in :meth:`.Signal.connect`. The method returns "
"``True`` if a receiver was disconnected and ``False`` if not."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signals.txt:278
msgid ""
"The ``receiver`` argument indicates the registered receiver to disconnect. "
"It may be ``None`` if ``dispatch_uid`` is used to identify the receiver."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:3
msgid "Cryptographic signing"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:8
msgid ""
"The golden rule of Web application security is to never trust data from "
"untrusted sources. Sometimes it can be useful to pass data through an "
"untrusted medium. Cryptographically signed values can be passed through an "
"untrusted channel safe in the knowledge that any tampering will be detected."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:13
msgid ""
"Django provides both a low-level API for signing values and a high-level API"
" for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:17
msgid "You may also find signing useful for the following:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:19
msgid ""
"Generating \"recover my account\" URLs for sending to users who have lost "
"their password."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:22
msgid "Ensuring data stored in hidden form fields has not been tampered with."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:24
msgid ""
"Generating one-time secret URLs for allowing temporary access to a protected"
" resource, for example a downloadable file that a user has paid for."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:29
msgid "Protecting the ``SECRET_KEY``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:31
msgid ""
"When you create a new Django project using :djadmin:`startproject`, the "
"``settings.py`` file is generated automatically and gets a random "
":setting:`SECRET_KEY` value. This value is the key to securing signed data "
"-- it is vital you keep this secure, or attackers could use it to generate "
"their own signed values."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:38
msgid "Using the low-level API"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:40
msgid ""
"Django's signing methods live in the ``django.core.signing`` module. To sign"
" a value, first instantiate a ``Signer`` instance::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:49
msgid ""
"The signature is appended to the end of the string, following the colon. You"
" can retrieve the original value using the ``unsign`` method::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:56
msgid ""
"If the signature or value have been altered in any way, a "
"``django.core.signing.BadSignature`` exception will be raised::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:66
msgid ""
"By default, the ``Signer`` class uses the :setting:`SECRET_KEY` setting to "
"generate signatures. You can use a different secret by passing it to the "
"``Signer`` constructor::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:77
msgid ""
"Returns a signer which uses ``key`` to generate signatures and ``sep`` to "
"separate values. ``sep`` cannot be in the `URL safe base64 alphabet "
"<https://tools.ietf.org/html/rfc4648#section-5>`_.  This alphabet contains "
"alphanumeric characters, hyphens, and underscores."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:83
msgid "Using the ``salt`` argument"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:85
msgid ""
"If you do not wish for every occurrence of a particular string to have the "
"same signature hash, you can use the optional ``salt`` argument to the "
"``Signer`` class. Using a salt will seed the signing hash function with both"
" the salt and your :setting:`SECRET_KEY`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:99
msgid ""
"Using salt in this way puts the different signatures into different "
"namespaces.  A signature that comes from one namespace (a particular salt "
"value) cannot be used to validate the same plaintext string in a different "
"namespace that is using a different salt setting. The result is to prevent "
"an attacker from using a signed string generated in one place in the code as"
" input to another piece of code that is generating (and verifying) "
"signatures using a different salt."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:107
msgid ""
"Unlike your :setting:`SECRET_KEY`, your salt argument does not need to stay "
"secret."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:111
msgid "Verifying timestamped values"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:113
msgid ""
"``TimestampSigner`` is a subclass of :class:`~Signer` that appends a signed "
"timestamp to the value. This allows you to confirm that a signed value was "
"created within a specified period of time::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:137
msgid "Sign ``value`` and append current timestamp to it."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:141
msgid ""
"Checks if ``value`` was signed less than ``max_age`` seconds ago, otherwise "
"raises ``SignatureExpired``. The ``max_age`` parameter can accept an integer"
" or a :py:class:`datetime.timedelta` object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:146
msgid "Protecting complex data structures"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:148
msgid ""
"If you wish to protect a list, tuple or dictionary you can do so using the "
"signing module's ``dumps`` and ``loads`` functions. These imitate Python's "
"pickle module, but use JSON serialization under the hood. JSON ensures that "
"even if your :setting:`SECRET_KEY` is stolen an attacker will not be able to"
" execute arbitrary commands by exploiting the pickle format::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:161
msgid ""
"Because of the nature of JSON (there is no native distinction between lists "
"and tuples) if you pass in a tuple, you will get a list from "
"``signing.loads(object)``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:172
msgid ""
"Returns URL-safe, sha1 signed base64 compressed JSON string. Serialized "
"object is signed using :class:`~TimestampSigner`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/signing.txt:177
msgid ""
"Reverse of ``dumps()``, raises ``BadSignature`` if signature fails. Checks "
"``max_age`` (in seconds) if given."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:3
msgid "Templates"
msgstr "模板"

#: ../../../../sources/2.2/docs/topics/templates.txt:8
msgid ""
"Being a web framework, Django needs a convenient way to generate HTML "
"dynamically. The most common approach relies on templates. A template "
"contains the static parts of the desired HTML output as well as some special"
" syntax describing how dynamic content will be inserted. For a hands-on "
"example of creating HTML pages with templates, see :doc:`Tutorial 3 "
"</intro/tutorial03>`."
msgstr "作为一个Web框架，Django需要一种动态生成HTML的便捷方法。最常用的方法依赖于模板。模板包含所需HTML输出的静态部分以及描述动态内容将被插入的一些特殊语法。有关创建带有模板的HTML页面的示例，请参阅:doc:`Tutorial 3</intro/tutorial03>"

#: ../../../../sources/2.2/docs/topics/templates.txt:14
msgid ""
"A Django project can be configured with one or several template engines (or "
"even zero if you don't use templates). Django ships built-in backends for "
"its own template system, creatively called the Django template language "
"(DTL), and for the popular alternative Jinja2_. Backends for other template "
"languages may be available from third-parties."
msgstr "Django项目可以配置一个或多个模板引擎（或者如果不使用模板，甚至为零）。Django后端内置一个自己的模板系统，创造性地称为Django template language（DTL），和一个流行的替代品JICAN2*。后端也可以使用第三方提供其他可用的模板语言。"

#: ../../../../sources/2.2/docs/topics/templates.txt:20
msgid ""
"Django defines a standard API for loading and rendering templates regardless"
" of the backend. Loading consists of finding the template for a given "
"identifier and preprocessing it, usually compiling it to an in-memory "
"representation. Rendering means interpolating the template with context data"
" and returning the resulting string."
msgstr "Django定义了一个标准的API，用于加载和渲染模板，而不用考虑后端的模板系统。加载包括查找给定标识符的模板并对其进行预处理，通常将其编译的结果保存在内存中。渲染工具将上下文数据插入模板并返回结果字符串。"

#: ../../../../sources/2.2/docs/topics/templates.txt:26
msgid ""
"The :doc:`Django template language </ref/templates/language>` is Django's "
"own template system. Until Django 1.8 it was the only built-in option "
"available. It's a good template library even though it's fairly opinionated "
"and sports a few idiosyncrasies. If you don't have a pressing reason to "
"choose another backend, you should use the DTL, especially if you're writing"
" a pluggable application and you intend to distribute templates. Django's "
"contrib apps that include templates, like :doc:`django.contrib.admin "
"</ref/contrib/admin/index>`, use the DTL."
msgstr "Doc：Django template language </ref/templates/language>是Django自己的模板系统。直到Django 1.8，它是唯一可用的内置选项。这是一个很好的模板库，即使它是相当僵硬和使用时带有它自己特质。如果您没有紧迫的理由需要去选择另一个后端，则应该使用DTL，特别是如果您正在编写可插入的应用程序并打算分发模板。在 Django's contrib apps 中的有些模板，比如:doc:`django.contrib.admin </ref/contrib/admin/index>，使用DTL。"

#: ../../../../sources/2.2/docs/topics/templates.txt:35
msgid ""
"For historical reasons, both the generic support for template engines and "
"the implementation of the Django template language live in the "
"``django.template`` namespace."
msgstr "由于历史原因，模板引擎的通用支持和Django模板语言的实现都存在于``django.template`` 模块的命名空间中。"

#: ../../../../sources/2.2/docs/topics/templates.txt:41
msgid ""
"The template system isn't safe against untrusted template authors. For "
"example, a site shouldn't allow its users to provide their own templates, "
"since template authors can do things like perform XSS attacks and access "
"properties of template variables that may contain sensitive information."
msgstr "模板系统使用不可信的模板作者的模板是不安全的。例如，一个站点不应该允许它的用户提供他们自己的模板，因为模板作者可以做一些事情，比如执行XSS攻击和拿到包含敏感信息的模板变量的访问权。"

#: ../../../../sources/2.2/docs/topics/templates.txt:49
msgid "Support for template engines"
msgstr "模板引擎的支持"

#: ../../../../sources/2.2/docs/topics/templates.txt:52
msgid "Configuration"
msgstr "配置"

#: ../../../../sources/2.2/docs/topics/templates.txt:54
msgid ""
"Templates engines are configured with the :setting:`TEMPLATES` setting. It's"
" a list of configurations, one for each engine. The default value is empty. "
"The ``settings.py`` generated by the :djadmin:`startproject` command defines"
" a more useful value::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:70
msgid ""
":setting:`BACKEND <TEMPLATES-BACKEND>` is a dotted Python path to a template"
" engine class implementing Django's template backend API. The built-in "
"backends are :class:`django.template.backends.django.DjangoTemplates` and "
":class:`django.template.backends.jinja2.Jinja2`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:75
msgid ""
"Since most engines load templates from files, the top-level configuration "
"for each engine contains two common settings:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:78
msgid ""
":setting:`DIRS <TEMPLATES-DIRS>` defines a list of directories where the "
"engine should look for template source files, in search order."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:80
msgid ""
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>` tells whether the engine should "
"look for templates inside installed applications. Each backend defines a "
"conventional name for the subdirectory inside applications where its "
"templates should be stored."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:85
msgid ""
"While uncommon, it's possible to configure several instances of the same "
"backend with different options. In that case you should define a unique "
":setting:`NAME <TEMPLATES-NAME>` for each engine."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:89
msgid ""
":setting:`OPTIONS <TEMPLATES-OPTIONS>` contains backend-specific settings."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:98
msgid ""
"The ``django.template.loader`` module defines two functions to load "
"templates."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:102
msgid ""
"This function loads the template with the given name and returns a "
"``Template`` object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:105
msgid ""
"The exact type of the return value depends on the backend that loaded the "
"template. Each backend has its own ``Template`` class."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:108
msgid ""
"``get_template()`` tries each template engine in order until one succeeds. "
"If the template cannot be found, it raises "
":exc:`~django.template.TemplateDoesNotExist`. If the template is found but "
"contains invalid syntax, it raises "
":exc:`~django.template.TemplateSyntaxError`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:114
msgid ""
"How templates are searched and loaded depends on each engine's backend and "
"configuration."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:117
msgid ""
"If you want to restrict the search to a particular template engine, pass the"
" engine's :setting:`NAME <TEMPLATES-NAME>` in the ``using`` argument."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:122
msgid ""
"``select_template()`` is just like ``get_template()``, except it takes a "
"list of template names. It tries each name in order and returns the first "
"template that exists."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:128
msgid ""
"If loading a template fails, the following two exceptions, defined in "
"``django.template``, may be raised:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:133
msgid ""
"This exception is raised when a template cannot be found. It accepts the "
"following optional arguments for populating the :ref:`template postmortem "
"<template-postmortem>` on the debug page:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:138
msgid "``backend``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:138
msgid "The template backend instance from which the exception originated."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:144
msgid "``tried``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:141
msgid ""
"A list of sources that were tried when finding the template. This is "
"formatted as a list of tuples containing ``(origin, status)``, where "
"``origin`` is an :ref:`origin-like <template-origin-api>` object and "
"``status`` is a string with the reason the template wasn't found."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:149
msgid "``chain``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:147
msgid ""
"A list of intermediate :exc:`~django.template.TemplateDoesNotExist` "
"exceptions raised when trying to load a template. This is used by functions,"
" such as :func:`~django.template.loader.get_template`, that try to load a "
"given template from multiple engines."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:154
msgid ""
"This exception is raised when a template was found but contains errors."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:156
msgid ""
"``Template`` objects returned by ``get_template()`` and "
"``select_template()`` must provide a ``render()`` method with the following "
"signature:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:163
msgid "Renders this template with a given context."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:165
msgid ""
"If ``context`` is provided, it must be a :class:`dict`. If it isn't "
"provided, the engine will render the template with an empty context."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:168
msgid ""
"If ``request`` is provided, it must be an :class:`~django.http.HttpRequest`."
" Then the engine must make it, as well as the CSRF token, available in the "
"template. How this is achieved is up to each backend."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:172
msgid ""
"Here's an example of the search algorithm. For this example the "
":setting:`TEMPLATES` setting is::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:191
msgid ""
"If you call ``get_template('story_detail.html')``, here are the files Django"
" will look for, in order:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:194
#: ../../../../sources/2.2/docs/topics/templates.txt:204
msgid "``/home/html/example.com/story_detail.html`` (``'django'`` engine)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:195
#: ../../../../sources/2.2/docs/topics/templates.txt:205
msgid "``/home/html/default/story_detail.html`` (``'django'`` engine)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:196
#: ../../../../sources/2.2/docs/topics/templates.txt:206
msgid "``/home/html/jinja2/story_detail.html`` (``'jinja2'`` engine)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:198
msgid ""
"If you call ``select_template(['story_253_detail.html', "
"'story_detail.html'])``, here's what Django will look for:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:201
msgid "``/home/html/example.com/story_253_detail.html`` (``'django'`` engine)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:202
msgid "``/home/html/default/story_253_detail.html`` (``'django'`` engine)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:203
msgid "``/home/html/jinja2/story_253_detail.html`` (``'jinja2'`` engine)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:208
msgid "When Django finds a template that exists, it stops looking."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:210
msgid "Tip"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:212
msgid ""
"You can use :func:`~django.template.loader.select_template()` for flexible "
"template loading. For example, if you've written a news story and want some "
"stories to have custom templates, use something like "
"``select_template(['story_%s_detail.html' % story.id, "
"'story_detail.html'])``. That'll allow you to use a custom template for an "
"individual story, with a fallback template for stories that don't have "
"custom templates."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:220
msgid ""
"It's possible -- and preferable -- to organize templates in subdirectories "
"inside each directory containing templates. The convention is to make a "
"subdirectory for each Django app, with subdirectories within those "
"subdirectories as needed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:225
msgid ""
"Do this for your own sanity. Storing all templates in the root level of a "
"single directory gets messy."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:228
msgid ""
"To load a template that's within a subdirectory, just use a slash, like so::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:232
msgid ""
"Using the same :setting:`TEMPLATES` option as above, this will attempt to "
"load the following templates:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:235
msgid ""
"``/home/html/example.com/news/story_detail.html`` (``'django'`` engine)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:236
msgid "``/home/html/default/news/story_detail.html`` (``'django'`` engine)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:237
msgid "``/home/html/jinja2/news/story_detail.html`` (``'jinja2'`` engine)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:241
msgid ""
"In addition, to cut down on the repetitive nature of loading and rendering "
"templates, Django provides a shortcut function which automates the process."
msgstr "此外，为了减少加载和渲染模板的重复性，Django 提供了一个自动处理的快捷函数。"

#: ../../../../sources/2.2/docs/topics/templates.txt:246
msgid ""
"``render_to_string()`` loads a template like :func:`get_template` and calls "
"its ``render()`` method immediately. It takes the following arguments."
msgstr "``render_to_string()`` 加载一个模板 :func:`get_template` ，并立即调用它的 ``render()`` 方法。它需要下面的参数。"

#: ../../../../sources/2.2/docs/topics/templates.txt:251
msgid ""
"The name of the template to load and render. If it's a list of template "
"names, Django uses :func:`select_template` instead of :func:`get_template` "
"to find the template."
msgstr "加载和呈现模板的名称。如果是模板名称列表，Django 使用 :func:`select_template` ，而不是 :func:`get_template` 找到模板。"

#: ../../../../sources/2.2/docs/topics/templates.txt:256
msgid "A :class:`dict` to be used as the template's context for rendering."
msgstr " :class:`dict` 用作模板的渲染上下文。"

#: ../../../../sources/2.2/docs/topics/templates.txt:259
msgid ""
"An optional :class:`~django.http.HttpRequest` that will be available during "
"the template's rendering process."
msgstr " 可选项 :class:`~django.http.HttpRequest` 在模板的渲染过程中可用。"

#: ../../../../sources/2.2/docs/topics/templates.txt:263
msgid ""
"An optional template engine :setting:`NAME <TEMPLATES-NAME>`. The search for"
" the template will be restricted to that engine."
msgstr "可选的模板引擎 :setting:`NAME <TEMPLATES-NAME>`。对模板的搜索将限于该引擎。"

#: ../../../../sources/2.2/docs/topics/templates.txt:266
msgid "Usage example::"
msgstr "使用实例："

#: ../../../../sources/2.2/docs/topics/templates.txt:271
msgid ""
"See also the :func:`~django.shortcuts.render()` shortcut which calls "
":func:`render_to_string()` and feeds the result into an "
":class:`~django.http.HttpResponse` suitable for returning from a view."
msgstr "还可以参看 :func:`~django.shortcuts.render()` 快捷函数，它调用 :func:`render_to_string()` ，并将结果提供给 :class:`~django.http.HttpResponse` ，适合从视图返回。"

#: ../../../../sources/2.2/docs/topics/templates.txt:275
msgid "Finally, you can use configured engines directly:"
msgstr "最后，您可以直接使用配置好的引擎："

#: ../../../../sources/2.2/docs/topics/templates.txt:279
msgid "Template engines are available in ``django.template.engines``::"
msgstr "模板引擎可在 ``django.template.engines`` 中使用："

#: ../../../../sources/2.2/docs/topics/templates.txt:286
msgid ""
"The lookup key — ``'django'`` in this example — is the engine's "
":setting:`NAME <TEMPLATES-NAME>`."
msgstr "在这个例子中，查找关键字“django”是引擎的 :setting:`NAME <TEMPLATES-NAME>`。"

#: ../../../../sources/2.2/docs/topics/templates.txt:292
msgid "Built-in backends"
msgstr "内置后端"

#: ../../../../sources/2.2/docs/topics/templates.txt:298
msgid ""
"Set :setting:`BACKEND <TEMPLATES-BACKEND>` to "
"``'django.template.backends.django.DjangoTemplates'`` to configure a Django "
"template engine."
msgstr "设置 :setting:`BACKEND <TEMPLATES-BACKEND>` 为 ``'django.template.backends.django.DjangoTemplates'``，以配置 Django 模板引擎。"

#: ../../../../sources/2.2/docs/topics/templates.txt:302
msgid ""
"When :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is ``True``, "
"``DjangoTemplates`` engines look for templates in the ``templates`` "
"subdirectory of installed applications. This generic name was kept for "
"backwards-compatibility."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:306
msgid ""
"``DjangoTemplates`` engines accept the following :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>`:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:309
msgid ""
"``'autoescape'``: a boolean that controls whether HTML autoescaping is "
"enabled."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:312
msgid "It defaults to ``True``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:316
msgid "Only set it to ``False`` if you're rendering non-HTML templates!"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:318
#: ../../../../sources/2.2/docs/topics/templates.txt:411
msgid ""
"``'context_processors'``: a list of dotted Python paths to callables that "
"are used to populate the context when a template is rendered with a request."
" These callables take a request object as their argument and return a "
":class:`dict` of items to be merged into the context."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:323
#: ../../../../sources/2.2/docs/topics/templates.txt:416
msgid "It defaults to an empty list."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:325
msgid "See :class:`~django.template.RequestContext` for more information."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:327
msgid ""
"``'debug'``: a boolean that turns on/off template debug mode. If it is "
"``True``, the fancy error page will display a detailed report for any "
"exception raised during template rendering. This report contains the "
"relevant snippet of the template with the appropriate line highlighted."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:332
msgid "It defaults to the value of the :setting:`DEBUG` setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:334
msgid ""
"``'loaders'``: a list of dotted Python paths to template loader classes. "
"Each ``Loader`` class knows how to import templates from a particular "
"source. Optionally, a tuple can be used instead of a string. The first item "
"in the tuple should be the ``Loader`` class name, and subsequent items are "
"passed to the ``Loader`` during initialization."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:340
msgid ""
"The default depends on the values of :setting:`DIRS <TEMPLATES-DIRS>` and "
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:343
msgid "See :ref:`template-loaders` for details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:345
msgid ""
"``'string_if_invalid'``: the output, as a string, that the template system "
"should use for invalid (e.g. misspelled) variables."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:348
msgid "It defaults to an empty string."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:350
msgid "See :ref:`invalid-template-variables` for details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:352
msgid "``'file_charset'``: the charset used to read template files on disk."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:354
msgid "It defaults to ``'utf-8'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:356
msgid ""
"``'libraries'``: A dictionary of labels and dotted Python paths of template "
"tag modules to register with the template engine. This can be used to add "
"new libraries or provide alternate labels for existing ones. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:367
msgid ""
"Libraries can be loaded by passing the corresponding dictionary key to the "
":ttag:`{% load %}<load>` tag."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:370
msgid ""
"``'builtins'``: A list of dotted Python paths of template tag modules to add"
" to :doc:`built-ins </ref/templates/builtins>`. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:377
msgid ""
"Tags and filters from built-in libraries can be used without first calling "
"the :ttag:`{% load %} <load>` tag."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:384
msgid "Requires Jinja2_ to be installed:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:390
msgid ""
"Set :setting:`BACKEND <TEMPLATES-BACKEND>` to "
"``'django.template.backends.jinja2.Jinja2'`` to configure a Jinja2_ engine."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:393
msgid ""
"When :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is ``True``, ``Jinja2`` "
"engines look for templates in the ``jinja2`` subdirectory of installed "
"applications."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:396
msgid ""
"The most important entry in :setting:`OPTIONS <TEMPLATES-OPTIONS>` is "
"``'environment'``. It's a dotted Python path to a callable returning a "
"Jinja2 environment. It defaults to ``'jinja2.Environment'``. Django invokes "
"that callable and passes other options as keyword arguments. Furthermore, "
"Django adds defaults that differ from Jinja2's for a few options:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:402
msgid "``'autoescape'``: ``True``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:403
msgid ""
"``'loader'``: a loader configured for :setting:`DIRS <TEMPLATES-DIRS>` and "
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:405
msgid "``'auto_reload'``: ``settings.DEBUG``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:406
msgid "``'undefined'``: ``DebugUndefined if settings.DEBUG else Undefined``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:408
msgid ""
"``Jinja2`` engines also accept the following :setting:`OPTIONS <TEMPLATES-"
"OPTIONS>`:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:418
msgid "Using context processors with Jinja2 templates is discouraged."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:420
msgid ""
"Context processors are useful with Django templates because Django templates"
" don't support calling functions with arguments. Since Jinja2 doesn't have "
"that limitation, it's recommended to put the function that you would use as "
"a context processor in the global variables available to the template using "
"``jinja2.Environment`` as described below. You can then call that function "
"in the template:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:431
msgid ""
"Some Django templates context processors return a fixed value. For Jinja2 "
"templates, this layer of indirection isn't necessary since you can add "
"constants directly in ``jinja2.Environment``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:435
msgid ""
"The original use case for adding context processors for Jinja2 involved:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:437
msgid "Making an expensive computation that depends on the request."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:438
msgid "Needing the result in every template."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:439
msgid "Using the result multiple times in each template."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:441
msgid ""
"Unless all of these conditions are met, passing a function to the template "
"is simpler and more in line with the design of Jinja2."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:444
msgid ""
"The default configuration is purposefully kept to a minimum. If a template "
"is rendered with a request (e.g. when using "
":py:func:`~django.shortcuts.render`), the ``Jinja2`` backend adds the "
"globals ``request``, ``csrf_input``, and ``csrf_token`` to the context. "
"Apart from that, this backend doesn't create a Django-flavored environment. "
"It doesn't know about Django filters and tags. In order to use Django-"
"specific APIs, you must configure them into the environment."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:452
msgid ""
"For example, you can create ``myproject/jinja2.py`` with this content::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:468
msgid ""
"and set the ``'environment'`` option to ``'myproject.jinja2.environment'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:470
msgid "Then you could use the following constructs in Jinja2 templates:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:478
msgid ""
"The concepts of tags and filters exist both in the Django template language "
"and in Jinja2 but they're used differently. Since Jinja2 supports passing "
"arguments to callables in templates, many features that require a template "
"tag or filter in Django templates can be achieved simply by calling a "
"function in Jinja2 templates, as shown in the example above. Jinja2's global"
" namespace removes the need for template context processors. The Django "
"template language doesn't have an equivalent of Jinja2 tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:487
msgid "Custom backends"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:489
msgid ""
"Here's how to implement a custom template backend in order to use another "
"template system. A template backend is a class that inherits "
"``django.template.backends.base.BaseEngine``. It must implement "
"``get_template()`` and optionally ``from_string()``. Here's an example for a"
" fictional ``foobar`` template library::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:544
msgid "See `DEP 182`_ for more information."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:549
msgid "Debug integration for custom engines"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:551
msgid ""
"The Django debug page has hooks to provide detailed information when a "
"template error arises. Custom template engines can use these hooks to "
"enhance the traceback information that appears to users. The following hooks"
" are available:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:558
msgid "Template postmortem"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:560
msgid ""
"The postmortem appears when :exc:`~django.template.TemplateDoesNotExist` is "
"raised. It lists the template engines and loaders that were used when trying"
" to find a given template. For example, if two Django engines are "
"configured, the postmortem will appear like:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:567
msgid ""
"Custom engines can populate the postmortem by passing the ``backend`` and "
"``tried`` arguments when raising "
":exc:`~django.template.TemplateDoesNotExist`. Backends that use the "
"postmortem :ref:`should specify an origin <template-origin-api>` on the "
"template object."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:573
msgid "Contextual line information"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:575
msgid ""
"If an error happens during template parsing or rendering, Django can display"
" the line the error happened on. For example:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:580
msgid ""
"Custom engines can populate this information by setting a ``template_debug``"
" attribute on exceptions raised during parsing and rendering. This attribute"
" is a :class:`dict` with the following values:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:584
msgid "``'name'``: The name of the template in which the exception occurred."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:586
msgid "``'message'``: The exception message."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:588
msgid ""
"``'source_lines'``: The lines before, after, and including the line the "
"exception occurred on. This is for context, so it shouldn't contain more "
"than 20 lines or so."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:592
msgid "``'line'``: The line number on which the exception occurred."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:594
msgid ""
"``'before'``: The content on the error line before the token that raised the"
" error."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:597
msgid "``'during'``: The token that raised the error."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:599
msgid ""
"``'after'``: The content on the error line after the token that raised the "
"error."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:602
msgid "``'total'``: The number of lines in ``source_lines``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:604
msgid "``'top'``: The line number where ``source_lines`` starts."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:606
msgid "``'bottom'``: The line number where ``source_lines`` ends."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:608
msgid "Given the above template error, ``template_debug`` would look like::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:635
msgid "Origin API and 3rd-party integration"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:637
msgid ""
"Django templates have an :class:`~django.template.base.Origin` object "
"available through the ``template.origin`` attribute. This enables debug "
"information to be displayed in the :ref:`template postmortem <template-"
"postmortem>`, as well as in 3rd-party libraries, like the `Django Debug "
"Toolbar`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:642
msgid ""
"Custom engines can provide their own ``template.origin`` information by "
"creating an object that specifies the following attributes:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:645
msgid "``'name'``: The full path to the template."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:647
msgid ""
"``'template_name'``: The relative path to the template as passed into the "
"the template loading methods."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:650
msgid ""
"``'loader_name'``: An optional string identifying the function or class used"
" to load the template, e.g. ``django.template.loaders.filesystem.Loader``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:658
msgid "The Django template language"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:663
msgid "Syntax"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:665
#: ../../../../sources/2.2/docs/topics/templates.txt:764
msgid "About this section"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:667
msgid ""
"This is an overview of the Django template language's syntax. For details "
"see the :doc:`language syntax reference </ref/templates/language>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:670
msgid ""
"A Django template is simply a text document or a Python string marked-up "
"using the Django template language. Some constructs are recognized and "
"interpreted by the template engine. The main ones are variables and tags."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:674
msgid ""
"A template is rendered with a context. Rendering replaces variables with "
"their values, which are looked up in the context, and executes tags. "
"Everything else is output as is."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:678
msgid "The syntax of the Django template language involves four constructs."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:681
msgid "Variables"
msgstr "变量"

#: ../../../../sources/2.2/docs/topics/templates.txt:683
msgid ""
"A variable outputs a value from the context, which is a dict-like object "
"mapping keys to values."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:686
msgid "Variables are surrounded by ``{{`` and ``}}`` like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:690
msgid ""
"With a context of ``{'first_name': 'John', 'last_name': 'Doe'}``, this "
"template renders to::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:695
msgid ""
"Dictionary lookup, attribute lookup and list-index lookups are implemented "
"with a dot notation::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:702
msgid ""
"If a variable resolves to a callable, the template system will call it with "
"no arguments and use its result instead of the callable."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:706
msgid "Tags"
msgstr "标签(Tags)"

#: ../../../../sources/2.2/docs/topics/templates.txt:708
msgid "Tags provide arbitrary logic in the rendering process."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:710
msgid ""
"This definition is deliberately vague. For example, a tag can output "
"content, serve as a control structure e.g. an \"if\" statement or a \"for\" "
"loop, grab content from a database, or even enable access to other template "
"tags."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:714
msgid "Tags are surrounded by ``{%`` and ``%}`` like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:718
msgid "Most tags accept arguments::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:722
msgid "Some tags require beginning and ending tags::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:726
msgid ""
"A :ref:`reference of built-in tags <ref-templates-builtins-tags>` is "
"available as well as :ref:`instructions for writing custom tags <howto-"
"writing-custom-template-tags>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:733
msgid "Filters transform the values of variables and tag arguments."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:735
msgid "They look like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:739
msgid ""
"With a context of ``{'django': 'the web framework for perfectionists with "
"deadlines'}``, this template renders to::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:744
msgid "Some filters take an argument::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:748
msgid ""
"A :ref:`reference of built-in filters <ref-templates-builtins-filters>` is "
"available as well as :ref:`instructions for writing custom filters <howto-"
"writing-custom-template-filters>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:755
msgid "Comments look like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:759
msgid "A :ttag:`{% comment %} <comment>` tag provides multi-line comments."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:762
msgid "Components"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:766
msgid ""
"This is an overview of the Django template language's APIs. For details see "
"the :doc:`API reference </ref/templates/api>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:770
msgid "Engine"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:772
msgid ""
":class:`django.template.Engine` encapsulates an instance of the Django "
"template system. The main reason for instantiating an "
":class:`~django.template.Engine` directly is to use the Django template "
"language outside of a Django project."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:777
msgid ""
":class:`django.template.backends.django.DjangoTemplates` is a thin wrapper "
"adapting :class:`django.template.Engine` to Django's template backend API."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:781
msgid "Template"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:783
msgid ""
":class:`django.template.Template` represents a compiled template. Templates "
"are obtained with :meth:`Engine.get_template() "
"<django.template.Engine.get_template>` or :meth:`Engine.from_string() "
"<django.template.Engine.from_string>`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:788
msgid ""
"Likewise ``django.template.backends.django.Template`` is a thin wrapper "
"adapting :class:`django.template.Template` to the common template API."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:792
msgid "Context"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:794
msgid ""
":class:`django.template.Context` holds some metadata in addition to the "
"context data. It is passed to :meth:`Template.render() "
"<django.template.Template.render>` for rendering a template."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:798
msgid ""
":class:`django.template.RequestContext` is a subclass of "
":class:`~django.template.Context` that stores the current "
":class:`~django.http.HttpRequest` and runs template context processors."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:802
msgid ""
"The common API doesn't have an equivalent concept. Context data is passed in"
" a plain :class:`dict` and the current :class:`~django.http.HttpRequest` is "
"passed separately if needed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:807
msgid "Loaders"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:809
msgid ""
"Template loaders are responsible for locating templates, loading them, and "
"returning :class:`~django.template.Template` objects."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:812
msgid ""
"Django provides several :ref:`built-in template loaders <template-loaders>` "
"and supports :ref:`custom template loaders <custom-template-loaders>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:816
msgid "Context processors"
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:818
msgid ""
"Context processors are functions that receive the current "
":class:`~django.http.HttpRequest` as an argument and return a :class:`dict` "
"of data to be added to the rendering context."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:822
msgid ""
"Their main use is to add common data shared by all templates to the context "
"without repeating code in every view."
msgstr ""

#: ../../../../sources/2.2/docs/topics/templates.txt:825
msgid ""
"Django provides many :ref:`built-in context processors <context-"
"processors>`. Implementing a custom context processor is as simple as "
"defining a function."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:3
msgid "Advanced testing topics"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:6
msgid "The request factory"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:12
msgid ""
"The :class:`~django.test.RequestFactory` shares the same API as the test "
"client. However, instead of behaving like a browser, the RequestFactory "
"provides a way to generate a request instance that can be used as the first "
"argument to any view. This means you can test a view function the same way "
"as you would test any other function -- as a black box, with exactly known "
"inputs, testing for specific outputs."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:19
msgid ""
"The API for the :class:`~django.test.RequestFactory` is a slightly "
"restricted subset of the test client API:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:22
msgid ""
"It only has access to the HTTP methods :meth:`~Client.get()`, "
":meth:`~Client.post()`, :meth:`~Client.put()`, :meth:`~Client.delete()`, "
":meth:`~Client.head()`, :meth:`~Client.options()`, and "
":meth:`~Client.trace()`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:27
msgid ""
"These methods accept all the same arguments *except* for ``follow``. Since "
"this is just a factory for producing requests, it's up to you to handle the "
"response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:31
msgid ""
"It does not support middleware. Session and authentication attributes must "
"be supplied by the test itself if required for the view to function "
"properly."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:38
msgid "The following is a simple unit test using the request factory::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:73
msgid "Tests and multiple host names"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:75
msgid ""
"The :setting:`ALLOWED_HOSTS` setting is validated when running tests. This "
"allows the test client to differentiate between internal and external URLs."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:78
msgid ""
"Projects that support multitenancy or otherwise alter business logic based "
"on the request's host and use custom host names in tests must include those "
"hosts in :setting:`ALLOWED_HOSTS`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:82
msgid ""
"The first and simplest option to do so is to add the hosts to your settings "
"file. For example, the test suite for docs.djangoproject.com includes the "
"following::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:93
msgid ""
"and the settings file includes a list of the domains supported by the "
"project::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:101
msgid ""
"Another option is to add the required hosts to :setting:`ALLOWED_HOSTS` "
"using :meth:`~django.test.override_settings()` or "
":attr:`~django.test.SimpleTestCase.modify_settings()`. This option may be "
"preferable in standalone apps that can't package their own settings file or "
"for projects where the list of domains is not static (e.g., subdomains for "
"multitenancy). For example, you could write a test for the domain "
"``http://otherserver/`` as follows::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:116
msgid ""
"Disabling :setting:`ALLOWED_HOSTS` checking (``ALLOWED_HOSTS = ['*']``) when"
" running tests prevents the test client from raising a helpful error message"
" if you follow a redirect to an external URL."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:123
msgid "Tests and multiple databases"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:128
msgid "Testing primary/replica configurations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:130
msgid ""
"If you're testing a multiple database configuration with primary/replica "
"(referred to as master/slave by some databases) replication, this strategy "
"of creating test databases poses a problem. When the test databases are "
"created, there won't be any replication, and as a result, data created on "
"the primary won't be seen on the replica."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:137
msgid ""
"To compensate for this, Django allows you to define that a database is a "
"*test mirror*. Consider the following (simplified) example database "
"configuration::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:159
msgid ""
"In this setup, we have two database servers: ``dbprimary``, described by the"
" database alias ``default``, and ``dbreplica`` described by the alias "
"``replica``. As you might expect, ``dbreplica`` has been configured by the "
"database administrator as a read replica of ``dbprimary``, so in normal "
"activity, any write to ``default`` will appear on ``replica``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:165
msgid ""
"If Django created two independent test databases, this would break any tests"
" that expected replication to occur. However, the ``replica`` database has "
"been configured as a test mirror (using the :setting:`MIRROR <TEST_MIRROR>` "
"test setting), indicating that under testing, ``replica`` should be treated "
"as a mirror of ``default``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:171
msgid ""
"When the test environment is configured, a test version of ``replica`` will "
"*not* be created. Instead the connection to ``replica`` will be redirected "
"to point at ``default``. As a result, writes to ``default`` will appear on "
"``replica`` -- but because they are actually the same database, not because "
"there is data replication between the two databases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:181
msgid "Controlling creation order for test databases"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:183
msgid ""
"By default, Django will assume all databases depend on the ``default`` "
"database and therefore always create the ``default`` database first. "
"However, no guarantees are made on the creation order of any other databases"
" in your test setup."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:188
msgid ""
"If your database configuration requires a specific creation order, you can "
"specify the dependencies that exist using the :setting:`DEPENDENCIES "
"<TEST_DEPENDENCIES>` test setting. Consider the following (simplified) "
"example database configuration::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:226
msgid ""
"Under this configuration, the ``diamonds`` database will be created first, "
"as it is the only database alias without dependencies. The ``default`` and "
"``clubs`` alias will be created next (although the order of creation of this"
" pair is not guaranteed), then ``hearts``, and finally ``spades``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:231
msgid ""
"If there are any circular dependencies in the :setting:`DEPENDENCIES "
"<TEST_DEPENDENCIES>` definition, an "
":exc:`~django.core.exceptions.ImproperlyConfigured` exception will be "
"raised."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:236
msgid "Advanced features of ``TransactionTestCase``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:242
msgid ""
"This attribute is a private API. It may be changed or removed without a "
"deprecation period in the future, for instance to accommodate changes in "
"application loading."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:246
msgid ""
"It's used to optimize Django's own test suite, which contains hundreds of "
"models but no relations between models in different applications."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:249
msgid ""
"By default, ``available_apps`` is set to ``None``. After each test, Django "
"calls :djadmin:`flush` to reset the database state. This empties all tables "
"and emits the :data:`~django.db.models.signals.post_migrate` signal, which "
"recreates one content type and four permissions for each model. This "
"operation gets expensive proportionally to the number of models."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:255
msgid ""
"Setting ``available_apps`` to a list of applications instructs Django to "
"behave as if only the models from these applications were available. The "
"behavior of ``TransactionTestCase`` changes as follows:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:259
msgid ""
":data:`~django.db.models.signals.post_migrate` is fired before each test to "
"create the content types and permissions for each model in available apps, "
"in case they're missing."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:262
msgid ""
"After each test, Django empties only tables corresponding to models in "
"available apps. However, at the database level, truncation may cascade to "
"related models in unavailable apps. Furthermore "
":data:`~django.db.models.signals.post_migrate` isn't fired; it will be fired"
" by the next ``TransactionTestCase``, after the correct set of applications "
"is selected."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:269
msgid ""
"Since the database isn't fully flushed, if a test creates instances of "
"models not included in ``available_apps``, they will leak and they may cause"
" unrelated tests to fail. Be careful with tests that use sessions; the "
"default session engine stores them in the database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:274
msgid ""
"Since :data:`~django.db.models.signals.post_migrate` isn't emitted after "
"flushing the database, its state after a ``TransactionTestCase`` isn't the "
"same as after a ``TestCase``: it's missing the rows created by listeners to "
":data:`~django.db.models.signals.post_migrate`. Considering the :ref:`order "
"in which tests are executed <order-of-tests>`, this isn't an issue, provided"
" either all ``TransactionTestCase`` in a given test suite declare "
"``available_apps``, or none of them."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:282
msgid "``available_apps`` is mandatory in Django's own test suite."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:286
msgid ""
"Setting ``reset_sequences = True`` on a ``TransactionTestCase`` will make "
"sure sequences are always reset before the test run::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:297
msgid ""
"Unless you are explicitly testing primary keys sequence numbers, it is "
"recommended that you do not hard code primary key values in tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:300
msgid ""
"Using ``reset_sequences = True`` will slow down the test, since the primary "
"key reset is a relatively expensive database operation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:306
msgid "Using the Django test runner to test reusable applications"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:308
msgid ""
"If you are writing a :doc:`reusable application </intro/reusable-apps>` you "
"may want to use the Django test runner to run your own test suite and thus "
"benefit from the Django testing infrastructure."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:312
msgid ""
"A common practice is a *tests* directory next to the application code, with "
"the following structure::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:326
msgid "Let's take a look inside a couple of those files:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:328
msgid "runtests.py"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:348
msgid ""
"This is the script that you invoke to run the test suite. It sets up the "
"Django environment, creates the test database and runs the tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:351
msgid ""
"For the sake of clarity, this example contains only the bare minimum "
"necessary to use the Django test runner. You may want to add command-line "
"options for controlling verbosity, passing in specific test labels to run, "
"etc."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:356
msgid "tests/test_settings.py"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:364
msgid ""
"This file contains the :doc:`Django settings </topics/settings>` required to"
" run your app's tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:367
msgid ""
"Again, this is a minimal example; your tests may require additional settings"
" to run."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:370
msgid ""
"Since the *tests* package is included in :setting:`INSTALLED_APPS` when "
"running your tests, you can define test-only models in its ``models.py`` "
"file."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:378
msgid "Using different testing frameworks"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:380
msgid ""
"Clearly, :mod:`unittest` is not the only Python testing framework. While "
"Django doesn't provide explicit support for alternative frameworks, it does "
"provide a way to invoke tests constructed for an alternative framework as if"
" they were normal Django tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:385
msgid ""
"When you run ``./manage.py test``, Django looks at the "
":setting:`TEST_RUNNER` setting to determine what to do. By default, "
":setting:`TEST_RUNNER` points to ``'django.test.runner.DiscoverRunner'``. "
"This class defines the default Django testing behavior. This behavior "
"involves:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:390
msgid "Performing global pre-test setup."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:392
msgid ""
"Looking for tests in any file below the current directory whose name matches"
" the pattern ``test*.py``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:395
msgid "Creating the test databases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:397
msgid ""
"Running ``migrate`` to install models and initial data into the test "
"databases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:400
msgid "Running the :doc:`system checks </topics/checks>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:402
msgid "Running the tests that were found."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:404
msgid "Destroying the test databases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:406
msgid "Performing global post-test teardown."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:408
msgid ""
"If you define your own test runner class and point :setting:`TEST_RUNNER` at"
" that class, Django will execute your test runner whenever you run "
"``./manage.py test``. In this way, it is possible to use any test framework "
"that can be executed from Python code, or to modify the Django test "
"execution process to satisfy whatever testing requirements you may have."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:417
msgid "Defining a test runner"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:421
msgid ""
"A test runner is a class defining a ``run_tests()`` method. Django ships "
"with a ``DiscoverRunner`` class that defines the default Django testing "
"behavior. This class defines the ``run_tests()`` entry point, plus a "
"selection of other methods that are used to by ``run_tests()`` to set up, "
"execute and tear down the test suite."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:429
msgid ""
"``DiscoverRunner`` will search for tests in any file matching ``pattern``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:431
msgid ""
"``top_level`` can be used to specify the directory containing your top-level"
" Python modules. Usually Django can figure this out automatically, so it's "
"not necessary to specify this option. If specified, it should generally be "
"the directory containing your ``manage.py`` file."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:436
msgid ""
"``verbosity`` determines the amount of notification and debug information "
"that will be printed to the console; ``0`` is no output, ``1`` is normal "
"output, and ``2`` is verbose output."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:440
msgid ""
"If ``interactive`` is ``True``, the test suite has permission to ask the "
"user for instructions when the test suite is executed. An example of this "
"behavior would be asking for permission to delete an existing test database."
" If ``interactive`` is ``False``, the test suite must be able to run without"
" any manual intervention."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:446
msgid ""
"If ``failfast`` is ``True``, the test suite will stop running after the "
"first test failure is detected."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:449
msgid ""
"If ``keepdb`` is ``True``, the test suite will use the existing database, or"
" create one if necessary. If ``False``, a new database will be created, "
"prompting the user to remove the existing one, if present."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:453
msgid ""
"If ``reverse`` is ``True``, test cases will be executed in the opposite "
"order. This could be useful to debug tests that aren't properly isolated and"
" have side effects. :ref:`Grouping by test class <order-of-tests>` is "
"preserved when using this option."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:458
msgid ""
"``debug_mode`` specifies what the :setting:`DEBUG` setting should be set to "
"prior to running tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:461
msgid ""
"If ``debug_sql`` is ``True``, failing test cases will output SQL queries "
"logged to the :ref:`django.db.backends logger <django-db-logger>` as well as"
" the traceback. If ``verbosity`` is ``2``, then queries in all tests are "
"output."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:466
msgid ""
"Django may, from time to time, extend the capabilities of the test runner by"
" adding new arguments. The ``**kwargs`` declaration allows for this "
"expansion. If you subclass ``DiscoverRunner`` or write your own test runner,"
" ensure it accepts ``**kwargs``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:471
msgid ""
"Your test runner may also define additional command-line options. Create or "
"override an ``add_arguments(cls, parser)`` class method and add custom "
"arguments by calling ``parser.add_argument()`` inside the method, so that "
"the :djadmin:`test` command will be able to use those arguments."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:481
msgid ""
"The class used to build the test suite. By default it is set to "
"``unittest.TestSuite``. This can be overridden if you wish to implement "
"different logic for collecting tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:487
msgid ""
"This is the class of the low-level test runner which is used to execute the "
"individual tests and format the results. By default it is set to "
"``unittest.TextTestRunner``. Despite the unfortunate similarity in naming "
"conventions, this is not the same type of class as ``DiscoverRunner``, which"
" covers a broader set of responsibilities. You can override this attribute "
"to modify the way tests are run and reported."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:496
msgid ""
"This is the class that loads tests, whether from TestCases or modules or "
"otherwise and bundles them into test suites for the runner to execute. By "
"default it is set to ``unittest.defaultTestLoader``. You can override this "
"attribute if your tests are going to be loaded in unusual ways."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:506
msgid "Run the test suite."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:508
msgid ""
"``test_labels`` allows you to specify which tests to run and supports "
"several formats (see :meth:`DiscoverRunner.build_suite` for a list of "
"supported formats)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:512
#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:551
msgid ""
"``extra_tests`` is a list of extra ``TestCase`` instances to add to the "
"suite that is executed by the test runner. These extra tests are run in "
"addition to those discovered in the modules listed in ``test_labels``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:516
msgid "This method should return the number of tests that failed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:520
msgid ""
"Override this class method to add custom arguments accepted by the "
":djadmin:`test` management command. See "
":py:meth:`argparse.ArgumentParser.add_argument()` for details about adding "
"arguments to a parser."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:527
msgid ""
"Sets up the test environment by calling "
":func:`~django.test.utils.setup_test_environment` and setting "
":setting:`DEBUG` to ``self.debug_mode`` (defaults to ``False``)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:533
msgid "Constructs a test suite that matches the test labels provided."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:535
msgid ""
"``test_labels`` is a list of strings describing the tests to be run. A test "
"label can take one of four forms:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:538
msgid ""
"``path.to.test_module.TestCase.test_method`` -- Run a single test method in "
"a test case."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:540
msgid ""
"``path.to.test_module.TestCase`` -- Run all the test methods in a test case."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:542
msgid ""
"``path.to.module`` -- Search for and run all tests in the named Python "
"package or module."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:544
msgid ""
"``path/to/directory`` -- Search for and run all tests below the named "
"directory."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:547
msgid ""
"If ``test_labels`` has a value of ``None``, the test runner will search for "
"tests in all files below the current directory whose names match its "
"``pattern`` (see above)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:555
msgid "Returns a ``TestSuite`` instance ready to be run."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:559
msgid ""
"Creates the test databases by calling "
":func:`~django.test.utils.setup_databases`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:564
msgid "Runs the :doc:`system checks </topics/checks>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:568
msgid "Runs the test suite."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:570
msgid "Returns the result produced by the running the test suite."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:574
msgid ""
"Returns the keyword arguments to instantiate the "
"``DiscoverRunner.test_runner`` with."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:579
msgid ""
"Destroys the test databases, restoring pre-test conditions by calling "
":func:`~django.test.utils.teardown_databases`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:584
msgid "Restores the pre-test environment."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:588
msgid ""
"Computes and returns a return code based on a test suite, and the result "
"from that test suite."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:593
msgid "Testing utilities"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:596
msgid "``django.test.utils``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:601
msgid ""
"To assist in the creation of your own test runner, Django provides a number "
"of utility methods in the ``django.test.utils`` module."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:606
msgid ""
"Performs global pre-test setup, such as installing instrumentation for the "
"template rendering system and setting up the dummy email outbox."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:609
msgid ""
"If ``debug`` isn't ``None``, the :setting:`DEBUG` setting is updated to its "
"value."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:614
msgid ""
"Performs global post-test teardown, such as removing instrumentation from "
"the template system and restoring normal email services."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:619
msgid "Creates the test databases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:621
msgid ""
"Returns a data structure that provides enough detail to undo the changes "
"that have been made. This data will be provided to the "
":func:`teardown_databases` function at the conclusion of testing."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:625
msgid ""
"The ``aliases`` argument determines which :setting:`DATABASES` aliases test "
"databases should be setup for. If it's not provided, it defaults to all of "
":setting:`DATABASES` aliases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:631
msgid "The ``aliases`` argument was added."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:635
msgid "Destroys the test databases, restoring pre-test conditions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:637
msgid ""
"``old_config`` is a data structure defining the changes in the database "
"configuration that need to be reversed. It's the return value of the "
":meth:`setup_databases` method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:642
msgid "``django.db.connection.creation``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:646
msgid ""
"The creation module of the database backend also provides some utilities "
"that can be useful during testing."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:651
msgid "Creates a new test database and runs ``migrate`` against it."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:653
msgid "``verbosity`` has the same behavior as in ``run_tests()``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:655
msgid ""
"``autoclobber`` describes the behavior that will occur if a database with "
"the same name as the test database is discovered:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:658
msgid ""
"If ``autoclobber`` is ``False``, the user will be asked to approve "
"destroying the existing database. ``sys.exit`` is called if the user does "
"not approve."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:662
msgid ""
"If autoclobber is ``True``, the database will be destroyed without "
"consulting the user."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:665
msgid ""
"``serialize`` determines if Django serializes the database into an in-memory"
" JSON string before running tests (used to restore the database state "
"between tests if you don't have transactions). You can set this to ``False``"
" to speed up creation time if you don't have any test classes with "
":ref:`serialized_rollback=True <test-case-serialized-rollback>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:671
msgid ""
"If you are using the default test runner, you can control this with the the "
":setting:`SERIALIZE <TEST_SERIALIZE>` entry in the :setting:`TEST <DATABASE-"
"TEST>` dictionary."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:675
msgid ""
"``keepdb`` determines if the test run should use an existing database, or "
"create a new one. If ``True``, the existing database will be used, or "
"created if not present. If ``False``, a new database will be created, "
"prompting the user to remove the existing one, if present."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:681
msgid "Returns the name of the test database that it created."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:683
msgid ""
"``create_test_db()`` has the side effect of modifying the value of "
":setting:`NAME` in :setting:`DATABASES` to match the name of the test "
"database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:689
msgid ""
"Destroys the database whose name is the value of :setting:`NAME` in "
":setting:`DATABASES`, and sets :setting:`NAME` to the value of "
"``old_database_name``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:693
msgid ""
"The ``verbosity`` argument has the same behavior as for "
":class:`~django.test.runner.DiscoverRunner`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:696
msgid ""
"If the ``keepdb`` argument is ``True``, then the connection to the database "
"will be closed, but the database will not be destroyed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:702
msgid "Integration with ``coverage.py``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:704
msgid ""
"Code coverage describes how much source code has been tested. It shows which"
" parts of your code are being exercised by tests and which are not. It's an "
"important part of testing applications, so it's strongly recommended to "
"check the coverage of your tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:709
msgid ""
"Django can be easily integrated with `coverage.py`_, a tool for measuring "
"code coverage of Python programs. First, `install coverage.py`_. Next, run "
"the following from your project folder containing ``manage.py``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:715
msgid ""
"This runs your tests and collects coverage data of the executed files in "
"your project. You can see a report of this data by typing following "
"command::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:720
msgid ""
"Note that some Django code was executed while running tests, but it is not "
"listed here because of the ``source`` flag passed to the previous command."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/advanced.txt:723
msgid ""
"For more options like annotated HTML listings detailing missed lines, see "
"the `coverage.py`_ docs."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/index.txt:3
msgid "Testing in Django"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/index.txt:5
msgid ""
"Automated testing is an extremely useful bug-killing tool for the modern Web"
" developer. You can use a collection of tests -- a **test suite** -- to "
"solve, or avoid, a number of problems:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/index.txt:9
msgid ""
"When you're writing new code, you can use tests to validate your code works "
"as expected."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/index.txt:12
msgid ""
"When you're refactoring or modifying old code, you can use tests to ensure "
"your changes haven't affected your application's behavior unexpectedly."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/index.txt:16
msgid ""
"Testing a Web application is a complex task, because a Web application is "
"made of several layers of logic -- from HTTP-level request handling, to form"
" validation and processing, to template rendering. With Django's test-"
"execution framework and assorted utilities, you can simulate requests, "
"insert test data, inspect your application's output and generally verify "
"your code is doing what it should be doing."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/index.txt:23
msgid "The best part is, it's really easy."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/index.txt:25
msgid ""
"The preferred way to write tests in Django is using the :mod:`unittest` "
"module built in to the Python standard library. This is covered in detail in"
" the :doc:`overview` document."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/index.txt:29
msgid ""
"You can also use any *other* Python test framework; Django provides an API "
"and tools for that kind of integration. They are described in the :ref"
":`other-testing-frameworks` section of :doc:`advanced`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:3
msgid "Writing and running tests"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:10
msgid ""
"The :doc:`testing tutorial </intro/tutorial05>`, the :doc:`testing tools "
"reference </topics/testing/tools>`, and the :doc:`advanced testing topics "
"</topics/testing/advanced>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:14
msgid ""
"This document is split into two primary sections. First, we explain how to "
"write tests with Django. Then, we explain how to run them."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:20
msgid ""
"Django's unit tests use a Python standard library module: :mod:`unittest`. "
"This module defines tests using a class-based approach."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:23
msgid ""
"Here is an example which subclasses from :class:`django.test.TestCase`, "
"which is a subclass of :class:`unittest.TestCase` that runs each test inside"
" a transaction to provide isolation::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:42
msgid ""
"When you :ref:`run your tests <running-tests>`, the default behavior of the "
"test utility is to find all the test cases (that is, subclasses of "
":class:`unittest.TestCase`) in any file whose name begins with ``test``, "
"automatically build a test suite out of those test cases, and run that "
"suite."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:47
msgid "For more details about :mod:`unittest`, see the Python documentation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:49
msgid "Where should the tests live?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:51
msgid ""
"The default :djadmin:`startapp` template creates a ``tests.py`` file in the "
"new application. This might be fine if you only have a few tests, but as "
"your test suite grows you'll likely want to restructure it into a tests "
"package so you can split your tests into different submodules such as "
"``test_models.py``, ``test_views.py``, ``test_forms.py``, etc. Feel free to "
"pick whatever organizational scheme you like."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:58
msgid "See also :ref:`testing-reusable-applications`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:62
msgid ""
"If your tests rely on database access such as creating or querying models, "
"be sure to create your test classes as subclasses of "
":class:`django.test.TestCase` rather than :class:`unittest.TestCase`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:66
msgid ""
"Using :class:`unittest.TestCase` avoids the cost of running each test in a "
"transaction and flushing the database, but if your tests interact with the "
"database their behavior will vary based on the order that the test runner "
"executes them. This can lead to unit tests that pass when run in isolation "
"but fail when run in a suite."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:75
msgid "Running tests"
msgstr "运行测试"

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:77
msgid ""
"Once you've written tests, run them using the :djadmin:`test` command of "
"your project's ``manage.py`` utility::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:82
msgid ""
"Test discovery is based on the unittest module's :py:ref:`built-in test "
"discovery <unittest-test-discovery>`.  By default, this will discover tests "
"in any file named \"test*.py\" under the current working directory."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:86
msgid ""
"You can specify particular tests to run by supplying any number of \"test "
"labels\" to ``./manage.py test``. Each test label can be a full Python "
"dotted path to a package, module, ``TestCase`` subclass, or test method. For"
" instance::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:102
msgid ""
"You can also provide a path to a directory to discover tests below that "
"directory::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:107
msgid ""
"You can specify a custom filename pattern match using the ``-p`` (or "
"``--pattern``) option, if your test files are named differently from the "
"``test*.py`` pattern::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:113
msgid ""
"If you press ``Ctrl-C`` while the tests are running, the test runner will "
"wait for the currently running test to complete and then exit gracefully. "
"During a graceful exit the test runner will output details of any test "
"failures, report on how many tests were run and how many errors and failures"
" were encountered, and destroy any test databases as usual. Thus pressing "
"``Ctrl-C`` can be very useful if you forget to pass the :option:`--failfast "
"<test --failfast>` option, notice that some tests are unexpectedly failing "
"and want to get details on the failures without waiting for the full test "
"run to complete."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:123
msgid ""
"If you do not want to wait for the currently running test to finish, you can"
" press ``Ctrl-C`` a second time and the test run will halt immediately, but "
"not gracefully. No details of the tests run before the interruption will be "
"reported, and any test databases created by the run will not be destroyed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:128
msgid "Test with warnings enabled"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:130
msgid ""
"It's a good idea to run your tests with Python warnings enabled: ``python "
"-Wa manage.py test``. The ``-Wa`` flag tells Python to display deprecation "
"warnings. Django, like many other Python libraries, uses these warnings to "
"flag when features are going away. It also might flag areas in your code "
"that aren't strictly wrong but could benefit from a better implementation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:141
msgid "The test database"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:143
msgid ""
"Tests that require a database (namely, model tests) will not use your "
"\"real\" (production) database. Separate, blank databases are created for "
"the tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:146
msgid ""
"Regardless of whether the tests pass or fail, the test databases are "
"destroyed when all the tests have been executed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:149
msgid ""
"You can prevent the test databases from being destroyed by using the "
":option:`test --keepdb` option. This will preserve the test database between"
" runs. If the database does not exist, it will first be created. Any "
"migrations will also be applied in order to keep it up to date."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:154
msgid ""
"As described in the previous section, if a test run is forcefully "
"interrupted, the test database may not be destroyed. On the next run, you'll"
" be asked whether you want to reuse or destroy the database. Use the "
":option:`test --noinput` option to suppress that prompt and automatically "
"destroy the database. This can be useful when running tests on a continuous "
"integration server where tests may be interrupted by a timeout, for example."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:161
msgid ""
"The default test database names are created by prepending ``test_`` to the "
"value of each :setting:`NAME` in :setting:`DATABASES`. When using SQLite, "
"the tests will use an in-memory database by default (i.e., the database will"
" be created in memory, bypassing the filesystem entirely!). The "
":setting:`TEST <DATABASE-TEST>` dictionary in :setting:`DATABASES` offers a "
"number of settings to configure your test database. For example, if you want"
" to use a different database name, specify :setting:`NAME <TEST_NAME>` in "
"the :setting:`TEST <DATABASE-TEST>` dictionary for any given database in "
":setting:`DATABASES`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:170
msgid ""
"On PostgreSQL, :setting:`USER` will also need read access to the built-in "
"``postgres`` database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:173
msgid ""
"Aside from using a separate database, the test runner will otherwise use all"
" of the same database settings you have in your settings file: "
":setting:`ENGINE <DATABASE-ENGINE>`, :setting:`USER`, :setting:`HOST`, etc. "
"The test database is created by the user specified by :setting:`USER`, so "
"you'll need to make sure that the given user account has sufficient "
"privileges to create a new database on the system."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:180
msgid ""
"For fine-grained control over the character encoding of your test database, "
"use the :setting:`CHARSET <TEST_CHARSET>` TEST option. If you're using "
"MySQL, you can also use the :setting:`COLLATION <TEST_COLLATION>` option to "
"control the particular collation used by the test database. See the "
":doc:`settings documentation </ref/settings>` for details of these and other"
" advanced settings."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:187
msgid ""
"If using an SQLite in-memory database with SQLite, `shared cache "
"<https://www.sqlite.org/sharedcache.html>`_ is enabled, so you can write "
"tests with ability to share the database between threads."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:191
msgid "Finding data from your production database when running tests?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:193
msgid ""
"If your code attempts to access the database when its modules are compiled, "
"this will occur *before* the test database is set up, with potentially "
"unexpected results. For example, if you have a database query in module-"
"level code and a real database exists, production data could pollute your "
"tests. *It is a bad idea to have such import-time database queries in your "
"code* anyway - rewrite your code so that it doesn't do this."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:200
msgid ""
"This also applies to customized implementations of "
":meth:`~django.apps.AppConfig.ready()`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:205
msgid ""
"The :ref:`advanced multi-db testing topics <topics-testing-advanced-"
"multidb>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:210
msgid "Order in which tests are executed"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:212
msgid ""
"In order to guarantee that all ``TestCase`` code starts with a clean "
"database, the Django test runner reorders tests in the following way:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:215
msgid "All :class:`~django.test.TestCase` subclasses are run first."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:217
msgid ""
"Then, all other Django-based tests (test cases based on "
":class:`~django.test.SimpleTestCase`, including "
":class:`~django.test.TransactionTestCase`) are run with no particular "
"ordering guaranteed nor enforced among them."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:222
msgid ""
"Then any other :class:`unittest.TestCase` tests (including doctests) that "
"may alter the database without restoring it to its original state are run."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:227
msgid ""
"The new ordering of tests may reveal unexpected dependencies on test case "
"ordering. This is the case with doctests that relied on state left in the "
"database by a given :class:`~django.test.TransactionTestCase` test, they "
"must be updated to be able to run independently."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:232
msgid ""
"You may reverse the execution order inside groups using the :option:`test "
"--reverse` option. This can help with ensuring your tests are independent "
"from each other."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:239
msgid "Rollback emulation"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:241
msgid ""
"Any initial data loaded in migrations will only be available in ``TestCase``"
" tests and not in ``TransactionTestCase`` tests, and additionally only on "
"backends where transactions are supported (the most important exception "
"being MyISAM). This is also true for tests which rely on "
"``TransactionTestCase`` such as :class:`LiveServerTestCase` and "
":class:`~django.contrib.staticfiles.testing.StaticLiveServerTestCase`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:248
msgid ""
"Django can reload that data for you on a per-testcase basis by setting the "
"``serialized_rollback`` option to ``True`` in the body of the ``TestCase`` "
"or ``TransactionTestCase``, but note that this will slow down that test "
"suite by approximately 3x."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:253
msgid ""
"Third-party apps or those developing against MyISAM will need to set this; "
"in general, however, you should be developing your own projects against a "
"transactional database and be using ``TestCase`` for most tests, and thus "
"not need this setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:258
msgid ""
"The initial serialization is usually very quick, but if you wish to exclude "
"some apps from this process (and speed up test runs slightly), you may add "
"those apps to :setting:`TEST_NON_SERIALIZED_APPS`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:262
msgid ""
"To prevent serialized data from being loaded twice, setting "
"``serialized_rollback=True`` disables the "
":data:`~django.db.models.signals.post_migrate` signal when flushing the test"
" database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:268
msgid "Other test conditions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:270
msgid ""
"Regardless of the value of the :setting:`DEBUG` setting in your "
"configuration file, all Django tests run with :setting:`DEBUG`\\=False. This"
" is to ensure that the observed output of your code matches what will be "
"seen in a production setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:275
msgid ""
"Caches are not cleared after each test, and running \"manage.py test "
"fooapp\" can insert data from the tests into the cache of a live system if "
"you run your tests in production because, unlike databases, a separate "
"\"test cache\" is not used. This behavior `may change`_ in the future."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:283
msgid "Understanding the test output"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:285
msgid ""
"When you run your tests, you'll see a number of messages as the test runner "
"prepares itself. You can control the level of detail of these messages with "
"the ``verbosity`` option on the command line::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:293
msgid ""
"This tells you that the test runner is creating a test database, as "
"described in the previous section."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:296
msgid ""
"Once the test database has been created, Django will run your tests. If "
"everything goes well, you'll see something like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:304
msgid ""
"If there are test failures, however, you'll see full details about which "
"tests failed::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:320
msgid ""
"A full explanation of this error output is beyond the scope of this "
"document, but it's pretty intuitive. You can consult the documentation of "
"Python's :mod:`unittest` library for details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:324
msgid ""
"Note that the return code for the test-runner script is 1 for any number of "
"failed and erroneous tests. If all the tests pass, the return code is 0. "
"This feature is useful if you're using the test-runner script in a shell "
"script and need to test for success or failure at that level."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:332
msgid "Speeding up the tests"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:335
msgid "Running tests in parallel"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:337
msgid ""
"As long as your tests are properly isolated, you can run them in parallel to"
" gain a speed up on multi-core hardware. See :option:`test --parallel`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:341
msgid "Password hashing"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:343
msgid ""
"The default password hasher is rather slow by design. If you're "
"authenticating many users in your tests, you may want to use a custom "
"settings file and set the :setting:`PASSWORD_HASHERS` setting to a faster "
"hashing algorithm::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:351
msgid ""
"Don't forget to also include in :setting:`PASSWORD_HASHERS` any hashing "
"algorithm used in fixtures, if any."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:355
msgid "Preserving the test database"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/overview.txt:357
msgid ""
"The :option:`test --keepdb` option preserves the test database between test "
"runs. It skips the create and destroy actions which can greatly decrease the"
" time to run tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:3
msgid "Testing tools"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:7
msgid ""
"Django provides a small set of tools that come in handy when writing tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:12
msgid "The test client"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:14
msgid ""
"The test client is a Python class that acts as a dummy Web browser, allowing"
" you to test your views and interact with your Django-powered application "
"programmatically."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:18
msgid "Some of the things you can do with the test client are:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:20
msgid ""
"Simulate GET and POST requests on a URL and observe the response -- "
"everything from low-level HTTP (result headers and status codes) to page "
"content."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:24
msgid ""
"See the chain of redirects (if any) and check the URL and status code at "
"each step."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:27
msgid ""
"Test that a given request is rendered by a given Django template, with a "
"template context that contains certain values."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:30
msgid ""
"Note that the test client is not intended to be a replacement for Selenium_ "
"or other \"in-browser\" frameworks. Django's test client has a different "
"focus. In short:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:34
msgid ""
"Use Django's test client to establish that the correct template is being "
"rendered and that the template is passed the correct context data."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:37
msgid ""
"Use in-browser frameworks like Selenium_ to test *rendered* HTML and the "
"*behavior* of Web pages, namely JavaScript functionality. Django also "
"provides special support for those frameworks; see the section on "
":class:`~django.test.LiveServerTestCase` for more details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:42
msgid ""
"A comprehensive test suite should use a combination of both test types."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:45
msgid "Overview and a quick example"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:47
msgid ""
"To use the test client, instantiate ``django.test.Client`` and retrieve Web "
"pages::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:59
msgid ""
"As this example suggests, you can instantiate ``Client`` from within a "
"session of the Python interactive interpreter."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:62
msgid "Note a few important things about how the test client works:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:64
msgid ""
"The test client does *not* require the Web server to be running. In fact, it"
" will run just fine with no Web server running at all! That's because it "
"avoids the overhead of HTTP and deals directly with the Django framework. "
"This helps make the unit tests run quickly."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:69
msgid ""
"When retrieving pages, remember to specify the *path* of the URL, not the "
"whole domain. For example, this is correct::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:74
msgid "This is incorrect::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:78
msgid ""
"The test client is not capable of retrieving Web pages that are not powered "
"by your Django project. If you need to retrieve other Web pages, use a "
"Python standard library module such as :mod:`urllib`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:82
msgid ""
"To resolve URLs, the test client uses whatever URLconf is pointed-to by your"
" :setting:`ROOT_URLCONF` setting."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:85
msgid ""
"Although the above example would work in the Python interactive interpreter,"
" some of the test client's functionality, notably the template-related "
"functionality, is only available *while tests are running*."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:90
msgid ""
"The reason for this is that Django's test runner performs a bit of black "
"magic in order to determine which template was loaded by a given view. This "
"black magic (essentially a patching of Django's template system in memory) "
"only happens during test running."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:95
msgid ""
"By default, the test client will disable any CSRF checks performed by your "
"site."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:98
msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks. To do "
"this, pass in the ``enforce_csrf_checks`` argument when you construct your "
"client::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:108
msgid "Making requests"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:110
msgid "Use the ``django.test.Client`` class to make requests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:114
msgid ""
"It requires no arguments at time of construction. However, you can use "
"keywords arguments to specify some default headers. For example, this will "
"send a ``User-Agent`` HTTP header in each request::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:120
msgid ""
"The values from the ``extra`` keywords arguments passed to "
":meth:`~django.test.Client.get()`, :meth:`~django.test.Client.post()`, etc. "
"have precedence over the defaults passed to the class constructor."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:125
msgid ""
"The ``enforce_csrf_checks`` argument can be used to test CSRF protection "
"(see above)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:128
msgid ""
"The ``json_encoder`` argument allows setting a custom JSON encoder for the "
"JSON serialization that's described in :meth:`post`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:133
msgid "The ``json_encoder`` argument was added."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:135
msgid ""
"Once you have a ``Client`` instance, you can call any of the following "
"methods:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:140
msgid ""
"Makes a GET request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:143
msgid ""
"The key-value pairs in the ``data`` dictionary are used to create a GET data"
" payload. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:149
msgid "...will result in the evaluation of a GET request equivalent to::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:153
msgid ""
"The ``extra`` keyword arguments parameter can be used to specify headers to "
"be sent in the request. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:160
msgid ""
"...will send the HTTP header ``HTTP_X_REQUESTED_WITH`` to the details view, "
"which is a good way to test code paths that use the "
":meth:`django.http.HttpRequest.is_ajax()` method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:164
msgid "CGI specification"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:166
msgid ""
"The headers sent via ``**extra`` should follow CGI_ specification. For "
"example, emulating a different \"Host\" header as sent in the HTTP request "
"from the browser to the server should be passed as ``HTTP_HOST``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:173
msgid ""
"If you already have the GET arguments in URL-encoded form, you can use that "
"encoding instead of using the data argument. For example, the previous GET "
"request could also be posed as::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:180
msgid ""
"If you provide a URL with both an encoded GET data and a data argument, the "
"data argument will take precedence."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:183
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:298
msgid ""
"If you set ``follow`` to ``True`` the client will follow any redirects and a"
" ``redirect_chain`` attribute will be set in the response object containing "
"tuples of the intermediate urls and status codes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:187
msgid ""
"If you had a URL ``/redirect_me/`` that redirected to ``/next/``, that "
"redirected to ``/final/``, this is what you'd see::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:194
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:302
msgid ""
"If you set ``secure`` to ``True`` the client will emulate an HTTPS request."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:199
msgid ""
"Makes a POST request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:202
msgid ""
"The key-value pairs in the ``data`` dictionary are used to submit POST data."
" For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:208
msgid "...will result in the evaluation of a POST request to this URL::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:212
msgid "...with this POST data::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:216
msgid ""
"If you provide ``content_type`` as :mimetype:`application/json`, the "
"``data`` is serialized using :func:`json.dumps` if it's a dict, list, or "
"tuple. Serialization is performed with "
":class:`~django.core.serializers.json.DjangoJSONEncoder` by default, and can"
" be overridden by providing a ``json_encoder`` argument to :class:`Client`. "
"This serialization also happens for :meth:`put`, :meth:`patch`, and "
":meth:`delete` requests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:226
msgid ""
"The JSON serialization described above was added. In older versions, you can"
" call :func:`json.dumps` on ``data`` before passing it to ``post()`` to "
"achieve the same thing."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:232
msgid ""
"The JSON serialization was extended to support lists and tuples. In older "
"versions, only dicts are serialized."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:235
msgid ""
"If you provide any other ``content_type`` (e.g. :mimetype:`text/xml` for an "
"XML payload), the contents of ``data`` are sent as-is in the POST request, "
"using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:240
msgid ""
"If you don't provide a value for ``content_type``, the values in ``data`` "
"will be transmitted with a content type of :mimetype:`multipart/form-data`. "
"In this case, the key-value pairs in ``data`` will be encoded as a multipart"
" message and used to create the POST data payload."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:246
msgid ""
"To submit multiple values for a given key -- for example, to specify the "
"selections for a ``<select multiple>`` -- provide the values as a list or "
"tuple for the required key. For example, this value of ``data`` would submit"
" three selected values for the field named ``choices``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:253
msgid ""
"Submitting files is a special case. To POST a file, you need only provide "
"the file field name as a key, and a file handle to the file you wish to "
"upload as a value. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:261
msgid ""
"(The name ``attachment`` here is not relevant; use whatever name your file-"
"processing code expects.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:264
msgid ""
"You may also provide any file-like object (e.g., :class:`~io.StringIO` or "
":class:`~io.BytesIO`) as a file handle. If you're uploading to an "
":class:`~django.db.models.ImageField`, the object needs a ``name`` attribute"
" that passes the "
":data:`~django.core.validators.validate_image_file_extension` validator. For"
" example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:275
msgid ""
"Note that if you wish to use the same file handle for multiple ``post()`` "
"calls then you will need to manually reset the file pointer between posts. "
"The easiest way to do this is to manually close the file after it has been "
"provided to ``post()``, as demonstrated above."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:281
msgid ""
"You should also ensure that the file is opened in a way that allows the data"
" to be read. If your file contains binary data such as an image, this means "
"you will need to open the file in ``rb`` (read binary) mode."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:286
msgid "The ``extra`` argument acts the same as for :meth:`Client.get`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:288
msgid ""
"If the URL you request with a POST contains encoded parameters, these "
"parameters will be made available in the request.GET data. For example, if "
"you were to make the request::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:294
msgid ""
"... the view handling this request could interrogate request.POST to "
"retrieve the username and password, and could interrogate request.GET to "
"determine if the user was a visitor."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:307
msgid ""
"Makes a HEAD request on the provided ``path`` and returns a ``Response`` "
"object. This method works just like :meth:`Client.get`, including the "
"``follow``, ``secure`` and ``extra`` arguments, except it does not return a "
"message body."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:314
msgid ""
"Makes an OPTIONS request on the provided ``path`` and returns a ``Response``"
" object. Useful for testing RESTful interfaces."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:317
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:328
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:347
msgid ""
"When ``data`` is provided, it is used as the request body, and a ``Content-"
"Type`` header is set to ``content_type``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:320
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:331
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:339
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:350
msgid ""
"The ``follow``, ``secure`` and ``extra`` arguments act the same as for "
":meth:`Client.get`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:325
msgid ""
"Makes a PUT request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:336
msgid ""
"Makes a PATCH request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:344
msgid ""
"Makes a DELETE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:355
msgid ""
"Makes a TRACE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for simulating diagnostic probes."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:358
msgid ""
"Unlike the other request methods, ``data`` is not provided as a keyword "
"parameter in order to comply with :rfc:`7231#section-4.3.8`, which mandates "
"that TRACE requests must not have a body."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:362
msgid ""
"The ``follow``, ``secure``, and ``extra`` arguments act the same as for "
":meth:`Client.get`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:367
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>` "
"and you deal with logging in users, you can use the test client's "
"``login()`` method to simulate the effect of a user logging into the site."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:372
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data required to pass any login-based tests that may form part of a "
"view."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:376
msgid ""
"The format of the ``credentials`` argument depends on which "
":ref:`authentication backend <authentication-backends>` you're using (which "
"is configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're"
" using the standard authentication backend provided by Django "
"(``ModelBackend``), ``credentials`` should be the user's username and "
"password, provided as keyword arguments::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:388
msgid ""
"If you're using a different authentication backend, this method may require "
"different credentials. It requires whichever credentials are required by "
"your backend's ``authenticate()`` method."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:392
msgid ""
"``login()`` returns ``True`` if it the credentials were accepted and login "
"was successful."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:395
msgid ""
"Finally, you'll need to remember to create user accounts before you can use "
"this method. As we explained above, the test runner is executed using a test"
" database, which contains no users by default. As a result, user accounts "
"that are valid on your production site will not work under test conditions. "
"You'll need to create users as part of the test suite -- either manually "
"(using the Django model API) or with a test fixture. Remember that if you "
"want your test user to have a password, you can't set the user's password by"
" setting the password attribute directly -- you must use the "
":meth:`~django.contrib.auth.models.User.set_password()` function to store a "
"correctly hashed password. Alternatively, you can use the "
":meth:`~django.contrib.auth.models.UserManager.create_user` helper method to"
" create a new user with a correctly hashed password."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:411
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>`,"
" you can use the ``force_login()`` method to simulate the effect of a user "
"logging into the site. Use this method instead of :meth:`login` when a test "
"requires a user be logged in and the details of how a user logged in aren't "
"important."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:417
msgid ""
"Unlike ``login()``, this method skips the authentication and verification "
"steps: inactive users (:attr:`is_active=False "
"<django.contrib.auth.models.User.is_active>`) are permitted to login and the"
" user's credentials don't need to be provided."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:422
msgid ""
"The user will have its ``backend`` attribute set to the value of the "
"``backend`` argument (which should be a dotted Python path string), or to "
"``settings.AUTHENTICATION_BACKENDS[0]`` if a value isn't provided. The "
":func:`~django.contrib.auth.authenticate` function called by :meth:`login` "
"normally annotates the user like this."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:428
msgid ""
"This method is faster than ``login()`` since the expensive password hashing "
"algorithms are bypassed. Also, you can speed up ``login()`` by :ref:`using a"
" weaker hasher while testing <speeding-up-tests-auth-hashers>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:435
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>`,"
" the ``logout()`` method can be used to simulate the effect of a user "
"logging out of your site."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:439
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data cleared to defaults. Subsequent requests will appear to come "
"from an :class:`~django.contrib.auth.models.AnonymousUser`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:444
msgid "Testing responses"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:446
msgid ""
"The ``get()`` and ``post()`` methods both return a ``Response`` object. This"
" ``Response`` object is *not* the same as the ``HttpResponse`` object "
"returned by Django views; the test response object has some additional data "
"useful for test code to verify."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:451
msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:457
msgid ""
"The test client that was used to make the request that resulted in the "
"response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:462
msgid ""
"The body of the response, as a bytestring. This is the final page content as"
" rendered by the view, or any error message."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:467
msgid ""
"The template ``Context`` instance that was used to render the template that "
"produced the response content."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:470
msgid ""
"If the rendered page used multiple templates, then ``context`` will be a "
"list of ``Context`` objects, in the order in which they were rendered."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:473
msgid ""
"Regardless of the number of templates used during rendering, you can "
"retrieve context values using the ``[]`` operator. For example, the context "
"variable ``name`` could be retrieved using::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:481
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:525
msgid "Not using Django templates?"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:483
msgid ""
"This attribute is only populated when using the "
":class:`~django.template.backends.django.DjangoTemplates` backend. If you're"
" using another template engine, "
":attr:`~django.template.response.SimpleTemplateResponse.context_data` may be"
" a suitable alternative on responses with that attribute."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:491
msgid ""
"The body of the response, parsed as JSON. Extra keyword arguments are passed"
" to :func:`json.loads`. For example::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:498
msgid ""
"If the ``Content-Type`` header is not ``\"application/json\"``, then a "
":exc:`ValueError` will be raised when trying to parse the response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:503
msgid "The request data that stimulated the response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:507
msgid ""
"The ``WSGIRequest`` instance generated by the test handler that generated "
"the response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:512
msgid ""
"The HTTP status of the response, as an integer. For a full list of defined "
"codes, see the `IANA status code registry`_."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:519
msgid ""
"A list of ``Template`` instances used to render the final content, in the "
"order they were rendered. For each template in the list, use "
"``template.name`` to get the template's file name, if the template was "
"loaded from a file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:527
msgid ""
"This attribute is only populated when using the "
":class:`~django.template.backends.django.DjangoTemplates` backend. If you're"
" using another template engine, "
":attr:`~django.template.response.SimpleTemplateResponse.template_name` may "
"be a suitable alternative if you only need the name of the template used for"
" rendering."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:536
msgid ""
"An instance of :class:`~django.urls.ResolverMatch` for the response. You can"
" use the :attr:`~django.urls.ResolverMatch.func` attribute, for example, to "
"verify the view that served the response::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:547
msgid ""
"If the given URL is not found, accessing this attribute will raise a "
":exc:`~django.urls.Resolver404` exception."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:550
msgid ""
"You can also use dictionary syntax on the response object to query the value"
" of any settings in the HTTP headers. For example, you could determine the "
"content type of a response using ``response['Content-Type']``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:555
msgid "Exceptions"
msgstr "例外"

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:557
msgid ""
"If you point the test client at a view that raises an exception, that "
"exception will be visible in the test case. You can then use a standard "
"``try ... except`` block or :meth:`~unittest.TestCase.assertRaises` to test "
"for exceptions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:561
msgid ""
"The only exceptions that are not visible to the test client are "
":class:`~django.http.Http404`, "
":class:`~django.core.exceptions.PermissionDenied`, :exc:`SystemExit`, and "
":class:`~django.core.exceptions.SuspiciousOperation`. Django catches these "
"exceptions internally and converts them into the appropriate HTTP response "
"codes. In these cases, you can check ``response.status_code`` in your test."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:569
msgid "Persistent state"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:571
msgid ""
"The test client is stateful. If a response returns a cookie, then that "
"cookie will be stored in the test client and sent with all subsequent "
"``get()`` and ``post()`` requests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:575
msgid ""
"Expiration policies for these cookies are not followed. If you want a cookie"
" to expire, either delete it manually or create a new ``Client`` instance "
"(which will effectively delete all cookies)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:579
msgid ""
"A test client has two attributes that store persistent state information. "
"You can access these properties as part of a test condition."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:584
msgid ""
"A Python :class:`~http.cookies.SimpleCookie` object, containing the current "
"values of all the client cookies. See the documentation of the "
":mod:`http.cookies` module for more."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:590
msgid ""
"A dictionary-like object containing session information. See the "
":doc:`session documentation</topics/http/sessions>` for full details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:593
msgid ""
"To modify the session and then save it, it must be stored in a variable "
"first (because a new ``SessionStore`` is created every time this property is"
" accessed)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:603
msgid "Setting the language"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:605
msgid ""
"When testing applications that support internationalization and "
"localization, you might want to set the language for a test client request. "
"The method for doing so depends on whether or not the "
":class:`~django.middleware.locale.LocaleMiddleware` is enabled."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:610
msgid ""
"If the middleware is enabled, the language can be set by creating a cookie "
"with a name of :setting:`LANGUAGE_COOKIE_NAME` and a value of the language "
"code::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:620
msgid "or by including the ``Accept-Language`` HTTP header in the request::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:626
msgid "More details are in :ref:`how-django-discovers-language-preference`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:628
msgid ""
"If the middleware isn't enabled, the active language may be set using "
":func:`.translation.override`::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:638
msgid "More details are in :ref:`explicitly-setting-the-active-language`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:643
msgid "The following is a simple unit test using the test client::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:665
msgid ":class:`django.test.RequestFactory`"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:670
msgid "Provided test case classes"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:672
msgid ""
"Normal Python unit test classes extend a base class of "
":class:`unittest.TestCase`. Django provides a few extensions of this base "
"class:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:682
msgid "Hierarchy of Django unit testing classes"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:684
msgid ""
"Converting a normal :class:`unittest.TestCase` to any of the subclasses is "
"easy: change the base class of your test from ``unittest.TestCase`` to the "
"subclass. All of the standard Python unit test functionality will be "
"available, and it will be augmented with some useful additions as described "
"in each section below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:691
msgid "``SimpleTestCase``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:695
msgid "A subclass of :class:`unittest.TestCase` that adds this functionality:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:697
msgid "Some useful assertions like:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:699
msgid ""
"Checking that a callable :meth:`raises a certain exception "
"<SimpleTestCase.assertRaisesMessage>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:701
msgid ""
"Checking that a callable :meth:`triggers a certain warning "
"<SimpleTestCase.assertWarnsMessage>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:703
msgid ""
"Testing form field :meth:`rendering and error treatment "
"<SimpleTestCase.assertFieldOutput>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:705
msgid ""
"Testing :meth:`HTML responses for the presence/lack of a given fragment "
"<SimpleTestCase.assertContains>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:707
msgid ""
"Verifying that a template :meth:`has/hasn't been used to generate a given "
"response content <SimpleTestCase.assertTemplateUsed>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:709
msgid ""
"Verifying that two :meth:`URLs <SimpleTestCase.assertURLEqual>` are equal."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:710
msgid ""
"Verifying a HTTP :meth:`redirect <SimpleTestCase.assertRedirects>` is "
"performed by the app."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:712
msgid ""
"Robustly testing two :meth:`HTML fragments <SimpleTestCase.assertHTMLEqual>`"
" for equality/inequality or :meth:`containment "
"<SimpleTestCase.assertInHTML>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:714
msgid ""
"Robustly testing two :meth:`XML fragments <SimpleTestCase.assertXMLEqual>` "
"for equality/inequality."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:716
msgid ""
"Robustly testing two :meth:`JSON fragments <SimpleTestCase.assertJSONEqual>`"
" for equality."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:719
msgid ""
"The ability to run tests with :ref:`modified settings <overriding-"
"settings>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:720
msgid "Using the :attr:`~SimpleTestCase.client` :class:`~django.test.Client`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:722
msgid ""
"If your tests make any database queries, use subclasses "
":class:`~django.test.TransactionTestCase` or :class:`~django.test.TestCase`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:729
msgid ""
":class:`~SimpleTestCase` disallows database queries by default. This helps "
"to avoid executing write queries which will affect other tests since each "
"``SimpleTestCase`` test isn't run in a transaction. If you aren't concerned "
"about this problem, you can disable this behavior by setting the "
"``databases`` class attribute to ``'__all__'`` on your test class."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:740
msgid ""
"This attribute is deprecated in favor of :attr:`databases`. The previous "
"behavior of ``allow_database_queries = True`` can be achieved by setting "
"``databases = '__all__'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:746
msgid ""
"``SimpleTestCase`` and its subclasses (e.g. ``TestCase``, ...) rely on "
"``setUpClass()`` and ``tearDownClass()`` to perform some class-wide "
"initialization (e.g. overriding settings). If you need to override those "
"methods, don't forget to call the ``super`` implementation::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:763
msgid ""
"Be sure to account for Python's behavior if an exception is raised during "
"``setUpClass()``. If that happens, neither the tests in the class nor "
"``tearDownClass()`` are run. In the case of :class:`django.test.TestCase`, "
"this will leak the transaction created in ``super()``  which results in "
"various symptoms including a segmentation fault on some platforms (reported "
"on macOS). If you want to intentionally raise an exception such as "
":exc:`unittest.SkipTest` in ``setUpClass()``, be sure to do it before "
"calling ``super()`` to avoid this."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:773
msgid "``TransactionTestCase``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:777
msgid ""
"``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase` "
"to add some database-specific features:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:780
msgid ""
"Resetting the database to a known state at the beginning of each test to "
"ease testing and using the ORM."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:782
msgid "Database :attr:`~TransactionTestCase.fixtures`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:783
msgid ""
"Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:784
msgid ""
"The remaining specialized :meth:`assert* "
"<TransactionTestCase.assertQuerysetEqual>` methods."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:787
msgid ""
"Django's :class:`TestCase` class is a more commonly used subclass of "
"``TransactionTestCase`` that makes use of database transaction facilities to"
" speed up the process of resetting the database to a known state at the "
"beginning of each test. A consequence of this, however, is that some "
"database behaviors cannot be tested within a Django ``TestCase`` class. For "
"instance, you cannot test that a block of code is executing within a "
"transaction, as is required when using "
":meth:`~django.db.models.query.QuerySet.select_for_update()`. In those "
"cases, you should use ``TransactionTestCase``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:797
msgid ""
"``TransactionTestCase`` and ``TestCase`` are identical except for the manner"
" in which the database is reset to a known state and the ability for test "
"code to test the effects of commit and rollback:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:801
msgid ""
"A ``TransactionTestCase`` resets the database after the test runs by "
"truncating all tables. A ``TransactionTestCase`` may call commit and "
"rollback and observe the effects of these calls on the database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:805
msgid ""
"A ``TestCase``, on the other hand, does not truncate tables after a test. "
"Instead, it encloses the test code in a database transaction that is rolled "
"back at the end of the test. This guarantees that the rollback at the end of"
" the test restores the database to its initial state."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:812
msgid ""
"``TestCase`` running on a database that does not support rollback (e.g. "
"MySQL with the MyISAM storage engine), and all instances of "
"``TransactionTestCase``, will roll back at the end of the test by deleting "
"all data from the test database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:817
msgid ""
"Apps :ref:`will not see their data reloaded <test-case-serialized-"
"rollback>`; if you need this functionality (for example, third-party apps "
"should enable this) you can set ``serialized_rollback = True`` inside the "
"``TestCase`` body."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:823
msgid "``TestCase``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:827
msgid ""
"This is the most common class to use for writing tests in Django. It "
"inherits from :class:`TransactionTestCase` (and by extension "
":class:`SimpleTestCase`). If your Django application doesn't use a database,"
" use :class:`SimpleTestCase`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:831
msgid "The class:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:833
msgid ""
"Wraps the tests within two nested :func:`~django.db.transaction.atomic` "
"blocks: one for the whole class and one for each test. Therefore, if you "
"want to test some specific database transaction behavior, use "
":class:`TransactionTestCase`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:838
msgid "Checks deferrable database constraints at the end of each test."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:840
msgid "It also provides an additional method:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:844
msgid ""
"The class-level ``atomic`` block described above allows the creation of "
"initial data at the class level, once for the whole ``TestCase``. This "
"technique allows for faster tests as compared to using ``setUp()``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:867
msgid ""
"Note that if the tests are run on a database with no transaction support "
"(for instance, MySQL with the MyISAM engine), ``setUpTestData()`` will be "
"called before each test, negating the speed benefits."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:871
msgid ""
"Be careful not to modify any objects created in ``setUpTestData()`` in your "
"test methods. Modifications to in-memory objects from setup work done at the"
" class level will persist between test methods. If you do need to modify "
"them, you could reload them in the ``setUp()`` method with "
":meth:`~django.db.models.Model.refresh_from_db`, for example."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:880
msgid "``LiveServerTestCase``"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:884
msgid ""
"``LiveServerTestCase`` does basically the same as "
":class:`~django.test.TransactionTestCase` with one extra feature: it "
"launches a live Django server in the background on setup, and shuts it down "
"on teardown. This allows the use of automated test clients other than the "
":ref:`Django dummy client <test-client>` such as, for example, the Selenium_"
" client, to execute a series of functional tests inside a browser and "
"simulate a real user's actions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:892
msgid ""
"The live server listens on ``localhost`` and binds to port 0 which uses a "
"free port assigned by the operating system. The server's URL can be accessed"
" with ``self.live_server_url`` during the tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:896
msgid ""
"To demonstrate how to use ``LiveServerTestCase``, let's write a simple "
"Selenium test. First of all, you need to install the `selenium package`_ "
"into your Python path:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:904
msgid ""
"Then, add a ``LiveServerTestCase``-based test to your app's tests module "
"(for example: ``myapp/tests.py``). For this example, we'll assume you're "
"using the :mod:`~django.contrib.staticfiles` app and want to have static "
"files served during the execution of your tests similar to what we get at "
"development time with ``DEBUG=True``, i.e. without having to collect them "
"using :djadmin:`collectstatic`. We'll use the  "
":class:`~django.contrib.staticfiles.testing.StaticLiveServerTestCase` "
"subclass which provides that functionality. Replace it with "
"``django.test.LiveServerTestCase`` if you don't need that."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:914
msgid "The code for this test may look as follows::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:941
msgid "Finally, you may run the test as follows:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:947
msgid ""
"This example will automatically open Firefox then go to the login page, "
"enter the credentials and press the \"Log in\" button. Selenium offers other"
" drivers in case you do not have Firefox installed or wish to use another "
"browser. The example above is just a tiny fraction of what the Selenium "
"client can do; check out the `full reference`_ for more details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:960
msgid ""
"When using an in-memory SQLite database to run the tests, the same database "
"connection will be shared by two threads in parallel: the thread in which "
"the live server is run and the thread in which the test case is run. It's "
"important to prevent simultaneous database queries via this shared "
"connection by the two threads, as that may sometimes randomly cause the "
"tests to fail. So you need to ensure that the two threads don't access the "
"database at the same time. In particular, this means that in some cases (for"
" example, just after clicking a link or submitting a form), you might need "
"to check that a response is received by Selenium and that the next page is "
"loaded before proceeding with further test execution. Do this, for example, "
"by making Selenium wait until the ``<body>`` HTML tag is found in the "
"response (requires Selenium > 2.13)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:982
msgid ""
"The tricky thing here is that there's really no such thing as a \"page "
"load,\" especially in modern Web apps that generate HTML dynamically after "
"the server generates the initial document. So, simply checking for the "
"presence of ``<body>`` in the response might not necessarily be appropriate "
"for all use cases. Please refer to the `Selenium FAQ`_ and `Selenium "
"documentation`_ for more information."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:993
msgid "Test cases features"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:996
msgid "Default test client"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1000
msgid ""
"Every test case in a ``django.test.*TestCase`` instance has access to an "
"instance of a Django test client. This client can be accessed as "
"``self.client``. This client is recreated for each test, so you don't have "
"to worry about state (such as cookies) carrying over from one test to "
"another."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1005
msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1021
msgid "...you can just refer to ``self.client``, like so::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1035
msgid "Customizing the test client"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1039
msgid ""
"If you want to use a different ``Client`` class (for example, a subclass "
"with customized behavior), use the :attr:`~SimpleTestCase.client_class` "
"class attribute::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1059
msgid "Fixture loading"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1063
msgid ""
"A test case for a database-backed website isn't much use if there isn't any "
"data in the database. Tests are more readable and it's more maintainable to "
"create objects using the ORM, for example in :meth:`TestCase.setUpTestData`,"
" however, you can also use fixtures."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1068
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. For example, if your site has user accounts, you might set up a "
"fixture of fake user accounts in order to populate your database during "
"tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1072
msgid ""
"The most straightforward way of creating a fixture is to use the "
":djadmin:`manage.py dumpdata <dumpdata>` command. This assumes you already "
"have some data in your database. See the :djadmin:`dumpdata "
"documentation<dumpdata>` for more details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1077
msgid ""
"Once you've created a fixture and placed it in a ``fixtures`` directory in "
"one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by "
"specifying a ``fixtures`` class attribute on your "
":class:`django.test.TestCase` subclass::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1096
msgid "Here's specifically what will happen:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1098
msgid ""
"At the start of each test, before ``setUp()`` is run, Django will flush the "
"database, returning the database to the state it was in directly after "
":djadmin:`migrate` was called."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1102
msgid ""
"Then, all the named fixtures are installed. In this example, Django will "
"install any JSON fixture named ``mammals``, followed by any fixture named "
"``birds``. See the :djadmin:`loaddata` documentation for more details on "
"defining and installing fixtures."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1107
msgid ""
"For performance reasons, :class:`TestCase` loads fixtures once for the "
"entire test class, before :meth:`~TestCase.setUpTestData`, instead of before"
" each test, and it uses transactions to clean the database before each test."
" In any case, you can be certain that the outcome of a test will not be "
"affected by another test or by the order of test execution."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1113
msgid ""
"By default, fixtures are only loaded into the ``default`` database. If you "
"are using multiple databases and set :attr:`TransactionTestCase.databases`, "
"fixtures will be loaded into all specified databases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1118
msgid "URLconf configuration"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1120
msgid ""
"If your application provides views, you may want to include tests that use "
"the test client to exercise those views. However, an end user is free to "
"deploy the views in your application at any URL of their choosing. This "
"means that your tests can't rely upon the fact that your views will be "
"available at a particular URL. Decorate your test class or test method with "
"``@override_settings(ROOT_URLCONF=...)`` for URLconf configuration."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1130
msgid "Multi-database support"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1136
msgid ""
"Django sets up a test database corresponding to every database that is "
"defined in the :setting:`DATABASES` definition in your settings and referred"
" to by at least one test through ``databases``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1140
msgid ""
"However, a big part of the time taken to run a Django ``TestCase`` is "
"consumed by the call to ``flush`` that ensures that you have a clean "
"database at the start of each test run. If you have multiple databases, "
"multiple flushes are required (one for each database), which can be a time "
"consuming activity -- especially if your tests don't need to test multi-"
"database activity."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1146
msgid ""
"As an optimization, Django only flushes the ``default`` database at the "
"start of each test run. If your setup contains multiple databases, and you "
"have a test that requires every database to be clean, you can use the "
"``databases`` attribute on the test suite to request extra databases to be "
"flushed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1160
msgid ""
"This test case will flush the ``default`` and ``other`` test databases "
"before running ``test_index_page_view``. You can also use ``'__all__'`` to "
"specify that all of the test databases must be flushed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1164
msgid ""
"The ``databases`` flag also controls which databases the "
":attr:`TransactionTestCase.fixtures` are loaded into. By default, fixtures "
"are only loaded into the ``default`` database."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1168
msgid ""
"Queries against databases not in ``databases`` will give assertion errors to"
" prevent state leaking between tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1175
msgid ""
"This attribute is deprecated in favor of "
":attr:`~TransactionTestCase.databases`. The previous behavior of ``multi_db "
"= True`` can be achieved by setting ``databases = '__all__'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1183
msgid ""
"By default, only the ``default`` database will be wrapped in a transaction "
"during a ``TestCase``'s execution and attempts to query other databases will"
" result in assertion errors to prevent state leaking between tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1187
msgid ""
"Use the ``databases`` class attribute on the test class to request "
"transaction wrapping against non-``default`` databases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1198
msgid ""
"This test will only allow queries against the ``other`` database. Just like "
"for :attr:`SimpleTestCase.databases` and "
":attr:`TransactionTestCase.databases`, the ``'__all__'`` constant can be "
"used to specify that the test should allow queries to all databases."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1207
msgid ""
"This attribute is deprecated in favor of :attr:`~TestCase.databases`. The "
"previous behavior of ``multi_db = True`` can be achieved by setting "
"``databases = '__all__'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1214
msgid "Overriding settings"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1218
msgid ""
"Use the functions below to temporarily alter the value of settings in tests."
" Don't manipulate ``django.conf.settings`` directly as Django won't restore "
"the original values after such manipulations."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1224
msgid ""
"For testing purposes it's often useful to change a setting temporarily and "
"revert to the original value after running the testing code. For this use "
"case Django provides a standard Python context manager (see :pep:`343`) "
"called :meth:`~django.test.SimpleTestCase.settings`, which can be used like "
"this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1244
msgid ""
"This example will override the :setting:`LOGIN_URL` setting for the code in "
"the ``with`` block and reset its value to the previous state afterwards."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1249
msgid ""
"It can prove unwieldy to redefine settings that contain a list of values. In"
" practice, adding or removing values is often sufficient. The "
":meth:`~django.test.SimpleTestCase.modify_settings` context manager makes it"
" easy::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1271
msgid ""
"For each action, you can supply either a list of values or a string. When "
"the value already exists in the list, ``append`` and ``prepend`` have no "
"effect; neither does ``remove`` when the value doesn't exist."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1277
msgid ""
"In case you want to override a setting for a test method, Django provides "
"the :func:`~django.test.override_settings` decorator (see :pep:`318`). It's "
"used like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1290
msgid ""
"The decorator can also be applied to :class:`~django.test.TestCase` "
"classes::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1303
msgid ""
"Likewise, Django provides the :func:`~django.test.modify_settings` "
"decorator::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1318
msgid "The decorator can also be applied to test case classes::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1334
msgid ""
"When given a class, these decorators modify the class directly and return "
"it; they don't create and return a modified copy of it. So if you try to "
"tweak the above examples to assign the return value to a different name than"
" ``LoginTestCase`` or ``MiddlewareTestCase``, you may be surprised to find "
"that the original test case classes are still equally affected by the "
"decorator. For a given class, :func:`~django.test.modify_settings` is always"
" applied after :func:`~django.test.override_settings`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1342
msgid "Considerations with Python 3.5"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1344
msgid ""
"If using Python 3.5 (or older, if using an older version of Django), avoid "
"mixing  ``remove`` with ``append`` and ``prepend`` in "
":func:`~django.test.modify_settings`. In some cases it matters whether a "
"value is first added and then removed or vice versa, and dictionary key "
"order isn't preserved until Python 3.6. Instead, apply the decorator twice "
"to guarantee the order of operations. For example, to ensure that "
"``SessionMiddleware`` appears first in ``MIDDLEWARE``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1361
msgid ""
"The settings file contains some settings that are only consulted during "
"initialization of Django internals. If you change them with "
"``override_settings``, the setting is changed if you access it via the "
"``django.conf.settings`` module, however, Django's internals access it "
"differently. Effectively, using :func:`~django.test.override_settings` or "
":func:`~django.test.modify_settings` with these settings is probably not "
"going to do what you expect it to do."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1369
msgid ""
"We do not recommend altering the :setting:`DATABASES` setting. Altering the "
":setting:`CACHES` setting is possible, but a bit tricky if you are using "
"internals that make using of caching, like :mod:`django.contrib.sessions`. "
"For example, you will have to reinitialize the session backend in a test "
"that uses cached sessions and overrides :setting:`CACHES`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1376
msgid ""
"Finally, avoid aliasing your settings as module-level constants as "
"``override_settings()`` won't work on such values since they are only "
"evaluated the first time the module is imported."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1380
msgid ""
"You can also simulate the absence of a setting by deleting it after settings"
" have been overridden, like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1388
msgid ""
"When overriding settings, make sure to handle the cases in which your app's "
"code uses a cache or similar feature that retains state even if the setting "
"is changed. Django provides the :data:`django.test.signals.setting_changed` "
"signal that lets you register callbacks to clean up and otherwise reset "
"state when settings are changed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1394
msgid "Django itself uses this signal to reset various data:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1397
msgid "Overridden settings"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1397
msgid "Data reset"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1399
msgid "USE_TZ, TIME_ZONE"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1399
msgid "Databases timezone"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1400
msgid "TEMPLATES"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1400
msgid "Template engines"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1401
msgid "SERIALIZATION_MODULES"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1401
msgid "Serializers cache"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1402
msgid "LOCALE_PATHS, LANGUAGE_CODE"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1402
msgid "Default translation and loaded translations"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1403
msgid "MEDIA_ROOT, DEFAULT_FILE_STORAGE"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1403
msgid "Default file storage"
msgstr "默认文件存储"

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1409
msgid "Emptying the test outbox"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1411
msgid ""
"If you use any of Django's custom ``TestCase`` classes, the test runner will"
" clear the contents of the test email outbox at the start of each test case."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1414
msgid ""
"For more detail on email services during tests, see `Email services`_ below."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1419
msgid "Assertions"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1421
msgid ""
"As Python's normal :class:`unittest.TestCase` class implements assertion "
"methods such as :meth:`~unittest.TestCase.assertTrue` and "
":meth:`~unittest.TestCase.assertEqual`, Django's custom :class:`TestCase` "
"class provides a number of custom assertion methods that are useful for "
"testing Web applications:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1427
msgid ""
"The failure messages given by most of these assertion methods can be "
"customized with the ``msg_prefix`` argument. This string will be prefixed to"
" any failure message generated by the assertion. This allows you to provide "
"additional details that may help you to identify the location and cause of a"
" failure in your test suite."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1436
msgid ""
"Asserts that execution of ``callable`` raises ``expected_exception`` and "
"that ``expected_message`` is found in the exception's message. Any other "
"outcome is reported as a failure. It's a simpler version of "
":meth:`unittest.TestCase.assertRaisesRegex` with the difference that "
"``expected_message`` isn't treated as a regular expression."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1442
msgid ""
"If only the ``expected_exception`` and ``expected_message`` parameters are "
"given, returns a context manager so that the code being tested can be "
"written inline rather than as a function::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1454
msgid ""
"Analogous to :meth:`SimpleTestCase.assertRaisesMessage` but for "
":meth:`~unittest.TestCase.assertWarnsRegex` instead of "
":meth:`~unittest.TestCase.assertRaisesRegex`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1460
msgid "Asserts that a form field behaves correctly with various inputs."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1462
msgid "the class of the field to be tested."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1463
msgid "a dictionary mapping valid inputs to their expected cleaned values."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1465
msgid ""
"a dictionary mapping invalid inputs to one or more raised error messages."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1467
msgid "the args passed to instantiate the field."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1468
msgid "the kwargs passed to instantiate the field."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1469
msgid "the expected clean output for inputs in ``empty_values``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1471
msgid ""
"For example, the following code tests that an ``EmailField`` accepts "
"``a@a.com`` as a valid email address, but rejects ``aaa`` with a reasonable "
"error message::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1479
msgid ""
"Asserts that a field on a form raises the provided list of errors when "
"rendered on the form."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1482
msgid ""
"``form`` is the name the ``Form`` instance was given in the template "
"context."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1485
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1505
msgid ""
"``field`` is the name of the field on the form to check. If ``field`` has a "
"value of ``None``, non-field errors (errors you can access via "
":meth:`form.non_field_errors() <django.forms.Form.non_field_errors>`) will "
"be checked."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1490
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1510
msgid ""
"``errors`` is an error string, or a list of error strings, that are expected"
" as a result of form validation."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1495
msgid ""
"Asserts that the ``formset`` raises the provided list of errors when "
"rendered."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1498
msgid ""
"``formset`` is the name the ``Formset`` instance was given in the template "
"context."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1501
msgid ""
"``form_index`` is the number of the form within the ``Formset``.  If "
"``form_index`` has a value of ``None``, non-form errors (errors you can "
"access via ``formset.non_form_errors()``) will be checked."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1515
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` appears in the content of the response. If ``count`` is "
"provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1519
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1530
msgid ""
"Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the"
" response content will be based on HTML semantics instead of character-by-"
"character equality. Whitespace is ignored in most cases, attribute ordering "
"is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more "
"details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1527
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` does *not* appear in the content of the response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1538
msgid ""
"Asserts that the template with the given name was used in rendering the "
"response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1541
msgid "The name is a string such as ``'admin/index.html'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1543
msgid ""
"The count argument is an integer indicating the number of times the template"
" should be rendered. Default is ``None``, meaning that the template should "
"be rendered one or more times."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1547
msgid "You can use this as a context manager, like this::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1556
msgid ""
"Asserts that the template with the given name was *not* used in rendering "
"the response."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1559
msgid ""
"You can use this as a context manager in the same way as "
":meth:`~SimpleTestCase.assertTemplateUsed`."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1566
msgid ""
"Asserts that two URLs are the same, ignoring the order of query string "
"parameters except for parameters with the same name. For example, "
"``/path/?x=1&y=2`` is equal to ``/path/?y=2&x=1``, but ``/path/?a=1&a=2`` "
"isn't equal to ``/path/?a=2&a=1``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1573
msgid ""
"Asserts that the response returned a ``status_code`` redirect status, "
"redirected to ``expected_url`` (including any ``GET`` data), and that the "
"final page was received with ``target_status_code``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1577
msgid ""
"If your request used the ``follow`` argument, the ``expected_url`` and "
"``target_status_code`` will be the url and status code for the final point "
"of the redirect chain."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1581
msgid ""
"If ``fetch_redirect_response`` is ``False``, the final page won't be loaded."
" Since the test client can't fetch external URLs, this is particularly "
"useful if ``expected_url`` isn't part of your Django app."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1585
msgid ""
"Scheme is handled correctly when making comparisons between two URLs. If "
"there isn't any scheme specified in the location where we are redirected to,"
" the original request's scheme is used. If present, the scheme in "
"``expected_url`` is the one used to make the comparisons to."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1592
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are equal. The comparison "
"is based on HTML semantics. The comparison takes following things into "
"account:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1596
msgid "Whitespace before and after HTML tags is ignored."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1597
msgid "All types of whitespace are considered equivalent."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1598
msgid ""
"All open tags are closed implicitly, e.g. when a surrounding tag is closed "
"or the HTML document ends."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1600
msgid "Empty tags are equivalent to their self-closing version."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1601
msgid "The ordering of attributes of an HTML element is not significant."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1602
msgid ""
"Attributes without an argument are equal to attributes that equal in name "
"and value (see the examples)."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1605
msgid ""
"The following examples are valid tests and don't raise any "
"``AssertionError``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1619
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1630
msgid ""
"``html1`` and ``html2`` must be valid HTML. An ``AssertionError`` will be "
"raised if one of them cannot be parsed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1622
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1633
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1644
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1652
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1670
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1677
#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1695
msgid "Output in case of error can be customized with the ``msg`` argument."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1626
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are *not* equal. The "
"comparison is based on HTML semantics. See "
":meth:`~SimpleTestCase.assertHTMLEqual` for details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1637
msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are equal. The comparison is "
"based on XML semantics. Similarly to "
":meth:`~SimpleTestCase.assertHTMLEqual`, the comparison is made on parsed "
"content, hence only semantic differences are considered, not syntax "
"differences. When invalid XML is passed in any parameter, an "
"``AssertionError`` is always raised, even if both string are identical."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1648
msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are *not* equal. The "
"comparison is based on XML semantics. See "
":meth:`~SimpleTestCase.assertXMLEqual` for details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1656
msgid ""
"Asserts that the HTML fragment ``needle`` is contained in the ``haystack`` "
"one."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1658
msgid ""
"If the ``count`` integer argument is specified, then additionally the number"
" of ``needle`` occurrences will be strictly verified."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1661
msgid ""
"Whitespace in most cases is ignored, and attribute ordering is not "
"significant. The passed-in arguments must be valid HTML."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1666
msgid ""
"Asserts that the JSON fragments ``raw`` and ``expected_data`` are equal. "
"Usual JSON non-significant whitespace rules apply as the heavyweight is "
"delegated to the :mod:`json` library."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1674
msgid ""
"Asserts that the JSON fragments ``raw`` and ``expected_data`` are *not* "
"equal. See :meth:`~SimpleTestCase.assertJSONEqual` for further details."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1681
msgid ""
"Asserts that a queryset ``qs`` returns a particular list of values "
"``values``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1683
msgid ""
"The comparison of the contents of ``qs`` and ``values`` is performed using "
"the function ``transform``; by default, this means that the ``repr()`` of "
"each value is compared. Any other callable can be used if ``repr()`` doesn't"
" provide a unique or helpful comparison."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1688
msgid ""
"By default, the comparison is also ordering dependent. If ``qs`` doesn't "
"provide an implicit ordering, you can set the ``ordered`` parameter to "
"``False``, which turns the comparison into a ``collections.Counter`` "
"comparison. If the order is undefined (if the given ``qs`` isn't ordered and"
" the comparison is against more than one ordered values), a ``ValueError`` "
"is raised."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1699
msgid ""
"Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that "
"``num`` database queries are executed."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1702
msgid ""
"If a ``\"using\"`` key is present in ``kwargs`` it is used as the database "
"alias for which to check the number of queries.  If you wish to call a "
"function with a ``using`` parameter you can do it by wrapping the call with "
"a ``lambda`` to add an extra parameter::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1709
msgid "You can also use this as a context manager::"
msgstr "你也可以用它作为上下文管理器::"

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1718
msgid "Tagging tests"
msgstr "标记测试"

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1720
msgid ""
"You can tag your tests so you can easily run a particular subset. For "
"example, you might label fast or slow tests::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1739
msgid "You can also tag a test case::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1745
msgid ""
"Subclasses inherit tags from superclasses, and methods inherit tags from "
"their class. Given::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1755
msgid ""
"``SampleTestCaseChild.test`` will be labeled with ``'slow'``, ``'core'``, "
"``'bar'``, and ``'foo'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1760
msgid ""
"In older versions, tagged tests don't inherit tags from classes, and tagged "
"subclasses don't inherit tags from superclasses. For example, "
"``SampleTestCaseChild.test`` is labeled only with ``'bar'``."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1764
msgid ""
"Then you can choose which tests to run. For example, to run only fast tests:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1770
msgid "Or to run fast tests and the core one (even though it's slow):"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1776
msgid ""
"You can also exclude tests by tag. To run core tests if they are not slow:"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1782
msgid ""
":option:`test --exclude-tag` has precedence over :option:`test --tag`, so if"
" a test has two tags and you select one of them and exclude the other, the "
"test won't be run."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1789
msgid "Email services"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1791
msgid ""
"If any of your Django views send email using :doc:`Django's email "
"functionality </topics/email>`, you probably don't want to send email each "
"time you run a test using that view. For this reason, Django's test runner "
"automatically redirects all Django-sent email to a dummy outbox. This lets "
"you test every aspect of sending email -- from the number of messages sent "
"to the contents of each message -- without actually sending the messages."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1798
msgid ""
"The test runner accomplishes this by transparently replacing the normal "
"email backend with a testing backend. (Don't worry -- this has no effect on "
"any other email senders outside of Django, such as your machine's mail "
"server, if you're running one.)"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1807
msgid ""
"During test running, each outgoing email is saved in "
"``django.core.mail.outbox``. This is a simple list of all "
":class:`~django.core.mail.EmailMessage` instances that have been sent. The "
"``outbox`` attribute is a special attribute that is created *only* when the "
"``locmem`` email backend is used. It doesn't normally exist as part of the "
":mod:`django.core.mail` module and you can't import it directly. The code "
"below shows how to access this attribute correctly."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1815
msgid ""
"Here's an example test that examines ``django.core.mail.outbox`` for length "
"and contents::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1836
msgid ""
"As noted :ref:`previously <emptying-test-outbox>`, the test outbox is "
"emptied at the start of every test in a Django ``*TestCase``. To empty the "
"outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1848
msgid "Management Commands"
msgstr "管理命令"

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1850
msgid ""
"Management commands can be tested with the "
":func:`~django.core.management.call_command` function. The output can be "
"redirected into a ``StringIO`` instance::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1867
msgid "Skipping tests"
msgstr "忽略测试"

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1871
msgid ""
"The unittest library provides the :func:`@skipIf <unittest.skipIf>` and "
":func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip "
"tests if you know ahead of time that those tests are going to fail under "
"certain conditions."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1876
msgid ""
"For example, if your test requires a particular optional library in order to"
" succeed, you could decorate the test case with :func:`@skipIf "
"<unittest.skipIf>`. Then, the test runner will report that the test wasn't "
"executed and why, instead of failing the test or omitting the test "
"altogether."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1881
msgid ""
"To supplement these test skipping behaviors, Django provides two additional "
"skip decorators. Instead of testing a generic boolean, these decorators "
"check the capabilities of the database, and skip the test if the database "
"doesn't support a specific named feature."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1886
msgid ""
"The decorators use a string identifier to describe database features. This "
"string corresponds to attributes of the database connection features class. "
"See ``django.db.backends.BaseDatabaseFeatures`` class for a full list of "
"database features that can be used as a basis for skipping tests."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1894
msgid ""
"Skip the decorated test or ``TestCase`` if all of the named database "
"features are supported."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1897
msgid ""
"For example, the following test will not be executed if the database "
"supports transactions (e.g., it would *not* run under PostgreSQL, but it "
"would under MySQL with MyISAM tables)::"
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1909
msgid ""
"Skip the decorated test or ``TestCase`` if any of the named database "
"features are *not* supported."
msgstr ""

#: ../../../../sources/2.2/docs/topics/testing/tools.txt:1912
msgid ""
"For example, the following test will only be executed if the database "
"supports transactions (e.g., it would run under PostgreSQL, but *not* under "
"MySQL with MyISAM tables)::"
msgstr "例如，接下来的测试仅在支持事务的数据库下执行(如：可以是PostgreSQL，但不可以是使用MyISAM数据库引擎的MySQL)::"
